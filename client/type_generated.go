// AUTOGENERATED

package client

import (
	"encoding/json"
)

const (
	TypeAuthenticationCodeType                 = "AuthenticationCodeType"
	TypeEmailAddressAuthentication             = "EmailAddressAuthentication"
	TypeEmailAddressResetState                 = "EmailAddressResetState"
	TypeAuthorizationState                     = "AuthorizationState"
	TypeFirebaseDeviceVerificationParameters   = "FirebaseDeviceVerificationParameters"
	TypeInputFile                              = "InputFile"
	TypeThumbnailFormat                        = "ThumbnailFormat"
	TypeMaskPoint                              = "MaskPoint"
	TypeStickerFormat                          = "StickerFormat"
	TypeStickerType                            = "StickerType"
	TypeStickerFullType                        = "StickerFullType"
	TypePollType                               = "PollType"
	TypeUserType                               = "UserType"
	TypeBusinessAwayMessageSchedule            = "BusinessAwayMessageSchedule"
	TypeChatPhotoStickerType                   = "ChatPhotoStickerType"
	TypeInputChatPhoto                         = "InputChatPhoto"
	TypeStarSubscriptionType                   = "StarSubscriptionType"
	TypeStarTransactionDirection               = "StarTransactionDirection"
	TypeBotTransactionPurpose                  = "BotTransactionPurpose"
	TypeChatTransactionPurpose                 = "ChatTransactionPurpose"
	TypeUserTransactionPurpose                 = "UserTransactionPurpose"
	TypeStarTransactionPartner                 = "StarTransactionPartner"
	TypeGiveawayParticipantStatus              = "GiveawayParticipantStatus"
	TypeGiveawayInfo                           = "GiveawayInfo"
	TypeGiveawayPrize                          = "GiveawayPrize"
	TypeChatMemberStatus                       = "ChatMemberStatus"
	TypeChatMembersFilter                      = "ChatMembersFilter"
	TypeSupergroupMembersFilter                = "SupergroupMembersFilter"
	TypeInviteLinkChatType                     = "InviteLinkChatType"
	TypeSecretChatState                        = "SecretChatState"
	TypeMessageSender                          = "MessageSender"
	TypeMessageReadDate                        = "MessageReadDate"
	TypeMessageOrigin                          = "MessageOrigin"
	TypeReactionType                           = "ReactionType"
	TypeMessageEffectType                      = "MessageEffectType"
	TypeMessageSendingState                    = "MessageSendingState"
	TypeMessageReplyTo                         = "MessageReplyTo"
	TypeInputMessageReplyTo                    = "InputMessageReplyTo"
	TypeMessageSource                          = "MessageSource"
	TypeReportChatSponsoredMessageResult       = "ReportChatSponsoredMessageResult"
	TypeNotificationSettingsScope              = "NotificationSettingsScope"
	TypeReactionNotificationSource             = "ReactionNotificationSource"
	TypeChatType                               = "ChatType"
	TypeChatList                               = "ChatList"
	TypeChatSource                             = "ChatSource"
	TypeChatAvailableReactions                 = "ChatAvailableReactions"
	TypePublicChatType                         = "PublicChatType"
	TypeChatActionBar                          = "ChatActionBar"
	TypeKeyboardButtonType                     = "KeyboardButtonType"
	TypeInlineKeyboardButtonType               = "InlineKeyboardButtonType"
	TypeReplyMarkup                            = "ReplyMarkup"
	TypeLoginUrlInfo                           = "LoginUrlInfo"
	TypeWebAppOpenMode                         = "WebAppOpenMode"
	TypeSavedMessagesTopicType                 = "SavedMessagesTopicType"
	TypeRichText                               = "RichText"
	TypePageBlockHorizontalAlignment           = "PageBlockHorizontalAlignment"
	TypePageBlockVerticalAlignment             = "PageBlockVerticalAlignment"
	TypePageBlock                              = "PageBlock"
	TypeLinkPreviewAlbumMedia                  = "LinkPreviewAlbumMedia"
	TypeLinkPreviewType                        = "LinkPreviewType"
	TypeCollectibleItemType                    = "CollectibleItemType"
	TypeInputCredentials                       = "InputCredentials"
	TypePaymentProvider                        = "PaymentProvider"
	TypePaymentFormType                        = "PaymentFormType"
	TypePaymentReceiptType                     = "PaymentReceiptType"
	TypeInputInvoice                           = "InputInvoice"
	TypePaidMedia                              = "PaidMedia"
	TypePassportElementType                    = "PassportElementType"
	TypePassportElement                        = "PassportElement"
	TypeInputPassportElement                   = "InputPassportElement"
	TypePassportElementErrorSource             = "PassportElementErrorSource"
	TypeInputPassportElementErrorSource        = "InputPassportElementErrorSource"
	TypeMessageContent                         = "MessageContent"
	TypeTextEntityType                         = "TextEntityType"
	TypeInputPaidMediaType                     = "InputPaidMediaType"
	TypeMessageSchedulingState                 = "MessageSchedulingState"
	TypeMessageSelfDestructType                = "MessageSelfDestructType"
	TypeInputMessageContent                    = "InputMessageContent"
	TypeSearchMessagesFilter                   = "SearchMessagesFilter"
	TypeChatAction                             = "ChatAction"
	TypeUserStatus                             = "UserStatus"
	TypeEmojiCategorySource                    = "EmojiCategorySource"
	TypeEmojiCategoryType                      = "EmojiCategoryType"
	TypeStoryAreaType                          = "StoryAreaType"
	TypeInputStoryAreaType                     = "InputStoryAreaType"
	TypeStoryContent                           = "StoryContent"
	TypeInputStoryContent                      = "InputStoryContent"
	TypeStoryList                              = "StoryList"
	TypeStoryOrigin                            = "StoryOrigin"
	TypeStoryInteractionType                   = "StoryInteractionType"
	TypePublicForward                          = "PublicForward"
	TypeChatBoostSource                        = "ChatBoostSource"
	TypeResendCodeReason                       = "ResendCodeReason"
	TypeCallDiscardReason                      = "CallDiscardReason"
	TypeCallServerType                         = "CallServerType"
	TypeCallState                              = "CallState"
	TypeGroupCallVideoQuality                  = "GroupCallVideoQuality"
	TypeCallProblem                            = "CallProblem"
	TypeFirebaseAuthenticationSettings         = "FirebaseAuthenticationSettings"
	TypeReactionUnavailabilityReason           = "ReactionUnavailabilityReason"
	TypeDiceStickers                           = "DiceStickers"
	TypeSpeechRecognitionResult                = "SpeechRecognitionResult"
	TypeBotWriteAccessAllowReason              = "BotWriteAccessAllowReason"
	TypeTargetChat                             = "TargetChat"
	TypeInputInlineQueryResult                 = "InputInlineQueryResult"
	TypeInlineQueryResult                      = "InlineQueryResult"
	TypeInlineQueryResultsButtonType           = "InlineQueryResultsButtonType"
	TypeCallbackQueryPayload                   = "CallbackQueryPayload"
	TypeChatEventAction                        = "ChatEventAction"
	TypeLanguagePackStringValue                = "LanguagePackStringValue"
	TypePremiumLimitType                       = "PremiumLimitType"
	TypePremiumFeature                         = "PremiumFeature"
	TypeBusinessFeature                        = "BusinessFeature"
	TypePremiumStoryFeature                    = "PremiumStoryFeature"
	TypePremiumSource                          = "PremiumSource"
	TypeStorePaymentPurpose                    = "StorePaymentPurpose"
	TypeTelegramPaymentPurpose                 = "TelegramPaymentPurpose"
	TypeDeviceToken                            = "DeviceToken"
	TypeBackgroundFill                         = "BackgroundFill"
	TypeBackgroundType                         = "BackgroundType"
	TypeInputBackground                        = "InputBackground"
	TypeCanSendStoryResult                     = "CanSendStoryResult"
	TypeCanTransferOwnershipResult             = "CanTransferOwnershipResult"
	TypeCheckChatUsernameResult                = "CheckChatUsernameResult"
	TypeCheckStickerSetNameResult              = "CheckStickerSetNameResult"
	TypeResetPasswordResult                    = "ResetPasswordResult"
	TypeMessageFileType                        = "MessageFileType"
	TypePushMessageContent                     = "PushMessageContent"
	TypeNotificationType                       = "NotificationType"
	TypeNotificationGroupType                  = "NotificationGroupType"
	TypeOptionValue                            = "OptionValue"
	TypeJsonValue                              = "JsonValue"
	TypeStoryPrivacySettings                   = "StoryPrivacySettings"
	TypeUserPrivacySettingRule                 = "UserPrivacySettingRule"
	TypeUserPrivacySetting                     = "UserPrivacySetting"
	TypeCanSendMessageToUserResult             = "CanSendMessageToUserResult"
	TypeSessionType                            = "SessionType"
	TypeReportReason                           = "ReportReason"
	TypeReportChatResult                       = "ReportChatResult"
	TypeReportStoryResult                      = "ReportStoryResult"
	TypeInternalLinkType                       = "InternalLinkType"
	TypeBlockList                              = "BlockList"
	TypeFileType                               = "FileType"
	TypeNetworkType                            = "NetworkType"
	TypeNetworkStatisticsEntry                 = "NetworkStatisticsEntry"
	TypeAutosaveSettingsScope                  = "AutosaveSettingsScope"
	TypeConnectionState                        = "ConnectionState"
	TypeTopChatCategory                        = "TopChatCategory"
	TypeTMeUrlType                             = "TMeUrlType"
	TypeSuggestedAction                        = "SuggestedAction"
	TypeTextParseMode                          = "TextParseMode"
	TypeProxyType                              = "ProxyType"
	TypeStatisticalGraph                       = "StatisticalGraph"
	TypeChatStatisticsObjectType               = "ChatStatisticsObjectType"
	TypeChatStatistics                         = "ChatStatistics"
	TypeRevenueWithdrawalState                 = "RevenueWithdrawalState"
	TypeChatRevenueTransactionType             = "ChatRevenueTransactionType"
	TypeVectorPathCommand                      = "VectorPathCommand"
	TypeBotCommandScope                        = "BotCommandScope"
	TypePhoneNumberCodeType                    = "PhoneNumberCodeType"
	TypeUpdate                                 = "Update"
	TypeLogStream                              = "LogStream"
	TypeError                                  = "Error"
	TypeOk                                     = "Ok"
	TypeAuthenticationCodeInfo                 = "AuthenticationCodeInfo"
	TypeEmailAddressAuthenticationCodeInfo     = "EmailAddressAuthenticationCodeInfo"
	TypeTextEntity                             = "TextEntity"
	TypeTextEntities                           = "TextEntities"
	TypeFormattedText                          = "FormattedText"
	TypeTermsOfService                         = "TermsOfService"
	TypePasswordState                          = "PasswordState"
	TypeRecoveryEmailAddress                   = "RecoveryEmailAddress"
	TypeTemporaryPasswordState                 = "TemporaryPasswordState"
	TypeLocalFile                              = "LocalFile"
	TypeRemoteFile                             = "RemoteFile"
	TypeFile                                   = "File"
	TypePhotoSize                              = "PhotoSize"
	TypeMinithumbnail                          = "Minithumbnail"
	TypeThumbnail                              = "Thumbnail"
	TypeMaskPosition                           = "MaskPosition"
	TypeClosedVectorPath                       = "ClosedVectorPath"
	TypeOutline                                = "Outline"
	TypePollOption                             = "PollOption"
	TypeAnimation                              = "Animation"
	TypeAudio                                  = "Audio"
	TypeDocument                               = "Document"
	TypePhoto                                  = "Photo"
	TypeSticker                                = "Sticker"
	TypeVideo                                  = "Video"
	TypeVideoNote                              = "VideoNote"
	TypeVoiceNote                              = "VoiceNote"
	TypeAnimatedEmoji                          = "AnimatedEmoji"
	TypeContact                                = "Contact"
	TypeLocation                               = "Location"
	TypeVenue                                  = "Venue"
	TypeGame                                   = "Game"
	TypeWebApp                                 = "WebApp"
	TypePoll                                   = "Poll"
	TypeAlternativeVideo                       = "AlternativeVideo"
	TypeBackground                             = "Background"
	TypeBackgrounds                            = "Backgrounds"
	TypeChatBackground                         = "ChatBackground"
	TypeProfilePhoto                           = "ProfilePhoto"
	TypeChatPhotoInfo                          = "ChatPhotoInfo"
	TypeBotCommand                             = "BotCommand"
	TypeBotCommands                            = "BotCommands"
	TypeBotMenuButton                          = "BotMenuButton"
	TypeChatLocation                           = "ChatLocation"
	TypeBirthdate                              = "Birthdate"
	TypeCloseBirthdayUser                      = "CloseBirthdayUser"
	TypeBusinessLocation                       = "BusinessLocation"
	TypeBusinessRecipients                     = "BusinessRecipients"
	TypeBusinessAwayMessageSettings            = "BusinessAwayMessageSettings"
	TypeBusinessGreetingMessageSettings        = "BusinessGreetingMessageSettings"
	TypeBusinessConnectedBot                   = "BusinessConnectedBot"
	TypeBusinessStartPage                      = "BusinessStartPage"
	TypeInputBusinessStartPage                 = "InputBusinessStartPage"
	TypeBusinessOpeningHoursInterval           = "BusinessOpeningHoursInterval"
	TypeBusinessOpeningHours                   = "BusinessOpeningHours"
	TypeBusinessInfo                           = "BusinessInfo"
	TypeBusinessChatLink                       = "BusinessChatLink"
	TypeBusinessChatLinks                      = "BusinessChatLinks"
	TypeInputBusinessChatLink                  = "InputBusinessChatLink"
	TypeBusinessChatLinkInfo                   = "BusinessChatLinkInfo"
	TypeChatPhotoSticker                       = "ChatPhotoSticker"
	TypeAnimatedChatPhoto                      = "AnimatedChatPhoto"
	TypeChatPhoto                              = "ChatPhoto"
	TypeChatPhotos                             = "ChatPhotos"
	TypeChatPermissions                        = "ChatPermissions"
	TypeChatAdministratorRights                = "ChatAdministratorRights"
	TypeStarSubscriptionPricing                = "StarSubscriptionPricing"
	TypeStarSubscription                       = "StarSubscription"
	TypeStarSubscriptions                      = "StarSubscriptions"
	TypeProductInfo                            = "ProductInfo"
	TypePremiumPaymentOption                   = "PremiumPaymentOption"
	TypePremiumStatePaymentOption              = "PremiumStatePaymentOption"
	TypePremiumGiftCodePaymentOption           = "PremiumGiftCodePaymentOption"
	TypePremiumGiftCodePaymentOptions          = "PremiumGiftCodePaymentOptions"
	TypePremiumGiftCodeInfo                    = "PremiumGiftCodeInfo"
	TypeStarPaymentOption                      = "StarPaymentOption"
	TypeStarPaymentOptions                     = "StarPaymentOptions"
	TypeStarGiveawayWinnerOption               = "StarGiveawayWinnerOption"
	TypeStarGiveawayPaymentOption              = "StarGiveawayPaymentOption"
	TypeStarGiveawayPaymentOptions             = "StarGiveawayPaymentOptions"
	TypeGift                                   = "Gift"
	TypeGifts                                  = "Gifts"
	TypeUserGift                               = "UserGift"
	TypeUserGifts                              = "UserGifts"
	TypeStarTransaction                        = "StarTransaction"
	TypeStarTransactions                       = "StarTransactions"
	TypeAccentColor                            = "AccentColor"
	TypeProfileAccentColors                    = "ProfileAccentColors"
	TypeProfileAccentColor                     = "ProfileAccentColor"
	TypeEmojiStatus                            = "EmojiStatus"
	TypeEmojiStatuses                          = "EmojiStatuses"
	TypeUsernames                              = "Usernames"
	TypeUser                                   = "User"
	TypeBotInfo                                = "BotInfo"
	TypeUserFullInfo                           = "UserFullInfo"
	TypeUsers                                  = "Users"
	TypeFoundUsers                             = "FoundUsers"
	TypeChatAdministrator                      = "ChatAdministrator"
	TypeChatAdministrators                     = "ChatAdministrators"
	TypeChatMember                             = "ChatMember"
	TypeChatMembers                            = "ChatMembers"
	TypeChatInviteLink                         = "ChatInviteLink"
	TypeChatInviteLinks                        = "ChatInviteLinks"
	TypeChatInviteLinkCount                    = "ChatInviteLinkCount"
	TypeChatInviteLinkCounts                   = "ChatInviteLinkCounts"
	TypeChatInviteLinkMember                   = "ChatInviteLinkMember"
	TypeChatInviteLinkMembers                  = "ChatInviteLinkMembers"
	TypeChatInviteLinkSubscriptionInfo         = "ChatInviteLinkSubscriptionInfo"
	TypeChatInviteLinkInfo                     = "ChatInviteLinkInfo"
	TypeChatJoinRequest                        = "ChatJoinRequest"
	TypeChatJoinRequests                       = "ChatJoinRequests"
	TypeChatJoinRequestsInfo                   = "ChatJoinRequestsInfo"
	TypeBasicGroup                             = "BasicGroup"
	TypeBasicGroupFullInfo                     = "BasicGroupFullInfo"
	TypeSupergroup                             = "Supergroup"
	TypeSupergroupFullInfo                     = "SupergroupFullInfo"
	TypeSecretChat                             = "SecretChat"
	TypeMessageSenders                         = "MessageSenders"
	TypeChatMessageSender                      = "ChatMessageSender"
	TypeChatMessageSenders                     = "ChatMessageSenders"
	TypeMessageViewer                          = "MessageViewer"
	TypeMessageViewers                         = "MessageViewers"
	TypeForwardSource                          = "ForwardSource"
	TypePaidReactor                            = "PaidReactor"
	TypeMessageForwardInfo                     = "MessageForwardInfo"
	TypeMessageImportInfo                      = "MessageImportInfo"
	TypeMessageReplyInfo                       = "MessageReplyInfo"
	TypeMessageReaction                        = "MessageReaction"
	TypeMessageReactions                       = "MessageReactions"
	TypeMessageInteractionInfo                 = "MessageInteractionInfo"
	TypeUnreadReaction                         = "UnreadReaction"
	TypeMessageEffect                          = "MessageEffect"
	TypeTextQuote                              = "TextQuote"
	TypeInputTextQuote                         = "InputTextQuote"
	TypeFactCheck                              = "FactCheck"
	TypeMessage                                = "Message"
	TypeMessages                               = "Messages"
	TypeFoundMessages                          = "FoundMessages"
	TypeFoundChatMessages                      = "FoundChatMessages"
	TypeMessagePosition                        = "MessagePosition"
	TypeMessagePositions                       = "MessagePositions"
	TypeMessageCalendarDay                     = "MessageCalendarDay"
	TypeMessageCalendar                        = "MessageCalendar"
	TypeBusinessMessage                        = "BusinessMessage"
	TypeBusinessMessages                       = "BusinessMessages"
	TypeMessageSponsor                         = "MessageSponsor"
	TypeSponsoredMessage                       = "SponsoredMessage"
	TypeSponsoredMessages                      = "SponsoredMessages"
	TypeReportOption                           = "ReportOption"
	TypeFileDownload                           = "FileDownload"
	TypeDownloadedFileCounts                   = "DownloadedFileCounts"
	TypeFoundFileDownloads                     = "FoundFileDownloads"
	TypeChatNotificationSettings               = "ChatNotificationSettings"
	TypeScopeNotificationSettings              = "ScopeNotificationSettings"
	TypeReactionNotificationSettings           = "ReactionNotificationSettings"
	TypeDraftMessage                           = "DraftMessage"
	TypeChatFolderIcon                         = "ChatFolderIcon"
	TypeChatFolder                             = "ChatFolder"
	TypeChatFolderInfo                         = "ChatFolderInfo"
	TypeChatFolderInviteLink                   = "ChatFolderInviteLink"
	TypeChatFolderInviteLinks                  = "ChatFolderInviteLinks"
	TypeChatFolderInviteLinkInfo               = "ChatFolderInviteLinkInfo"
	TypeRecommendedChatFolder                  = "RecommendedChatFolder"
	TypeRecommendedChatFolders                 = "RecommendedChatFolders"
	TypeArchiveChatListSettings                = "ArchiveChatListSettings"
	TypeChatLists                              = "ChatLists"
	TypeChatPosition                           = "ChatPosition"
	TypeSavedMessagesTag                       = "SavedMessagesTag"
	TypeSavedMessagesTags                      = "SavedMessagesTags"
	TypeBusinessBotManageBar                   = "BusinessBotManageBar"
	TypeVideoChat                              = "VideoChat"
	TypeChat                                   = "Chat"
	TypeChats                                  = "Chats"
	TypeFailedToAddMember                      = "FailedToAddMember"
	TypeFailedToAddMembers                     = "FailedToAddMembers"
	TypeCreatedBasicGroupChat                  = "CreatedBasicGroupChat"
	TypeKeyboardButton                         = "KeyboardButton"
	TypeInlineKeyboardButton                   = "InlineKeyboardButton"
	TypeThemeParameters                        = "ThemeParameters"
	TypeFoundWebApp                            = "FoundWebApp"
	TypeWebAppInfo                             = "WebAppInfo"
	TypeMainWebApp                             = "MainWebApp"
	TypeWebAppOpenParameters                   = "WebAppOpenParameters"
	TypeMessageThreadInfo                      = "MessageThreadInfo"
	TypeSavedMessagesTopic                     = "SavedMessagesTopic"
	TypeForumTopicIcon                         = "ForumTopicIcon"
	TypeForumTopicInfo                         = "ForumTopicInfo"
	TypeForumTopic                             = "ForumTopic"
	TypeForumTopics                            = "ForumTopics"
	TypeLinkPreviewOptions                     = "LinkPreviewOptions"
	TypeSharedUser                             = "SharedUser"
	TypeSharedChat                             = "SharedChat"
	TypeThemeSettings                          = "ThemeSettings"
	TypePageBlockCaption                       = "PageBlockCaption"
	TypePageBlockListItem                      = "PageBlockListItem"
	TypePageBlockTableCell                     = "PageBlockTableCell"
	TypePageBlockRelatedArticle                = "PageBlockRelatedArticle"
	TypeWebPageInstantView                     = "WebPageInstantView"
	TypeLinkPreview                            = "LinkPreview"
	TypeCountryInfo                            = "CountryInfo"
	TypeCountries                              = "Countries"
	TypePhoneNumberInfo                        = "PhoneNumberInfo"
	TypeCollectibleItemInfo                    = "CollectibleItemInfo"
	TypeBankCardActionOpenUrl                  = "BankCardActionOpenUrl"
	TypeBankCardInfo                           = "BankCardInfo"
	TypeAddress                                = "Address"
	TypeLocationAddress                        = "LocationAddress"
	TypeLabeledPricePart                       = "LabeledPricePart"
	TypeInvoice                                = "Invoice"
	TypeOrderInfo                              = "OrderInfo"
	TypeShippingOption                         = "ShippingOption"
	TypeSavedCredentials                       = "SavedCredentials"
	TypePaymentOption                          = "PaymentOption"
	TypePaymentForm                            = "PaymentForm"
	TypeValidatedOrderInfo                     = "ValidatedOrderInfo"
	TypePaymentResult                          = "PaymentResult"
	TypePaymentReceipt                         = "PaymentReceipt"
	TypeGiveawayParameters                     = "GiveawayParameters"
	TypeDatedFile                              = "DatedFile"
	TypeDate                                   = "Date"
	TypePersonalDetails                        = "PersonalDetails"
	TypeIdentityDocument                       = "IdentityDocument"
	TypeInputIdentityDocument                  = "InputIdentityDocument"
	TypePersonalDocument                       = "PersonalDocument"
	TypeInputPersonalDocument                  = "InputPersonalDocument"
	TypePassportElements                       = "PassportElements"
	TypePassportElementError                   = "PassportElementError"
	TypePassportSuitableElement                = "PassportSuitableElement"
	TypePassportRequiredElement                = "PassportRequiredElement"
	TypePassportAuthorizationForm              = "PassportAuthorizationForm"
	TypePassportElementsWithErrors             = "PassportElementsWithErrors"
	TypeEncryptedCredentials                   = "EncryptedCredentials"
	TypeEncryptedPassportElement               = "EncryptedPassportElement"
	TypeInputPassportElementError              = "InputPassportElementError"
	TypeInputThumbnail                         = "InputThumbnail"
	TypeInputPaidMedia                         = "InputPaidMedia"
	TypeMessageSendOptions                     = "MessageSendOptions"
	TypeMessageCopyOptions                     = "MessageCopyOptions"
	TypeMessageProperties                      = "MessageProperties"
	TypeEmojiKeyword                           = "EmojiKeyword"
	TypeEmojiKeywords                          = "EmojiKeywords"
	TypeStickers                               = "Stickers"
	TypeEmojis                                 = "Emojis"
	TypeStickerSet                             = "StickerSet"
	TypeStickerSetInfo                         = "StickerSetInfo"
	TypeStickerSets                            = "StickerSets"
	TypeTrendingStickerSets                    = "TrendingStickerSets"
	TypeEmojiCategory                          = "EmojiCategory"
	TypeEmojiCategories                        = "EmojiCategories"
	TypeCurrentWeather                         = "CurrentWeather"
	TypeStoryAreaPosition                      = "StoryAreaPosition"
	TypeStoryArea                              = "StoryArea"
	TypeInputStoryArea                         = "InputStoryArea"
	TypeInputStoryAreas                        = "InputStoryAreas"
	TypeStoryVideo                             = "StoryVideo"
	TypeStoryRepostInfo                        = "StoryRepostInfo"
	TypeStoryInteractionInfo                   = "StoryInteractionInfo"
	TypeStory                                  = "Story"
	TypeStories                                = "Stories"
	TypeFoundStories                           = "FoundStories"
	TypeStoryFullId                            = "StoryFullId"
	TypeStoryInfo                              = "StoryInfo"
	TypeChatActiveStories                      = "ChatActiveStories"
	TypeStoryInteraction                       = "StoryInteraction"
	TypeStoryInteractions                      = "StoryInteractions"
	TypeQuickReplyMessage                      = "QuickReplyMessage"
	TypeQuickReplyMessages                     = "QuickReplyMessages"
	TypeQuickReplyShortcut                     = "QuickReplyShortcut"
	TypePublicForwards                         = "PublicForwards"
	TypeBotMediaPreview                        = "BotMediaPreview"
	TypeBotMediaPreviews                       = "BotMediaPreviews"
	TypeBotMediaPreviewInfo                    = "BotMediaPreviewInfo"
	TypeChatBoostLevelFeatures                 = "ChatBoostLevelFeatures"
	TypeChatBoostFeatures                      = "ChatBoostFeatures"
	TypePrepaidGiveaway                        = "PrepaidGiveaway"
	TypeChatBoostStatus                        = "ChatBoostStatus"
	TypeChatBoost                              = "ChatBoost"
	TypeFoundChatBoosts                        = "FoundChatBoosts"
	TypeChatBoostSlot                          = "ChatBoostSlot"
	TypeChatBoostSlots                         = "ChatBoostSlots"
	TypeCallProtocol                           = "CallProtocol"
	TypeCallServer                             = "CallServer"
	TypeCallId                                 = "CallId"
	TypeGroupCallId                            = "GroupCallId"
	TypeGroupCallStream                        = "GroupCallStream"
	TypeGroupCallStreams                       = "GroupCallStreams"
	TypeRtmpUrl                                = "RtmpUrl"
	TypeGroupCallRecentSpeaker                 = "GroupCallRecentSpeaker"
	TypeGroupCall                              = "GroupCall"
	TypeGroupCallVideoSourceGroup              = "GroupCallVideoSourceGroup"
	TypeGroupCallParticipantVideoInfo          = "GroupCallParticipantVideoInfo"
	TypeGroupCallParticipant                   = "GroupCallParticipant"
	TypeCall                                   = "Call"
	TypePhoneNumberAuthenticationSettings      = "PhoneNumberAuthenticationSettings"
	TypeAddedReaction                          = "AddedReaction"
	TypeAddedReactions                         = "AddedReactions"
	TypeAvailableReaction                      = "AvailableReaction"
	TypeAvailableReactions                     = "AvailableReactions"
	TypeEmojiReaction                          = "EmojiReaction"
	TypeAnimations                             = "Animations"
	TypeImportedContacts                       = "ImportedContacts"
	TypeBusinessConnection                     = "BusinessConnection"
	TypeAttachmentMenuBotColor                 = "AttachmentMenuBotColor"
	TypeAttachmentMenuBot                      = "AttachmentMenuBot"
	TypeSentWebAppMessage                      = "SentWebAppMessage"
	TypeHttpUrl                                = "HttpUrl"
	TypeUserLink                               = "UserLink"
	TypeTargetChatTypes                        = "TargetChatTypes"
	TypeInlineQueryResultsButton               = "InlineQueryResultsButton"
	TypeInlineQueryResults                     = "InlineQueryResults"
	TypePreparedInlineMessageId                = "PreparedInlineMessageId"
	TypePreparedInlineMessage                  = "PreparedInlineMessage"
	TypeCallbackQueryAnswer                    = "CallbackQueryAnswer"
	TypeCustomRequestResult                    = "CustomRequestResult"
	TypeGameHighScore                          = "GameHighScore"
	TypeGameHighScores                         = "GameHighScores"
	TypeChatEvent                              = "ChatEvent"
	TypeChatEvents                             = "ChatEvents"
	TypeChatEventLogFilters                    = "ChatEventLogFilters"
	TypeLanguagePackString                     = "LanguagePackString"
	TypeLanguagePackStrings                    = "LanguagePackStrings"
	TypeLanguagePackInfo                       = "LanguagePackInfo"
	TypeLocalizationTargetInfo                 = "LocalizationTargetInfo"
	TypePremiumLimit                           = "PremiumLimit"
	TypePremiumFeatures                        = "PremiumFeatures"
	TypeBusinessFeatures                       = "BusinessFeatures"
	TypePremiumFeaturePromotionAnimation       = "PremiumFeaturePromotionAnimation"
	TypeBusinessFeaturePromotionAnimation      = "BusinessFeaturePromotionAnimation"
	TypePremiumState                           = "PremiumState"
	TypePushReceiverId                         = "PushReceiverId"
	TypeChatTheme                              = "ChatTheme"
	TypeTimeZone                               = "TimeZone"
	TypeTimeZones                              = "TimeZones"
	TypeHashtags                               = "Hashtags"
	TypeNotificationSound                      = "NotificationSound"
	TypeNotificationSounds                     = "NotificationSounds"
	TypeNotification                           = "Notification"
	TypeNotificationGroup                      = "NotificationGroup"
	TypeJsonObjectMember                       = "JsonObjectMember"
	TypeUserPrivacySettingRules                = "UserPrivacySettingRules"
	TypeReadDatePrivacySettings                = "ReadDatePrivacySettings"
	TypeNewChatPrivacySettings                 = "NewChatPrivacySettings"
	TypeAccountTtl                             = "AccountTtl"
	TypeMessageAutoDeleteTime                  = "MessageAutoDeleteTime"
	TypeSession                                = "Session"
	TypeSessions                               = "Sessions"
	TypeUnconfirmedSession                     = "UnconfirmedSession"
	TypeConnectedWebsite                       = "ConnectedWebsite"
	TypeConnectedWebsites                      = "ConnectedWebsites"
	TypeMessageLink                            = "MessageLink"
	TypeMessageLinkInfo                        = "MessageLinkInfo"
	TypeChatBoostLink                          = "ChatBoostLink"
	TypeChatBoostLinkInfo                      = "ChatBoostLinkInfo"
	TypeFilePart                               = "FilePart"
	TypeStorageStatisticsByFileType            = "StorageStatisticsByFileType"
	TypeStorageStatisticsByChat                = "StorageStatisticsByChat"
	TypeStorageStatistics                      = "StorageStatistics"
	TypeStorageStatisticsFast                  = "StorageStatisticsFast"
	TypeDatabaseStatistics                     = "DatabaseStatistics"
	TypeNetworkStatistics                      = "NetworkStatistics"
	TypeAutoDownloadSettings                   = "AutoDownloadSettings"
	TypeAutoDownloadSettingsPresets            = "AutoDownloadSettingsPresets"
	TypeScopeAutosaveSettings                  = "ScopeAutosaveSettings"
	TypeAutosaveSettingsException              = "AutosaveSettingsException"
	TypeAutosaveSettings                       = "AutosaveSettings"
	TypeFoundPosition                          = "FoundPosition"
	TypeFoundPositions                         = "FoundPositions"
	TypeTMeUrl                                 = "TMeUrl"
	TypeTMeUrls                                = "TMeUrls"
	TypeCount                                  = "Count"
	TypeText                                   = "Text"
	TypeSeconds                                = "Seconds"
	TypeFileDownloadedPrefixSize               = "FileDownloadedPrefixSize"
	TypeDeepLinkInfo                           = "DeepLinkInfo"
	TypeProxy                                  = "Proxy"
	TypeProxies                                = "Proxies"
	TypeInputSticker                           = "InputSticker"
	TypeDateRange                              = "DateRange"
	TypeStatisticalValue                       = "StatisticalValue"
	TypeChatStatisticsInteractionInfo          = "ChatStatisticsInteractionInfo"
	TypeChatStatisticsMessageSenderInfo        = "ChatStatisticsMessageSenderInfo"
	TypeChatStatisticsAdministratorActionsInfo = "ChatStatisticsAdministratorActionsInfo"
	TypeChatStatisticsInviterInfo              = "ChatStatisticsInviterInfo"
	TypeChatRevenueAmount                      = "ChatRevenueAmount"
	TypeChatRevenueStatistics                  = "ChatRevenueStatistics"
	TypeMessageStatistics                      = "MessageStatistics"
	TypeStoryStatistics                        = "StoryStatistics"
	TypeChatRevenueTransaction                 = "ChatRevenueTransaction"
	TypeChatRevenueTransactions                = "ChatRevenueTransactions"
	TypeStarRevenueStatus                      = "StarRevenueStatus"
	TypeStarRevenueStatistics                  = "StarRevenueStatistics"
	TypePoint                                  = "Point"
	TypeUpdates                                = "Updates"
	TypeLogVerbosityLevel                      = "LogVerbosityLevel"
	TypeLogTags                                = "LogTags"
	TypeUserSupportInfo                        = "UserSupportInfo"
	TypeTestInt                                = "TestInt"
	TypeTestString                             = "TestString"
	TypeTestBytes                              = "TestBytes"
	TypeTestVectorInt                          = "TestVectorInt"
	TypeTestVectorIntObject                    = "TestVectorIntObject"
	TypeTestVectorString                       = "TestVectorString"
	TypeTestVectorStringObject                 = "TestVectorStringObject"
)

const (
	ConstructorError                                                   = "error"
	ConstructorOk                                                      = "ok"
	ConstructorAuthenticationCodeTypeTelegramMessage                   = "authenticationCodeTypeTelegramMessage"
	ConstructorAuthenticationCodeTypeSms                               = "authenticationCodeTypeSms"
	ConstructorAuthenticationCodeTypeSmsWord                           = "authenticationCodeTypeSmsWord"
	ConstructorAuthenticationCodeTypeSmsPhrase                         = "authenticationCodeTypeSmsPhrase"
	ConstructorAuthenticationCodeTypeCall                              = "authenticationCodeTypeCall"
	ConstructorAuthenticationCodeTypeFlashCall                         = "authenticationCodeTypeFlashCall"
	ConstructorAuthenticationCodeTypeMissedCall                        = "authenticationCodeTypeMissedCall"
	ConstructorAuthenticationCodeTypeFragment                          = "authenticationCodeTypeFragment"
	ConstructorAuthenticationCodeTypeFirebaseAndroid                   = "authenticationCodeTypeFirebaseAndroid"
	ConstructorAuthenticationCodeTypeFirebaseIos                       = "authenticationCodeTypeFirebaseIos"
	ConstructorAuthenticationCodeInfo                                  = "authenticationCodeInfo"
	ConstructorEmailAddressAuthenticationCodeInfo                      = "emailAddressAuthenticationCodeInfo"
	ConstructorEmailAddressAuthenticationCode                          = "emailAddressAuthenticationCode"
	ConstructorEmailAddressAuthenticationAppleId                       = "emailAddressAuthenticationAppleId"
	ConstructorEmailAddressAuthenticationGoogleId                      = "emailAddressAuthenticationGoogleId"
	ConstructorEmailAddressResetStateAvailable                         = "emailAddressResetStateAvailable"
	ConstructorEmailAddressResetStatePending                           = "emailAddressResetStatePending"
	ConstructorTextEntity                                              = "textEntity"
	ConstructorTextEntities                                            = "textEntities"
	ConstructorFormattedText                                           = "formattedText"
	ConstructorTermsOfService                                          = "termsOfService"
	ConstructorAuthorizationStateWaitTdlibParameters                   = "authorizationStateWaitTdlibParameters"
	ConstructorAuthorizationStateWaitPhoneNumber                       = "authorizationStateWaitPhoneNumber"
	ConstructorAuthorizationStateWaitEmailAddress                      = "authorizationStateWaitEmailAddress"
	ConstructorAuthorizationStateWaitEmailCode                         = "authorizationStateWaitEmailCode"
	ConstructorAuthorizationStateWaitCode                              = "authorizationStateWaitCode"
	ConstructorAuthorizationStateWaitOtherDeviceConfirmation           = "authorizationStateWaitOtherDeviceConfirmation"
	ConstructorAuthorizationStateWaitRegistration                      = "authorizationStateWaitRegistration"
	ConstructorAuthorizationStateWaitPassword                          = "authorizationStateWaitPassword"
	ConstructorAuthorizationStateReady                                 = "authorizationStateReady"
	ConstructorAuthorizationStateLoggingOut                            = "authorizationStateLoggingOut"
	ConstructorAuthorizationStateClosing                               = "authorizationStateClosing"
	ConstructorAuthorizationStateClosed                                = "authorizationStateClosed"
	ConstructorFirebaseDeviceVerificationParametersSafetyNet           = "firebaseDeviceVerificationParametersSafetyNet"
	ConstructorFirebaseDeviceVerificationParametersPlayIntegrity       = "firebaseDeviceVerificationParametersPlayIntegrity"
	ConstructorPasswordState                                           = "passwordState"
	ConstructorRecoveryEmailAddress                                    = "recoveryEmailAddress"
	ConstructorTemporaryPasswordState                                  = "temporaryPasswordState"
	ConstructorLocalFile                                               = "localFile"
	ConstructorRemoteFile                                              = "remoteFile"
	ConstructorFile                                                    = "file"
	ConstructorInputFileId                                             = "inputFileId"
	ConstructorInputFileRemote                                         = "inputFileRemote"
	ConstructorInputFileLocal                                          = "inputFileLocal"
	ConstructorInputFileGenerated                                      = "inputFileGenerated"
	ConstructorPhotoSize                                               = "photoSize"
	ConstructorMinithumbnail                                           = "minithumbnail"
	ConstructorThumbnailFormatJpeg                                     = "thumbnailFormatJpeg"
	ConstructorThumbnailFormatGif                                      = "thumbnailFormatGif"
	ConstructorThumbnailFormatMpeg4                                    = "thumbnailFormatMpeg4"
	ConstructorThumbnailFormatPng                                      = "thumbnailFormatPng"
	ConstructorThumbnailFormatTgs                                      = "thumbnailFormatTgs"
	ConstructorThumbnailFormatWebm                                     = "thumbnailFormatWebm"
	ConstructorThumbnailFormatWebp                                     = "thumbnailFormatWebp"
	ConstructorThumbnail                                               = "thumbnail"
	ConstructorMaskPointForehead                                       = "maskPointForehead"
	ConstructorMaskPointEyes                                           = "maskPointEyes"
	ConstructorMaskPointMouth                                          = "maskPointMouth"
	ConstructorMaskPointChin                                           = "maskPointChin"
	ConstructorMaskPosition                                            = "maskPosition"
	ConstructorStickerFormatWebp                                       = "stickerFormatWebp"
	ConstructorStickerFormatTgs                                        = "stickerFormatTgs"
	ConstructorStickerFormatWebm                                       = "stickerFormatWebm"
	ConstructorStickerTypeRegular                                      = "stickerTypeRegular"
	ConstructorStickerTypeMask                                         = "stickerTypeMask"
	ConstructorStickerTypeCustomEmoji                                  = "stickerTypeCustomEmoji"
	ConstructorStickerFullTypeRegular                                  = "stickerFullTypeRegular"
	ConstructorStickerFullTypeMask                                     = "stickerFullTypeMask"
	ConstructorStickerFullTypeCustomEmoji                              = "stickerFullTypeCustomEmoji"
	ConstructorClosedVectorPath                                        = "closedVectorPath"
	ConstructorOutline                                                 = "outline"
	ConstructorPollOption                                              = "pollOption"
	ConstructorPollTypeRegular                                         = "pollTypeRegular"
	ConstructorPollTypeQuiz                                            = "pollTypeQuiz"
	ConstructorAnimation                                               = "animation"
	ConstructorAudio                                                   = "audio"
	ConstructorDocument                                                = "document"
	ConstructorPhoto                                                   = "photo"
	ConstructorSticker                                                 = "sticker"
	ConstructorVideo                                                   = "video"
	ConstructorVideoNote                                               = "videoNote"
	ConstructorVoiceNote                                               = "voiceNote"
	ConstructorAnimatedEmoji                                           = "animatedEmoji"
	ConstructorContact                                                 = "contact"
	ConstructorLocation                                                = "location"
	ConstructorVenue                                                   = "venue"
	ConstructorGame                                                    = "game"
	ConstructorWebApp                                                  = "webApp"
	ConstructorPoll                                                    = "poll"
	ConstructorAlternativeVideo                                        = "alternativeVideo"
	ConstructorBackground                                              = "background"
	ConstructorBackgrounds                                             = "backgrounds"
	ConstructorChatBackground                                          = "chatBackground"
	ConstructorProfilePhoto                                            = "profilePhoto"
	ConstructorChatPhotoInfo                                           = "chatPhotoInfo"
	ConstructorUserTypeRegular                                         = "userTypeRegular"
	ConstructorUserTypeDeleted                                         = "userTypeDeleted"
	ConstructorUserTypeBot                                             = "userTypeBot"
	ConstructorUserTypeUnknown                                         = "userTypeUnknown"
	ConstructorBotCommand                                              = "botCommand"
	ConstructorBotCommands                                             = "botCommands"
	ConstructorBotMenuButton                                           = "botMenuButton"
	ConstructorChatLocation                                            = "chatLocation"
	ConstructorBirthdate                                               = "birthdate"
	ConstructorCloseBirthdayUser                                       = "closeBirthdayUser"
	ConstructorBusinessAwayMessageScheduleAlways                       = "businessAwayMessageScheduleAlways"
	ConstructorBusinessAwayMessageScheduleOutsideOfOpeningHours        = "businessAwayMessageScheduleOutsideOfOpeningHours"
	ConstructorBusinessAwayMessageScheduleCustom                       = "businessAwayMessageScheduleCustom"
	ConstructorBusinessLocation                                        = "businessLocation"
	ConstructorBusinessRecipients                                      = "businessRecipients"
	ConstructorBusinessAwayMessageSettings                             = "businessAwayMessageSettings"
	ConstructorBusinessGreetingMessageSettings                         = "businessGreetingMessageSettings"
	ConstructorBusinessConnectedBot                                    = "businessConnectedBot"
	ConstructorBusinessStartPage                                       = "businessStartPage"
	ConstructorInputBusinessStartPage                                  = "inputBusinessStartPage"
	ConstructorBusinessOpeningHoursInterval                            = "businessOpeningHoursInterval"
	ConstructorBusinessOpeningHours                                    = "businessOpeningHours"
	ConstructorBusinessInfo                                            = "businessInfo"
	ConstructorBusinessChatLink                                        = "businessChatLink"
	ConstructorBusinessChatLinks                                       = "businessChatLinks"
	ConstructorInputBusinessChatLink                                   = "inputBusinessChatLink"
	ConstructorBusinessChatLinkInfo                                    = "businessChatLinkInfo"
	ConstructorChatPhotoStickerTypeRegularOrMask                       = "chatPhotoStickerTypeRegularOrMask"
	ConstructorChatPhotoStickerTypeCustomEmoji                         = "chatPhotoStickerTypeCustomEmoji"
	ConstructorChatPhotoSticker                                        = "chatPhotoSticker"
	ConstructorAnimatedChatPhoto                                       = "animatedChatPhoto"
	ConstructorChatPhoto                                               = "chatPhoto"
	ConstructorChatPhotos                                              = "chatPhotos"
	ConstructorInputChatPhotoPrevious                                  = "inputChatPhotoPrevious"
	ConstructorInputChatPhotoStatic                                    = "inputChatPhotoStatic"
	ConstructorInputChatPhotoAnimation                                 = "inputChatPhotoAnimation"
	ConstructorInputChatPhotoSticker                                   = "inputChatPhotoSticker"
	ConstructorChatPermissions                                         = "chatPermissions"
	ConstructorChatAdministratorRights                                 = "chatAdministratorRights"
	ConstructorStarSubscriptionTypeChannel                             = "starSubscriptionTypeChannel"
	ConstructorStarSubscriptionTypeBot                                 = "starSubscriptionTypeBot"
	ConstructorStarSubscriptionPricing                                 = "starSubscriptionPricing"
	ConstructorStarSubscription                                        = "starSubscription"
	ConstructorStarSubscriptions                                       = "starSubscriptions"
	ConstructorProductInfo                                             = "productInfo"
	ConstructorPremiumPaymentOption                                    = "premiumPaymentOption"
	ConstructorPremiumStatePaymentOption                               = "premiumStatePaymentOption"
	ConstructorPremiumGiftCodePaymentOption                            = "premiumGiftCodePaymentOption"
	ConstructorPremiumGiftCodePaymentOptions                           = "premiumGiftCodePaymentOptions"
	ConstructorPremiumGiftCodeInfo                                     = "premiumGiftCodeInfo"
	ConstructorStarPaymentOption                                       = "starPaymentOption"
	ConstructorStarPaymentOptions                                      = "starPaymentOptions"
	ConstructorStarGiveawayWinnerOption                                = "starGiveawayWinnerOption"
	ConstructorStarGiveawayPaymentOption                               = "starGiveawayPaymentOption"
	ConstructorStarGiveawayPaymentOptions                              = "starGiveawayPaymentOptions"
	ConstructorGift                                                    = "gift"
	ConstructorGifts                                                   = "gifts"
	ConstructorUserGift                                                = "userGift"
	ConstructorUserGifts                                               = "userGifts"
	ConstructorStarTransactionDirectionIncoming                        = "starTransactionDirectionIncoming"
	ConstructorStarTransactionDirectionOutgoing                        = "starTransactionDirectionOutgoing"
	ConstructorBotTransactionPurposePaidMedia                          = "botTransactionPurposePaidMedia"
	ConstructorBotTransactionPurposeInvoicePayment                     = "botTransactionPurposeInvoicePayment"
	ConstructorBotTransactionPurposeSubscription                       = "botTransactionPurposeSubscription"
	ConstructorChatTransactionPurposePaidMedia                         = "chatTransactionPurposePaidMedia"
	ConstructorChatTransactionPurposeJoin                              = "chatTransactionPurposeJoin"
	ConstructorChatTransactionPurposeReaction                          = "chatTransactionPurposeReaction"
	ConstructorChatTransactionPurposeGiveaway                          = "chatTransactionPurposeGiveaway"
	ConstructorUserTransactionPurposeGiftedStars                       = "userTransactionPurposeGiftedStars"
	ConstructorUserTransactionPurposeGiftSell                          = "userTransactionPurposeGiftSell"
	ConstructorUserTransactionPurposeGiftSend                          = "userTransactionPurposeGiftSend"
	ConstructorStarTransactionPartnerTelegram                          = "starTransactionPartnerTelegram"
	ConstructorStarTransactionPartnerAppStore                          = "starTransactionPartnerAppStore"
	ConstructorStarTransactionPartnerGooglePlay                        = "starTransactionPartnerGooglePlay"
	ConstructorStarTransactionPartnerFragment                          = "starTransactionPartnerFragment"
	ConstructorStarTransactionPartnerTelegramAds                       = "starTransactionPartnerTelegramAds"
	ConstructorStarTransactionPartnerTelegramApi                       = "starTransactionPartnerTelegramApi"
	ConstructorStarTransactionPartnerBot                               = "starTransactionPartnerBot"
	ConstructorStarTransactionPartnerBusiness                          = "starTransactionPartnerBusiness"
	ConstructorStarTransactionPartnerChat                              = "starTransactionPartnerChat"
	ConstructorStarTransactionPartnerUser                              = "starTransactionPartnerUser"
	ConstructorStarTransactionPartnerUnsupported                       = "starTransactionPartnerUnsupported"
	ConstructorStarTransaction                                         = "starTransaction"
	ConstructorStarTransactions                                        = "starTransactions"
	ConstructorGiveawayParticipantStatusEligible                       = "giveawayParticipantStatusEligible"
	ConstructorGiveawayParticipantStatusParticipating                  = "giveawayParticipantStatusParticipating"
	ConstructorGiveawayParticipantStatusAlreadyWasMember               = "giveawayParticipantStatusAlreadyWasMember"
	ConstructorGiveawayParticipantStatusAdministrator                  = "giveawayParticipantStatusAdministrator"
	ConstructorGiveawayParticipantStatusDisallowedCountry              = "giveawayParticipantStatusDisallowedCountry"
	ConstructorGiveawayInfoOngoing                                     = "giveawayInfoOngoing"
	ConstructorGiveawayInfoCompleted                                   = "giveawayInfoCompleted"
	ConstructorGiveawayPrizePremium                                    = "giveawayPrizePremium"
	ConstructorGiveawayPrizeStars                                      = "giveawayPrizeStars"
	ConstructorAccentColor                                             = "accentColor"
	ConstructorProfileAccentColors                                     = "profileAccentColors"
	ConstructorProfileAccentColor                                      = "profileAccentColor"
	ConstructorEmojiStatus                                             = "emojiStatus"
	ConstructorEmojiStatuses                                           = "emojiStatuses"
	ConstructorUsernames                                               = "usernames"
	ConstructorUser                                                    = "user"
	ConstructorBotInfo                                                 = "botInfo"
	ConstructorUserFullInfo                                            = "userFullInfo"
	ConstructorUsers                                                   = "users"
	ConstructorFoundUsers                                              = "foundUsers"
	ConstructorChatAdministrator                                       = "chatAdministrator"
	ConstructorChatAdministrators                                      = "chatAdministrators"
	ConstructorChatMemberStatusCreator                                 = "chatMemberStatusCreator"
	ConstructorChatMemberStatusAdministrator                           = "chatMemberStatusAdministrator"
	ConstructorChatMemberStatusMember                                  = "chatMemberStatusMember"
	ConstructorChatMemberStatusRestricted                              = "chatMemberStatusRestricted"
	ConstructorChatMemberStatusLeft                                    = "chatMemberStatusLeft"
	ConstructorChatMemberStatusBanned                                  = "chatMemberStatusBanned"
	ConstructorChatMember                                              = "chatMember"
	ConstructorChatMembers                                             = "chatMembers"
	ConstructorChatMembersFilterContacts                               = "chatMembersFilterContacts"
	ConstructorChatMembersFilterAdministrators                         = "chatMembersFilterAdministrators"
	ConstructorChatMembersFilterMembers                                = "chatMembersFilterMembers"
	ConstructorChatMembersFilterMention                                = "chatMembersFilterMention"
	ConstructorChatMembersFilterRestricted                             = "chatMembersFilterRestricted"
	ConstructorChatMembersFilterBanned                                 = "chatMembersFilterBanned"
	ConstructorChatMembersFilterBots                                   = "chatMembersFilterBots"
	ConstructorSupergroupMembersFilterRecent                           = "supergroupMembersFilterRecent"
	ConstructorSupergroupMembersFilterContacts                         = "supergroupMembersFilterContacts"
	ConstructorSupergroupMembersFilterAdministrators                   = "supergroupMembersFilterAdministrators"
	ConstructorSupergroupMembersFilterSearch                           = "supergroupMembersFilterSearch"
	ConstructorSupergroupMembersFilterRestricted                       = "supergroupMembersFilterRestricted"
	ConstructorSupergroupMembersFilterBanned                           = "supergroupMembersFilterBanned"
	ConstructorSupergroupMembersFilterMention                          = "supergroupMembersFilterMention"
	ConstructorSupergroupMembersFilterBots                             = "supergroupMembersFilterBots"
	ConstructorChatInviteLink                                          = "chatInviteLink"
	ConstructorChatInviteLinks                                         = "chatInviteLinks"
	ConstructorChatInviteLinkCount                                     = "chatInviteLinkCount"
	ConstructorChatInviteLinkCounts                                    = "chatInviteLinkCounts"
	ConstructorChatInviteLinkMember                                    = "chatInviteLinkMember"
	ConstructorChatInviteLinkMembers                                   = "chatInviteLinkMembers"
	ConstructorInviteLinkChatTypeBasicGroup                            = "inviteLinkChatTypeBasicGroup"
	ConstructorInviteLinkChatTypeSupergroup                            = "inviteLinkChatTypeSupergroup"
	ConstructorInviteLinkChatTypeChannel                               = "inviteLinkChatTypeChannel"
	ConstructorChatInviteLinkSubscriptionInfo                          = "chatInviteLinkSubscriptionInfo"
	ConstructorChatInviteLinkInfo                                      = "chatInviteLinkInfo"
	ConstructorChatJoinRequest                                         = "chatJoinRequest"
	ConstructorChatJoinRequests                                        = "chatJoinRequests"
	ConstructorChatJoinRequestsInfo                                    = "chatJoinRequestsInfo"
	ConstructorBasicGroup                                              = "basicGroup"
	ConstructorBasicGroupFullInfo                                      = "basicGroupFullInfo"
	ConstructorSupergroup                                              = "supergroup"
	ConstructorSupergroupFullInfo                                      = "supergroupFullInfo"
	ConstructorSecretChatStatePending                                  = "secretChatStatePending"
	ConstructorSecretChatStateReady                                    = "secretChatStateReady"
	ConstructorSecretChatStateClosed                                   = "secretChatStateClosed"
	ConstructorSecretChat                                              = "secretChat"
	ConstructorMessageSenderUser                                       = "messageSenderUser"
	ConstructorMessageSenderChat                                       = "messageSenderChat"
	ConstructorMessageSenders                                          = "messageSenders"
	ConstructorChatMessageSender                                       = "chatMessageSender"
	ConstructorChatMessageSenders                                      = "chatMessageSenders"
	ConstructorMessageReadDateRead                                     = "messageReadDateRead"
	ConstructorMessageReadDateUnread                                   = "messageReadDateUnread"
	ConstructorMessageReadDateTooOld                                   = "messageReadDateTooOld"
	ConstructorMessageReadDateUserPrivacyRestricted                    = "messageReadDateUserPrivacyRestricted"
	ConstructorMessageReadDateMyPrivacyRestricted                      = "messageReadDateMyPrivacyRestricted"
	ConstructorMessageViewer                                           = "messageViewer"
	ConstructorMessageViewers                                          = "messageViewers"
	ConstructorMessageOriginUser                                       = "messageOriginUser"
	ConstructorMessageOriginHiddenUser                                 = "messageOriginHiddenUser"
	ConstructorMessageOriginChat                                       = "messageOriginChat"
	ConstructorMessageOriginChannel                                    = "messageOriginChannel"
	ConstructorForwardSource                                           = "forwardSource"
	ConstructorReactionTypeEmoji                                       = "reactionTypeEmoji"
	ConstructorReactionTypeCustomEmoji                                 = "reactionTypeCustomEmoji"
	ConstructorReactionTypePaid                                        = "reactionTypePaid"
	ConstructorPaidReactor                                             = "paidReactor"
	ConstructorMessageForwardInfo                                      = "messageForwardInfo"
	ConstructorMessageImportInfo                                       = "messageImportInfo"
	ConstructorMessageReplyInfo                                        = "messageReplyInfo"
	ConstructorMessageReaction                                         = "messageReaction"
	ConstructorMessageReactions                                        = "messageReactions"
	ConstructorMessageInteractionInfo                                  = "messageInteractionInfo"
	ConstructorUnreadReaction                                          = "unreadReaction"
	ConstructorMessageEffectTypeEmojiReaction                          = "messageEffectTypeEmojiReaction"
	ConstructorMessageEffectTypePremiumSticker                         = "messageEffectTypePremiumSticker"
	ConstructorMessageEffect                                           = "messageEffect"
	ConstructorMessageSendingStatePending                              = "messageSendingStatePending"
	ConstructorMessageSendingStateFailed                               = "messageSendingStateFailed"
	ConstructorTextQuote                                               = "textQuote"
	ConstructorInputTextQuote                                          = "inputTextQuote"
	ConstructorMessageReplyToMessage                                   = "messageReplyToMessage"
	ConstructorMessageReplyToStory                                     = "messageReplyToStory"
	ConstructorInputMessageReplyToMessage                              = "inputMessageReplyToMessage"
	ConstructorInputMessageReplyToExternalMessage                      = "inputMessageReplyToExternalMessage"
	ConstructorInputMessageReplyToStory                                = "inputMessageReplyToStory"
	ConstructorFactCheck                                               = "factCheck"
	ConstructorMessage                                                 = "message"
	ConstructorMessages                                                = "messages"
	ConstructorFoundMessages                                           = "foundMessages"
	ConstructorFoundChatMessages                                       = "foundChatMessages"
	ConstructorMessagePosition                                         = "messagePosition"
	ConstructorMessagePositions                                        = "messagePositions"
	ConstructorMessageCalendarDay                                      = "messageCalendarDay"
	ConstructorMessageCalendar                                         = "messageCalendar"
	ConstructorBusinessMessage                                         = "businessMessage"
	ConstructorBusinessMessages                                        = "businessMessages"
	ConstructorMessageSourceChatHistory                                = "messageSourceChatHistory"
	ConstructorMessageSourceMessageThreadHistory                       = "messageSourceMessageThreadHistory"
	ConstructorMessageSourceForumTopicHistory                          = "messageSourceForumTopicHistory"
	ConstructorMessageSourceHistoryPreview                             = "messageSourceHistoryPreview"
	ConstructorMessageSourceChatList                                   = "messageSourceChatList"
	ConstructorMessageSourceSearch                                     = "messageSourceSearch"
	ConstructorMessageSourceChatEventLog                               = "messageSourceChatEventLog"
	ConstructorMessageSourceNotification                               = "messageSourceNotification"
	ConstructorMessageSourceScreenshot                                 = "messageSourceScreenshot"
	ConstructorMessageSourceOther                                      = "messageSourceOther"
	ConstructorMessageSponsor                                          = "messageSponsor"
	ConstructorSponsoredMessage                                        = "sponsoredMessage"
	ConstructorSponsoredMessages                                       = "sponsoredMessages"
	ConstructorReportOption                                            = "reportOption"
	ConstructorReportChatSponsoredMessageResultOk                      = "reportChatSponsoredMessageResultOk"
	ConstructorReportChatSponsoredMessageResultFailed                  = "reportChatSponsoredMessageResultFailed"
	ConstructorReportChatSponsoredMessageResultOptionRequired          = "reportChatSponsoredMessageResultOptionRequired"
	ConstructorReportChatSponsoredMessageResultAdsHidden               = "reportChatSponsoredMessageResultAdsHidden"
	ConstructorReportChatSponsoredMessageResultPremiumRequired         = "reportChatSponsoredMessageResultPremiumRequired"
	ConstructorFileDownload                                            = "fileDownload"
	ConstructorDownloadedFileCounts                                    = "downloadedFileCounts"
	ConstructorFoundFileDownloads                                      = "foundFileDownloads"
	ConstructorNotificationSettingsScopePrivateChats                   = "notificationSettingsScopePrivateChats"
	ConstructorNotificationSettingsScopeGroupChats                     = "notificationSettingsScopeGroupChats"
	ConstructorNotificationSettingsScopeChannelChats                   = "notificationSettingsScopeChannelChats"
	ConstructorChatNotificationSettings                                = "chatNotificationSettings"
	ConstructorScopeNotificationSettings                               = "scopeNotificationSettings"
	ConstructorReactionNotificationSourceNone                          = "reactionNotificationSourceNone"
	ConstructorReactionNotificationSourceContacts                      = "reactionNotificationSourceContacts"
	ConstructorReactionNotificationSourceAll                           = "reactionNotificationSourceAll"
	ConstructorReactionNotificationSettings                            = "reactionNotificationSettings"
	ConstructorDraftMessage                                            = "draftMessage"
	ConstructorChatTypePrivate                                         = "chatTypePrivate"
	ConstructorChatTypeBasicGroup                                      = "chatTypeBasicGroup"
	ConstructorChatTypeSupergroup                                      = "chatTypeSupergroup"
	ConstructorChatTypeSecret                                          = "chatTypeSecret"
	ConstructorChatFolderIcon                                          = "chatFolderIcon"
	ConstructorChatFolder                                              = "chatFolder"
	ConstructorChatFolderInfo                                          = "chatFolderInfo"
	ConstructorChatFolderInviteLink                                    = "chatFolderInviteLink"
	ConstructorChatFolderInviteLinks                                   = "chatFolderInviteLinks"
	ConstructorChatFolderInviteLinkInfo                                = "chatFolderInviteLinkInfo"
	ConstructorRecommendedChatFolder                                   = "recommendedChatFolder"
	ConstructorRecommendedChatFolders                                  = "recommendedChatFolders"
	ConstructorArchiveChatListSettings                                 = "archiveChatListSettings"
	ConstructorChatListMain                                            = "chatListMain"
	ConstructorChatListArchive                                         = "chatListArchive"
	ConstructorChatListFolder                                          = "chatListFolder"
	ConstructorChatLists                                               = "chatLists"
	ConstructorChatSourceMtprotoProxy                                  = "chatSourceMtprotoProxy"
	ConstructorChatSourcePublicServiceAnnouncement                     = "chatSourcePublicServiceAnnouncement"
	ConstructorChatPosition                                            = "chatPosition"
	ConstructorChatAvailableReactionsAll                               = "chatAvailableReactionsAll"
	ConstructorChatAvailableReactionsSome                              = "chatAvailableReactionsSome"
	ConstructorSavedMessagesTag                                        = "savedMessagesTag"
	ConstructorSavedMessagesTags                                       = "savedMessagesTags"
	ConstructorBusinessBotManageBar                                    = "businessBotManageBar"
	ConstructorVideoChat                                               = "videoChat"
	ConstructorChat                                                    = "chat"
	ConstructorChats                                                   = "chats"
	ConstructorFailedToAddMember                                       = "failedToAddMember"
	ConstructorFailedToAddMembers                                      = "failedToAddMembers"
	ConstructorCreatedBasicGroupChat                                   = "createdBasicGroupChat"
	ConstructorPublicChatTypeHasUsername                               = "publicChatTypeHasUsername"
	ConstructorPublicChatTypeIsLocationBased                           = "publicChatTypeIsLocationBased"
	ConstructorChatActionBarReportSpam                                 = "chatActionBarReportSpam"
	ConstructorChatActionBarInviteMembers                              = "chatActionBarInviteMembers"
	ConstructorChatActionBarReportAddBlock                             = "chatActionBarReportAddBlock"
	ConstructorChatActionBarAddContact                                 = "chatActionBarAddContact"
	ConstructorChatActionBarSharePhoneNumber                           = "chatActionBarSharePhoneNumber"
	ConstructorChatActionBarJoinRequest                                = "chatActionBarJoinRequest"
	ConstructorKeyboardButtonTypeText                                  = "keyboardButtonTypeText"
	ConstructorKeyboardButtonTypeRequestPhoneNumber                    = "keyboardButtonTypeRequestPhoneNumber"
	ConstructorKeyboardButtonTypeRequestLocation                       = "keyboardButtonTypeRequestLocation"
	ConstructorKeyboardButtonTypeRequestPoll                           = "keyboardButtonTypeRequestPoll"
	ConstructorKeyboardButtonTypeRequestUsers                          = "keyboardButtonTypeRequestUsers"
	ConstructorKeyboardButtonTypeRequestChat                           = "keyboardButtonTypeRequestChat"
	ConstructorKeyboardButtonTypeWebApp                                = "keyboardButtonTypeWebApp"
	ConstructorKeyboardButton                                          = "keyboardButton"
	ConstructorInlineKeyboardButtonTypeUrl                             = "inlineKeyboardButtonTypeUrl"
	ConstructorInlineKeyboardButtonTypeLoginUrl                        = "inlineKeyboardButtonTypeLoginUrl"
	ConstructorInlineKeyboardButtonTypeWebApp                          = "inlineKeyboardButtonTypeWebApp"
	ConstructorInlineKeyboardButtonTypeCallback                        = "inlineKeyboardButtonTypeCallback"
	ConstructorInlineKeyboardButtonTypeCallbackWithPassword            = "inlineKeyboardButtonTypeCallbackWithPassword"
	ConstructorInlineKeyboardButtonTypeCallbackGame                    = "inlineKeyboardButtonTypeCallbackGame"
	ConstructorInlineKeyboardButtonTypeSwitchInline                    = "inlineKeyboardButtonTypeSwitchInline"
	ConstructorInlineKeyboardButtonTypeBuy                             = "inlineKeyboardButtonTypeBuy"
	ConstructorInlineKeyboardButtonTypeUser                            = "inlineKeyboardButtonTypeUser"
	ConstructorInlineKeyboardButtonTypeCopyText                        = "inlineKeyboardButtonTypeCopyText"
	ConstructorInlineKeyboardButton                                    = "inlineKeyboardButton"
	ConstructorReplyMarkupRemoveKeyboard                               = "replyMarkupRemoveKeyboard"
	ConstructorReplyMarkupForceReply                                   = "replyMarkupForceReply"
	ConstructorReplyMarkupShowKeyboard                                 = "replyMarkupShowKeyboard"
	ConstructorReplyMarkupInlineKeyboard                               = "replyMarkupInlineKeyboard"
	ConstructorLoginUrlInfoOpen                                        = "loginUrlInfoOpen"
	ConstructorLoginUrlInfoRequestConfirmation                         = "loginUrlInfoRequestConfirmation"
	ConstructorThemeParameters                                         = "themeParameters"
	ConstructorWebAppOpenModeCompact                                   = "webAppOpenModeCompact"
	ConstructorWebAppOpenModeFullSize                                  = "webAppOpenModeFullSize"
	ConstructorWebAppOpenModeFullScreen                                = "webAppOpenModeFullScreen"
	ConstructorFoundWebApp                                             = "foundWebApp"
	ConstructorWebAppInfo                                              = "webAppInfo"
	ConstructorMainWebApp                                              = "mainWebApp"
	ConstructorWebAppOpenParameters                                    = "webAppOpenParameters"
	ConstructorMessageThreadInfo                                       = "messageThreadInfo"
	ConstructorSavedMessagesTopicTypeMyNotes                           = "savedMessagesTopicTypeMyNotes"
	ConstructorSavedMessagesTopicTypeAuthorHidden                      = "savedMessagesTopicTypeAuthorHidden"
	ConstructorSavedMessagesTopicTypeSavedFromChat                     = "savedMessagesTopicTypeSavedFromChat"
	ConstructorSavedMessagesTopic                                      = "savedMessagesTopic"
	ConstructorForumTopicIcon                                          = "forumTopicIcon"
	ConstructorForumTopicInfo                                          = "forumTopicInfo"
	ConstructorForumTopic                                              = "forumTopic"
	ConstructorForumTopics                                             = "forumTopics"
	ConstructorLinkPreviewOptions                                      = "linkPreviewOptions"
	ConstructorSharedUser                                              = "sharedUser"
	ConstructorSharedChat                                              = "sharedChat"
	ConstructorThemeSettings                                           = "themeSettings"
	ConstructorRichTextPlain                                           = "richTextPlain"
	ConstructorRichTextBold                                            = "richTextBold"
	ConstructorRichTextItalic                                          = "richTextItalic"
	ConstructorRichTextUnderline                                       = "richTextUnderline"
	ConstructorRichTextStrikethrough                                   = "richTextStrikethrough"
	ConstructorRichTextFixed                                           = "richTextFixed"
	ConstructorRichTextUrl                                             = "richTextUrl"
	ConstructorRichTextEmailAddress                                    = "richTextEmailAddress"
	ConstructorRichTextSubscript                                       = "richTextSubscript"
	ConstructorRichTextSuperscript                                     = "richTextSuperscript"
	ConstructorRichTextMarked                                          = "richTextMarked"
	ConstructorRichTextPhoneNumber                                     = "richTextPhoneNumber"
	ConstructorRichTextIcon                                            = "richTextIcon"
	ConstructorRichTextReference                                       = "richTextReference"
	ConstructorRichTextAnchor                                          = "richTextAnchor"
	ConstructorRichTextAnchorLink                                      = "richTextAnchorLink"
	ConstructorRichTexts                                               = "richTexts"
	ConstructorPageBlockCaption                                        = "pageBlockCaption"
	ConstructorPageBlockListItem                                       = "pageBlockListItem"
	ConstructorPageBlockHorizontalAlignmentLeft                        = "pageBlockHorizontalAlignmentLeft"
	ConstructorPageBlockHorizontalAlignmentCenter                      = "pageBlockHorizontalAlignmentCenter"
	ConstructorPageBlockHorizontalAlignmentRight                       = "pageBlockHorizontalAlignmentRight"
	ConstructorPageBlockVerticalAlignmentTop                           = "pageBlockVerticalAlignmentTop"
	ConstructorPageBlockVerticalAlignmentMiddle                        = "pageBlockVerticalAlignmentMiddle"
	ConstructorPageBlockVerticalAlignmentBottom                        = "pageBlockVerticalAlignmentBottom"
	ConstructorPageBlockTableCell                                      = "pageBlockTableCell"
	ConstructorPageBlockRelatedArticle                                 = "pageBlockRelatedArticle"
	ConstructorPageBlockTitle                                          = "pageBlockTitle"
	ConstructorPageBlockSubtitle                                       = "pageBlockSubtitle"
	ConstructorPageBlockAuthorDate                                     = "pageBlockAuthorDate"
	ConstructorPageBlockHeader                                         = "pageBlockHeader"
	ConstructorPageBlockSubheader                                      = "pageBlockSubheader"
	ConstructorPageBlockKicker                                         = "pageBlockKicker"
	ConstructorPageBlockParagraph                                      = "pageBlockParagraph"
	ConstructorPageBlockPreformatted                                   = "pageBlockPreformatted"
	ConstructorPageBlockFooter                                         = "pageBlockFooter"
	ConstructorPageBlockDivider                                        = "pageBlockDivider"
	ConstructorPageBlockAnchor                                         = "pageBlockAnchor"
	ConstructorPageBlockList                                           = "pageBlockList"
	ConstructorPageBlockBlockQuote                                     = "pageBlockBlockQuote"
	ConstructorPageBlockPullQuote                                      = "pageBlockPullQuote"
	ConstructorPageBlockAnimation                                      = "pageBlockAnimation"
	ConstructorPageBlockAudio                                          = "pageBlockAudio"
	ConstructorPageBlockPhoto                                          = "pageBlockPhoto"
	ConstructorPageBlockVideo                                          = "pageBlockVideo"
	ConstructorPageBlockVoiceNote                                      = "pageBlockVoiceNote"
	ConstructorPageBlockCover                                          = "pageBlockCover"
	ConstructorPageBlockEmbedded                                       = "pageBlockEmbedded"
	ConstructorPageBlockEmbeddedPost                                   = "pageBlockEmbeddedPost"
	ConstructorPageBlockCollage                                        = "pageBlockCollage"
	ConstructorPageBlockSlideshow                                      = "pageBlockSlideshow"
	ConstructorPageBlockChatLink                                       = "pageBlockChatLink"
	ConstructorPageBlockTable                                          = "pageBlockTable"
	ConstructorPageBlockDetails                                        = "pageBlockDetails"
	ConstructorPageBlockRelatedArticles                                = "pageBlockRelatedArticles"
	ConstructorPageBlockMap                                            = "pageBlockMap"
	ConstructorWebPageInstantView                                      = "webPageInstantView"
	ConstructorLinkPreviewAlbumMediaPhoto                              = "linkPreviewAlbumMediaPhoto"
	ConstructorLinkPreviewAlbumMediaVideo                              = "linkPreviewAlbumMediaVideo"
	ConstructorLinkPreviewTypeAlbum                                    = "linkPreviewTypeAlbum"
	ConstructorLinkPreviewTypeAnimation                                = "linkPreviewTypeAnimation"
	ConstructorLinkPreviewTypeApp                                      = "linkPreviewTypeApp"
	ConstructorLinkPreviewTypeArticle                                  = "linkPreviewTypeArticle"
	ConstructorLinkPreviewTypeAudio                                    = "linkPreviewTypeAudio"
	ConstructorLinkPreviewTypeBackground                               = "linkPreviewTypeBackground"
	ConstructorLinkPreviewTypeChannelBoost                             = "linkPreviewTypeChannelBoost"
	ConstructorLinkPreviewTypeChat                                     = "linkPreviewTypeChat"
	ConstructorLinkPreviewTypeDocument                                 = "linkPreviewTypeDocument"
	ConstructorLinkPreviewTypeEmbeddedAnimationPlayer                  = "linkPreviewTypeEmbeddedAnimationPlayer"
	ConstructorLinkPreviewTypeEmbeddedAudioPlayer                      = "linkPreviewTypeEmbeddedAudioPlayer"
	ConstructorLinkPreviewTypeEmbeddedVideoPlayer                      = "linkPreviewTypeEmbeddedVideoPlayer"
	ConstructorLinkPreviewTypeExternalAudio                            = "linkPreviewTypeExternalAudio"
	ConstructorLinkPreviewTypeExternalVideo                            = "linkPreviewTypeExternalVideo"
	ConstructorLinkPreviewTypeInvoice                                  = "linkPreviewTypeInvoice"
	ConstructorLinkPreviewTypeMessage                                  = "linkPreviewTypeMessage"
	ConstructorLinkPreviewTypePhoto                                    = "linkPreviewTypePhoto"
	ConstructorLinkPreviewTypePremiumGiftCode                          = "linkPreviewTypePremiumGiftCode"
	ConstructorLinkPreviewTypeShareableChatFolder                      = "linkPreviewTypeShareableChatFolder"
	ConstructorLinkPreviewTypeSticker                                  = "linkPreviewTypeSticker"
	ConstructorLinkPreviewTypeStickerSet                               = "linkPreviewTypeStickerSet"
	ConstructorLinkPreviewTypeStory                                    = "linkPreviewTypeStory"
	ConstructorLinkPreviewTypeSupergroupBoost                          = "linkPreviewTypeSupergroupBoost"
	ConstructorLinkPreviewTypeTheme                                    = "linkPreviewTypeTheme"
	ConstructorLinkPreviewTypeUnsupported                              = "linkPreviewTypeUnsupported"
	ConstructorLinkPreviewTypeUser                                     = "linkPreviewTypeUser"
	ConstructorLinkPreviewTypeVideo                                    = "linkPreviewTypeVideo"
	ConstructorLinkPreviewTypeVideoChat                                = "linkPreviewTypeVideoChat"
	ConstructorLinkPreviewTypeVideoNote                                = "linkPreviewTypeVideoNote"
	ConstructorLinkPreviewTypeVoiceNote                                = "linkPreviewTypeVoiceNote"
	ConstructorLinkPreviewTypeWebApp                                   = "linkPreviewTypeWebApp"
	ConstructorLinkPreview                                             = "linkPreview"
	ConstructorCountryInfo                                             = "countryInfo"
	ConstructorCountries                                               = "countries"
	ConstructorPhoneNumberInfo                                         = "phoneNumberInfo"
	ConstructorCollectibleItemTypeUsername                             = "collectibleItemTypeUsername"
	ConstructorCollectibleItemTypePhoneNumber                          = "collectibleItemTypePhoneNumber"
	ConstructorCollectibleItemInfo                                     = "collectibleItemInfo"
	ConstructorBankCardActionOpenUrl                                   = "bankCardActionOpenUrl"
	ConstructorBankCardInfo                                            = "bankCardInfo"
	ConstructorAddress                                                 = "address"
	ConstructorLocationAddress                                         = "locationAddress"
	ConstructorLabeledPricePart                                        = "labeledPricePart"
	ConstructorInvoice                                                 = "invoice"
	ConstructorOrderInfo                                               = "orderInfo"
	ConstructorShippingOption                                          = "shippingOption"
	ConstructorSavedCredentials                                        = "savedCredentials"
	ConstructorInputCredentialsSaved                                   = "inputCredentialsSaved"
	ConstructorInputCredentialsNew                                     = "inputCredentialsNew"
	ConstructorInputCredentialsApplePay                                = "inputCredentialsApplePay"
	ConstructorInputCredentialsGooglePay                               = "inputCredentialsGooglePay"
	ConstructorPaymentProviderSmartGlocal                              = "paymentProviderSmartGlocal"
	ConstructorPaymentProviderStripe                                   = "paymentProviderStripe"
	ConstructorPaymentProviderOther                                    = "paymentProviderOther"
	ConstructorPaymentOption                                           = "paymentOption"
	ConstructorPaymentFormTypeRegular                                  = "paymentFormTypeRegular"
	ConstructorPaymentFormTypeStars                                    = "paymentFormTypeStars"
	ConstructorPaymentFormTypeStarSubscription                         = "paymentFormTypeStarSubscription"
	ConstructorPaymentForm                                             = "paymentForm"
	ConstructorValidatedOrderInfo                                      = "validatedOrderInfo"
	ConstructorPaymentResult                                           = "paymentResult"
	ConstructorPaymentReceiptTypeRegular                               = "paymentReceiptTypeRegular"
	ConstructorPaymentReceiptTypeStars                                 = "paymentReceiptTypeStars"
	ConstructorPaymentReceipt                                          = "paymentReceipt"
	ConstructorInputInvoiceMessage                                     = "inputInvoiceMessage"
	ConstructorInputInvoiceName                                        = "inputInvoiceName"
	ConstructorInputInvoiceTelegram                                    = "inputInvoiceTelegram"
	ConstructorPaidMediaPreview                                        = "paidMediaPreview"
	ConstructorPaidMediaPhoto                                          = "paidMediaPhoto"
	ConstructorPaidMediaVideo                                          = "paidMediaVideo"
	ConstructorPaidMediaUnsupported                                    = "paidMediaUnsupported"
	ConstructorGiveawayParameters                                      = "giveawayParameters"
	ConstructorDatedFile                                               = "datedFile"
	ConstructorPassportElementTypePersonalDetails                      = "passportElementTypePersonalDetails"
	ConstructorPassportElementTypePassport                             = "passportElementTypePassport"
	ConstructorPassportElementTypeDriverLicense                        = "passportElementTypeDriverLicense"
	ConstructorPassportElementTypeIdentityCard                         = "passportElementTypeIdentityCard"
	ConstructorPassportElementTypeInternalPassport                     = "passportElementTypeInternalPassport"
	ConstructorPassportElementTypeAddress                              = "passportElementTypeAddress"
	ConstructorPassportElementTypeUtilityBill                          = "passportElementTypeUtilityBill"
	ConstructorPassportElementTypeBankStatement                        = "passportElementTypeBankStatement"
	ConstructorPassportElementTypeRentalAgreement                      = "passportElementTypeRentalAgreement"
	ConstructorPassportElementTypePassportRegistration                 = "passportElementTypePassportRegistration"
	ConstructorPassportElementTypeTemporaryRegistration                = "passportElementTypeTemporaryRegistration"
	ConstructorPassportElementTypePhoneNumber                          = "passportElementTypePhoneNumber"
	ConstructorPassportElementTypeEmailAddress                         = "passportElementTypeEmailAddress"
	ConstructorDate                                                    = "date"
	ConstructorPersonalDetails                                         = "personalDetails"
	ConstructorIdentityDocument                                        = "identityDocument"
	ConstructorInputIdentityDocument                                   = "inputIdentityDocument"
	ConstructorPersonalDocument                                        = "personalDocument"
	ConstructorInputPersonalDocument                                   = "inputPersonalDocument"
	ConstructorPassportElementPersonalDetails                          = "passportElementPersonalDetails"
	ConstructorPassportElementPassport                                 = "passportElementPassport"
	ConstructorPassportElementDriverLicense                            = "passportElementDriverLicense"
	ConstructorPassportElementIdentityCard                             = "passportElementIdentityCard"
	ConstructorPassportElementInternalPassport                         = "passportElementInternalPassport"
	ConstructorPassportElementAddress                                  = "passportElementAddress"
	ConstructorPassportElementUtilityBill                              = "passportElementUtilityBill"
	ConstructorPassportElementBankStatement                            = "passportElementBankStatement"
	ConstructorPassportElementRentalAgreement                          = "passportElementRentalAgreement"
	ConstructorPassportElementPassportRegistration                     = "passportElementPassportRegistration"
	ConstructorPassportElementTemporaryRegistration                    = "passportElementTemporaryRegistration"
	ConstructorPassportElementPhoneNumber                              = "passportElementPhoneNumber"
	ConstructorPassportElementEmailAddress                             = "passportElementEmailAddress"
	ConstructorInputPassportElementPersonalDetails                     = "inputPassportElementPersonalDetails"
	ConstructorInputPassportElementPassport                            = "inputPassportElementPassport"
	ConstructorInputPassportElementDriverLicense                       = "inputPassportElementDriverLicense"
	ConstructorInputPassportElementIdentityCard                        = "inputPassportElementIdentityCard"
	ConstructorInputPassportElementInternalPassport                    = "inputPassportElementInternalPassport"
	ConstructorInputPassportElementAddress                             = "inputPassportElementAddress"
	ConstructorInputPassportElementUtilityBill                         = "inputPassportElementUtilityBill"
	ConstructorInputPassportElementBankStatement                       = "inputPassportElementBankStatement"
	ConstructorInputPassportElementRentalAgreement                     = "inputPassportElementRentalAgreement"
	ConstructorInputPassportElementPassportRegistration                = "inputPassportElementPassportRegistration"
	ConstructorInputPassportElementTemporaryRegistration               = "inputPassportElementTemporaryRegistration"
	ConstructorInputPassportElementPhoneNumber                         = "inputPassportElementPhoneNumber"
	ConstructorInputPassportElementEmailAddress                        = "inputPassportElementEmailAddress"
	ConstructorPassportElements                                        = "passportElements"
	ConstructorPassportElementErrorSourceUnspecified                   = "passportElementErrorSourceUnspecified"
	ConstructorPassportElementErrorSourceDataField                     = "passportElementErrorSourceDataField"
	ConstructorPassportElementErrorSourceFrontSide                     = "passportElementErrorSourceFrontSide"
	ConstructorPassportElementErrorSourceReverseSide                   = "passportElementErrorSourceReverseSide"
	ConstructorPassportElementErrorSourceSelfie                        = "passportElementErrorSourceSelfie"
	ConstructorPassportElementErrorSourceTranslationFile               = "passportElementErrorSourceTranslationFile"
	ConstructorPassportElementErrorSourceTranslationFiles              = "passportElementErrorSourceTranslationFiles"
	ConstructorPassportElementErrorSourceFile                          = "passportElementErrorSourceFile"
	ConstructorPassportElementErrorSourceFiles                         = "passportElementErrorSourceFiles"
	ConstructorPassportElementError                                    = "passportElementError"
	ConstructorPassportSuitableElement                                 = "passportSuitableElement"
	ConstructorPassportRequiredElement                                 = "passportRequiredElement"
	ConstructorPassportAuthorizationForm                               = "passportAuthorizationForm"
	ConstructorPassportElementsWithErrors                              = "passportElementsWithErrors"
	ConstructorEncryptedCredentials                                    = "encryptedCredentials"
	ConstructorEncryptedPassportElement                                = "encryptedPassportElement"
	ConstructorInputPassportElementErrorSourceUnspecified              = "inputPassportElementErrorSourceUnspecified"
	ConstructorInputPassportElementErrorSourceDataField                = "inputPassportElementErrorSourceDataField"
	ConstructorInputPassportElementErrorSourceFrontSide                = "inputPassportElementErrorSourceFrontSide"
	ConstructorInputPassportElementErrorSourceReverseSide              = "inputPassportElementErrorSourceReverseSide"
	ConstructorInputPassportElementErrorSourceSelfie                   = "inputPassportElementErrorSourceSelfie"
	ConstructorInputPassportElementErrorSourceTranslationFile          = "inputPassportElementErrorSourceTranslationFile"
	ConstructorInputPassportElementErrorSourceTranslationFiles         = "inputPassportElementErrorSourceTranslationFiles"
	ConstructorInputPassportElementErrorSourceFile                     = "inputPassportElementErrorSourceFile"
	ConstructorInputPassportElementErrorSourceFiles                    = "inputPassportElementErrorSourceFiles"
	ConstructorInputPassportElementError                               = "inputPassportElementError"
	ConstructorMessageText                                             = "messageText"
	ConstructorMessageAnimation                                        = "messageAnimation"
	ConstructorMessageAudio                                            = "messageAudio"
	ConstructorMessageDocument                                         = "messageDocument"
	ConstructorMessagePaidMedia                                        = "messagePaidMedia"
	ConstructorMessagePhoto                                            = "messagePhoto"
	ConstructorMessageSticker                                          = "messageSticker"
	ConstructorMessageVideo                                            = "messageVideo"
	ConstructorMessageVideoNote                                        = "messageVideoNote"
	ConstructorMessageVoiceNote                                        = "messageVoiceNote"
	ConstructorMessageExpiredPhoto                                     = "messageExpiredPhoto"
	ConstructorMessageExpiredVideo                                     = "messageExpiredVideo"
	ConstructorMessageExpiredVideoNote                                 = "messageExpiredVideoNote"
	ConstructorMessageExpiredVoiceNote                                 = "messageExpiredVoiceNote"
	ConstructorMessageLocation                                         = "messageLocation"
	ConstructorMessageVenue                                            = "messageVenue"
	ConstructorMessageContact                                          = "messageContact"
	ConstructorMessageAnimatedEmoji                                    = "messageAnimatedEmoji"
	ConstructorMessageDice                                             = "messageDice"
	ConstructorMessageGame                                             = "messageGame"
	ConstructorMessagePoll                                             = "messagePoll"
	ConstructorMessageStory                                            = "messageStory"
	ConstructorMessageInvoice                                          = "messageInvoice"
	ConstructorMessageCall                                             = "messageCall"
	ConstructorMessageVideoChatScheduled                               = "messageVideoChatScheduled"
	ConstructorMessageVideoChatStarted                                 = "messageVideoChatStarted"
	ConstructorMessageVideoChatEnded                                   = "messageVideoChatEnded"
	ConstructorMessageInviteVideoChatParticipants                      = "messageInviteVideoChatParticipants"
	ConstructorMessageBasicGroupChatCreate                             = "messageBasicGroupChatCreate"
	ConstructorMessageSupergroupChatCreate                             = "messageSupergroupChatCreate"
	ConstructorMessageChatChangeTitle                                  = "messageChatChangeTitle"
	ConstructorMessageChatChangePhoto                                  = "messageChatChangePhoto"
	ConstructorMessageChatDeletePhoto                                  = "messageChatDeletePhoto"
	ConstructorMessageChatAddMembers                                   = "messageChatAddMembers"
	ConstructorMessageChatJoinByLink                                   = "messageChatJoinByLink"
	ConstructorMessageChatJoinByRequest                                = "messageChatJoinByRequest"
	ConstructorMessageChatDeleteMember                                 = "messageChatDeleteMember"
	ConstructorMessageChatUpgradeTo                                    = "messageChatUpgradeTo"
	ConstructorMessageChatUpgradeFrom                                  = "messageChatUpgradeFrom"
	ConstructorMessagePinMessage                                       = "messagePinMessage"
	ConstructorMessageScreenshotTaken                                  = "messageScreenshotTaken"
	ConstructorMessageChatSetBackground                                = "messageChatSetBackground"
	ConstructorMessageChatSetTheme                                     = "messageChatSetTheme"
	ConstructorMessageChatSetMessageAutoDeleteTime                     = "messageChatSetMessageAutoDeleteTime"
	ConstructorMessageChatBoost                                        = "messageChatBoost"
	ConstructorMessageForumTopicCreated                                = "messageForumTopicCreated"
	ConstructorMessageForumTopicEdited                                 = "messageForumTopicEdited"
	ConstructorMessageForumTopicIsClosedToggled                        = "messageForumTopicIsClosedToggled"
	ConstructorMessageForumTopicIsHiddenToggled                        = "messageForumTopicIsHiddenToggled"
	ConstructorMessageSuggestProfilePhoto                              = "messageSuggestProfilePhoto"
	ConstructorMessageCustomServiceAction                              = "messageCustomServiceAction"
	ConstructorMessageGameScore                                        = "messageGameScore"
	ConstructorMessagePaymentSuccessful                                = "messagePaymentSuccessful"
	ConstructorMessagePaymentSuccessfulBot                             = "messagePaymentSuccessfulBot"
	ConstructorMessagePaymentRefunded                                  = "messagePaymentRefunded"
	ConstructorMessageGiftedPremium                                    = "messageGiftedPremium"
	ConstructorMessagePremiumGiftCode                                  = "messagePremiumGiftCode"
	ConstructorMessageGiveawayCreated                                  = "messageGiveawayCreated"
	ConstructorMessageGiveaway                                         = "messageGiveaway"
	ConstructorMessageGiveawayCompleted                                = "messageGiveawayCompleted"
	ConstructorMessageGiveawayWinners                                  = "messageGiveawayWinners"
	ConstructorMessageGiftedStars                                      = "messageGiftedStars"
	ConstructorMessageGiveawayPrizeStars                               = "messageGiveawayPrizeStars"
	ConstructorMessageGift                                             = "messageGift"
	ConstructorMessageContactRegistered                                = "messageContactRegistered"
	ConstructorMessageUsersShared                                      = "messageUsersShared"
	ConstructorMessageChatShared                                       = "messageChatShared"
	ConstructorMessageBotWriteAccessAllowed                            = "messageBotWriteAccessAllowed"
	ConstructorMessageWebAppDataSent                                   = "messageWebAppDataSent"
	ConstructorMessageWebAppDataReceived                               = "messageWebAppDataReceived"
	ConstructorMessagePassportDataSent                                 = "messagePassportDataSent"
	ConstructorMessagePassportDataReceived                             = "messagePassportDataReceived"
	ConstructorMessageProximityAlertTriggered                          = "messageProximityAlertTriggered"
	ConstructorMessageUnsupported                                      = "messageUnsupported"
	ConstructorTextEntityTypeMention                                   = "textEntityTypeMention"
	ConstructorTextEntityTypeHashtag                                   = "textEntityTypeHashtag"
	ConstructorTextEntityTypeCashtag                                   = "textEntityTypeCashtag"
	ConstructorTextEntityTypeBotCommand                                = "textEntityTypeBotCommand"
	ConstructorTextEntityTypeUrl                                       = "textEntityTypeUrl"
	ConstructorTextEntityTypeEmailAddress                              = "textEntityTypeEmailAddress"
	ConstructorTextEntityTypePhoneNumber                               = "textEntityTypePhoneNumber"
	ConstructorTextEntityTypeBankCardNumber                            = "textEntityTypeBankCardNumber"
	ConstructorTextEntityTypeBold                                      = "textEntityTypeBold"
	ConstructorTextEntityTypeItalic                                    = "textEntityTypeItalic"
	ConstructorTextEntityTypeUnderline                                 = "textEntityTypeUnderline"
	ConstructorTextEntityTypeStrikethrough                             = "textEntityTypeStrikethrough"
	ConstructorTextEntityTypeSpoiler                                   = "textEntityTypeSpoiler"
	ConstructorTextEntityTypeCode                                      = "textEntityTypeCode"
	ConstructorTextEntityTypePre                                       = "textEntityTypePre"
	ConstructorTextEntityTypePreCode                                   = "textEntityTypePreCode"
	ConstructorTextEntityTypeBlockQuote                                = "textEntityTypeBlockQuote"
	ConstructorTextEntityTypeExpandableBlockQuote                      = "textEntityTypeExpandableBlockQuote"
	ConstructorTextEntityTypeTextUrl                                   = "textEntityTypeTextUrl"
	ConstructorTextEntityTypeMentionName                               = "textEntityTypeMentionName"
	ConstructorTextEntityTypeCustomEmoji                               = "textEntityTypeCustomEmoji"
	ConstructorTextEntityTypeMediaTimestamp                            = "textEntityTypeMediaTimestamp"
	ConstructorInputThumbnail                                          = "inputThumbnail"
	ConstructorInputPaidMediaTypePhoto                                 = "inputPaidMediaTypePhoto"
	ConstructorInputPaidMediaTypeVideo                                 = "inputPaidMediaTypeVideo"
	ConstructorInputPaidMedia                                          = "inputPaidMedia"
	ConstructorMessageSchedulingStateSendAtDate                        = "messageSchedulingStateSendAtDate"
	ConstructorMessageSchedulingStateSendWhenOnline                    = "messageSchedulingStateSendWhenOnline"
	ConstructorMessageSchedulingStateSendWhenVideoProcessed            = "messageSchedulingStateSendWhenVideoProcessed"
	ConstructorMessageSelfDestructTypeTimer                            = "messageSelfDestructTypeTimer"
	ConstructorMessageSelfDestructTypeImmediately                      = "messageSelfDestructTypeImmediately"
	ConstructorMessageSendOptions                                      = "messageSendOptions"
	ConstructorMessageCopyOptions                                      = "messageCopyOptions"
	ConstructorInputMessageText                                        = "inputMessageText"
	ConstructorInputMessageAnimation                                   = "inputMessageAnimation"
	ConstructorInputMessageAudio                                       = "inputMessageAudio"
	ConstructorInputMessageDocument                                    = "inputMessageDocument"
	ConstructorInputMessagePaidMedia                                   = "inputMessagePaidMedia"
	ConstructorInputMessagePhoto                                       = "inputMessagePhoto"
	ConstructorInputMessageSticker                                     = "inputMessageSticker"
	ConstructorInputMessageVideo                                       = "inputMessageVideo"
	ConstructorInputMessageVideoNote                                   = "inputMessageVideoNote"
	ConstructorInputMessageVoiceNote                                   = "inputMessageVoiceNote"
	ConstructorInputMessageLocation                                    = "inputMessageLocation"
	ConstructorInputMessageVenue                                       = "inputMessageVenue"
	ConstructorInputMessageContact                                     = "inputMessageContact"
	ConstructorInputMessageDice                                        = "inputMessageDice"
	ConstructorInputMessageGame                                        = "inputMessageGame"
	ConstructorInputMessageInvoice                                     = "inputMessageInvoice"
	ConstructorInputMessagePoll                                        = "inputMessagePoll"
	ConstructorInputMessageStory                                       = "inputMessageStory"
	ConstructorInputMessageForwarded                                   = "inputMessageForwarded"
	ConstructorMessageProperties                                       = "messageProperties"
	ConstructorSearchMessagesFilterEmpty                               = "searchMessagesFilterEmpty"
	ConstructorSearchMessagesFilterAnimation                           = "searchMessagesFilterAnimation"
	ConstructorSearchMessagesFilterAudio                               = "searchMessagesFilterAudio"
	ConstructorSearchMessagesFilterDocument                            = "searchMessagesFilterDocument"
	ConstructorSearchMessagesFilterPhoto                               = "searchMessagesFilterPhoto"
	ConstructorSearchMessagesFilterVideo                               = "searchMessagesFilterVideo"
	ConstructorSearchMessagesFilterVoiceNote                           = "searchMessagesFilterVoiceNote"
	ConstructorSearchMessagesFilterPhotoAndVideo                       = "searchMessagesFilterPhotoAndVideo"
	ConstructorSearchMessagesFilterUrl                                 = "searchMessagesFilterUrl"
	ConstructorSearchMessagesFilterChatPhoto                           = "searchMessagesFilterChatPhoto"
	ConstructorSearchMessagesFilterVideoNote                           = "searchMessagesFilterVideoNote"
	ConstructorSearchMessagesFilterVoiceAndVideoNote                   = "searchMessagesFilterVoiceAndVideoNote"
	ConstructorSearchMessagesFilterMention                             = "searchMessagesFilterMention"
	ConstructorSearchMessagesFilterUnreadMention                       = "searchMessagesFilterUnreadMention"
	ConstructorSearchMessagesFilterUnreadReaction                      = "searchMessagesFilterUnreadReaction"
	ConstructorSearchMessagesFilterFailedToSend                        = "searchMessagesFilterFailedToSend"
	ConstructorSearchMessagesFilterPinned                              = "searchMessagesFilterPinned"
	ConstructorChatActionTyping                                        = "chatActionTyping"
	ConstructorChatActionRecordingVideo                                = "chatActionRecordingVideo"
	ConstructorChatActionUploadingVideo                                = "chatActionUploadingVideo"
	ConstructorChatActionRecordingVoiceNote                            = "chatActionRecordingVoiceNote"
	ConstructorChatActionUploadingVoiceNote                            = "chatActionUploadingVoiceNote"
	ConstructorChatActionUploadingPhoto                                = "chatActionUploadingPhoto"
	ConstructorChatActionUploadingDocument                             = "chatActionUploadingDocument"
	ConstructorChatActionChoosingSticker                               = "chatActionChoosingSticker"
	ConstructorChatActionChoosingLocation                              = "chatActionChoosingLocation"
	ConstructorChatActionChoosingContact                               = "chatActionChoosingContact"
	ConstructorChatActionStartPlayingGame                              = "chatActionStartPlayingGame"
	ConstructorChatActionRecordingVideoNote                            = "chatActionRecordingVideoNote"
	ConstructorChatActionUploadingVideoNote                            = "chatActionUploadingVideoNote"
	ConstructorChatActionWatchingAnimations                            = "chatActionWatchingAnimations"
	ConstructorChatActionCancel                                        = "chatActionCancel"
	ConstructorUserStatusEmpty                                         = "userStatusEmpty"
	ConstructorUserStatusOnline                                        = "userStatusOnline"
	ConstructorUserStatusOffline                                       = "userStatusOffline"
	ConstructorUserStatusRecently                                      = "userStatusRecently"
	ConstructorUserStatusLastWeek                                      = "userStatusLastWeek"
	ConstructorUserStatusLastMonth                                     = "userStatusLastMonth"
	ConstructorEmojiKeyword                                            = "emojiKeyword"
	ConstructorEmojiKeywords                                           = "emojiKeywords"
	ConstructorStickers                                                = "stickers"
	ConstructorEmojis                                                  = "emojis"
	ConstructorStickerSet                                              = "stickerSet"
	ConstructorStickerSetInfo                                          = "stickerSetInfo"
	ConstructorStickerSets                                             = "stickerSets"
	ConstructorTrendingStickerSets                                     = "trendingStickerSets"
	ConstructorEmojiCategorySourceSearch                               = "emojiCategorySourceSearch"
	ConstructorEmojiCategorySourcePremium                              = "emojiCategorySourcePremium"
	ConstructorEmojiCategory                                           = "emojiCategory"
	ConstructorEmojiCategories                                         = "emojiCategories"
	ConstructorEmojiCategoryTypeDefault                                = "emojiCategoryTypeDefault"
	ConstructorEmojiCategoryTypeRegularStickers                        = "emojiCategoryTypeRegularStickers"
	ConstructorEmojiCategoryTypeEmojiStatus                            = "emojiCategoryTypeEmojiStatus"
	ConstructorEmojiCategoryTypeChatPhoto                              = "emojiCategoryTypeChatPhoto"
	ConstructorCurrentWeather                                          = "currentWeather"
	ConstructorStoryAreaPosition                                       = "storyAreaPosition"
	ConstructorStoryAreaTypeLocation                                   = "storyAreaTypeLocation"
	ConstructorStoryAreaTypeVenue                                      = "storyAreaTypeVenue"
	ConstructorStoryAreaTypeSuggestedReaction                          = "storyAreaTypeSuggestedReaction"
	ConstructorStoryAreaTypeMessage                                    = "storyAreaTypeMessage"
	ConstructorStoryAreaTypeLink                                       = "storyAreaTypeLink"
	ConstructorStoryAreaTypeWeather                                    = "storyAreaTypeWeather"
	ConstructorStoryArea                                               = "storyArea"
	ConstructorInputStoryAreaTypeLocation                              = "inputStoryAreaTypeLocation"
	ConstructorInputStoryAreaTypeFoundVenue                            = "inputStoryAreaTypeFoundVenue"
	ConstructorInputStoryAreaTypePreviousVenue                         = "inputStoryAreaTypePreviousVenue"
	ConstructorInputStoryAreaTypeSuggestedReaction                     = "inputStoryAreaTypeSuggestedReaction"
	ConstructorInputStoryAreaTypeMessage                               = "inputStoryAreaTypeMessage"
	ConstructorInputStoryAreaTypeLink                                  = "inputStoryAreaTypeLink"
	ConstructorInputStoryAreaTypeWeather                               = "inputStoryAreaTypeWeather"
	ConstructorInputStoryArea                                          = "inputStoryArea"
	ConstructorInputStoryAreas                                         = "inputStoryAreas"
	ConstructorStoryVideo                                              = "storyVideo"
	ConstructorStoryContentPhoto                                       = "storyContentPhoto"
	ConstructorStoryContentVideo                                       = "storyContentVideo"
	ConstructorStoryContentUnsupported                                 = "storyContentUnsupported"
	ConstructorInputStoryContentPhoto                                  = "inputStoryContentPhoto"
	ConstructorInputStoryContentVideo                                  = "inputStoryContentVideo"
	ConstructorStoryListMain                                           = "storyListMain"
	ConstructorStoryListArchive                                        = "storyListArchive"
	ConstructorStoryOriginPublicStory                                  = "storyOriginPublicStory"
	ConstructorStoryOriginHiddenUser                                   = "storyOriginHiddenUser"
	ConstructorStoryRepostInfo                                         = "storyRepostInfo"
	ConstructorStoryInteractionInfo                                    = "storyInteractionInfo"
	ConstructorStory                                                   = "story"
	ConstructorStories                                                 = "stories"
	ConstructorFoundStories                                            = "foundStories"
	ConstructorStoryFullId                                             = "storyFullId"
	ConstructorStoryInfo                                               = "storyInfo"
	ConstructorChatActiveStories                                       = "chatActiveStories"
	ConstructorStoryInteractionTypeView                                = "storyInteractionTypeView"
	ConstructorStoryInteractionTypeForward                             = "storyInteractionTypeForward"
	ConstructorStoryInteractionTypeRepost                              = "storyInteractionTypeRepost"
	ConstructorStoryInteraction                                        = "storyInteraction"
	ConstructorStoryInteractions                                       = "storyInteractions"
	ConstructorQuickReplyMessage                                       = "quickReplyMessage"
	ConstructorQuickReplyMessages                                      = "quickReplyMessages"
	ConstructorQuickReplyShortcut                                      = "quickReplyShortcut"
	ConstructorPublicForwardMessage                                    = "publicForwardMessage"
	ConstructorPublicForwardStory                                      = "publicForwardStory"
	ConstructorPublicForwards                                          = "publicForwards"
	ConstructorBotMediaPreview                                         = "botMediaPreview"
	ConstructorBotMediaPreviews                                        = "botMediaPreviews"
	ConstructorBotMediaPreviewInfo                                     = "botMediaPreviewInfo"
	ConstructorChatBoostLevelFeatures                                  = "chatBoostLevelFeatures"
	ConstructorChatBoostFeatures                                       = "chatBoostFeatures"
	ConstructorChatBoostSourceGiftCode                                 = "chatBoostSourceGiftCode"
	ConstructorChatBoostSourceGiveaway                                 = "chatBoostSourceGiveaway"
	ConstructorChatBoostSourcePremium                                  = "chatBoostSourcePremium"
	ConstructorPrepaidGiveaway                                         = "prepaidGiveaway"
	ConstructorChatBoostStatus                                         = "chatBoostStatus"
	ConstructorChatBoost                                               = "chatBoost"
	ConstructorFoundChatBoosts                                         = "foundChatBoosts"
	ConstructorChatBoostSlot                                           = "chatBoostSlot"
	ConstructorChatBoostSlots                                          = "chatBoostSlots"
	ConstructorResendCodeReasonUserRequest                             = "resendCodeReasonUserRequest"
	ConstructorResendCodeReasonVerificationFailed                      = "resendCodeReasonVerificationFailed"
	ConstructorCallDiscardReasonEmpty                                  = "callDiscardReasonEmpty"
	ConstructorCallDiscardReasonMissed                                 = "callDiscardReasonMissed"
	ConstructorCallDiscardReasonDeclined                               = "callDiscardReasonDeclined"
	ConstructorCallDiscardReasonDisconnected                           = "callDiscardReasonDisconnected"
	ConstructorCallDiscardReasonHungUp                                 = "callDiscardReasonHungUp"
	ConstructorCallProtocol                                            = "callProtocol"
	ConstructorCallServerTypeTelegramReflector                         = "callServerTypeTelegramReflector"
	ConstructorCallServerTypeWebrtc                                    = "callServerTypeWebrtc"
	ConstructorCallServer                                              = "callServer"
	ConstructorCallId                                                  = "callId"
	ConstructorGroupCallId                                             = "groupCallId"
	ConstructorCallStatePending                                        = "callStatePending"
	ConstructorCallStateExchangingKeys                                 = "callStateExchangingKeys"
	ConstructorCallStateReady                                          = "callStateReady"
	ConstructorCallStateHangingUp                                      = "callStateHangingUp"
	ConstructorCallStateDiscarded                                      = "callStateDiscarded"
	ConstructorCallStateError                                          = "callStateError"
	ConstructorGroupCallVideoQualityThumbnail                          = "groupCallVideoQualityThumbnail"
	ConstructorGroupCallVideoQualityMedium                             = "groupCallVideoQualityMedium"
	ConstructorGroupCallVideoQualityFull                               = "groupCallVideoQualityFull"
	ConstructorGroupCallStream                                         = "groupCallStream"
	ConstructorGroupCallStreams                                        = "groupCallStreams"
	ConstructorRtmpUrl                                                 = "rtmpUrl"
	ConstructorGroupCallRecentSpeaker                                  = "groupCallRecentSpeaker"
	ConstructorGroupCall                                               = "groupCall"
	ConstructorGroupCallVideoSourceGroup                               = "groupCallVideoSourceGroup"
	ConstructorGroupCallParticipantVideoInfo                           = "groupCallParticipantVideoInfo"
	ConstructorGroupCallParticipant                                    = "groupCallParticipant"
	ConstructorCallProblemEcho                                         = "callProblemEcho"
	ConstructorCallProblemNoise                                        = "callProblemNoise"
	ConstructorCallProblemInterruptions                                = "callProblemInterruptions"
	ConstructorCallProblemDistortedSpeech                              = "callProblemDistortedSpeech"
	ConstructorCallProblemSilentLocal                                  = "callProblemSilentLocal"
	ConstructorCallProblemSilentRemote                                 = "callProblemSilentRemote"
	ConstructorCallProblemDropped                                      = "callProblemDropped"
	ConstructorCallProblemDistortedVideo                               = "callProblemDistortedVideo"
	ConstructorCallProblemPixelatedVideo                               = "callProblemPixelatedVideo"
	ConstructorCall                                                    = "call"
	ConstructorFirebaseAuthenticationSettingsAndroid                   = "firebaseAuthenticationSettingsAndroid"
	ConstructorFirebaseAuthenticationSettingsIos                       = "firebaseAuthenticationSettingsIos"
	ConstructorPhoneNumberAuthenticationSettings                       = "phoneNumberAuthenticationSettings"
	ConstructorAddedReaction                                           = "addedReaction"
	ConstructorAddedReactions                                          = "addedReactions"
	ConstructorAvailableReaction                                       = "availableReaction"
	ConstructorAvailableReactions                                      = "availableReactions"
	ConstructorEmojiReaction                                           = "emojiReaction"
	ConstructorReactionUnavailabilityReasonAnonymousAdministrator      = "reactionUnavailabilityReasonAnonymousAdministrator"
	ConstructorReactionUnavailabilityReasonGuest                       = "reactionUnavailabilityReasonGuest"
	ConstructorAnimations                                              = "animations"
	ConstructorDiceStickersRegular                                     = "diceStickersRegular"
	ConstructorDiceStickersSlotMachine                                 = "diceStickersSlotMachine"
	ConstructorImportedContacts                                        = "importedContacts"
	ConstructorSpeechRecognitionResultPending                          = "speechRecognitionResultPending"
	ConstructorSpeechRecognitionResultText                             = "speechRecognitionResultText"
	ConstructorSpeechRecognitionResultError                            = "speechRecognitionResultError"
	ConstructorBusinessConnection                                      = "businessConnection"
	ConstructorAttachmentMenuBotColor                                  = "attachmentMenuBotColor"
	ConstructorAttachmentMenuBot                                       = "attachmentMenuBot"
	ConstructorSentWebAppMessage                                       = "sentWebAppMessage"
	ConstructorBotWriteAccessAllowReasonConnectedWebsite               = "botWriteAccessAllowReasonConnectedWebsite"
	ConstructorBotWriteAccessAllowReasonAddedToAttachmentMenu          = "botWriteAccessAllowReasonAddedToAttachmentMenu"
	ConstructorBotWriteAccessAllowReasonLaunchedWebApp                 = "botWriteAccessAllowReasonLaunchedWebApp"
	ConstructorBotWriteAccessAllowReasonAcceptedRequest                = "botWriteAccessAllowReasonAcceptedRequest"
	ConstructorHttpUrl                                                 = "httpUrl"
	ConstructorUserLink                                                = "userLink"
	ConstructorTargetChatTypes                                         = "targetChatTypes"
	ConstructorTargetChatCurrent                                       = "targetChatCurrent"
	ConstructorTargetChatChosen                                        = "targetChatChosen"
	ConstructorTargetChatInternalLink                                  = "targetChatInternalLink"
	ConstructorInputInlineQueryResultAnimation                         = "inputInlineQueryResultAnimation"
	ConstructorInputInlineQueryResultArticle                           = "inputInlineQueryResultArticle"
	ConstructorInputInlineQueryResultAudio                             = "inputInlineQueryResultAudio"
	ConstructorInputInlineQueryResultContact                           = "inputInlineQueryResultContact"
	ConstructorInputInlineQueryResultDocument                          = "inputInlineQueryResultDocument"
	ConstructorInputInlineQueryResultGame                              = "inputInlineQueryResultGame"
	ConstructorInputInlineQueryResultLocation                          = "inputInlineQueryResultLocation"
	ConstructorInputInlineQueryResultPhoto                             = "inputInlineQueryResultPhoto"
	ConstructorInputInlineQueryResultSticker                           = "inputInlineQueryResultSticker"
	ConstructorInputInlineQueryResultVenue                             = "inputInlineQueryResultVenue"
	ConstructorInputInlineQueryResultVideo                             = "inputInlineQueryResultVideo"
	ConstructorInputInlineQueryResultVoiceNote                         = "inputInlineQueryResultVoiceNote"
	ConstructorInlineQueryResultArticle                                = "inlineQueryResultArticle"
	ConstructorInlineQueryResultContact                                = "inlineQueryResultContact"
	ConstructorInlineQueryResultLocation                               = "inlineQueryResultLocation"
	ConstructorInlineQueryResultVenue                                  = "inlineQueryResultVenue"
	ConstructorInlineQueryResultGame                                   = "inlineQueryResultGame"
	ConstructorInlineQueryResultAnimation                              = "inlineQueryResultAnimation"
	ConstructorInlineQueryResultAudio                                  = "inlineQueryResultAudio"
	ConstructorInlineQueryResultDocument                               = "inlineQueryResultDocument"
	ConstructorInlineQueryResultPhoto                                  = "inlineQueryResultPhoto"
	ConstructorInlineQueryResultSticker                                = "inlineQueryResultSticker"
	ConstructorInlineQueryResultVideo                                  = "inlineQueryResultVideo"
	ConstructorInlineQueryResultVoiceNote                              = "inlineQueryResultVoiceNote"
	ConstructorInlineQueryResultsButtonTypeStartBot                    = "inlineQueryResultsButtonTypeStartBot"
	ConstructorInlineQueryResultsButtonTypeWebApp                      = "inlineQueryResultsButtonTypeWebApp"
	ConstructorInlineQueryResultsButton                                = "inlineQueryResultsButton"
	ConstructorInlineQueryResults                                      = "inlineQueryResults"
	ConstructorPreparedInlineMessageId                                 = "preparedInlineMessageId"
	ConstructorPreparedInlineMessage                                   = "preparedInlineMessage"
	ConstructorCallbackQueryPayloadData                                = "callbackQueryPayloadData"
	ConstructorCallbackQueryPayloadDataWithPassword                    = "callbackQueryPayloadDataWithPassword"
	ConstructorCallbackQueryPayloadGame                                = "callbackQueryPayloadGame"
	ConstructorCallbackQueryAnswer                                     = "callbackQueryAnswer"
	ConstructorCustomRequestResult                                     = "customRequestResult"
	ConstructorGameHighScore                                           = "gameHighScore"
	ConstructorGameHighScores                                          = "gameHighScores"
	ConstructorChatEventMessageEdited                                  = "chatEventMessageEdited"
	ConstructorChatEventMessageDeleted                                 = "chatEventMessageDeleted"
	ConstructorChatEventMessagePinned                                  = "chatEventMessagePinned"
	ConstructorChatEventMessageUnpinned                                = "chatEventMessageUnpinned"
	ConstructorChatEventPollStopped                                    = "chatEventPollStopped"
	ConstructorChatEventMemberJoined                                   = "chatEventMemberJoined"
	ConstructorChatEventMemberJoinedByInviteLink                       = "chatEventMemberJoinedByInviteLink"
	ConstructorChatEventMemberJoinedByRequest                          = "chatEventMemberJoinedByRequest"
	ConstructorChatEventMemberInvited                                  = "chatEventMemberInvited"
	ConstructorChatEventMemberLeft                                     = "chatEventMemberLeft"
	ConstructorChatEventMemberPromoted                                 = "chatEventMemberPromoted"
	ConstructorChatEventMemberRestricted                               = "chatEventMemberRestricted"
	ConstructorChatEventMemberSubscriptionExtended                     = "chatEventMemberSubscriptionExtended"
	ConstructorChatEventAvailableReactionsChanged                      = "chatEventAvailableReactionsChanged"
	ConstructorChatEventBackgroundChanged                              = "chatEventBackgroundChanged"
	ConstructorChatEventDescriptionChanged                             = "chatEventDescriptionChanged"
	ConstructorChatEventEmojiStatusChanged                             = "chatEventEmojiStatusChanged"
	ConstructorChatEventLinkedChatChanged                              = "chatEventLinkedChatChanged"
	ConstructorChatEventLocationChanged                                = "chatEventLocationChanged"
	ConstructorChatEventMessageAutoDeleteTimeChanged                   = "chatEventMessageAutoDeleteTimeChanged"
	ConstructorChatEventPermissionsChanged                             = "chatEventPermissionsChanged"
	ConstructorChatEventPhotoChanged                                   = "chatEventPhotoChanged"
	ConstructorChatEventSlowModeDelayChanged                           = "chatEventSlowModeDelayChanged"
	ConstructorChatEventStickerSetChanged                              = "chatEventStickerSetChanged"
	ConstructorChatEventCustomEmojiStickerSetChanged                   = "chatEventCustomEmojiStickerSetChanged"
	ConstructorChatEventTitleChanged                                   = "chatEventTitleChanged"
	ConstructorChatEventUsernameChanged                                = "chatEventUsernameChanged"
	ConstructorChatEventActiveUsernamesChanged                         = "chatEventActiveUsernamesChanged"
	ConstructorChatEventAccentColorChanged                             = "chatEventAccentColorChanged"
	ConstructorChatEventProfileAccentColorChanged                      = "chatEventProfileAccentColorChanged"
	ConstructorChatEventHasProtectedContentToggled                     = "chatEventHasProtectedContentToggled"
	ConstructorChatEventInvitesToggled                                 = "chatEventInvitesToggled"
	ConstructorChatEventIsAllHistoryAvailableToggled                   = "chatEventIsAllHistoryAvailableToggled"
	ConstructorChatEventHasAggressiveAntiSpamEnabledToggled            = "chatEventHasAggressiveAntiSpamEnabledToggled"
	ConstructorChatEventSignMessagesToggled                            = "chatEventSignMessagesToggled"
	ConstructorChatEventShowMessageSenderToggled                       = "chatEventShowMessageSenderToggled"
	ConstructorChatEventInviteLinkEdited                               = "chatEventInviteLinkEdited"
	ConstructorChatEventInviteLinkRevoked                              = "chatEventInviteLinkRevoked"
	ConstructorChatEventInviteLinkDeleted                              = "chatEventInviteLinkDeleted"
	ConstructorChatEventVideoChatCreated                               = "chatEventVideoChatCreated"
	ConstructorChatEventVideoChatEnded                                 = "chatEventVideoChatEnded"
	ConstructorChatEventVideoChatMuteNewParticipantsToggled            = "chatEventVideoChatMuteNewParticipantsToggled"
	ConstructorChatEventVideoChatParticipantIsMutedToggled             = "chatEventVideoChatParticipantIsMutedToggled"
	ConstructorChatEventVideoChatParticipantVolumeLevelChanged         = "chatEventVideoChatParticipantVolumeLevelChanged"
	ConstructorChatEventIsForumToggled                                 = "chatEventIsForumToggled"
	ConstructorChatEventForumTopicCreated                              = "chatEventForumTopicCreated"
	ConstructorChatEventForumTopicEdited                               = "chatEventForumTopicEdited"
	ConstructorChatEventForumTopicToggleIsClosed                       = "chatEventForumTopicToggleIsClosed"
	ConstructorChatEventForumTopicToggleIsHidden                       = "chatEventForumTopicToggleIsHidden"
	ConstructorChatEventForumTopicDeleted                              = "chatEventForumTopicDeleted"
	ConstructorChatEventForumTopicPinned                               = "chatEventForumTopicPinned"
	ConstructorChatEvent                                               = "chatEvent"
	ConstructorChatEvents                                              = "chatEvents"
	ConstructorChatEventLogFilters                                     = "chatEventLogFilters"
	ConstructorLanguagePackStringValueOrdinary                         = "languagePackStringValueOrdinary"
	ConstructorLanguagePackStringValuePluralized                       = "languagePackStringValuePluralized"
	ConstructorLanguagePackStringValueDeleted                          = "languagePackStringValueDeleted"
	ConstructorLanguagePackString                                      = "languagePackString"
	ConstructorLanguagePackStrings                                     = "languagePackStrings"
	ConstructorLanguagePackInfo                                        = "languagePackInfo"
	ConstructorLocalizationTargetInfo                                  = "localizationTargetInfo"
	ConstructorPremiumLimitTypeSupergroupCount                         = "premiumLimitTypeSupergroupCount"
	ConstructorPremiumLimitTypePinnedChatCount                         = "premiumLimitTypePinnedChatCount"
	ConstructorPremiumLimitTypeCreatedPublicChatCount                  = "premiumLimitTypeCreatedPublicChatCount"
	ConstructorPremiumLimitTypeSavedAnimationCount                     = "premiumLimitTypeSavedAnimationCount"
	ConstructorPremiumLimitTypeFavoriteStickerCount                    = "premiumLimitTypeFavoriteStickerCount"
	ConstructorPremiumLimitTypeChatFolderCount                         = "premiumLimitTypeChatFolderCount"
	ConstructorPremiumLimitTypeChatFolderChosenChatCount               = "premiumLimitTypeChatFolderChosenChatCount"
	ConstructorPremiumLimitTypePinnedArchivedChatCount                 = "premiumLimitTypePinnedArchivedChatCount"
	ConstructorPremiumLimitTypePinnedSavedMessagesTopicCount           = "premiumLimitTypePinnedSavedMessagesTopicCount"
	ConstructorPremiumLimitTypeCaptionLength                           = "premiumLimitTypeCaptionLength"
	ConstructorPremiumLimitTypeBioLength                               = "premiumLimitTypeBioLength"
	ConstructorPremiumLimitTypeChatFolderInviteLinkCount               = "premiumLimitTypeChatFolderInviteLinkCount"
	ConstructorPremiumLimitTypeShareableChatFolderCount                = "premiumLimitTypeShareableChatFolderCount"
	ConstructorPremiumLimitTypeActiveStoryCount                        = "premiumLimitTypeActiveStoryCount"
	ConstructorPremiumLimitTypeWeeklySentStoryCount                    = "premiumLimitTypeWeeklySentStoryCount"
	ConstructorPremiumLimitTypeMonthlySentStoryCount                   = "premiumLimitTypeMonthlySentStoryCount"
	ConstructorPremiumLimitTypeStoryCaptionLength                      = "premiumLimitTypeStoryCaptionLength"
	ConstructorPremiumLimitTypeStorySuggestedReactionAreaCount         = "premiumLimitTypeStorySuggestedReactionAreaCount"
	ConstructorPremiumLimitTypeSimilarChatCount                        = "premiumLimitTypeSimilarChatCount"
	ConstructorPremiumFeatureIncreasedLimits                           = "premiumFeatureIncreasedLimits"
	ConstructorPremiumFeatureIncreasedUploadFileSize                   = "premiumFeatureIncreasedUploadFileSize"
	ConstructorPremiumFeatureImprovedDownloadSpeed                     = "premiumFeatureImprovedDownloadSpeed"
	ConstructorPremiumFeatureVoiceRecognition                          = "premiumFeatureVoiceRecognition"
	ConstructorPremiumFeatureDisabledAds                               = "premiumFeatureDisabledAds"
	ConstructorPremiumFeatureUniqueReactions                           = "premiumFeatureUniqueReactions"
	ConstructorPremiumFeatureUniqueStickers                            = "premiumFeatureUniqueStickers"
	ConstructorPremiumFeatureCustomEmoji                               = "premiumFeatureCustomEmoji"
	ConstructorPremiumFeatureAdvancedChatManagement                    = "premiumFeatureAdvancedChatManagement"
	ConstructorPremiumFeatureProfileBadge                              = "premiumFeatureProfileBadge"
	ConstructorPremiumFeatureEmojiStatus                               = "premiumFeatureEmojiStatus"
	ConstructorPremiumFeatureAnimatedProfilePhoto                      = "premiumFeatureAnimatedProfilePhoto"
	ConstructorPremiumFeatureForumTopicIcon                            = "premiumFeatureForumTopicIcon"
	ConstructorPremiumFeatureAppIcons                                  = "premiumFeatureAppIcons"
	ConstructorPremiumFeatureRealTimeChatTranslation                   = "premiumFeatureRealTimeChatTranslation"
	ConstructorPremiumFeatureUpgradedStories                           = "premiumFeatureUpgradedStories"
	ConstructorPremiumFeatureChatBoost                                 = "premiumFeatureChatBoost"
	ConstructorPremiumFeatureAccentColor                               = "premiumFeatureAccentColor"
	ConstructorPremiumFeatureBackgroundForBoth                         = "premiumFeatureBackgroundForBoth"
	ConstructorPremiumFeatureSavedMessagesTags                         = "premiumFeatureSavedMessagesTags"
	ConstructorPremiumFeatureMessagePrivacy                            = "premiumFeatureMessagePrivacy"
	ConstructorPremiumFeatureLastSeenTimes                             = "premiumFeatureLastSeenTimes"
	ConstructorPremiumFeatureBusiness                                  = "premiumFeatureBusiness"
	ConstructorPremiumFeatureMessageEffects                            = "premiumFeatureMessageEffects"
	ConstructorBusinessFeatureLocation                                 = "businessFeatureLocation"
	ConstructorBusinessFeatureOpeningHours                             = "businessFeatureOpeningHours"
	ConstructorBusinessFeatureQuickReplies                             = "businessFeatureQuickReplies"
	ConstructorBusinessFeatureGreetingMessage                          = "businessFeatureGreetingMessage"
	ConstructorBusinessFeatureAwayMessage                              = "businessFeatureAwayMessage"
	ConstructorBusinessFeatureAccountLinks                             = "businessFeatureAccountLinks"
	ConstructorBusinessFeatureStartPage                                = "businessFeatureStartPage"
	ConstructorBusinessFeatureBots                                     = "businessFeatureBots"
	ConstructorBusinessFeatureEmojiStatus                              = "businessFeatureEmojiStatus"
	ConstructorBusinessFeatureChatFolderTags                           = "businessFeatureChatFolderTags"
	ConstructorBusinessFeatureUpgradedStories                          = "businessFeatureUpgradedStories"
	ConstructorPremiumStoryFeaturePriorityOrder                        = "premiumStoryFeaturePriorityOrder"
	ConstructorPremiumStoryFeatureStealthMode                          = "premiumStoryFeatureStealthMode"
	ConstructorPremiumStoryFeaturePermanentViewsHistory                = "premiumStoryFeaturePermanentViewsHistory"
	ConstructorPremiumStoryFeatureCustomExpirationDuration             = "premiumStoryFeatureCustomExpirationDuration"
	ConstructorPremiumStoryFeatureSaveStories                          = "premiumStoryFeatureSaveStories"
	ConstructorPremiumStoryFeatureLinksAndFormatting                   = "premiumStoryFeatureLinksAndFormatting"
	ConstructorPremiumStoryFeatureVideoQuality                         = "premiumStoryFeatureVideoQuality"
	ConstructorPremiumLimit                                            = "premiumLimit"
	ConstructorPremiumFeatures                                         = "premiumFeatures"
	ConstructorBusinessFeatures                                        = "businessFeatures"
	ConstructorPremiumSourceLimitExceeded                              = "premiumSourceLimitExceeded"
	ConstructorPremiumSourceFeature                                    = "premiumSourceFeature"
	ConstructorPremiumSourceBusinessFeature                            = "premiumSourceBusinessFeature"
	ConstructorPremiumSourceStoryFeature                               = "premiumSourceStoryFeature"
	ConstructorPremiumSourceLink                                       = "premiumSourceLink"
	ConstructorPremiumSourceSettings                                   = "premiumSourceSettings"
	ConstructorPremiumFeaturePromotionAnimation                        = "premiumFeaturePromotionAnimation"
	ConstructorBusinessFeaturePromotionAnimation                       = "businessFeaturePromotionAnimation"
	ConstructorPremiumState                                            = "premiumState"
	ConstructorStorePaymentPurposePremiumSubscription                  = "storePaymentPurposePremiumSubscription"
	ConstructorStorePaymentPurposePremiumGiftCodes                     = "storePaymentPurposePremiumGiftCodes"
	ConstructorStorePaymentPurposePremiumGiveaway                      = "storePaymentPurposePremiumGiveaway"
	ConstructorStorePaymentPurposeStarGiveaway                         = "storePaymentPurposeStarGiveaway"
	ConstructorStorePaymentPurposeStars                                = "storePaymentPurposeStars"
	ConstructorStorePaymentPurposeGiftedStars                          = "storePaymentPurposeGiftedStars"
	ConstructorTelegramPaymentPurposePremiumGiftCodes                  = "telegramPaymentPurposePremiumGiftCodes"
	ConstructorTelegramPaymentPurposePremiumGiveaway                   = "telegramPaymentPurposePremiumGiveaway"
	ConstructorTelegramPaymentPurposeStars                             = "telegramPaymentPurposeStars"
	ConstructorTelegramPaymentPurposeGiftedStars                       = "telegramPaymentPurposeGiftedStars"
	ConstructorTelegramPaymentPurposeStarGiveaway                      = "telegramPaymentPurposeStarGiveaway"
	ConstructorTelegramPaymentPurposeJoinChat                          = "telegramPaymentPurposeJoinChat"
	ConstructorDeviceTokenFirebaseCloudMessaging                       = "deviceTokenFirebaseCloudMessaging"
	ConstructorDeviceTokenApplePush                                    = "deviceTokenApplePush"
	ConstructorDeviceTokenApplePushVoIP                                = "deviceTokenApplePushVoIP"
	ConstructorDeviceTokenWindowsPush                                  = "deviceTokenWindowsPush"
	ConstructorDeviceTokenMicrosoftPush                                = "deviceTokenMicrosoftPush"
	ConstructorDeviceTokenMicrosoftPushVoIP                            = "deviceTokenMicrosoftPushVoIP"
	ConstructorDeviceTokenWebPush                                      = "deviceTokenWebPush"
	ConstructorDeviceTokenSimplePush                                   = "deviceTokenSimplePush"
	ConstructorDeviceTokenUbuntuPush                                   = "deviceTokenUbuntuPush"
	ConstructorDeviceTokenBlackBerryPush                               = "deviceTokenBlackBerryPush"
	ConstructorDeviceTokenTizenPush                                    = "deviceTokenTizenPush"
	ConstructorDeviceTokenHuaweiPush                                   = "deviceTokenHuaweiPush"
	ConstructorPushReceiverId                                          = "pushReceiverId"
	ConstructorBackgroundFillSolid                                     = "backgroundFillSolid"
	ConstructorBackgroundFillGradient                                  = "backgroundFillGradient"
	ConstructorBackgroundFillFreeformGradient                          = "backgroundFillFreeformGradient"
	ConstructorBackgroundTypeWallpaper                                 = "backgroundTypeWallpaper"
	ConstructorBackgroundTypePattern                                   = "backgroundTypePattern"
	ConstructorBackgroundTypeFill                                      = "backgroundTypeFill"
	ConstructorBackgroundTypeChatTheme                                 = "backgroundTypeChatTheme"
	ConstructorInputBackgroundLocal                                    = "inputBackgroundLocal"
	ConstructorInputBackgroundRemote                                   = "inputBackgroundRemote"
	ConstructorInputBackgroundPrevious                                 = "inputBackgroundPrevious"
	ConstructorChatTheme                                               = "chatTheme"
	ConstructorTimeZone                                                = "timeZone"
	ConstructorTimeZones                                               = "timeZones"
	ConstructorHashtags                                                = "hashtags"
	ConstructorCanSendStoryResultOk                                    = "canSendStoryResultOk"
	ConstructorCanSendStoryResultPremiumNeeded                         = "canSendStoryResultPremiumNeeded"
	ConstructorCanSendStoryResultBoostNeeded                           = "canSendStoryResultBoostNeeded"
	ConstructorCanSendStoryResultActiveStoryLimitExceeded              = "canSendStoryResultActiveStoryLimitExceeded"
	ConstructorCanSendStoryResultWeeklyLimitExceeded                   = "canSendStoryResultWeeklyLimitExceeded"
	ConstructorCanSendStoryResultMonthlyLimitExceeded                  = "canSendStoryResultMonthlyLimitExceeded"
	ConstructorCanTransferOwnershipResultOk                            = "canTransferOwnershipResultOk"
	ConstructorCanTransferOwnershipResultPasswordNeeded                = "canTransferOwnershipResultPasswordNeeded"
	ConstructorCanTransferOwnershipResultPasswordTooFresh              = "canTransferOwnershipResultPasswordTooFresh"
	ConstructorCanTransferOwnershipResultSessionTooFresh               = "canTransferOwnershipResultSessionTooFresh"
	ConstructorCheckChatUsernameResultOk                               = "checkChatUsernameResultOk"
	ConstructorCheckChatUsernameResultUsernameInvalid                  = "checkChatUsernameResultUsernameInvalid"
	ConstructorCheckChatUsernameResultUsernameOccupied                 = "checkChatUsernameResultUsernameOccupied"
	ConstructorCheckChatUsernameResultUsernamePurchasable              = "checkChatUsernameResultUsernamePurchasable"
	ConstructorCheckChatUsernameResultPublicChatsTooMany               = "checkChatUsernameResultPublicChatsTooMany"
	ConstructorCheckChatUsernameResultPublicGroupsUnavailable          = "checkChatUsernameResultPublicGroupsUnavailable"
	ConstructorCheckStickerSetNameResultOk                             = "checkStickerSetNameResultOk"
	ConstructorCheckStickerSetNameResultNameInvalid                    = "checkStickerSetNameResultNameInvalid"
	ConstructorCheckStickerSetNameResultNameOccupied                   = "checkStickerSetNameResultNameOccupied"
	ConstructorResetPasswordResultOk                                   = "resetPasswordResultOk"
	ConstructorResetPasswordResultPending                              = "resetPasswordResultPending"
	ConstructorResetPasswordResultDeclined                             = "resetPasswordResultDeclined"
	ConstructorMessageFileTypePrivate                                  = "messageFileTypePrivate"
	ConstructorMessageFileTypeGroup                                    = "messageFileTypeGroup"
	ConstructorMessageFileTypeUnknown                                  = "messageFileTypeUnknown"
	ConstructorPushMessageContentHidden                                = "pushMessageContentHidden"
	ConstructorPushMessageContentAnimation                             = "pushMessageContentAnimation"
	ConstructorPushMessageContentAudio                                 = "pushMessageContentAudio"
	ConstructorPushMessageContentContact                               = "pushMessageContentContact"
	ConstructorPushMessageContentContactRegistered                     = "pushMessageContentContactRegistered"
	ConstructorPushMessageContentDocument                              = "pushMessageContentDocument"
	ConstructorPushMessageContentGame                                  = "pushMessageContentGame"
	ConstructorPushMessageContentGameScore                             = "pushMessageContentGameScore"
	ConstructorPushMessageContentInvoice                               = "pushMessageContentInvoice"
	ConstructorPushMessageContentLocation                              = "pushMessageContentLocation"
	ConstructorPushMessageContentPaidMedia                             = "pushMessageContentPaidMedia"
	ConstructorPushMessageContentPhoto                                 = "pushMessageContentPhoto"
	ConstructorPushMessageContentPoll                                  = "pushMessageContentPoll"
	ConstructorPushMessageContentPremiumGiftCode                       = "pushMessageContentPremiumGiftCode"
	ConstructorPushMessageContentGiveaway                              = "pushMessageContentGiveaway"
	ConstructorPushMessageContentGift                                  = "pushMessageContentGift"
	ConstructorPushMessageContentScreenshotTaken                       = "pushMessageContentScreenshotTaken"
	ConstructorPushMessageContentSticker                               = "pushMessageContentSticker"
	ConstructorPushMessageContentStory                                 = "pushMessageContentStory"
	ConstructorPushMessageContentText                                  = "pushMessageContentText"
	ConstructorPushMessageContentVideo                                 = "pushMessageContentVideo"
	ConstructorPushMessageContentVideoNote                             = "pushMessageContentVideoNote"
	ConstructorPushMessageContentVoiceNote                             = "pushMessageContentVoiceNote"
	ConstructorPushMessageContentBasicGroupChatCreate                  = "pushMessageContentBasicGroupChatCreate"
	ConstructorPushMessageContentChatAddMembers                        = "pushMessageContentChatAddMembers"
	ConstructorPushMessageContentChatChangePhoto                       = "pushMessageContentChatChangePhoto"
	ConstructorPushMessageContentChatChangeTitle                       = "pushMessageContentChatChangeTitle"
	ConstructorPushMessageContentChatSetBackground                     = "pushMessageContentChatSetBackground"
	ConstructorPushMessageContentChatSetTheme                          = "pushMessageContentChatSetTheme"
	ConstructorPushMessageContentChatDeleteMember                      = "pushMessageContentChatDeleteMember"
	ConstructorPushMessageContentChatJoinByLink                        = "pushMessageContentChatJoinByLink"
	ConstructorPushMessageContentChatJoinByRequest                     = "pushMessageContentChatJoinByRequest"
	ConstructorPushMessageContentRecurringPayment                      = "pushMessageContentRecurringPayment"
	ConstructorPushMessageContentSuggestProfilePhoto                   = "pushMessageContentSuggestProfilePhoto"
	ConstructorPushMessageContentMessageForwards                       = "pushMessageContentMessageForwards"
	ConstructorPushMessageContentMediaAlbum                            = "pushMessageContentMediaAlbum"
	ConstructorNotificationTypeNewMessage                              = "notificationTypeNewMessage"
	ConstructorNotificationTypeNewSecretChat                           = "notificationTypeNewSecretChat"
	ConstructorNotificationTypeNewCall                                 = "notificationTypeNewCall"
	ConstructorNotificationTypeNewPushMessage                          = "notificationTypeNewPushMessage"
	ConstructorNotificationGroupTypeMessages                           = "notificationGroupTypeMessages"
	ConstructorNotificationGroupTypeMentions                           = "notificationGroupTypeMentions"
	ConstructorNotificationGroupTypeSecretChat                         = "notificationGroupTypeSecretChat"
	ConstructorNotificationGroupTypeCalls                              = "notificationGroupTypeCalls"
	ConstructorNotificationSound                                       = "notificationSound"
	ConstructorNotificationSounds                                      = "notificationSounds"
	ConstructorNotification                                            = "notification"
	ConstructorNotificationGroup                                       = "notificationGroup"
	ConstructorOptionValueBoolean                                      = "optionValueBoolean"
	ConstructorOptionValueEmpty                                        = "optionValueEmpty"
	ConstructorOptionValueInteger                                      = "optionValueInteger"
	ConstructorOptionValueString                                       = "optionValueString"
	ConstructorJsonObjectMember                                        = "jsonObjectMember"
	ConstructorJsonValueNull                                           = "jsonValueNull"
	ConstructorJsonValueBoolean                                        = "jsonValueBoolean"
	ConstructorJsonValueNumber                                         = "jsonValueNumber"
	ConstructorJsonValueString                                         = "jsonValueString"
	ConstructorJsonValueArray                                          = "jsonValueArray"
	ConstructorJsonValueObject                                         = "jsonValueObject"
	ConstructorStoryPrivacySettingsEveryone                            = "storyPrivacySettingsEveryone"
	ConstructorStoryPrivacySettingsContacts                            = "storyPrivacySettingsContacts"
	ConstructorStoryPrivacySettingsCloseFriends                        = "storyPrivacySettingsCloseFriends"
	ConstructorStoryPrivacySettingsSelectedUsers                       = "storyPrivacySettingsSelectedUsers"
	ConstructorUserPrivacySettingRuleAllowAll                          = "userPrivacySettingRuleAllowAll"
	ConstructorUserPrivacySettingRuleAllowContacts                     = "userPrivacySettingRuleAllowContacts"
	ConstructorUserPrivacySettingRuleAllowBots                         = "userPrivacySettingRuleAllowBots"
	ConstructorUserPrivacySettingRuleAllowPremiumUsers                 = "userPrivacySettingRuleAllowPremiumUsers"
	ConstructorUserPrivacySettingRuleAllowUsers                        = "userPrivacySettingRuleAllowUsers"
	ConstructorUserPrivacySettingRuleAllowChatMembers                  = "userPrivacySettingRuleAllowChatMembers"
	ConstructorUserPrivacySettingRuleRestrictAll                       = "userPrivacySettingRuleRestrictAll"
	ConstructorUserPrivacySettingRuleRestrictContacts                  = "userPrivacySettingRuleRestrictContacts"
	ConstructorUserPrivacySettingRuleRestrictBots                      = "userPrivacySettingRuleRestrictBots"
	ConstructorUserPrivacySettingRuleRestrictUsers                     = "userPrivacySettingRuleRestrictUsers"
	ConstructorUserPrivacySettingRuleRestrictChatMembers               = "userPrivacySettingRuleRestrictChatMembers"
	ConstructorUserPrivacySettingRules                                 = "userPrivacySettingRules"
	ConstructorUserPrivacySettingShowStatus                            = "userPrivacySettingShowStatus"
	ConstructorUserPrivacySettingShowProfilePhoto                      = "userPrivacySettingShowProfilePhoto"
	ConstructorUserPrivacySettingShowLinkInForwardedMessages           = "userPrivacySettingShowLinkInForwardedMessages"
	ConstructorUserPrivacySettingShowPhoneNumber                       = "userPrivacySettingShowPhoneNumber"
	ConstructorUserPrivacySettingShowBio                               = "userPrivacySettingShowBio"
	ConstructorUserPrivacySettingShowBirthdate                         = "userPrivacySettingShowBirthdate"
	ConstructorUserPrivacySettingAllowChatInvites                      = "userPrivacySettingAllowChatInvites"
	ConstructorUserPrivacySettingAllowCalls                            = "userPrivacySettingAllowCalls"
	ConstructorUserPrivacySettingAllowPeerToPeerCalls                  = "userPrivacySettingAllowPeerToPeerCalls"
	ConstructorUserPrivacySettingAllowFindingByPhoneNumber             = "userPrivacySettingAllowFindingByPhoneNumber"
	ConstructorUserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages = "userPrivacySettingAllowPrivateVoiceAndVideoNoteMessages"
	ConstructorUserPrivacySettingAutosaveGifts                         = "userPrivacySettingAutosaveGifts"
	ConstructorReadDatePrivacySettings                                 = "readDatePrivacySettings"
	ConstructorNewChatPrivacySettings                                  = "newChatPrivacySettings"
	ConstructorCanSendMessageToUserResultOk                            = "canSendMessageToUserResultOk"
	ConstructorCanSendMessageToUserResultUserIsDeleted                 = "canSendMessageToUserResultUserIsDeleted"
	ConstructorCanSendMessageToUserResultUserRestrictsNewChats         = "canSendMessageToUserResultUserRestrictsNewChats"
	ConstructorAccountTtl                                              = "accountTtl"
	ConstructorMessageAutoDeleteTime                                   = "messageAutoDeleteTime"
	ConstructorSessionTypeAndroid                                      = "sessionTypeAndroid"
	ConstructorSessionTypeApple                                        = "sessionTypeApple"
	ConstructorSessionTypeBrave                                        = "sessionTypeBrave"
	ConstructorSessionTypeChrome                                       = "sessionTypeChrome"
	ConstructorSessionTypeEdge                                         = "sessionTypeEdge"
	ConstructorSessionTypeFirefox                                      = "sessionTypeFirefox"
	ConstructorSessionTypeIpad                                         = "sessionTypeIpad"
	ConstructorSessionTypeIphone                                       = "sessionTypeIphone"
	ConstructorSessionTypeLinux                                        = "sessionTypeLinux"
	ConstructorSessionTypeMac                                          = "sessionTypeMac"
	ConstructorSessionTypeOpera                                        = "sessionTypeOpera"
	ConstructorSessionTypeSafari                                       = "sessionTypeSafari"
	ConstructorSessionTypeUbuntu                                       = "sessionTypeUbuntu"
	ConstructorSessionTypeUnknown                                      = "sessionTypeUnknown"
	ConstructorSessionTypeVivaldi                                      = "sessionTypeVivaldi"
	ConstructorSessionTypeWindows                                      = "sessionTypeWindows"
	ConstructorSessionTypeXbox                                         = "sessionTypeXbox"
	ConstructorSession                                                 = "session"
	ConstructorSessions                                                = "sessions"
	ConstructorUnconfirmedSession                                      = "unconfirmedSession"
	ConstructorConnectedWebsite                                        = "connectedWebsite"
	ConstructorConnectedWebsites                                       = "connectedWebsites"
	ConstructorReportReasonSpam                                        = "reportReasonSpam"
	ConstructorReportReasonViolence                                    = "reportReasonViolence"
	ConstructorReportReasonPornography                                 = "reportReasonPornography"
	ConstructorReportReasonChildAbuse                                  = "reportReasonChildAbuse"
	ConstructorReportReasonCopyright                                   = "reportReasonCopyright"
	ConstructorReportReasonUnrelatedLocation                           = "reportReasonUnrelatedLocation"
	ConstructorReportReasonFake                                        = "reportReasonFake"
	ConstructorReportReasonIllegalDrugs                                = "reportReasonIllegalDrugs"
	ConstructorReportReasonPersonalDetails                             = "reportReasonPersonalDetails"
	ConstructorReportReasonCustom                                      = "reportReasonCustom"
	ConstructorReportChatResultOk                                      = "reportChatResultOk"
	ConstructorReportChatResultOptionRequired                          = "reportChatResultOptionRequired"
	ConstructorReportChatResultTextRequired                            = "reportChatResultTextRequired"
	ConstructorReportChatResultMessagesRequired                        = "reportChatResultMessagesRequired"
	ConstructorReportStoryResultOk                                     = "reportStoryResultOk"
	ConstructorReportStoryResultOptionRequired                         = "reportStoryResultOptionRequired"
	ConstructorReportStoryResultTextRequired                           = "reportStoryResultTextRequired"
	ConstructorInternalLinkTypeActiveSessions                          = "internalLinkTypeActiveSessions"
	ConstructorInternalLinkTypeAttachmentMenuBot                       = "internalLinkTypeAttachmentMenuBot"
	ConstructorInternalLinkTypeAuthenticationCode                      = "internalLinkTypeAuthenticationCode"
	ConstructorInternalLinkTypeBackground                              = "internalLinkTypeBackground"
	ConstructorInternalLinkTypeBotAddToChannel                         = "internalLinkTypeBotAddToChannel"
	ConstructorInternalLinkTypeBotStart                                = "internalLinkTypeBotStart"
	ConstructorInternalLinkTypeBotStartInGroup                         = "internalLinkTypeBotStartInGroup"
	ConstructorInternalLinkTypeBusinessChat                            = "internalLinkTypeBusinessChat"
	ConstructorInternalLinkTypeBuyStars                                = "internalLinkTypeBuyStars"
	ConstructorInternalLinkTypeChangePhoneNumber                       = "internalLinkTypeChangePhoneNumber"
	ConstructorInternalLinkTypeChatBoost                               = "internalLinkTypeChatBoost"
	ConstructorInternalLinkTypeChatFolderInvite                        = "internalLinkTypeChatFolderInvite"
	ConstructorInternalLinkTypeChatFolderSettings                      = "internalLinkTypeChatFolderSettings"
	ConstructorInternalLinkTypeChatInvite                              = "internalLinkTypeChatInvite"
	ConstructorInternalLinkTypeDefaultMessageAutoDeleteTimerSettings   = "internalLinkTypeDefaultMessageAutoDeleteTimerSettings"
	ConstructorInternalLinkTypeEditProfileSettings                     = "internalLinkTypeEditProfileSettings"
	ConstructorInternalLinkTypeGame                                    = "internalLinkTypeGame"
	ConstructorInternalLinkTypeInstantView                             = "internalLinkTypeInstantView"
	ConstructorInternalLinkTypeInvoice                                 = "internalLinkTypeInvoice"
	ConstructorInternalLinkTypeLanguagePack                            = "internalLinkTypeLanguagePack"
	ConstructorInternalLinkTypeLanguageSettings                        = "internalLinkTypeLanguageSettings"
	ConstructorInternalLinkTypeMainWebApp                              = "internalLinkTypeMainWebApp"
	ConstructorInternalLinkTypeMessage                                 = "internalLinkTypeMessage"
	ConstructorInternalLinkTypeMessageDraft                            = "internalLinkTypeMessageDraft"
	ConstructorInternalLinkTypePassportDataRequest                     = "internalLinkTypePassportDataRequest"
	ConstructorInternalLinkTypePhoneNumberConfirmation                 = "internalLinkTypePhoneNumberConfirmation"
	ConstructorInternalLinkTypePremiumFeatures                         = "internalLinkTypePremiumFeatures"
	ConstructorInternalLinkTypePremiumGift                             = "internalLinkTypePremiumGift"
	ConstructorInternalLinkTypePremiumGiftCode                         = "internalLinkTypePremiumGiftCode"
	ConstructorInternalLinkTypePrivacyAndSecuritySettings              = "internalLinkTypePrivacyAndSecuritySettings"
	ConstructorInternalLinkTypeProxy                                   = "internalLinkTypeProxy"
	ConstructorInternalLinkTypePublicChat                              = "internalLinkTypePublicChat"
	ConstructorInternalLinkTypeQrCodeAuthentication                    = "internalLinkTypeQrCodeAuthentication"
	ConstructorInternalLinkTypeRestorePurchases                        = "internalLinkTypeRestorePurchases"
	ConstructorInternalLinkTypeSettings                                = "internalLinkTypeSettings"
	ConstructorInternalLinkTypeStickerSet                              = "internalLinkTypeStickerSet"
	ConstructorInternalLinkTypeStory                                   = "internalLinkTypeStory"
	ConstructorInternalLinkTypeTheme                                   = "internalLinkTypeTheme"
	ConstructorInternalLinkTypeThemeSettings                           = "internalLinkTypeThemeSettings"
	ConstructorInternalLinkTypeUnknownDeepLink                         = "internalLinkTypeUnknownDeepLink"
	ConstructorInternalLinkTypeUnsupportedProxy                        = "internalLinkTypeUnsupportedProxy"
	ConstructorInternalLinkTypeUserPhoneNumber                         = "internalLinkTypeUserPhoneNumber"
	ConstructorInternalLinkTypeUserToken                               = "internalLinkTypeUserToken"
	ConstructorInternalLinkTypeVideoChat                               = "internalLinkTypeVideoChat"
	ConstructorInternalLinkTypeWebApp                                  = "internalLinkTypeWebApp"
	ConstructorMessageLink                                             = "messageLink"
	ConstructorMessageLinkInfo                                         = "messageLinkInfo"
	ConstructorChatBoostLink                                           = "chatBoostLink"
	ConstructorChatBoostLinkInfo                                       = "chatBoostLinkInfo"
	ConstructorBlockListMain                                           = "blockListMain"
	ConstructorBlockListStories                                        = "blockListStories"
	ConstructorFilePart                                                = "filePart"
	ConstructorFileTypeNone                                            = "fileTypeNone"
	ConstructorFileTypeAnimation                                       = "fileTypeAnimation"
	ConstructorFileTypeAudio                                           = "fileTypeAudio"
	ConstructorFileTypeDocument                                        = "fileTypeDocument"
	ConstructorFileTypeNotificationSound                               = "fileTypeNotificationSound"
	ConstructorFileTypePhoto                                           = "fileTypePhoto"
	ConstructorFileTypePhotoStory                                      = "fileTypePhotoStory"
	ConstructorFileTypeProfilePhoto                                    = "fileTypeProfilePhoto"
	ConstructorFileTypeSecret                                          = "fileTypeSecret"
	ConstructorFileTypeSecretThumbnail                                 = "fileTypeSecretThumbnail"
	ConstructorFileTypeSecure                                          = "fileTypeSecure"
	ConstructorFileTypeSticker                                         = "fileTypeSticker"
	ConstructorFileTypeThumbnail                                       = "fileTypeThumbnail"
	ConstructorFileTypeUnknown                                         = "fileTypeUnknown"
	ConstructorFileTypeVideo                                           = "fileTypeVideo"
	ConstructorFileTypeVideoNote                                       = "fileTypeVideoNote"
	ConstructorFileTypeVideoStory                                      = "fileTypeVideoStory"
	ConstructorFileTypeVoiceNote                                       = "fileTypeVoiceNote"
	ConstructorFileTypeWallpaper                                       = "fileTypeWallpaper"
	ConstructorStorageStatisticsByFileType                             = "storageStatisticsByFileType"
	ConstructorStorageStatisticsByChat                                 = "storageStatisticsByChat"
	ConstructorStorageStatistics                                       = "storageStatistics"
	ConstructorStorageStatisticsFast                                   = "storageStatisticsFast"
	ConstructorDatabaseStatistics                                      = "databaseStatistics"
	ConstructorNetworkTypeNone                                         = "networkTypeNone"
	ConstructorNetworkTypeMobile                                       = "networkTypeMobile"
	ConstructorNetworkTypeMobileRoaming                                = "networkTypeMobileRoaming"
	ConstructorNetworkTypeWiFi                                         = "networkTypeWiFi"
	ConstructorNetworkTypeOther                                        = "networkTypeOther"
	ConstructorNetworkStatisticsEntryFile                              = "networkStatisticsEntryFile"
	ConstructorNetworkStatisticsEntryCall                              = "networkStatisticsEntryCall"
	ConstructorNetworkStatistics                                       = "networkStatistics"
	ConstructorAutoDownloadSettings                                    = "autoDownloadSettings"
	ConstructorAutoDownloadSettingsPresets                             = "autoDownloadSettingsPresets"
	ConstructorAutosaveSettingsScopePrivateChats                       = "autosaveSettingsScopePrivateChats"
	ConstructorAutosaveSettingsScopeGroupChats                         = "autosaveSettingsScopeGroupChats"
	ConstructorAutosaveSettingsScopeChannelChats                       = "autosaveSettingsScopeChannelChats"
	ConstructorAutosaveSettingsScopeChat                               = "autosaveSettingsScopeChat"
	ConstructorScopeAutosaveSettings                                   = "scopeAutosaveSettings"
	ConstructorAutosaveSettingsException                               = "autosaveSettingsException"
	ConstructorAutosaveSettings                                        = "autosaveSettings"
	ConstructorConnectionStateWaitingForNetwork                        = "connectionStateWaitingForNetwork"
	ConstructorConnectionStateConnectingToProxy                        = "connectionStateConnectingToProxy"
	ConstructorConnectionStateConnecting                               = "connectionStateConnecting"
	ConstructorConnectionStateUpdating                                 = "connectionStateUpdating"
	ConstructorConnectionStateReady                                    = "connectionStateReady"
	ConstructorTopChatCategoryUsers                                    = "topChatCategoryUsers"
	ConstructorTopChatCategoryBots                                     = "topChatCategoryBots"
	ConstructorTopChatCategoryGroups                                   = "topChatCategoryGroups"
	ConstructorTopChatCategoryChannels                                 = "topChatCategoryChannels"
	ConstructorTopChatCategoryInlineBots                               = "topChatCategoryInlineBots"
	ConstructorTopChatCategoryWebAppBots                               = "topChatCategoryWebAppBots"
	ConstructorTopChatCategoryCalls                                    = "topChatCategoryCalls"
	ConstructorTopChatCategoryForwardChats                             = "topChatCategoryForwardChats"
	ConstructorFoundPosition                                           = "foundPosition"
	ConstructorFoundPositions                                          = "foundPositions"
	ConstructorTMeUrlTypeUser                                          = "tMeUrlTypeUser"
	ConstructorTMeUrlTypeSupergroup                                    = "tMeUrlTypeSupergroup"
	ConstructorTMeUrlTypeChatInvite                                    = "tMeUrlTypeChatInvite"
	ConstructorTMeUrlTypeStickerSet                                    = "tMeUrlTypeStickerSet"
	ConstructorTMeUrl                                                  = "tMeUrl"
	ConstructorTMeUrls                                                 = "tMeUrls"
	ConstructorSuggestedActionEnableArchiveAndMuteNewChats             = "suggestedActionEnableArchiveAndMuteNewChats"
	ConstructorSuggestedActionCheckPassword                            = "suggestedActionCheckPassword"
	ConstructorSuggestedActionCheckPhoneNumber                         = "suggestedActionCheckPhoneNumber"
	ConstructorSuggestedActionViewChecksHint                           = "suggestedActionViewChecksHint"
	ConstructorSuggestedActionConvertToBroadcastGroup                  = "suggestedActionConvertToBroadcastGroup"
	ConstructorSuggestedActionSetPassword                              = "suggestedActionSetPassword"
	ConstructorSuggestedActionUpgradePremium                           = "suggestedActionUpgradePremium"
	ConstructorSuggestedActionRestorePremium                           = "suggestedActionRestorePremium"
	ConstructorSuggestedActionSubscribeToAnnualPremium                 = "suggestedActionSubscribeToAnnualPremium"
	ConstructorSuggestedActionGiftPremiumForChristmas                  = "suggestedActionGiftPremiumForChristmas"
	ConstructorSuggestedActionSetBirthdate                             = "suggestedActionSetBirthdate"
	ConstructorSuggestedActionExtendPremium                            = "suggestedActionExtendPremium"
	ConstructorSuggestedActionExtendStarSubscriptions                  = "suggestedActionExtendStarSubscriptions"
	ConstructorCount                                                   = "count"
	ConstructorText                                                    = "text"
	ConstructorSeconds                                                 = "seconds"
	ConstructorFileDownloadedPrefixSize                                = "fileDownloadedPrefixSize"
	ConstructorDeepLinkInfo                                            = "deepLinkInfo"
	ConstructorTextParseModeMarkdown                                   = "textParseModeMarkdown"
	ConstructorTextParseModeHTML                                       = "textParseModeHTML"
	ConstructorProxyTypeSocks5                                         = "proxyTypeSocks5"
	ConstructorProxyTypeHttp                                           = "proxyTypeHttp"
	ConstructorProxyTypeMtproto                                        = "proxyTypeMtproto"
	ConstructorProxy                                                   = "proxy"
	ConstructorProxies                                                 = "proxies"
	ConstructorInputSticker                                            = "inputSticker"
	ConstructorDateRange                                               = "dateRange"
	ConstructorStatisticalValue                                        = "statisticalValue"
	ConstructorStatisticalGraphData                                    = "statisticalGraphData"
	ConstructorStatisticalGraphAsync                                   = "statisticalGraphAsync"
	ConstructorStatisticalGraphError                                   = "statisticalGraphError"
	ConstructorChatStatisticsObjectTypeMessage                         = "chatStatisticsObjectTypeMessage"
	ConstructorChatStatisticsObjectTypeStory                           = "chatStatisticsObjectTypeStory"
	ConstructorChatStatisticsInteractionInfo                           = "chatStatisticsInteractionInfo"
	ConstructorChatStatisticsMessageSenderInfo                         = "chatStatisticsMessageSenderInfo"
	ConstructorChatStatisticsAdministratorActionsInfo                  = "chatStatisticsAdministratorActionsInfo"
	ConstructorChatStatisticsInviterInfo                               = "chatStatisticsInviterInfo"
	ConstructorChatStatisticsSupergroup                                = "chatStatisticsSupergroup"
	ConstructorChatStatisticsChannel                                   = "chatStatisticsChannel"
	ConstructorChatRevenueAmount                                       = "chatRevenueAmount"
	ConstructorChatRevenueStatistics                                   = "chatRevenueStatistics"
	ConstructorMessageStatistics                                       = "messageStatistics"
	ConstructorStoryStatistics                                         = "storyStatistics"
	ConstructorRevenueWithdrawalStatePending                           = "revenueWithdrawalStatePending"
	ConstructorRevenueWithdrawalStateSucceeded                         = "revenueWithdrawalStateSucceeded"
	ConstructorRevenueWithdrawalStateFailed                            = "revenueWithdrawalStateFailed"
	ConstructorChatRevenueTransactionTypeEarnings                      = "chatRevenueTransactionTypeEarnings"
	ConstructorChatRevenueTransactionTypeWithdrawal                    = "chatRevenueTransactionTypeWithdrawal"
	ConstructorChatRevenueTransactionTypeRefund                        = "chatRevenueTransactionTypeRefund"
	ConstructorChatRevenueTransaction                                  = "chatRevenueTransaction"
	ConstructorChatRevenueTransactions                                 = "chatRevenueTransactions"
	ConstructorStarRevenueStatus                                       = "starRevenueStatus"
	ConstructorStarRevenueStatistics                                   = "starRevenueStatistics"
	ConstructorPoint                                                   = "point"
	ConstructorVectorPathCommandLine                                   = "vectorPathCommandLine"
	ConstructorVectorPathCommandCubicBezierCurve                       = "vectorPathCommandCubicBezierCurve"
	ConstructorBotCommandScopeDefault                                  = "botCommandScopeDefault"
	ConstructorBotCommandScopeAllPrivateChats                          = "botCommandScopeAllPrivateChats"
	ConstructorBotCommandScopeAllGroupChats                            = "botCommandScopeAllGroupChats"
	ConstructorBotCommandScopeAllChatAdministrators                    = "botCommandScopeAllChatAdministrators"
	ConstructorBotCommandScopeChat                                     = "botCommandScopeChat"
	ConstructorBotCommandScopeChatAdministrators                       = "botCommandScopeChatAdministrators"
	ConstructorBotCommandScopeChatMember                               = "botCommandScopeChatMember"
	ConstructorPhoneNumberCodeTypeChange                               = "phoneNumberCodeTypeChange"
	ConstructorPhoneNumberCodeTypeVerify                               = "phoneNumberCodeTypeVerify"
	ConstructorPhoneNumberCodeTypeConfirmOwnership                     = "phoneNumberCodeTypeConfirmOwnership"
	ConstructorUpdateAuthorizationState                                = "updateAuthorizationState"
	ConstructorUpdateNewMessage                                        = "updateNewMessage"
	ConstructorUpdateMessageSendAcknowledged                           = "updateMessageSendAcknowledged"
	ConstructorUpdateMessageSendSucceeded                              = "updateMessageSendSucceeded"
	ConstructorUpdateMessageSendFailed                                 = "updateMessageSendFailed"
	ConstructorUpdateMessageContent                                    = "updateMessageContent"
	ConstructorUpdateMessageEdited                                     = "updateMessageEdited"
	ConstructorUpdateMessageIsPinned                                   = "updateMessageIsPinned"
	ConstructorUpdateMessageInteractionInfo                            = "updateMessageInteractionInfo"
	ConstructorUpdateMessageContentOpened                              = "updateMessageContentOpened"
	ConstructorUpdateMessageMentionRead                                = "updateMessageMentionRead"
	ConstructorUpdateMessageUnreadReactions                            = "updateMessageUnreadReactions"
	ConstructorUpdateMessageFactCheck                                  = "updateMessageFactCheck"
	ConstructorUpdateMessageLiveLocationViewed                         = "updateMessageLiveLocationViewed"
	ConstructorUpdateVideoPublished                                    = "updateVideoPublished"
	ConstructorUpdateNewChat                                           = "updateNewChat"
	ConstructorUpdateChatTitle                                         = "updateChatTitle"
	ConstructorUpdateChatPhoto                                         = "updateChatPhoto"
	ConstructorUpdateChatAccentColors                                  = "updateChatAccentColors"
	ConstructorUpdateChatPermissions                                   = "updateChatPermissions"
	ConstructorUpdateChatLastMessage                                   = "updateChatLastMessage"
	ConstructorUpdateChatPosition                                      = "updateChatPosition"
	ConstructorUpdateChatAddedToList                                   = "updateChatAddedToList"
	ConstructorUpdateChatRemovedFromList                               = "updateChatRemovedFromList"
	ConstructorUpdateChatReadInbox                                     = "updateChatReadInbox"
	ConstructorUpdateChatReadOutbox                                    = "updateChatReadOutbox"
	ConstructorUpdateChatActionBar                                     = "updateChatActionBar"
	ConstructorUpdateChatBusinessBotManageBar                          = "updateChatBusinessBotManageBar"
	ConstructorUpdateChatAvailableReactions                            = "updateChatAvailableReactions"
	ConstructorUpdateChatDraftMessage                                  = "updateChatDraftMessage"
	ConstructorUpdateChatEmojiStatus                                   = "updateChatEmojiStatus"
	ConstructorUpdateChatMessageSender                                 = "updateChatMessageSender"
	ConstructorUpdateChatMessageAutoDeleteTime                         = "updateChatMessageAutoDeleteTime"
	ConstructorUpdateChatNotificationSettings                          = "updateChatNotificationSettings"
	ConstructorUpdateChatPendingJoinRequests                           = "updateChatPendingJoinRequests"
	ConstructorUpdateChatReplyMarkup                                   = "updateChatReplyMarkup"
	ConstructorUpdateChatBackground                                    = "updateChatBackground"
	ConstructorUpdateChatTheme                                         = "updateChatTheme"
	ConstructorUpdateChatUnreadMentionCount                            = "updateChatUnreadMentionCount"
	ConstructorUpdateChatUnreadReactionCount                           = "updateChatUnreadReactionCount"
	ConstructorUpdateChatVideoChat                                     = "updateChatVideoChat"
	ConstructorUpdateChatDefaultDisableNotification                    = "updateChatDefaultDisableNotification"
	ConstructorUpdateChatHasProtectedContent                           = "updateChatHasProtectedContent"
	ConstructorUpdateChatIsTranslatable                                = "updateChatIsTranslatable"
	ConstructorUpdateChatIsMarkedAsUnread                              = "updateChatIsMarkedAsUnread"
	ConstructorUpdateChatViewAsTopics                                  = "updateChatViewAsTopics"
	ConstructorUpdateChatBlockList                                     = "updateChatBlockList"
	ConstructorUpdateChatHasScheduledMessages                          = "updateChatHasScheduledMessages"
	ConstructorUpdateChatFolders                                       = "updateChatFolders"
	ConstructorUpdateChatOnlineMemberCount                             = "updateChatOnlineMemberCount"
	ConstructorUpdateSavedMessagesTopic                                = "updateSavedMessagesTopic"
	ConstructorUpdateSavedMessagesTopicCount                           = "updateSavedMessagesTopicCount"
	ConstructorUpdateQuickReplyShortcut                                = "updateQuickReplyShortcut"
	ConstructorUpdateQuickReplyShortcutDeleted                         = "updateQuickReplyShortcutDeleted"
	ConstructorUpdateQuickReplyShortcuts                               = "updateQuickReplyShortcuts"
	ConstructorUpdateQuickReplyShortcutMessages                        = "updateQuickReplyShortcutMessages"
	ConstructorUpdateForumTopicInfo                                    = "updateForumTopicInfo"
	ConstructorUpdateScopeNotificationSettings                         = "updateScopeNotificationSettings"
	ConstructorUpdateReactionNotificationSettings                      = "updateReactionNotificationSettings"
	ConstructorUpdateNotification                                      = "updateNotification"
	ConstructorUpdateNotificationGroup                                 = "updateNotificationGroup"
	ConstructorUpdateActiveNotifications                               = "updateActiveNotifications"
	ConstructorUpdateHavePendingNotifications                          = "updateHavePendingNotifications"
	ConstructorUpdateDeleteMessages                                    = "updateDeleteMessages"
	ConstructorUpdateChatAction                                        = "updateChatAction"
	ConstructorUpdateUserStatus                                        = "updateUserStatus"
	ConstructorUpdateUser                                              = "updateUser"
	ConstructorUpdateBasicGroup                                        = "updateBasicGroup"
	ConstructorUpdateSupergroup                                        = "updateSupergroup"
	ConstructorUpdateSecretChat                                        = "updateSecretChat"
	ConstructorUpdateUserFullInfo                                      = "updateUserFullInfo"
	ConstructorUpdateBasicGroupFullInfo                                = "updateBasicGroupFullInfo"
	ConstructorUpdateSupergroupFullInfo                                = "updateSupergroupFullInfo"
	ConstructorUpdateServiceNotification                               = "updateServiceNotification"
	ConstructorUpdateFile                                              = "updateFile"
	ConstructorUpdateFileGenerationStart                               = "updateFileGenerationStart"
	ConstructorUpdateFileGenerationStop                                = "updateFileGenerationStop"
	ConstructorUpdateFileDownloads                                     = "updateFileDownloads"
	ConstructorUpdateFileAddedToDownloads                              = "updateFileAddedToDownloads"
	ConstructorUpdateFileDownload                                      = "updateFileDownload"
	ConstructorUpdateFileRemovedFromDownloads                          = "updateFileRemovedFromDownloads"
	ConstructorUpdateApplicationVerificationRequired                   = "updateApplicationVerificationRequired"
	ConstructorUpdateCall                                              = "updateCall"
	ConstructorUpdateGroupCall                                         = "updateGroupCall"
	ConstructorUpdateGroupCallParticipant                              = "updateGroupCallParticipant"
	ConstructorUpdateNewCallSignalingData                              = "updateNewCallSignalingData"
	ConstructorUpdateUserPrivacySettingRules                           = "updateUserPrivacySettingRules"
	ConstructorUpdateUnreadMessageCount                                = "updateUnreadMessageCount"
	ConstructorUpdateUnreadChatCount                                   = "updateUnreadChatCount"
	ConstructorUpdateStory                                             = "updateStory"
	ConstructorUpdateStoryDeleted                                      = "updateStoryDeleted"
	ConstructorUpdateStorySendSucceeded                                = "updateStorySendSucceeded"
	ConstructorUpdateStorySendFailed                                   = "updateStorySendFailed"
	ConstructorUpdateChatActiveStories                                 = "updateChatActiveStories"
	ConstructorUpdateStoryListChatCount                                = "updateStoryListChatCount"
	ConstructorUpdateStoryStealthMode                                  = "updateStoryStealthMode"
	ConstructorUpdateOption                                            = "updateOption"
	ConstructorUpdateStickerSet                                        = "updateStickerSet"
	ConstructorUpdateInstalledStickerSets                              = "updateInstalledStickerSets"
	ConstructorUpdateTrendingStickerSets                               = "updateTrendingStickerSets"
	ConstructorUpdateRecentStickers                                    = "updateRecentStickers"
	ConstructorUpdateFavoriteStickers                                  = "updateFavoriteStickers"
	ConstructorUpdateSavedAnimations                                   = "updateSavedAnimations"
	ConstructorUpdateSavedNotificationSounds                           = "updateSavedNotificationSounds"
	ConstructorUpdateDefaultBackground                                 = "updateDefaultBackground"
	ConstructorUpdateChatThemes                                        = "updateChatThemes"
	ConstructorUpdateAccentColors                                      = "updateAccentColors"
	ConstructorUpdateProfileAccentColors                               = "updateProfileAccentColors"
	ConstructorUpdateLanguagePackStrings                               = "updateLanguagePackStrings"
	ConstructorUpdateConnectionState                                   = "updateConnectionState"
	ConstructorUpdateTermsOfService                                    = "updateTermsOfService"
	ConstructorUpdateUnconfirmedSession                                = "updateUnconfirmedSession"
	ConstructorUpdateAttachmentMenuBots                                = "updateAttachmentMenuBots"
	ConstructorUpdateWebAppMessageSent                                 = "updateWebAppMessageSent"
	ConstructorUpdateActiveEmojiReactions                              = "updateActiveEmojiReactions"
	ConstructorUpdateAvailableMessageEffects                           = "updateAvailableMessageEffects"
	ConstructorUpdateDefaultReactionType                               = "updateDefaultReactionType"
	ConstructorUpdateSavedMessagesTags                                 = "updateSavedMessagesTags"
	ConstructorUpdateActiveLiveLocationMessages                        = "updateActiveLiveLocationMessages"
	ConstructorUpdateOwnedStarCount                                    = "updateOwnedStarCount"
	ConstructorUpdateChatRevenueAmount                                 = "updateChatRevenueAmount"
	ConstructorUpdateStarRevenueStatus                                 = "updateStarRevenueStatus"
	ConstructorUpdateSpeechRecognitionTrial                            = "updateSpeechRecognitionTrial"
	ConstructorUpdateDiceEmojis                                        = "updateDiceEmojis"
	ConstructorUpdateAnimatedEmojiMessageClicked                       = "updateAnimatedEmojiMessageClicked"
	ConstructorUpdateAnimationSearchParameters                         = "updateAnimationSearchParameters"
	ConstructorUpdateSuggestedActions                                  = "updateSuggestedActions"
	ConstructorUpdateSpeedLimitNotification                            = "updateSpeedLimitNotification"
	ConstructorUpdateContactCloseBirthdays                             = "updateContactCloseBirthdays"
	ConstructorUpdateAutosaveSettings                                  = "updateAutosaveSettings"
	ConstructorUpdateBusinessConnection                                = "updateBusinessConnection"
	ConstructorUpdateNewBusinessMessage                                = "updateNewBusinessMessage"
	ConstructorUpdateBusinessMessageEdited                             = "updateBusinessMessageEdited"
	ConstructorUpdateBusinessMessagesDeleted                           = "updateBusinessMessagesDeleted"
	ConstructorUpdateNewInlineQuery                                    = "updateNewInlineQuery"
	ConstructorUpdateNewChosenInlineResult                             = "updateNewChosenInlineResult"
	ConstructorUpdateNewCallbackQuery                                  = "updateNewCallbackQuery"
	ConstructorUpdateNewInlineCallbackQuery                            = "updateNewInlineCallbackQuery"
	ConstructorUpdateNewBusinessCallbackQuery                          = "updateNewBusinessCallbackQuery"
	ConstructorUpdateNewShippingQuery                                  = "updateNewShippingQuery"
	ConstructorUpdateNewPreCheckoutQuery                               = "updateNewPreCheckoutQuery"
	ConstructorUpdateNewCustomEvent                                    = "updateNewCustomEvent"
	ConstructorUpdateNewCustomQuery                                    = "updateNewCustomQuery"
	ConstructorUpdatePoll                                              = "updatePoll"
	ConstructorUpdatePollAnswer                                        = "updatePollAnswer"
	ConstructorUpdateChatMember                                        = "updateChatMember"
	ConstructorUpdateNewChatJoinRequest                                = "updateNewChatJoinRequest"
	ConstructorUpdateChatBoost                                         = "updateChatBoost"
	ConstructorUpdateMessageReaction                                   = "updateMessageReaction"
	ConstructorUpdateMessageReactions                                  = "updateMessageReactions"
	ConstructorUpdatePaidMediaPurchased                                = "updatePaidMediaPurchased"
	ConstructorUpdates                                                 = "updates"
	ConstructorLogStreamDefault                                        = "logStreamDefault"
	ConstructorLogStreamFile                                           = "logStreamFile"
	ConstructorLogStreamEmpty                                          = "logStreamEmpty"
	ConstructorLogVerbosityLevel                                       = "logVerbosityLevel"
	ConstructorLogTags                                                 = "logTags"
	ConstructorUserSupportInfo                                         = "userSupportInfo"
	ConstructorTestInt                                                 = "testInt"
	ConstructorTestString                                              = "testString"
	ConstructorTestBytes                                               = "testBytes"
	ConstructorTestVectorInt                                           = "testVectorInt"
	ConstructorTestVectorIntObject                                     = "testVectorIntObject"
	ConstructorTestVectorString                                        = "testVectorString"
	ConstructorTestVectorStringObject                                  = "testVectorStringObject"
)

// Provides information about the method by which an authentication code is delivered to the user
type AuthenticationCodeType interface {
	AuthenticationCodeTypeConstructor() string
}

// Contains authentication data for an email address
type EmailAddressAuthentication interface {
	EmailAddressAuthenticationConstructor() string
}

// Describes reset state of an email address
type EmailAddressResetState interface {
	EmailAddressResetStateConstructor() string
}

// Represents the current authorization state of the TDLib client
type AuthorizationState interface {
	AuthorizationStateConstructor() string
}

// Describes parameters to be used for device verification
type FirebaseDeviceVerificationParameters interface {
	FirebaseDeviceVerificationParametersConstructor() string
}

// Points to a file
type InputFile interface {
	InputFileConstructor() string
}

// Describes format of a thumbnail
type ThumbnailFormat interface {
	ThumbnailFormatConstructor() string
}

// Part of the face, relative to which a mask is placed
type MaskPoint interface {
	MaskPointConstructor() string
}

// Describes format of a sticker
type StickerFormat interface {
	StickerFormatConstructor() string
}

// Describes type of sticker
type StickerType interface {
	StickerTypeConstructor() string
}

// Contains full information about sticker type
type StickerFullType interface {
	StickerFullTypeConstructor() string
}

// Describes the type of poll
type PollType interface {
	PollTypeConstructor() string
}

// Represents the type of user. The following types are possible: regular users, deleted users and bots
type UserType interface {
	UserTypeConstructor() string
}

// Describes conditions for sending of away messages by a Telegram Business account
type BusinessAwayMessageSchedule interface {
	BusinessAwayMessageScheduleConstructor() string
}

// Describes type of sticker, which was used to create a chat photo
type ChatPhotoStickerType interface {
	ChatPhotoStickerTypeConstructor() string
}

// Describes a photo to be set as a user profile or chat photo
type InputChatPhoto interface {
	InputChatPhotoConstructor() string
}

// Describes type of subscription paid in Telegram Stars
type StarSubscriptionType interface {
	StarSubscriptionTypeConstructor() string
}

// Describes direction of a transaction with Telegram Stars
type StarTransactionDirection interface {
	StarTransactionDirectionConstructor() string
}

// Describes purpose of a transaction with a bot
type BotTransactionPurpose interface {
	BotTransactionPurposeConstructor() string
}

// Describes purpose of a transaction with a supergroup or a channel
type ChatTransactionPurpose interface {
	ChatTransactionPurposeConstructor() string
}

// Describes purpose of a transaction with a user
type UserTransactionPurpose interface {
	UserTransactionPurposeConstructor() string
}

// Describes source or recipient of a transaction with Telegram Stars
type StarTransactionPartner interface {
	StarTransactionPartnerConstructor() string
}

// Contains information about status of a user in a giveaway
type GiveawayParticipantStatus interface {
	GiveawayParticipantStatusConstructor() string
}

// Contains information about a giveaway
type GiveawayInfo interface {
	GiveawayInfoConstructor() string
}

// Contains information about a giveaway prize
type GiveawayPrize interface {
	GiveawayPrizeConstructor() string
}

// Provides information about the status of a member in a chat
type ChatMemberStatus interface {
	ChatMemberStatusConstructor() string
}

// Specifies the kind of chat members to return in searchChatMembers
type ChatMembersFilter interface {
	ChatMembersFilterConstructor() string
}

// Specifies the kind of chat members to return in getSupergroupMembers
type SupergroupMembersFilter interface {
	SupergroupMembersFilterConstructor() string
}

// Describes the type of chat to which points an invite link
type InviteLinkChatType interface {
	InviteLinkChatTypeConstructor() string
}

// Describes the current secret chat state
type SecretChatState interface {
	SecretChatStateConstructor() string
}

// Contains information about the sender of a message
type MessageSender interface {
	MessageSenderConstructor() string
}

// Describes read date of a recent outgoing message in a private chat
type MessageReadDate interface {
	MessageReadDateConstructor() string
}

// Contains information about the origin of a message
type MessageOrigin interface {
	MessageOriginConstructor() string
}

// Describes type of message reaction
type ReactionType interface {
	ReactionTypeConstructor() string
}

// Describes type of emoji effect
type MessageEffectType interface {
	MessageEffectTypeConstructor() string
}

// Contains information about the sending state of the message
type MessageSendingState interface {
	MessageSendingStateConstructor() string
}

// Contains information about the message or the story a message is replying to
type MessageReplyTo interface {
	MessageReplyToConstructor() string
}

// Contains information about the message or the story to be replied
type InputMessageReplyTo interface {
	InputMessageReplyToConstructor() string
}

// Describes source of a message
type MessageSource interface {
	MessageSourceConstructor() string
}

// Describes result of sponsored message report
type ReportChatSponsoredMessageResult interface {
	ReportChatSponsoredMessageResultConstructor() string
}

// Describes the types of chats to which notification settings are relevant
type NotificationSettingsScope interface {
	NotificationSettingsScopeConstructor() string
}

// Describes sources of reactions for which notifications will be shown
type ReactionNotificationSource interface {
	ReactionNotificationSourceConstructor() string
}

// Describes the type of chat
type ChatType interface {
	ChatTypeConstructor() string
}

// Describes a list of chats
type ChatList interface {
	ChatListConstructor() string
}

// Describes a reason why an external chat is shown in a chat list
type ChatSource interface {
	ChatSourceConstructor() string
}

// Describes reactions available in the chat
type ChatAvailableReactions interface {
	ChatAvailableReactionsConstructor() string
}

// Describes type of public chat
type PublicChatType interface {
	PublicChatTypeConstructor() string
}

// Describes actions which must be possible to do through a chat action bar
type ChatActionBar interface {
	ChatActionBarConstructor() string
}

// Describes a keyboard button type
type KeyboardButtonType interface {
	KeyboardButtonTypeConstructor() string
}

// Describes the type of inline keyboard button
type InlineKeyboardButtonType interface {
	InlineKeyboardButtonTypeConstructor() string
}

// Contains a description of a custom keyboard and actions that can be done with it to quickly reply to bots
type ReplyMarkup interface {
	ReplyMarkupConstructor() string
}

// Contains information about an inline button of type inlineKeyboardButtonTypeLoginUrl
type LoginUrlInfo interface {
	LoginUrlInfoConstructor() string
}

// Describes mode in which a Web App is opened
type WebAppOpenMode interface {
	WebAppOpenModeConstructor() string
}

// Describes type of Saved Messages topic
type SavedMessagesTopicType interface {
	SavedMessagesTopicTypeConstructor() string
}

// Describes a formatted text object
type RichText interface {
	RichTextConstructor() string
}

// Describes a horizontal alignment of a table cell content
type PageBlockHorizontalAlignment interface {
	PageBlockHorizontalAlignmentConstructor() string
}

// Describes a Vertical alignment of a table cell content
type PageBlockVerticalAlignment interface {
	PageBlockVerticalAlignmentConstructor() string
}

// Describes a block of an instant view for a web page
type PageBlock interface {
	PageBlockConstructor() string
}

// Describes a media from a link preview album
type LinkPreviewAlbumMedia interface {
	LinkPreviewAlbumMediaConstructor() string
}

// Describes type of link preview
type LinkPreviewType interface {
	LinkPreviewTypeConstructor() string
}

// Describes a collectible item that can be purchased at https://fragment.com
type CollectibleItemType interface {
	CollectibleItemTypeConstructor() string
}

// Contains information about the payment method chosen by the user
type InputCredentials interface {
	InputCredentialsConstructor() string
}

// Contains information about a payment provider
type PaymentProvider interface {
	PaymentProviderConstructor() string
}

// Describes type of payment form
type PaymentFormType interface {
	PaymentFormTypeConstructor() string
}

// Describes type of successful payment
type PaymentReceiptType interface {
	PaymentReceiptTypeConstructor() string
}

// Describes an invoice to process
type InputInvoice interface {
	InputInvoiceConstructor() string
}

// Describes a paid media
type PaidMedia interface {
	PaidMediaConstructor() string
}

// Contains the type of Telegram Passport element
type PassportElementType interface {
	PassportElementTypeConstructor() string
}

// Contains information about a Telegram Passport element
type PassportElement interface {
	PassportElementConstructor() string
}

// Contains information about a Telegram Passport element to be saved
type InputPassportElement interface {
	InputPassportElementConstructor() string
}

// Contains the description of an error in a Telegram Passport element
type PassportElementErrorSource interface {
	PassportElementErrorSourceConstructor() string
}

// Contains the description of an error in a Telegram Passport element; for bots only
type InputPassportElementErrorSource interface {
	InputPassportElementErrorSourceConstructor() string
}

// Contains the content of a message
type MessageContent interface {
	MessageContentConstructor() string
}

// Represents a part of the text which must be formatted differently
type TextEntityType interface {
	TextEntityTypeConstructor() string
}

// Describes type of paid media to sent
type InputPaidMediaType interface {
	InputPaidMediaTypeConstructor() string
}

// Contains information about the time when a scheduled message will be sent
type MessageSchedulingState interface {
	MessageSchedulingStateConstructor() string
}

// Describes when a message will be self-destructed
type MessageSelfDestructType interface {
	MessageSelfDestructTypeConstructor() string
}

// The content of a message to send
type InputMessageContent interface {
	InputMessageContentConstructor() string
}

// Represents a filter for message search results
type SearchMessagesFilter interface {
	SearchMessagesFilterConstructor() string
}

// Describes the different types of activity in a chat
type ChatAction interface {
	ChatActionConstructor() string
}

// Describes the last time the user was online
type UserStatus interface {
	UserStatusConstructor() string
}

// Describes source of stickers for an emoji category
type EmojiCategorySource interface {
	EmojiCategorySourceConstructor() string
}

// Describes type of emoji category
type EmojiCategoryType interface {
	EmojiCategoryTypeConstructor() string
}

// Describes type of clickable area on a story media
type StoryAreaType interface {
	StoryAreaTypeConstructor() string
}

// Describes type of clickable area on a story media to be added
type InputStoryAreaType interface {
	InputStoryAreaTypeConstructor() string
}

// Contains the content of a story
type StoryContent interface {
	StoryContentConstructor() string
}

// The content of a story to send
type InputStoryContent interface {
	InputStoryContentConstructor() string
}

// Describes a list of stories
type StoryList interface {
	StoryListConstructor() string
}

// Contains information about the origin of a story that was reposted
type StoryOrigin interface {
	StoryOriginConstructor() string
}

// Describes type of interaction with a story
type StoryInteractionType interface {
	StoryInteractionTypeConstructor() string
}

// Describes a public forward or repost of a story
type PublicForward interface {
	PublicForwardConstructor() string
}

// Describes source of a chat boost
type ChatBoostSource interface {
	ChatBoostSourceConstructor() string
}

// Describes the reason why a code needs to be re-sent
type ResendCodeReason interface {
	ResendCodeReasonConstructor() string
}

// Describes the reason why a call was discarded
type CallDiscardReason interface {
	CallDiscardReasonConstructor() string
}

// Describes the type of call server
type CallServerType interface {
	CallServerTypeConstructor() string
}

// Describes the current call state
type CallState interface {
	CallStateConstructor() string
}

// Describes the quality of a group call video
type GroupCallVideoQuality interface {
	GroupCallVideoQualityConstructor() string
}

// Describes the exact type of problem with a call
type CallProblem interface {
	CallProblemConstructor() string
}

// Contains settings for Firebase Authentication in the official applications
type FirebaseAuthenticationSettings interface {
	FirebaseAuthenticationSettingsConstructor() string
}

// Describes why the current user can't add reactions to the message, despite some other users can
type ReactionUnavailabilityReason interface {
	ReactionUnavailabilityReasonConstructor() string
}

// Contains animated stickers which must be used for dice animation rendering
type DiceStickers interface {
	DiceStickersConstructor() string
}

// Describes result of speech recognition in a voice note
type SpeechRecognitionResult interface {
	SpeechRecognitionResultConstructor() string
}

// Describes a reason why a bot was allowed to write messages to the current user
type BotWriteAccessAllowReason interface {
	BotWriteAccessAllowReasonConstructor() string
}

// Describes the target chat to be opened
type TargetChat interface {
	TargetChatConstructor() string
}

// Represents a single result of an inline query; for bots only
type InputInlineQueryResult interface {
	InputInlineQueryResultConstructor() string
}

// Represents a single result of an inline query
type InlineQueryResult interface {
	InlineQueryResultConstructor() string
}

// Represents type of button in results of inline query
type InlineQueryResultsButtonType interface {
	InlineQueryResultsButtonTypeConstructor() string
}

// Represents a payload of a callback query
type CallbackQueryPayload interface {
	CallbackQueryPayloadConstructor() string
}

// Represents a chat event
type ChatEventAction interface {
	ChatEventActionConstructor() string
}

// Represents the value of a string in a language pack
type LanguagePackStringValue interface {
	LanguagePackStringValueConstructor() string
}

// Describes type of limit, increased for Premium users
type PremiumLimitType interface {
	PremiumLimitTypeConstructor() string
}

// Describes a feature available to Premium users
type PremiumFeature interface {
	PremiumFeatureConstructor() string
}

// Describes a feature available to Business user accounts
type BusinessFeature interface {
	BusinessFeatureConstructor() string
}

// Describes a story feature available to Premium users
type PremiumStoryFeature interface {
	PremiumStoryFeatureConstructor() string
}

// Describes a source from which the Premium features screen is opened
type PremiumSource interface {
	PremiumSourceConstructor() string
}

// Describes a purpose of an in-store payment
type StorePaymentPurpose interface {
	StorePaymentPurposeConstructor() string
}

// Describes a purpose of a payment toward Telegram
type TelegramPaymentPurpose interface {
	TelegramPaymentPurposeConstructor() string
}

// Represents a data needed to subscribe for push notifications through registerDevice method. To use specific push notification service, the correct application platform must be specified and a valid server authentication data must be uploaded at https://my.telegram.org
type DeviceToken interface {
	DeviceTokenConstructor() string
}

// Describes a fill of a background
type BackgroundFill interface {
	BackgroundFillConstructor() string
}

// Describes the type of background
type BackgroundType interface {
	BackgroundTypeConstructor() string
}

// Contains information about background to set
type InputBackground interface {
	InputBackgroundConstructor() string
}

// Represents result of checking whether the current user can send a story in the specific chat
type CanSendStoryResult interface {
	CanSendStoryResultConstructor() string
}

// Represents result of checking whether the current session can be used to transfer a chat ownership to another user
type CanTransferOwnershipResult interface {
	CanTransferOwnershipResultConstructor() string
}

// Represents result of checking whether a username can be set for a chat
type CheckChatUsernameResult interface {
	CheckChatUsernameResultConstructor() string
}

// Represents result of checking whether a name can be used for a new sticker set
type CheckStickerSetNameResult interface {
	CheckStickerSetNameResultConstructor() string
}

// Represents result of 2-step verification password reset
type ResetPasswordResult interface {
	ResetPasswordResultConstructor() string
}

// Contains information about a file with messages exported from another app
type MessageFileType interface {
	MessageFileTypeConstructor() string
}

// Contains content of a push message notification
type PushMessageContent interface {
	PushMessageContentConstructor() string
}

// Contains detailed information about a notification
type NotificationType interface {
	NotificationTypeConstructor() string
}

// Describes the type of notifications in a notification group
type NotificationGroupType interface {
	NotificationGroupTypeConstructor() string
}

// Represents the value of an option
type OptionValue interface {
	OptionValueConstructor() string
}

// Represents a JSON value
type JsonValue interface {
	JsonValueConstructor() string
}

// Describes privacy settings of a story
type StoryPrivacySettings interface {
	StoryPrivacySettingsConstructor() string
}

// Represents a single rule for managing user privacy settings
type UserPrivacySettingRule interface {
	UserPrivacySettingRuleConstructor() string
}

// Describes available user privacy settings
type UserPrivacySetting interface {
	UserPrivacySettingConstructor() string
}

// Describes result of canSendMessageToUser
type CanSendMessageToUserResult interface {
	CanSendMessageToUserResultConstructor() string
}

// Represents the type of session
type SessionType interface {
	SessionTypeConstructor() string
}

// Describes the reason why a chat is reported
type ReportReason interface {
	ReportReasonConstructor() string
}

// Describes result of chat report
type ReportChatResult interface {
	ReportChatResultConstructor() string
}

// Describes result of story report
type ReportStoryResult interface {
	ReportStoryResultConstructor() string
}

// Describes an internal https://t.me or tg: link, which must be processed by the application in a special way
type InternalLinkType interface {
	InternalLinkTypeConstructor() string
}

// Describes type of block list
type BlockList interface {
	BlockListConstructor() string
}

// Represents the type of file
type FileType interface {
	FileTypeConstructor() string
}

// Represents the type of network
type NetworkType interface {
	NetworkTypeConstructor() string
}

// Contains statistics about network usage
type NetworkStatisticsEntry interface {
	NetworkStatisticsEntryConstructor() string
}

// Describes scope of autosave settings
type AutosaveSettingsScope interface {
	AutosaveSettingsScopeConstructor() string
}

// Describes the current state of the connection to Telegram servers
type ConnectionState interface {
	ConnectionStateConstructor() string
}

// Represents the categories of chats for which a list of frequently used chats can be retrieved
type TopChatCategory interface {
	TopChatCategoryConstructor() string
}

// Describes the type of URL linking to an internal Telegram entity
type TMeUrlType interface {
	TMeUrlTypeConstructor() string
}

// Describes an action suggested to the current user
type SuggestedAction interface {
	SuggestedActionConstructor() string
}

// Describes the way the text needs to be parsed for text entities
type TextParseMode interface {
	TextParseModeConstructor() string
}

// Describes the type of proxy server
type ProxyType interface {
	ProxyTypeConstructor() string
}

// Describes a statistical graph
type StatisticalGraph interface {
	StatisticalGraphConstructor() string
}

// Describes type of object, for which statistics are provided
type ChatStatisticsObjectType interface {
	ChatStatisticsObjectTypeConstructor() string
}

// Contains a detailed statistics about a chat
type ChatStatistics interface {
	ChatStatisticsConstructor() string
}

// Describes state of a revenue withdrawal
type RevenueWithdrawalState interface {
	RevenueWithdrawalStateConstructor() string
}

// Describes type of transaction for revenue earned from sponsored messages in a chat
type ChatRevenueTransactionType interface {
	ChatRevenueTransactionTypeConstructor() string
}

// Represents a vector path command
type VectorPathCommand interface {
	VectorPathCommandConstructor() string
}

// Represents the scope to which bot commands are relevant
type BotCommandScope interface {
	BotCommandScopeConstructor() string
}

// Describes type of the request for which a code is sent to a phone number
type PhoneNumberCodeType interface {
	PhoneNumberCodeTypeConstructor() string
}

// Contains notifications about data changes
type Update interface {
	UpdateConstructor() string
}

// Describes a stream to which TDLib internal log is written
type LogStream interface {
	LogStreamConstructor() string
}

// An object of this type can be returned on every function call, in case of an error
type Error struct {
	meta
	// Error code; subject to future changes. If the error code is 406, the error message must not be processed in any way and must not be displayed to the user
	Code int32 `json:"code"`
	// Error message; subject to future changes
	Message string `json:"message"`
}

func (entity *Error) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Error

	return json.Marshal((*stub)(entity))
}

func (*Error) GetType() string {
	return TypeError
}

func (*Error) GetConstructor() string {
	return ConstructorError
}

// An object of this type is returned on a successful function call for certain functions
type Ok struct {
	meta
}

func (entity *Ok) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Ok

	return json.Marshal((*stub)(entity))
}

func (*Ok) GetType() string {
	return TypeOk
}

func (*Ok) GetConstructor() string {
	return ConstructorOk
}

// A digit-only authentication code is delivered via a private Telegram message, which can be viewed from another active session
type AuthenticationCodeTypeTelegramMessage struct {
	meta
	// Length of the code
	Length int32 `json:"length"`
}

func (entity *AuthenticationCodeTypeTelegramMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeTypeTelegramMessage

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeTypeTelegramMessage) GetType() string {
	return TypeAuthenticationCodeType
}

func (*AuthenticationCodeTypeTelegramMessage) GetConstructor() string {
	return ConstructorAuthenticationCodeTypeTelegramMessage
}

func (*AuthenticationCodeTypeTelegramMessage) AuthenticationCodeTypeConstructor() string {
	return ConstructorAuthenticationCodeTypeTelegramMessage
}

// A digit-only authentication code is delivered via an SMS message to the specified phone number; non-official applications may not receive this type of code
type AuthenticationCodeTypeSms struct {
	meta
	// Length of the code
	Length int32 `json:"length"`
}

func (entity *AuthenticationCodeTypeSms) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeTypeSms

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeTypeSms) GetType() string {
	return TypeAuthenticationCodeType
}

func (*AuthenticationCodeTypeSms) GetConstructor() string {
	return ConstructorAuthenticationCodeTypeSms
}

func (*AuthenticationCodeTypeSms) AuthenticationCodeTypeConstructor() string {
	return ConstructorAuthenticationCodeTypeSms
}

// An authentication code is a word delivered via an SMS message to the specified phone number; non-official applications may not receive this type of code
type AuthenticationCodeTypeSmsWord struct {
	meta
	// The first letters of the word if known
	FirstLetter string `json:"first_letter"`
}

func (entity *AuthenticationCodeTypeSmsWord) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeTypeSmsWord

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeTypeSmsWord) GetType() string {
	return TypeAuthenticationCodeType
}

func (*AuthenticationCodeTypeSmsWord) GetConstructor() string {
	return ConstructorAuthenticationCodeTypeSmsWord
}

func (*AuthenticationCodeTypeSmsWord) AuthenticationCodeTypeConstructor() string {
	return ConstructorAuthenticationCodeTypeSmsWord
}

// An authentication code is a phrase from multiple words delivered via an SMS message to the specified phone number; non-official applications may not receive this type of code
type AuthenticationCodeTypeSmsPhrase struct {
	meta
	// The first word of the phrase if known
	FirstWord string `json:"first_word"`
}

func (entity *AuthenticationCodeTypeSmsPhrase) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeTypeSmsPhrase

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeTypeSmsPhrase) GetType() string {
	return TypeAuthenticationCodeType
}

func (*AuthenticationCodeTypeSmsPhrase) GetConstructor() string {
	return ConstructorAuthenticationCodeTypeSmsPhrase
}

func (*AuthenticationCodeTypeSmsPhrase) AuthenticationCodeTypeConstructor() string {
	return ConstructorAuthenticationCodeTypeSmsPhrase
}

// A digit-only authentication code is delivered via a phone call to the specified phone number
type AuthenticationCodeTypeCall struct {
	meta
	// Length of the code
	Length int32 `json:"length"`
}

func (entity *AuthenticationCodeTypeCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeTypeCall

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeTypeCall) GetType() string {
	return TypeAuthenticationCodeType
}

func (*AuthenticationCodeTypeCall) GetConstructor() string {
	return ConstructorAuthenticationCodeTypeCall
}

func (*AuthenticationCodeTypeCall) AuthenticationCodeTypeConstructor() string {
	return ConstructorAuthenticationCodeTypeCall
}

// An authentication code is delivered by an immediately canceled call to the specified phone number. The phone number that calls is the code that must be entered automatically
type AuthenticationCodeTypeFlashCall struct {
	meta
	// Pattern of the phone number from which the call will be made
	Pattern string `json:"pattern"`
}

func (entity *AuthenticationCodeTypeFlashCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeTypeFlashCall

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeTypeFlashCall) GetType() string {
	return TypeAuthenticationCodeType
}

func (*AuthenticationCodeTypeFlashCall) GetConstructor() string {
	return ConstructorAuthenticationCodeTypeFlashCall
}

func (*AuthenticationCodeTypeFlashCall) AuthenticationCodeTypeConstructor() string {
	return ConstructorAuthenticationCodeTypeFlashCall
}

// An authentication code is delivered by an immediately canceled call to the specified phone number. The last digits of the phone number that calls are the code that must be entered manually by the user
type AuthenticationCodeTypeMissedCall struct {
	meta
	// Prefix of the phone number from which the call will be made
	PhoneNumberPrefix string `json:"phone_number_prefix"`
	// Number of digits in the code, excluding the prefix
	Length int32 `json:"length"`
}

func (entity *AuthenticationCodeTypeMissedCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeTypeMissedCall

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeTypeMissedCall) GetType() string {
	return TypeAuthenticationCodeType
}

func (*AuthenticationCodeTypeMissedCall) GetConstructor() string {
	return ConstructorAuthenticationCodeTypeMissedCall
}

func (*AuthenticationCodeTypeMissedCall) AuthenticationCodeTypeConstructor() string {
	return ConstructorAuthenticationCodeTypeMissedCall
}

// A digit-only authentication code is delivered to https://fragment.com. The user must be logged in there via a wallet owning the phone number's NFT
type AuthenticationCodeTypeFragment struct {
	meta
	// URL to open to receive the code
	Url string `json:"url"`
	// Length of the code
	Length int32 `json:"length"`
}

func (entity *AuthenticationCodeTypeFragment) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeTypeFragment

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeTypeFragment) GetType() string {
	return TypeAuthenticationCodeType
}

func (*AuthenticationCodeTypeFragment) GetConstructor() string {
	return ConstructorAuthenticationCodeTypeFragment
}

func (*AuthenticationCodeTypeFragment) AuthenticationCodeTypeConstructor() string {
	return ConstructorAuthenticationCodeTypeFragment
}

// A digit-only authentication code is delivered via Firebase Authentication to the official Android application
type AuthenticationCodeTypeFirebaseAndroid struct {
	meta
	// Parameters to be used for device verification
	DeviceVerificationParameters FirebaseDeviceVerificationParameters `json:"device_verification_parameters"`
	// Length of the code
	Length int32 `json:"length"`
}

func (entity *AuthenticationCodeTypeFirebaseAndroid) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeTypeFirebaseAndroid

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeTypeFirebaseAndroid) GetType() string {
	return TypeAuthenticationCodeType
}

func (*AuthenticationCodeTypeFirebaseAndroid) GetConstructor() string {
	return ConstructorAuthenticationCodeTypeFirebaseAndroid
}

func (*AuthenticationCodeTypeFirebaseAndroid) AuthenticationCodeTypeConstructor() string {
	return ConstructorAuthenticationCodeTypeFirebaseAndroid
}

func (authenticationCodeTypeFirebaseAndroid *AuthenticationCodeTypeFirebaseAndroid) UnmarshalJSON(data []byte) error {
	var tmp struct {
		DeviceVerificationParameters json.RawMessage `json:"device_verification_parameters"`
		Length                       int32           `json:"length"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	authenticationCodeTypeFirebaseAndroid.Length = tmp.Length

	fieldDeviceVerificationParameters, _ := UnmarshalFirebaseDeviceVerificationParameters(tmp.DeviceVerificationParameters)
	authenticationCodeTypeFirebaseAndroid.DeviceVerificationParameters = fieldDeviceVerificationParameters

	return nil
}

// A digit-only authentication code is delivered via Firebase Authentication to the official iOS application
type AuthenticationCodeTypeFirebaseIos struct {
	meta
	// Receipt of successful application token validation to compare with receipt from push notification
	Receipt string `json:"receipt"`
	// Time after the next authentication method is expected to be used if verification push notification isn't received, in seconds
	PushTimeout int32 `json:"push_timeout"`
	// Length of the code
	Length int32 `json:"length"`
}

func (entity *AuthenticationCodeTypeFirebaseIos) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeTypeFirebaseIos

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeTypeFirebaseIos) GetType() string {
	return TypeAuthenticationCodeType
}

func (*AuthenticationCodeTypeFirebaseIos) GetConstructor() string {
	return ConstructorAuthenticationCodeTypeFirebaseIos
}

func (*AuthenticationCodeTypeFirebaseIos) AuthenticationCodeTypeConstructor() string {
	return ConstructorAuthenticationCodeTypeFirebaseIos
}

// Information about the authentication code that was sent
type AuthenticationCodeInfo struct {
	meta
	// A phone number that is being authenticated
	PhoneNumber string `json:"phone_number"`
	// The way the code was sent to the user
	Type AuthenticationCodeType `json:"type"`
	// The way the next code will be sent to the user; may be null
	NextType AuthenticationCodeType `json:"next_type"`
	// Timeout before the code can be re-sent, in seconds
	Timeout int32 `json:"timeout"`
}

func (entity *AuthenticationCodeInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthenticationCodeInfo

	return json.Marshal((*stub)(entity))
}

func (*AuthenticationCodeInfo) GetType() string {
	return TypeAuthenticationCodeInfo
}

func (*AuthenticationCodeInfo) GetConstructor() string {
	return ConstructorAuthenticationCodeInfo
}

func (authenticationCodeInfo *AuthenticationCodeInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		PhoneNumber string          `json:"phone_number"`
		Type        json.RawMessage `json:"type"`
		NextType    json.RawMessage `json:"next_type"`
		Timeout     int32           `json:"timeout"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	authenticationCodeInfo.PhoneNumber = tmp.PhoneNumber
	authenticationCodeInfo.Timeout = tmp.Timeout

	fieldType, _ := UnmarshalAuthenticationCodeType(tmp.Type)
	authenticationCodeInfo.Type = fieldType

	fieldNextType, _ := UnmarshalAuthenticationCodeType(tmp.NextType)
	authenticationCodeInfo.NextType = fieldNextType

	return nil
}

// Information about the email address authentication code that was sent
type EmailAddressAuthenticationCodeInfo struct {
	meta
	// Pattern of the email address to which an authentication code was sent
	EmailAddressPattern string `json:"email_address_pattern"`
	// Length of the code; 0 if unknown
	Length int32 `json:"length"`
}

func (entity *EmailAddressAuthenticationCodeInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmailAddressAuthenticationCodeInfo

	return json.Marshal((*stub)(entity))
}

func (*EmailAddressAuthenticationCodeInfo) GetType() string {
	return TypeEmailAddressAuthenticationCodeInfo
}

func (*EmailAddressAuthenticationCodeInfo) GetConstructor() string {
	return ConstructorEmailAddressAuthenticationCodeInfo
}

// An authentication code delivered to a user's email address
type EmailAddressAuthenticationCode struct {
	meta
	// The code
	Code string `json:"code"`
}

func (entity *EmailAddressAuthenticationCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmailAddressAuthenticationCode

	return json.Marshal((*stub)(entity))
}

func (*EmailAddressAuthenticationCode) GetType() string {
	return TypeEmailAddressAuthentication
}

func (*EmailAddressAuthenticationCode) GetConstructor() string {
	return ConstructorEmailAddressAuthenticationCode
}

func (*EmailAddressAuthenticationCode) EmailAddressAuthenticationConstructor() string {
	return ConstructorEmailAddressAuthenticationCode
}

// An authentication token received through Apple ID
type EmailAddressAuthenticationAppleId struct {
	meta
	// The token
	Token string `json:"token"`
}

func (entity *EmailAddressAuthenticationAppleId) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmailAddressAuthenticationAppleId

	return json.Marshal((*stub)(entity))
}

func (*EmailAddressAuthenticationAppleId) GetType() string {
	return TypeEmailAddressAuthentication
}

func (*EmailAddressAuthenticationAppleId) GetConstructor() string {
	return ConstructorEmailAddressAuthenticationAppleId
}

func (*EmailAddressAuthenticationAppleId) EmailAddressAuthenticationConstructor() string {
	return ConstructorEmailAddressAuthenticationAppleId
}

// An authentication token received through Google ID
type EmailAddressAuthenticationGoogleId struct {
	meta
	// The token
	Token string `json:"token"`
}

func (entity *EmailAddressAuthenticationGoogleId) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmailAddressAuthenticationGoogleId

	return json.Marshal((*stub)(entity))
}

func (*EmailAddressAuthenticationGoogleId) GetType() string {
	return TypeEmailAddressAuthentication
}

func (*EmailAddressAuthenticationGoogleId) GetConstructor() string {
	return ConstructorEmailAddressAuthenticationGoogleId
}

func (*EmailAddressAuthenticationGoogleId) EmailAddressAuthenticationConstructor() string {
	return ConstructorEmailAddressAuthenticationGoogleId
}

// Email address can be reset after the given period. Call resetAuthenticationEmailAddress to reset it and allow the user to authorize with a code sent to the user's phone number
type EmailAddressResetStateAvailable struct {
	meta
	// Time required to wait before the email address can be reset; 0 if the user is subscribed to Telegram Premium
	WaitPeriod int32 `json:"wait_period"`
}

func (entity *EmailAddressResetStateAvailable) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmailAddressResetStateAvailable

	return json.Marshal((*stub)(entity))
}

func (*EmailAddressResetStateAvailable) GetType() string {
	return TypeEmailAddressResetState
}

func (*EmailAddressResetStateAvailable) GetConstructor() string {
	return ConstructorEmailAddressResetStateAvailable
}

func (*EmailAddressResetStateAvailable) EmailAddressResetStateConstructor() string {
	return ConstructorEmailAddressResetStateAvailable
}

// Email address reset has already been requested. Call resetAuthenticationEmailAddress to check whether immediate reset is possible
type EmailAddressResetStatePending struct {
	meta
	// Left time before the email address will be reset, in seconds. updateAuthorizationState is not sent when this field changes
	ResetIn int32 `json:"reset_in"`
}

func (entity *EmailAddressResetStatePending) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmailAddressResetStatePending

	return json.Marshal((*stub)(entity))
}

func (*EmailAddressResetStatePending) GetType() string {
	return TypeEmailAddressResetState
}

func (*EmailAddressResetStatePending) GetConstructor() string {
	return ConstructorEmailAddressResetStatePending
}

func (*EmailAddressResetStatePending) EmailAddressResetStateConstructor() string {
	return ConstructorEmailAddressResetStatePending
}

// Represents a part of the text that needs to be formatted in some unusual way
type TextEntity struct {
	meta
	// Offset of the entity, in UTF-16 code units
	Offset int32 `json:"offset"`
	// Length of the entity, in UTF-16 code units
	Length int32 `json:"length"`
	// Type of the entity
	Type TextEntityType `json:"type"`
}

func (entity *TextEntity) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntity

	return json.Marshal((*stub)(entity))
}

func (*TextEntity) GetType() string {
	return TypeTextEntity
}

func (*TextEntity) GetConstructor() string {
	return ConstructorTextEntity
}

func (textEntity *TextEntity) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Offset int32           `json:"offset"`
		Length int32           `json:"length"`
		Type   json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	textEntity.Offset = tmp.Offset
	textEntity.Length = tmp.Length

	fieldType, _ := UnmarshalTextEntityType(tmp.Type)
	textEntity.Type = fieldType

	return nil
}

// Contains a list of text entities
type TextEntities struct {
	meta
	// List of text entities
	Entities []*TextEntity `json:"entities"`
}

func (entity *TextEntities) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntities

	return json.Marshal((*stub)(entity))
}

func (*TextEntities) GetType() string {
	return TypeTextEntities
}

func (*TextEntities) GetConstructor() string {
	return ConstructorTextEntities
}

// A text with some entities
type FormattedText struct {
	meta
	// The text
	Text string `json:"text"`
	// Entities contained in the text. Entities can be nested, but must not mutually intersect with each other. Pre, Code and PreCode entities can't contain other entities. BlockQuote entities can't contain other BlockQuote entities. Bold, Italic, Underline, Strikethrough, and Spoiler entities can contain and can be part of any other entities. All other entities can't contain each other
	Entities []*TextEntity `json:"entities"`
}

func (entity *FormattedText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FormattedText

	return json.Marshal((*stub)(entity))
}

func (*FormattedText) GetType() string {
	return TypeFormattedText
}

func (*FormattedText) GetConstructor() string {
	return ConstructorFormattedText
}

// Contains Telegram terms of service
type TermsOfService struct {
	meta
	// Text of the terms of service
	Text *FormattedText `json:"text"`
	// The minimum age of a user to be able to accept the terms; 0 if age isn't restricted
	MinUserAge int32 `json:"min_user_age"`
	// True, if a blocking popup with terms of service must be shown to the user
	ShowPopup bool `json:"show_popup"`
}

func (entity *TermsOfService) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TermsOfService

	return json.Marshal((*stub)(entity))
}

func (*TermsOfService) GetType() string {
	return TypeTermsOfService
}

func (*TermsOfService) GetConstructor() string {
	return ConstructorTermsOfService
}

// Initialization parameters are needed. Call setTdlibParameters to provide them
type AuthorizationStateWaitTdlibParameters struct {
	meta
}

func (entity *AuthorizationStateWaitTdlibParameters) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateWaitTdlibParameters

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateWaitTdlibParameters) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateWaitTdlibParameters) GetConstructor() string {
	return ConstructorAuthorizationStateWaitTdlibParameters
}

func (*AuthorizationStateWaitTdlibParameters) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateWaitTdlibParameters
}

// TDLib needs the user's phone number to authorize. Call setAuthenticationPhoneNumber to provide the phone number, or use requestQrCodeAuthentication or checkAuthenticationBotToken for other authentication options
type AuthorizationStateWaitPhoneNumber struct {
	meta
}

func (entity *AuthorizationStateWaitPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateWaitPhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateWaitPhoneNumber) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateWaitPhoneNumber) GetConstructor() string {
	return ConstructorAuthorizationStateWaitPhoneNumber
}

func (*AuthorizationStateWaitPhoneNumber) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateWaitPhoneNumber
}

// TDLib needs the user's email address to authorize. Call setAuthenticationEmailAddress to provide the email address, or directly call checkAuthenticationEmailCode with Apple ID/Google ID token if allowed
type AuthorizationStateWaitEmailAddress struct {
	meta
	// True, if authorization through Apple ID is allowed
	AllowAppleId bool `json:"allow_apple_id"`
	// True, if authorization through Google ID is allowed
	AllowGoogleId bool `json:"allow_google_id"`
}

func (entity *AuthorizationStateWaitEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateWaitEmailAddress

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateWaitEmailAddress) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateWaitEmailAddress) GetConstructor() string {
	return ConstructorAuthorizationStateWaitEmailAddress
}

func (*AuthorizationStateWaitEmailAddress) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateWaitEmailAddress
}

// TDLib needs the user's authentication code sent to an email address to authorize. Call checkAuthenticationEmailCode to provide the code
type AuthorizationStateWaitEmailCode struct {
	meta
	// True, if authorization through Apple ID is allowed
	AllowAppleId bool `json:"allow_apple_id"`
	// True, if authorization through Google ID is allowed
	AllowGoogleId bool `json:"allow_google_id"`
	// Information about the sent authentication code
	CodeInfo *EmailAddressAuthenticationCodeInfo `json:"code_info"`
	// Reset state of the email address; may be null if the email address can't be reset
	EmailAddressResetState EmailAddressResetState `json:"email_address_reset_state"`
}

func (entity *AuthorizationStateWaitEmailCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateWaitEmailCode

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateWaitEmailCode) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateWaitEmailCode) GetConstructor() string {
	return ConstructorAuthorizationStateWaitEmailCode
}

func (*AuthorizationStateWaitEmailCode) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateWaitEmailCode
}

func (authorizationStateWaitEmailCode *AuthorizationStateWaitEmailCode) UnmarshalJSON(data []byte) error {
	var tmp struct {
		AllowAppleId           bool                                `json:"allow_apple_id"`
		AllowGoogleId          bool                                `json:"allow_google_id"`
		CodeInfo               *EmailAddressAuthenticationCodeInfo `json:"code_info"`
		EmailAddressResetState json.RawMessage                     `json:"email_address_reset_state"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	authorizationStateWaitEmailCode.AllowAppleId = tmp.AllowAppleId
	authorizationStateWaitEmailCode.AllowGoogleId = tmp.AllowGoogleId
	authorizationStateWaitEmailCode.CodeInfo = tmp.CodeInfo

	fieldEmailAddressResetState, _ := UnmarshalEmailAddressResetState(tmp.EmailAddressResetState)
	authorizationStateWaitEmailCode.EmailAddressResetState = fieldEmailAddressResetState

	return nil
}

// TDLib needs the user's authentication code to authorize. Call checkAuthenticationCode to check the code
type AuthorizationStateWaitCode struct {
	meta
	// Information about the authorization code that was sent
	CodeInfo *AuthenticationCodeInfo `json:"code_info"`
}

func (entity *AuthorizationStateWaitCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateWaitCode

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateWaitCode) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateWaitCode) GetConstructor() string {
	return ConstructorAuthorizationStateWaitCode
}

func (*AuthorizationStateWaitCode) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateWaitCode
}

// The user needs to confirm authorization on another logged in device by scanning a QR code with the provided link
type AuthorizationStateWaitOtherDeviceConfirmation struct {
	meta
	// A tg:// URL for the QR code. The link will be updated frequently
	Link string `json:"link"`
}

func (entity *AuthorizationStateWaitOtherDeviceConfirmation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateWaitOtherDeviceConfirmation

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateWaitOtherDeviceConfirmation) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateWaitOtherDeviceConfirmation) GetConstructor() string {
	return ConstructorAuthorizationStateWaitOtherDeviceConfirmation
}

func (*AuthorizationStateWaitOtherDeviceConfirmation) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateWaitOtherDeviceConfirmation
}

// The user is unregistered and need to accept terms of service and enter their first name and last name to finish registration. Call registerUser to accept the terms of service and provide the data
type AuthorizationStateWaitRegistration struct {
	meta
	// Telegram terms of service
	TermsOfService *TermsOfService `json:"terms_of_service"`
}

func (entity *AuthorizationStateWaitRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateWaitRegistration

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateWaitRegistration) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateWaitRegistration) GetConstructor() string {
	return ConstructorAuthorizationStateWaitRegistration
}

func (*AuthorizationStateWaitRegistration) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateWaitRegistration
}

// The user has been authorized, but needs to enter a 2-step verification password to start using the application. Call checkAuthenticationPassword to provide the password, or requestAuthenticationPasswordRecovery to recover the password, or deleteAccount to delete the account after a week
type AuthorizationStateWaitPassword struct {
	meta
	// Hint for the password; may be empty
	PasswordHint string `json:"password_hint"`
	// True, if a recovery email address has been set up
	HasRecoveryEmailAddress bool `json:"has_recovery_email_address"`
	// True, if some Telegram Passport elements were saved
	HasPassportData bool `json:"has_passport_data"`
	// Pattern of the email address to which the recovery email was sent; empty until a recovery email has been sent
	RecoveryEmailAddressPattern string `json:"recovery_email_address_pattern"`
}

func (entity *AuthorizationStateWaitPassword) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateWaitPassword

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateWaitPassword) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateWaitPassword) GetConstructor() string {
	return ConstructorAuthorizationStateWaitPassword
}

func (*AuthorizationStateWaitPassword) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateWaitPassword
}

// The user has been successfully authorized. TDLib is now ready to answer general requests
type AuthorizationStateReady struct {
	meta
}

func (entity *AuthorizationStateReady) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateReady

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateReady) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateReady) GetConstructor() string {
	return ConstructorAuthorizationStateReady
}

func (*AuthorizationStateReady) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateReady
}

// The user is currently logging out
type AuthorizationStateLoggingOut struct {
	meta
}

func (entity *AuthorizationStateLoggingOut) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateLoggingOut

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateLoggingOut) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateLoggingOut) GetConstructor() string {
	return ConstructorAuthorizationStateLoggingOut
}

func (*AuthorizationStateLoggingOut) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateLoggingOut
}

// TDLib is closing, all subsequent queries will be answered with the error 500. Note that closing TDLib can take a while. All resources will be freed only after authorizationStateClosed has been received
type AuthorizationStateClosing struct {
	meta
}

func (entity *AuthorizationStateClosing) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateClosing

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateClosing) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateClosing) GetConstructor() string {
	return ConstructorAuthorizationStateClosing
}

func (*AuthorizationStateClosing) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateClosing
}

// TDLib client is in its final state. All databases are closed and all resources are released. No other updates will be received after this. All queries will be responded to with error code 500. To continue working, one must create a new instance of the TDLib client
type AuthorizationStateClosed struct {
	meta
}

func (entity *AuthorizationStateClosed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AuthorizationStateClosed

	return json.Marshal((*stub)(entity))
}

func (*AuthorizationStateClosed) GetType() string {
	return TypeAuthorizationState
}

func (*AuthorizationStateClosed) GetConstructor() string {
	return ConstructorAuthorizationStateClosed
}

func (*AuthorizationStateClosed) AuthorizationStateConstructor() string {
	return ConstructorAuthorizationStateClosed
}

// Device verification must be performed with the SafetyNet Attestation API
type FirebaseDeviceVerificationParametersSafetyNet struct {
	meta
	// Nonce to pass to the SafetyNet Attestation API
	Nonce []byte `json:"nonce"`
}

func (entity *FirebaseDeviceVerificationParametersSafetyNet) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FirebaseDeviceVerificationParametersSafetyNet

	return json.Marshal((*stub)(entity))
}

func (*FirebaseDeviceVerificationParametersSafetyNet) GetType() string {
	return TypeFirebaseDeviceVerificationParameters
}

func (*FirebaseDeviceVerificationParametersSafetyNet) GetConstructor() string {
	return ConstructorFirebaseDeviceVerificationParametersSafetyNet
}

func (*FirebaseDeviceVerificationParametersSafetyNet) FirebaseDeviceVerificationParametersConstructor() string {
	return ConstructorFirebaseDeviceVerificationParametersSafetyNet
}

// Device verification must be performed with the classic Play Integrity verification (https://developer.android.com/google/play/integrity/classic)
type FirebaseDeviceVerificationParametersPlayIntegrity struct {
	meta
	// Base64url-encoded nonce to pass to the Play Integrity API
	Nonce string `json:"nonce"`
	// Cloud project number to pass to the Play Integrity API
	CloudProjectNumber JsonInt64 `json:"cloud_project_number"`
}

func (entity *FirebaseDeviceVerificationParametersPlayIntegrity) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FirebaseDeviceVerificationParametersPlayIntegrity

	return json.Marshal((*stub)(entity))
}

func (*FirebaseDeviceVerificationParametersPlayIntegrity) GetType() string {
	return TypeFirebaseDeviceVerificationParameters
}

func (*FirebaseDeviceVerificationParametersPlayIntegrity) GetConstructor() string {
	return ConstructorFirebaseDeviceVerificationParametersPlayIntegrity
}

func (*FirebaseDeviceVerificationParametersPlayIntegrity) FirebaseDeviceVerificationParametersConstructor() string {
	return ConstructorFirebaseDeviceVerificationParametersPlayIntegrity
}

// Represents the current state of 2-step verification
type PasswordState struct {
	meta
	// True, if a 2-step verification password is set
	HasPassword bool `json:"has_password"`
	// Hint for the password; may be empty
	PasswordHint string `json:"password_hint"`
	// True, if a recovery email is set
	HasRecoveryEmailAddress bool `json:"has_recovery_email_address"`
	// True, if some Telegram Passport elements were saved
	HasPassportData bool `json:"has_passport_data"`
	// Information about the recovery email address to which the confirmation email was sent; may be null
	RecoveryEmailAddressCodeInfo *EmailAddressAuthenticationCodeInfo `json:"recovery_email_address_code_info"`
	// Pattern of the email address set up for logging in
	LoginEmailAddressPattern string `json:"login_email_address_pattern"`
	// If not 0, point in time (Unix timestamp) after which the 2-step verification password can be reset immediately using resetPassword
	PendingResetDate int32 `json:"pending_reset_date"`
}

func (entity *PasswordState) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PasswordState

	return json.Marshal((*stub)(entity))
}

func (*PasswordState) GetType() string {
	return TypePasswordState
}

func (*PasswordState) GetConstructor() string {
	return ConstructorPasswordState
}

// Contains information about the current recovery email address
type RecoveryEmailAddress struct {
	meta
	// Recovery email address
	RecoveryEmailAddress string `json:"recovery_email_address"`
}

func (entity *RecoveryEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RecoveryEmailAddress

	return json.Marshal((*stub)(entity))
}

func (*RecoveryEmailAddress) GetType() string {
	return TypeRecoveryEmailAddress
}

func (*RecoveryEmailAddress) GetConstructor() string {
	return ConstructorRecoveryEmailAddress
}

// Returns information about the availability of a temporary password, which can be used for payments
type TemporaryPasswordState struct {
	meta
	// True, if a temporary password is available
	HasPassword bool `json:"has_password"`
	// Time left before the temporary password expires, in seconds
	ValidFor int32 `json:"valid_for"`
}

func (entity *TemporaryPasswordState) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TemporaryPasswordState

	return json.Marshal((*stub)(entity))
}

func (*TemporaryPasswordState) GetType() string {
	return TypeTemporaryPasswordState
}

func (*TemporaryPasswordState) GetConstructor() string {
	return ConstructorTemporaryPasswordState
}

// Represents a local file
type LocalFile struct {
	meta
	// Local path to the locally available file part; may be empty
	Path string `json:"path"`
	// True, if it is possible to download or generate the file
	CanBeDownloaded bool `json:"can_be_downloaded"`
	// True, if the file can be deleted
	CanBeDeleted bool `json:"can_be_deleted"`
	// True, if the file is currently being downloaded (or a local copy is being generated by some other means)
	IsDownloadingActive bool `json:"is_downloading_active"`
	// True, if the local copy is fully available
	IsDownloadingCompleted bool `json:"is_downloading_completed"`
	// Download will be started from this offset. downloaded_prefix_size is calculated from this offset
	DownloadOffset int64 `json:"download_offset"`
	// If is_downloading_completed is false, then only some prefix of the file starting from download_offset is ready to be read. downloaded_prefix_size is the size of that prefix in bytes
	DownloadedPrefixSize int64 `json:"downloaded_prefix_size"`
	// Total downloaded file size, in bytes. Can be used only for calculating download progress. The actual file size may be bigger, and some parts of it may contain garbage
	DownloadedSize int64 `json:"downloaded_size"`
}

func (entity *LocalFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LocalFile

	return json.Marshal((*stub)(entity))
}

func (*LocalFile) GetType() string {
	return TypeLocalFile
}

func (*LocalFile) GetConstructor() string {
	return ConstructorLocalFile
}

// Represents a remote file
type RemoteFile struct {
	meta
	// Remote file identifier; may be empty. Can be used by the current user across application restarts or even from other devices. Uniquely identifies a file, but a file can have a lot of different valid identifiers. If the identifier starts with "http://" or "https://", it represents the HTTP URL of the file. TDLib is currently unable to download files if only their URL is known. If downloadFile/addFileToDownloads is called on such a file or if it is sent to a secret chat, TDLib starts a file generation process by sending updateFileGenerationStart to the application with the HTTP URL in the original_path and "#url#" as the conversion string. Application must generate the file by downloading it to the specified location
	Id string `json:"id"`
	// Unique file identifier; may be empty if unknown. The unique file identifier which is the same for the same file even for different users and is persistent over time
	UniqueId string `json:"unique_id"`
	// True, if the file is currently being uploaded (or a remote copy is being generated by some other means)
	IsUploadingActive bool `json:"is_uploading_active"`
	// True, if a remote copy is fully available
	IsUploadingCompleted bool `json:"is_uploading_completed"`
	// Size of the remote available part of the file, in bytes; 0 if unknown
	UploadedSize int64 `json:"uploaded_size"`
}

func (entity *RemoteFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RemoteFile

	return json.Marshal((*stub)(entity))
}

func (*RemoteFile) GetType() string {
	return TypeRemoteFile
}

func (*RemoteFile) GetConstructor() string {
	return ConstructorRemoteFile
}

// Represents a file
type File struct {
	meta
	// Unique file identifier
	Id int32 `json:"id"`
	// File size, in bytes; 0 if unknown
	Size int64 `json:"size"`
	// Approximate file size in bytes in case the exact file size is unknown. Can be used to show download/upload progress
	ExpectedSize int64 `json:"expected_size"`
	// Information about the local copy of the file
	Local *LocalFile `json:"local"`
	// Information about the remote copy of the file
	Remote *RemoteFile `json:"remote"`
}

func (entity *File) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub File

	return json.Marshal((*stub)(entity))
}

func (*File) GetType() string {
	return TypeFile
}

func (*File) GetConstructor() string {
	return ConstructorFile
}

// A file defined by its unique identifier
type InputFileId struct {
	meta
	// Unique file identifier
	Id int32 `json:"id"`
}

func (entity *InputFileId) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputFileId

	return json.Marshal((*stub)(entity))
}

func (*InputFileId) GetType() string {
	return TypeInputFile
}

func (*InputFileId) GetConstructor() string {
	return ConstructorInputFileId
}

func (*InputFileId) InputFileConstructor() string {
	return ConstructorInputFileId
}

// A file defined by its remote identifier. The remote identifier is guaranteed to be usable only if the corresponding file is still accessible to the user and known to TDLib. For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the application
type InputFileRemote struct {
	meta
	// Remote file identifier
	Id string `json:"id"`
}

func (entity *InputFileRemote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputFileRemote

	return json.Marshal((*stub)(entity))
}

func (*InputFileRemote) GetType() string {
	return TypeInputFile
}

func (*InputFileRemote) GetConstructor() string {
	return ConstructorInputFileRemote
}

func (*InputFileRemote) InputFileConstructor() string {
	return ConstructorInputFileRemote
}

// A file defined by a local path
type InputFileLocal struct {
	meta
	// Local path to the file
	Path string `json:"path"`
}

func (entity *InputFileLocal) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputFileLocal

	return json.Marshal((*stub)(entity))
}

func (*InputFileLocal) GetType() string {
	return TypeInputFile
}

func (*InputFileLocal) GetConstructor() string {
	return ConstructorInputFileLocal
}

func (*InputFileLocal) InputFileConstructor() string {
	return ConstructorInputFileLocal
}

// A file generated by the application. The application must handle updates updateFileGenerationStart and updateFileGenerationStop to generate the file when asked by TDLib
type InputFileGenerated struct {
	meta
	// Local path to a file from which the file is generated. The path doesn't have to be a valid path and is used by TDLib only to detect name and MIME type of the generated file
	OriginalPath string `json:"original_path"`
	// String specifying the conversion applied to the original file; must be persistent across application restarts. Conversions beginning with '#' are reserved for internal TDLib usage
	Conversion string `json:"conversion"`
	// Expected size of the generated file, in bytes; pass 0 if unknown
	ExpectedSize int64 `json:"expected_size"`
}

func (entity *InputFileGenerated) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputFileGenerated

	return json.Marshal((*stub)(entity))
}

func (*InputFileGenerated) GetType() string {
	return TypeInputFile
}

func (*InputFileGenerated) GetConstructor() string {
	return ConstructorInputFileGenerated
}

func (*InputFileGenerated) InputFileConstructor() string {
	return ConstructorInputFileGenerated
}

// Describes an image in JPEG format
type PhotoSize struct {
	meta
	// Image type (see https://core.telegram.org/constructor/photoSize)
	Type string `json:"type"`
	// Information about the image file
	Photo *File `json:"photo"`
	// Image width
	Width int32 `json:"width"`
	// Image height
	Height int32 `json:"height"`
	// Sizes of progressive JPEG file prefixes, which can be used to preliminarily show the image; in bytes
	ProgressiveSizes []int32 `json:"progressive_sizes"`
}

func (entity *PhotoSize) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PhotoSize

	return json.Marshal((*stub)(entity))
}

func (*PhotoSize) GetType() string {
	return TypePhotoSize
}

func (*PhotoSize) GetConstructor() string {
	return ConstructorPhotoSize
}

// Thumbnail image of a very poor quality and low resolution
type Minithumbnail struct {
	meta
	// Thumbnail width, usually doesn't exceed 40
	Width int32 `json:"width"`
	// Thumbnail height, usually doesn't exceed 40
	Height int32 `json:"height"`
	// The thumbnail in JPEG format
	Data []byte `json:"data"`
}

func (entity *Minithumbnail) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Minithumbnail

	return json.Marshal((*stub)(entity))
}

func (*Minithumbnail) GetType() string {
	return TypeMinithumbnail
}

func (*Minithumbnail) GetConstructor() string {
	return ConstructorMinithumbnail
}

// The thumbnail is in JPEG format
type ThumbnailFormatJpeg struct {
	meta
}

func (entity *ThumbnailFormatJpeg) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ThumbnailFormatJpeg

	return json.Marshal((*stub)(entity))
}

func (*ThumbnailFormatJpeg) GetType() string {
	return TypeThumbnailFormat
}

func (*ThumbnailFormatJpeg) GetConstructor() string {
	return ConstructorThumbnailFormatJpeg
}

func (*ThumbnailFormatJpeg) ThumbnailFormatConstructor() string {
	return ConstructorThumbnailFormatJpeg
}

// The thumbnail is in static GIF format. It will be used only for some bot inline query results
type ThumbnailFormatGif struct {
	meta
}

func (entity *ThumbnailFormatGif) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ThumbnailFormatGif

	return json.Marshal((*stub)(entity))
}

func (*ThumbnailFormatGif) GetType() string {
	return TypeThumbnailFormat
}

func (*ThumbnailFormatGif) GetConstructor() string {
	return ConstructorThumbnailFormatGif
}

func (*ThumbnailFormatGif) ThumbnailFormatConstructor() string {
	return ConstructorThumbnailFormatGif
}

// The thumbnail is in MPEG4 format. It will be used only for some animations and videos
type ThumbnailFormatMpeg4 struct {
	meta
}

func (entity *ThumbnailFormatMpeg4) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ThumbnailFormatMpeg4

	return json.Marshal((*stub)(entity))
}

func (*ThumbnailFormatMpeg4) GetType() string {
	return TypeThumbnailFormat
}

func (*ThumbnailFormatMpeg4) GetConstructor() string {
	return ConstructorThumbnailFormatMpeg4
}

func (*ThumbnailFormatMpeg4) ThumbnailFormatConstructor() string {
	return ConstructorThumbnailFormatMpeg4
}

// The thumbnail is in PNG format. It will be used only for background patterns
type ThumbnailFormatPng struct {
	meta
}

func (entity *ThumbnailFormatPng) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ThumbnailFormatPng

	return json.Marshal((*stub)(entity))
}

func (*ThumbnailFormatPng) GetType() string {
	return TypeThumbnailFormat
}

func (*ThumbnailFormatPng) GetConstructor() string {
	return ConstructorThumbnailFormatPng
}

func (*ThumbnailFormatPng) ThumbnailFormatConstructor() string {
	return ConstructorThumbnailFormatPng
}

// The thumbnail is in TGS format. It will be used only for sticker sets
type ThumbnailFormatTgs struct {
	meta
}

func (entity *ThumbnailFormatTgs) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ThumbnailFormatTgs

	return json.Marshal((*stub)(entity))
}

func (*ThumbnailFormatTgs) GetType() string {
	return TypeThumbnailFormat
}

func (*ThumbnailFormatTgs) GetConstructor() string {
	return ConstructorThumbnailFormatTgs
}

func (*ThumbnailFormatTgs) ThumbnailFormatConstructor() string {
	return ConstructorThumbnailFormatTgs
}

// The thumbnail is in WEBM format. It will be used only for sticker sets
type ThumbnailFormatWebm struct {
	meta
}

func (entity *ThumbnailFormatWebm) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ThumbnailFormatWebm

	return json.Marshal((*stub)(entity))
}

func (*ThumbnailFormatWebm) GetType() string {
	return TypeThumbnailFormat
}

func (*ThumbnailFormatWebm) GetConstructor() string {
	return ConstructorThumbnailFormatWebm
}

func (*ThumbnailFormatWebm) ThumbnailFormatConstructor() string {
	return ConstructorThumbnailFormatWebm
}

// The thumbnail is in WEBP format. It will be used only for some stickers and sticker sets
type ThumbnailFormatWebp struct {
	meta
}

func (entity *ThumbnailFormatWebp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ThumbnailFormatWebp

	return json.Marshal((*stub)(entity))
}

func (*ThumbnailFormatWebp) GetType() string {
	return TypeThumbnailFormat
}

func (*ThumbnailFormatWebp) GetConstructor() string {
	return ConstructorThumbnailFormatWebp
}

func (*ThumbnailFormatWebp) ThumbnailFormatConstructor() string {
	return ConstructorThumbnailFormatWebp
}

// Represents a thumbnail
type Thumbnail struct {
	meta
	// Thumbnail format
	Format ThumbnailFormat `json:"format"`
	// Thumbnail width
	Width int32 `json:"width"`
	// Thumbnail height
	Height int32 `json:"height"`
	// The thumbnail
	File *File `json:"file"`
}

func (entity *Thumbnail) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Thumbnail

	return json.Marshal((*stub)(entity))
}

func (*Thumbnail) GetType() string {
	return TypeThumbnail
}

func (*Thumbnail) GetConstructor() string {
	return ConstructorThumbnail
}

func (thumbnail *Thumbnail) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Format json.RawMessage `json:"format"`
		Width  int32           `json:"width"`
		Height int32           `json:"height"`
		File   *File           `json:"file"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	thumbnail.Width = tmp.Width
	thumbnail.Height = tmp.Height
	thumbnail.File = tmp.File

	fieldFormat, _ := UnmarshalThumbnailFormat(tmp.Format)
	thumbnail.Format = fieldFormat

	return nil
}

// The mask is placed relatively to the forehead
type MaskPointForehead struct {
	meta
}

func (entity *MaskPointForehead) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MaskPointForehead

	return json.Marshal((*stub)(entity))
}

func (*MaskPointForehead) GetType() string {
	return TypeMaskPoint
}

func (*MaskPointForehead) GetConstructor() string {
	return ConstructorMaskPointForehead
}

func (*MaskPointForehead) MaskPointConstructor() string {
	return ConstructorMaskPointForehead
}

// The mask is placed relatively to the eyes
type MaskPointEyes struct {
	meta
}

func (entity *MaskPointEyes) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MaskPointEyes

	return json.Marshal((*stub)(entity))
}

func (*MaskPointEyes) GetType() string {
	return TypeMaskPoint
}

func (*MaskPointEyes) GetConstructor() string {
	return ConstructorMaskPointEyes
}

func (*MaskPointEyes) MaskPointConstructor() string {
	return ConstructorMaskPointEyes
}

// The mask is placed relatively to the mouth
type MaskPointMouth struct {
	meta
}

func (entity *MaskPointMouth) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MaskPointMouth

	return json.Marshal((*stub)(entity))
}

func (*MaskPointMouth) GetType() string {
	return TypeMaskPoint
}

func (*MaskPointMouth) GetConstructor() string {
	return ConstructorMaskPointMouth
}

func (*MaskPointMouth) MaskPointConstructor() string {
	return ConstructorMaskPointMouth
}

// The mask is placed relatively to the chin
type MaskPointChin struct {
	meta
}

func (entity *MaskPointChin) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MaskPointChin

	return json.Marshal((*stub)(entity))
}

func (*MaskPointChin) GetType() string {
	return TypeMaskPoint
}

func (*MaskPointChin) GetConstructor() string {
	return ConstructorMaskPointChin
}

func (*MaskPointChin) MaskPointConstructor() string {
	return ConstructorMaskPointChin
}

// Position on a photo where a mask is placed
type MaskPosition struct {
	meta
	// Part of the face, relative to which the mask is placed
	Point MaskPoint `json:"point"`
	// Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. (For example, -1.0 will place the mask just to the left of the default mask position)
	XShift float64 `json:"x_shift"`
	// Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. (For example, 1.0 will place the mask just below the default mask position)
	YShift float64 `json:"y_shift"`
	// Mask scaling coefficient. (For example, 2.0 means a doubled size)
	Scale float64 `json:"scale"`
}

func (entity *MaskPosition) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MaskPosition

	return json.Marshal((*stub)(entity))
}

func (*MaskPosition) GetType() string {
	return TypeMaskPosition
}

func (*MaskPosition) GetConstructor() string {
	return ConstructorMaskPosition
}

func (maskPosition *MaskPosition) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Point  json.RawMessage `json:"point"`
		XShift float64         `json:"x_shift"`
		YShift float64         `json:"y_shift"`
		Scale  float64         `json:"scale"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	maskPosition.XShift = tmp.XShift
	maskPosition.YShift = tmp.YShift
	maskPosition.Scale = tmp.Scale

	fieldPoint, _ := UnmarshalMaskPoint(tmp.Point)
	maskPosition.Point = fieldPoint

	return nil
}

// The sticker is an image in WEBP format
type StickerFormatWebp struct {
	meta
}

func (entity *StickerFormatWebp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerFormatWebp

	return json.Marshal((*stub)(entity))
}

func (*StickerFormatWebp) GetType() string {
	return TypeStickerFormat
}

func (*StickerFormatWebp) GetConstructor() string {
	return ConstructorStickerFormatWebp
}

func (*StickerFormatWebp) StickerFormatConstructor() string {
	return ConstructorStickerFormatWebp
}

// The sticker is an animation in TGS format
type StickerFormatTgs struct {
	meta
}

func (entity *StickerFormatTgs) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerFormatTgs

	return json.Marshal((*stub)(entity))
}

func (*StickerFormatTgs) GetType() string {
	return TypeStickerFormat
}

func (*StickerFormatTgs) GetConstructor() string {
	return ConstructorStickerFormatTgs
}

func (*StickerFormatTgs) StickerFormatConstructor() string {
	return ConstructorStickerFormatTgs
}

// The sticker is a video in WEBM format
type StickerFormatWebm struct {
	meta
}

func (entity *StickerFormatWebm) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerFormatWebm

	return json.Marshal((*stub)(entity))
}

func (*StickerFormatWebm) GetType() string {
	return TypeStickerFormat
}

func (*StickerFormatWebm) GetConstructor() string {
	return ConstructorStickerFormatWebm
}

func (*StickerFormatWebm) StickerFormatConstructor() string {
	return ConstructorStickerFormatWebm
}

// The sticker is a regular sticker
type StickerTypeRegular struct {
	meta
}

func (entity *StickerTypeRegular) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerTypeRegular

	return json.Marshal((*stub)(entity))
}

func (*StickerTypeRegular) GetType() string {
	return TypeStickerType
}

func (*StickerTypeRegular) GetConstructor() string {
	return ConstructorStickerTypeRegular
}

func (*StickerTypeRegular) StickerTypeConstructor() string {
	return ConstructorStickerTypeRegular
}

// The sticker is a mask in WEBP format to be placed on photos or videos
type StickerTypeMask struct {
	meta
}

func (entity *StickerTypeMask) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerTypeMask

	return json.Marshal((*stub)(entity))
}

func (*StickerTypeMask) GetType() string {
	return TypeStickerType
}

func (*StickerTypeMask) GetConstructor() string {
	return ConstructorStickerTypeMask
}

func (*StickerTypeMask) StickerTypeConstructor() string {
	return ConstructorStickerTypeMask
}

// The sticker is a custom emoji to be used inside message text and caption
type StickerTypeCustomEmoji struct {
	meta
}

func (entity *StickerTypeCustomEmoji) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerTypeCustomEmoji

	return json.Marshal((*stub)(entity))
}

func (*StickerTypeCustomEmoji) GetType() string {
	return TypeStickerType
}

func (*StickerTypeCustomEmoji) GetConstructor() string {
	return ConstructorStickerTypeCustomEmoji
}

func (*StickerTypeCustomEmoji) StickerTypeConstructor() string {
	return ConstructorStickerTypeCustomEmoji
}

// The sticker is a regular sticker
type StickerFullTypeRegular struct {
	meta
	// Premium animation of the sticker; may be null. If present, only Telegram Premium users can use the sticker
	PremiumAnimation *File `json:"premium_animation"`
}

func (entity *StickerFullTypeRegular) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerFullTypeRegular

	return json.Marshal((*stub)(entity))
}

func (*StickerFullTypeRegular) GetType() string {
	return TypeStickerFullType
}

func (*StickerFullTypeRegular) GetConstructor() string {
	return ConstructorStickerFullTypeRegular
}

func (*StickerFullTypeRegular) StickerFullTypeConstructor() string {
	return ConstructorStickerFullTypeRegular
}

// The sticker is a mask in WEBP format to be placed on photos or videos
type StickerFullTypeMask struct {
	meta
	// Position where the mask is placed; may be null
	MaskPosition *MaskPosition `json:"mask_position"`
}

func (entity *StickerFullTypeMask) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerFullTypeMask

	return json.Marshal((*stub)(entity))
}

func (*StickerFullTypeMask) GetType() string {
	return TypeStickerFullType
}

func (*StickerFullTypeMask) GetConstructor() string {
	return ConstructorStickerFullTypeMask
}

func (*StickerFullTypeMask) StickerFullTypeConstructor() string {
	return ConstructorStickerFullTypeMask
}

// The sticker is a custom emoji to be used inside message text and caption. Currently, only Telegram Premium users can use custom emoji
type StickerFullTypeCustomEmoji struct {
	meta
	// Identifier of the custom emoji
	CustomEmojiId JsonInt64 `json:"custom_emoji_id"`
	// True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places
	NeedsRepainting bool `json:"needs_repainting"`
}

func (entity *StickerFullTypeCustomEmoji) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerFullTypeCustomEmoji

	return json.Marshal((*stub)(entity))
}

func (*StickerFullTypeCustomEmoji) GetType() string {
	return TypeStickerFullType
}

func (*StickerFullTypeCustomEmoji) GetConstructor() string {
	return ConstructorStickerFullTypeCustomEmoji
}

func (*StickerFullTypeCustomEmoji) StickerFullTypeConstructor() string {
	return ConstructorStickerFullTypeCustomEmoji
}

// Represents a closed vector path. The path begins at the end point of the last command. The coordinate system origin is in the upper-left corner
type ClosedVectorPath struct {
	meta
	// List of vector path commands
	Commands []VectorPathCommand `json:"commands"`
}

func (entity *ClosedVectorPath) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ClosedVectorPath

	return json.Marshal((*stub)(entity))
}

func (*ClosedVectorPath) GetType() string {
	return TypeClosedVectorPath
}

func (*ClosedVectorPath) GetConstructor() string {
	return ConstructorClosedVectorPath
}

func (closedVectorPath *ClosedVectorPath) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Commands []json.RawMessage `json:"commands"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldCommands, _ := UnmarshalListOfVectorPathCommand(tmp.Commands)
	closedVectorPath.Commands = fieldCommands

	return nil
}

// Represents outline of an image
type Outline struct {
	meta
	// The list of closed vector paths
	Paths []*ClosedVectorPath `json:"paths"`
}

func (entity *Outline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Outline

	return json.Marshal((*stub)(entity))
}

func (*Outline) GetType() string {
	return TypeOutline
}

func (*Outline) GetConstructor() string {
	return ConstructorOutline
}

// Describes one answer option of a poll
type PollOption struct {
	meta
	// Option text; 1-100 characters. Only custom emoji entities are allowed
	Text *FormattedText `json:"text"`
	// Number of voters for this option, available only for closed or voted polls
	VoterCount int32 `json:"voter_count"`
	// The percentage of votes for this option; 0-100
	VotePercentage int32 `json:"vote_percentage"`
	// True, if the option was chosen by the user
	IsChosen bool `json:"is_chosen"`
	// True, if the option is being chosen by a pending setPollAnswer request
	IsBeingChosen bool `json:"is_being_chosen"`
}

func (entity *PollOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PollOption

	return json.Marshal((*stub)(entity))
}

func (*PollOption) GetType() string {
	return TypePollOption
}

func (*PollOption) GetConstructor() string {
	return ConstructorPollOption
}

// A regular poll
type PollTypeRegular struct {
	meta
	// True, if multiple answer options can be chosen simultaneously
	AllowMultipleAnswers bool `json:"allow_multiple_answers"`
}

func (entity *PollTypeRegular) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PollTypeRegular

	return json.Marshal((*stub)(entity))
}

func (*PollTypeRegular) GetType() string {
	return TypePollType
}

func (*PollTypeRegular) GetConstructor() string {
	return ConstructorPollTypeRegular
}

func (*PollTypeRegular) PollTypeConstructor() string {
	return ConstructorPollTypeRegular
}

// A poll in quiz mode, which has exactly one correct answer option and can be answered only once
type PollTypeQuiz struct {
	meta
	// 0-based identifier of the correct answer option; -1 for a yet unanswered poll
	CorrectOptionId int32 `json:"correct_option_id"`
	// Text that is shown when the user chooses an incorrect answer or taps on the lamp icon; 0-200 characters with at most 2 line feeds; empty for a yet unanswered poll
	Explanation *FormattedText `json:"explanation"`
}

func (entity *PollTypeQuiz) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PollTypeQuiz

	return json.Marshal((*stub)(entity))
}

func (*PollTypeQuiz) GetType() string {
	return TypePollType
}

func (*PollTypeQuiz) GetConstructor() string {
	return ConstructorPollTypeQuiz
}

func (*PollTypeQuiz) PollTypeConstructor() string {
	return ConstructorPollTypeQuiz
}

// Describes an animation file. The animation must be encoded in GIF or MPEG4 format
type Animation struct {
	meta
	// Duration of the animation, in seconds; as defined by the sender
	Duration int32 `json:"duration"`
	// Width of the animation
	Width int32 `json:"width"`
	// Height of the animation
	Height int32 `json:"height"`
	// Original name of the file; as defined by the sender
	FileName string `json:"file_name"`
	// MIME type of the file, usually "image/gif" or "video/mp4"
	MimeType string `json:"mime_type"`
	// True, if stickers were added to the animation. The list of corresponding sticker set can be received using getAttachedStickerSets
	HasStickers bool `json:"has_stickers"`
	// Animation minithumbnail; may be null
	Minithumbnail *Minithumbnail `json:"minithumbnail"`
	// Animation thumbnail in JPEG or MPEG4 format; may be null
	Thumbnail *Thumbnail `json:"thumbnail"`
	// File containing the animation
	Animation *File `json:"animation"`
}

func (entity *Animation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Animation

	return json.Marshal((*stub)(entity))
}

func (*Animation) GetType() string {
	return TypeAnimation
}

func (*Animation) GetConstructor() string {
	return ConstructorAnimation
}

// Describes an audio file. Audio is usually in MP3 or M4A format
type Audio struct {
	meta
	// Duration of the audio, in seconds; as defined by the sender
	Duration int32 `json:"duration"`
	// Title of the audio; as defined by the sender
	Title string `json:"title"`
	// Performer of the audio; as defined by the sender
	Performer string `json:"performer"`
	// Original name of the file; as defined by the sender
	FileName string `json:"file_name"`
	// The MIME type of the file; as defined by the sender
	MimeType string `json:"mime_type"`
	// The minithumbnail of the album cover; may be null
	AlbumCoverMinithumbnail *Minithumbnail `json:"album_cover_minithumbnail"`
	// The thumbnail of the album cover in JPEG format; as defined by the sender. The full size thumbnail is expected to be extracted from the downloaded audio file; may be null
	AlbumCoverThumbnail *Thumbnail `json:"album_cover_thumbnail"`
	// Album cover variants to use if the downloaded audio file contains no album cover. Provided thumbnail dimensions are approximate
	ExternalAlbumCovers []*Thumbnail `json:"external_album_covers"`
	// File containing the audio
	Audio *File `json:"audio"`
}

func (entity *Audio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Audio

	return json.Marshal((*stub)(entity))
}

func (*Audio) GetType() string {
	return TypeAudio
}

func (*Audio) GetConstructor() string {
	return ConstructorAudio
}

// Describes a document of any type
type Document struct {
	meta
	// Original name of the file; as defined by the sender
	FileName string `json:"file_name"`
	// MIME type of the file; as defined by the sender
	MimeType string `json:"mime_type"`
	// Document minithumbnail; may be null
	Minithumbnail *Minithumbnail `json:"minithumbnail"`
	// Document thumbnail in JPEG or PNG format (PNG will be used only for background patterns); as defined by the sender; may be null
	Thumbnail *Thumbnail `json:"thumbnail"`
	// File containing the document
	Document *File `json:"document"`
}

func (entity *Document) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Document

	return json.Marshal((*stub)(entity))
}

func (*Document) GetType() string {
	return TypeDocument
}

func (*Document) GetConstructor() string {
	return ConstructorDocument
}

// Describes a photo
type Photo struct {
	meta
	// True, if stickers were added to the photo. The list of corresponding sticker sets can be received using getAttachedStickerSets
	HasStickers bool `json:"has_stickers"`
	// Photo minithumbnail; may be null
	Minithumbnail *Minithumbnail `json:"minithumbnail"`
	// Available variants of the photo, in different sizes
	Sizes []*PhotoSize `json:"sizes"`
}

func (entity *Photo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Photo

	return json.Marshal((*stub)(entity))
}

func (*Photo) GetType() string {
	return TypePhoto
}

func (*Photo) GetConstructor() string {
	return ConstructorPhoto
}

// Describes a sticker
type Sticker struct {
	meta
	// Unique sticker identifier within the set; 0 if none
	Id JsonInt64 `json:"id"`
	// Identifier of the sticker set to which the sticker belongs; 0 if none
	SetId JsonInt64 `json:"set_id"`
	// Sticker width; as defined by the sender
	Width int32 `json:"width"`
	// Sticker height; as defined by the sender
	Height int32 `json:"height"`
	// Emoji corresponding to the sticker
	Emoji string `json:"emoji"`
	// Sticker format
	Format StickerFormat `json:"format"`
	// Sticker's full type
	FullType StickerFullType `json:"full_type"`
	// Sticker thumbnail in WEBP or JPEG format; may be null
	Thumbnail *Thumbnail `json:"thumbnail"`
	// File containing the sticker
	Sticker *File `json:"sticker"`
}

func (entity *Sticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Sticker

	return json.Marshal((*stub)(entity))
}

func (*Sticker) GetType() string {
	return TypeSticker
}

func (*Sticker) GetConstructor() string {
	return ConstructorSticker
}

func (sticker *Sticker) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id        JsonInt64       `json:"id"`
		SetId     JsonInt64       `json:"set_id"`
		Width     int32           `json:"width"`
		Height    int32           `json:"height"`
		Emoji     string          `json:"emoji"`
		Format    json.RawMessage `json:"format"`
		FullType  json.RawMessage `json:"full_type"`
		Thumbnail *Thumbnail      `json:"thumbnail"`
		Sticker   *File           `json:"sticker"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	sticker.Id = tmp.Id
	sticker.SetId = tmp.SetId
	sticker.Width = tmp.Width
	sticker.Height = tmp.Height
	sticker.Emoji = tmp.Emoji
	sticker.Thumbnail = tmp.Thumbnail
	sticker.Sticker = tmp.Sticker

	fieldFormat, _ := UnmarshalStickerFormat(tmp.Format)
	sticker.Format = fieldFormat

	fieldFullType, _ := UnmarshalStickerFullType(tmp.FullType)
	sticker.FullType = fieldFullType

	return nil
}

// Describes a video file
type Video struct {
	meta
	// Duration of the video, in seconds; as defined by the sender
	Duration int32 `json:"duration"`
	// Video width; as defined by the sender
	Width int32 `json:"width"`
	// Video height; as defined by the sender
	Height int32 `json:"height"`
	// Original name of the file; as defined by the sender
	FileName string `json:"file_name"`
	// MIME type of the file; as defined by the sender
	MimeType string `json:"mime_type"`
	// True, if stickers were added to the video. The list of corresponding sticker sets can be received using getAttachedStickerSets
	HasStickers bool `json:"has_stickers"`
	// True, if the video is expected to be streamed
	SupportsStreaming bool `json:"supports_streaming"`
	// Video minithumbnail; may be null
	Minithumbnail *Minithumbnail `json:"minithumbnail"`
	// Video thumbnail in JPEG or MPEG4 format; as defined by the sender; may be null
	Thumbnail *Thumbnail `json:"thumbnail"`
	// File containing the video
	Video *File `json:"video"`
}

func (entity *Video) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Video

	return json.Marshal((*stub)(entity))
}

func (*Video) GetType() string {
	return TypeVideo
}

func (*Video) GetConstructor() string {
	return ConstructorVideo
}

// Describes a video note. The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format
type VideoNote struct {
	meta
	// Duration of the video, in seconds; as defined by the sender
	Duration int32 `json:"duration"`
	// A waveform representation of the video note's audio in 5-bit format; may be empty if unknown
	Waveform []byte `json:"waveform"`
	// Video width and height; as defined by the sender
	Length int32 `json:"length"`
	// Video minithumbnail; may be null
	Minithumbnail *Minithumbnail `json:"minithumbnail"`
	// Video thumbnail in JPEG format; as defined by the sender; may be null
	Thumbnail *Thumbnail `json:"thumbnail"`
	// Result of speech recognition in the video note; may be null
	SpeechRecognitionResult SpeechRecognitionResult `json:"speech_recognition_result"`
	// File containing the video
	Video *File `json:"video"`
}

func (entity *VideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub VideoNote

	return json.Marshal((*stub)(entity))
}

func (*VideoNote) GetType() string {
	return TypeVideoNote
}

func (*VideoNote) GetConstructor() string {
	return ConstructorVideoNote
}

func (videoNote *VideoNote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Duration                int32           `json:"duration"`
		Waveform                []byte          `json:"waveform"`
		Length                  int32           `json:"length"`
		Minithumbnail           *Minithumbnail  `json:"minithumbnail"`
		Thumbnail               *Thumbnail      `json:"thumbnail"`
		SpeechRecognitionResult json.RawMessage `json:"speech_recognition_result"`
		Video                   *File           `json:"video"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	videoNote.Duration = tmp.Duration
	videoNote.Waveform = tmp.Waveform
	videoNote.Length = tmp.Length
	videoNote.Minithumbnail = tmp.Minithumbnail
	videoNote.Thumbnail = tmp.Thumbnail
	videoNote.Video = tmp.Video

	fieldSpeechRecognitionResult, _ := UnmarshalSpeechRecognitionResult(tmp.SpeechRecognitionResult)
	videoNote.SpeechRecognitionResult = fieldSpeechRecognitionResult

	return nil
}

// Describes a voice note
type VoiceNote struct {
	meta
	// Duration of the voice note, in seconds; as defined by the sender
	Duration int32 `json:"duration"`
	// A waveform representation of the voice note in 5-bit format
	Waveform []byte `json:"waveform"`
	// MIME type of the file; as defined by the sender. Usually, one of "audio/ogg" for Opus in an OGG container, "audio/mpeg" for an MP3 audio, or "audio/mp4" for an M4A audio
	MimeType string `json:"mime_type"`
	// Result of speech recognition in the voice note; may be null
	SpeechRecognitionResult SpeechRecognitionResult `json:"speech_recognition_result"`
	// File containing the voice note
	Voice *File `json:"voice"`
}

func (entity *VoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub VoiceNote

	return json.Marshal((*stub)(entity))
}

func (*VoiceNote) GetType() string {
	return TypeVoiceNote
}

func (*VoiceNote) GetConstructor() string {
	return ConstructorVoiceNote
}

func (voiceNote *VoiceNote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Duration                int32           `json:"duration"`
		Waveform                []byte          `json:"waveform"`
		MimeType                string          `json:"mime_type"`
		SpeechRecognitionResult json.RawMessage `json:"speech_recognition_result"`
		Voice                   *File           `json:"voice"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	voiceNote.Duration = tmp.Duration
	voiceNote.Waveform = tmp.Waveform
	voiceNote.MimeType = tmp.MimeType
	voiceNote.Voice = tmp.Voice

	fieldSpeechRecognitionResult, _ := UnmarshalSpeechRecognitionResult(tmp.SpeechRecognitionResult)
	voiceNote.SpeechRecognitionResult = fieldSpeechRecognitionResult

	return nil
}

// Describes an animated or custom representation of an emoji
type AnimatedEmoji struct {
	meta
	// Sticker for the emoji; may be null if yet unknown for a custom emoji. If the sticker is a custom emoji, then it can have arbitrary format
	Sticker *Sticker `json:"sticker"`
	// Expected width of the sticker, which can be used if the sticker is null
	StickerWidth int32 `json:"sticker_width"`
	// Expected height of the sticker, which can be used if the sticker is null
	StickerHeight int32 `json:"sticker_height"`
	// Emoji modifier fitzpatrick type; 0-6; 0 if none
	FitzpatrickType int32 `json:"fitzpatrick_type"`
	// File containing the sound to be played when the sticker is clicked; may be null. The sound is encoded with the Opus codec, and stored inside an OGG container
	Sound *File `json:"sound"`
}

func (entity *AnimatedEmoji) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AnimatedEmoji

	return json.Marshal((*stub)(entity))
}

func (*AnimatedEmoji) GetType() string {
	return TypeAnimatedEmoji
}

func (*AnimatedEmoji) GetConstructor() string {
	return ConstructorAnimatedEmoji
}

// Describes a user contact
type Contact struct {
	meta
	// Phone number of the user
	PhoneNumber string `json:"phone_number"`
	// First name of the user; 1-255 characters in length
	FirstName string `json:"first_name"`
	// Last name of the user
	LastName string `json:"last_name"`
	// Additional data about the user in a form of vCard; 0-2048 bytes in length
	Vcard string `json:"vcard"`
	// Identifier of the user, if known; 0 otherwise
	UserId int64 `json:"user_id"`
}

func (entity *Contact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Contact

	return json.Marshal((*stub)(entity))
}

func (*Contact) GetType() string {
	return TypeContact
}

func (*Contact) GetConstructor() string {
	return ConstructorContact
}

// Describes a location on planet Earth
type Location struct {
	meta
	// Latitude of the location in degrees; as defined by the sender
	Latitude float64 `json:"latitude"`
	// Longitude of the location, in degrees; as defined by the sender
	Longitude float64 `json:"longitude"`
	// The estimated horizontal accuracy of the location, in meters; as defined by the sender. 0 if unknown
	HorizontalAccuracy float64 `json:"horizontal_accuracy"`
}

func (entity *Location) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Location

	return json.Marshal((*stub)(entity))
}

func (*Location) GetType() string {
	return TypeLocation
}

func (*Location) GetConstructor() string {
	return ConstructorLocation
}

// Describes a venue
type Venue struct {
	meta
	// Venue location; as defined by the sender
	Location *Location `json:"location"`
	// Venue name; as defined by the sender
	Title string `json:"title"`
	// Venue address; as defined by the sender
	Address string `json:"address"`
	// Provider of the venue database; as defined by the sender. Currently, only "foursquare" and "gplaces" (Google Places) need to be supported
	Provider string `json:"provider"`
	// Identifier of the venue in the provider database; as defined by the sender
	Id string `json:"id"`
	// Type of the venue in the provider database; as defined by the sender
	Type string `json:"type"`
}

func (entity *Venue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Venue

	return json.Marshal((*stub)(entity))
}

func (*Venue) GetType() string {
	return TypeVenue
}

func (*Venue) GetConstructor() string {
	return ConstructorVenue
}

// Describes a game. Use getInternalLink with internalLinkTypeGame to share the game
type Game struct {
	meta
	// Unique game identifier
	Id JsonInt64 `json:"id"`
	// Game short name
	ShortName string `json:"short_name"`
	// Game title
	Title string `json:"title"`
	// Game text, usually containing scoreboards for a game
	Text *FormattedText `json:"text"`
	// Game description
	Description string `json:"description"`
	// Game photo
	Photo *Photo `json:"photo"`
	// Game animation; may be null
	Animation *Animation `json:"animation"`
}

func (entity *Game) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Game

	return json.Marshal((*stub)(entity))
}

func (*Game) GetType() string {
	return TypeGame
}

func (*Game) GetConstructor() string {
	return ConstructorGame
}

// Describes a Web App. Use getInternalLink with internalLinkTypeWebApp to share the Web App
type WebApp struct {
	meta
	// Web App short name
	ShortName string `json:"short_name"`
	// Web App title
	Title string `json:"title"`
	// Web App description
	Description string `json:"description"`
	// Web App photo
	Photo *Photo `json:"photo"`
	// Web App animation; may be null
	Animation *Animation `json:"animation"`
}

func (entity *WebApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub WebApp

	return json.Marshal((*stub)(entity))
}

func (*WebApp) GetType() string {
	return TypeWebApp
}

func (*WebApp) GetConstructor() string {
	return ConstructorWebApp
}

// Describes a poll
type Poll struct {
	meta
	// Unique poll identifier
	Id JsonInt64 `json:"id"`
	// Poll question; 1-300 characters. Only custom emoji entities are allowed
	Question *FormattedText `json:"question"`
	// List of poll answer options
	Options []*PollOption `json:"options"`
	// Total number of voters, participating in the poll
	TotalVoterCount int32 `json:"total_voter_count"`
	// Identifiers of recent voters, if the poll is non-anonymous
	RecentVoterIds []MessageSender `json:"recent_voter_ids"`
	// True, if the poll is anonymous
	IsAnonymous bool `json:"is_anonymous"`
	// Type of the poll
	Type PollType `json:"type"`
	// Amount of time the poll will be active after creation, in seconds
	OpenPeriod int32 `json:"open_period"`
	// Point in time (Unix timestamp) when the poll will automatically be closed
	CloseDate int32 `json:"close_date"`
	// True, if the poll is closed
	IsClosed bool `json:"is_closed"`
}

func (entity *Poll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Poll

	return json.Marshal((*stub)(entity))
}

func (*Poll) GetType() string {
	return TypePoll
}

func (*Poll) GetConstructor() string {
	return ConstructorPoll
}

func (poll *Poll) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id              JsonInt64         `json:"id"`
		Question        *FormattedText    `json:"question"`
		Options         []*PollOption     `json:"options"`
		TotalVoterCount int32             `json:"total_voter_count"`
		RecentVoterIds  []json.RawMessage `json:"recent_voter_ids"`
		IsAnonymous     bool              `json:"is_anonymous"`
		Type            json.RawMessage   `json:"type"`
		OpenPeriod      int32             `json:"open_period"`
		CloseDate       int32             `json:"close_date"`
		IsClosed        bool              `json:"is_closed"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	poll.Id = tmp.Id
	poll.Question = tmp.Question
	poll.Options = tmp.Options
	poll.TotalVoterCount = tmp.TotalVoterCount
	poll.IsAnonymous = tmp.IsAnonymous
	poll.OpenPeriod = tmp.OpenPeriod
	poll.CloseDate = tmp.CloseDate
	poll.IsClosed = tmp.IsClosed

	fieldRecentVoterIds, _ := UnmarshalListOfMessageSender(tmp.RecentVoterIds)
	poll.RecentVoterIds = fieldRecentVoterIds

	fieldType, _ := UnmarshalPollType(tmp.Type)
	poll.Type = fieldType

	return nil
}

// Describes an alternative re-encoded quality of a video file
type AlternativeVideo struct {
	meta
	// Video width
	Width int32 `json:"width"`
	// Video height
	Height int32 `json:"height"`
	// Codec used for video file encoding, for example, "h264", "h265", or "av1"
	Codec string `json:"codec"`
	// HLS file describing the video
	HlsFile *File `json:"hls_file"`
	// File containing the video
	Video *File `json:"video"`
}

func (entity *AlternativeVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AlternativeVideo

	return json.Marshal((*stub)(entity))
}

func (*AlternativeVideo) GetType() string {
	return TypeAlternativeVideo
}

func (*AlternativeVideo) GetConstructor() string {
	return ConstructorAlternativeVideo
}

// Describes a chat background
type Background struct {
	meta
	// Unique background identifier
	Id JsonInt64 `json:"id"`
	// True, if this is one of default backgrounds
	IsDefault bool `json:"is_default"`
	// True, if the background is dark and is recommended to be used with dark theme
	IsDark bool `json:"is_dark"`
	// Unique background name
	Name string `json:"name"`
	// Document with the background; may be null. Null only for filled and chat theme backgrounds
	Document *Document `json:"document"`
	// Type of the background
	Type BackgroundType `json:"type"`
}

func (entity *Background) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Background

	return json.Marshal((*stub)(entity))
}

func (*Background) GetType() string {
	return TypeBackground
}

func (*Background) GetConstructor() string {
	return ConstructorBackground
}

func (background *Background) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id        JsonInt64       `json:"id"`
		IsDefault bool            `json:"is_default"`
		IsDark    bool            `json:"is_dark"`
		Name      string          `json:"name"`
		Document  *Document       `json:"document"`
		Type      json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	background.Id = tmp.Id
	background.IsDefault = tmp.IsDefault
	background.IsDark = tmp.IsDark
	background.Name = tmp.Name
	background.Document = tmp.Document

	fieldType, _ := UnmarshalBackgroundType(tmp.Type)
	background.Type = fieldType

	return nil
}

// Contains a list of backgrounds
type Backgrounds struct {
	meta
	// A list of backgrounds
	Backgrounds []*Background `json:"backgrounds"`
}

func (entity *Backgrounds) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Backgrounds

	return json.Marshal((*stub)(entity))
}

func (*Backgrounds) GetType() string {
	return TypeBackgrounds
}

func (*Backgrounds) GetConstructor() string {
	return ConstructorBackgrounds
}

// Describes a background set for a specific chat
type ChatBackground struct {
	meta
	// The background
	Background *Background `json:"background"`
	// Dimming of the background in dark themes, as a percentage; 0-100. Applied only to Wallpaper and Fill types of background
	DarkThemeDimming int32 `json:"dark_theme_dimming"`
}

func (entity *ChatBackground) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBackground

	return json.Marshal((*stub)(entity))
}

func (*ChatBackground) GetType() string {
	return TypeChatBackground
}

func (*ChatBackground) GetConstructor() string {
	return ConstructorChatBackground
}

// Describes a user profile photo
type ProfilePhoto struct {
	meta
	// Photo identifier; 0 for an empty photo. Can be used to find a photo in a list of user profile photos
	Id JsonInt64 `json:"id"`
	// A small (160x160) user profile photo. The file can be downloaded only before the photo is changed
	Small *File `json:"small"`
	// A big (640x640) user profile photo. The file can be downloaded only before the photo is changed
	Big *File `json:"big"`
	// User profile photo minithumbnail; may be null
	Minithumbnail *Minithumbnail `json:"minithumbnail"`
	// True, if the photo has animated variant
	HasAnimation bool `json:"has_animation"`
	// True, if the photo is visible only for the current user
	IsPersonal bool `json:"is_personal"`
}

func (entity *ProfilePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ProfilePhoto

	return json.Marshal((*stub)(entity))
}

func (*ProfilePhoto) GetType() string {
	return TypeProfilePhoto
}

func (*ProfilePhoto) GetConstructor() string {
	return ConstructorProfilePhoto
}

// Contains basic information about the photo of a chat
type ChatPhotoInfo struct {
	meta
	// A small (160x160) chat photo variant in JPEG format. The file can be downloaded only before the photo is changed
	Small *File `json:"small"`
	// A big (640x640) chat photo variant in JPEG format. The file can be downloaded only before the photo is changed
	Big *File `json:"big"`
	// Chat photo minithumbnail; may be null
	Minithumbnail *Minithumbnail `json:"minithumbnail"`
	// True, if the photo has animated variant
	HasAnimation bool `json:"has_animation"`
	// True, if the photo is visible only for the current user
	IsPersonal bool `json:"is_personal"`
}

func (entity *ChatPhotoInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatPhotoInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatPhotoInfo) GetType() string {
	return TypeChatPhotoInfo
}

func (*ChatPhotoInfo) GetConstructor() string {
	return ConstructorChatPhotoInfo
}

// A regular user
type UserTypeRegular struct {
	meta
}

func (entity *UserTypeRegular) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserTypeRegular

	return json.Marshal((*stub)(entity))
}

func (*UserTypeRegular) GetType() string {
	return TypeUserType
}

func (*UserTypeRegular) GetConstructor() string {
	return ConstructorUserTypeRegular
}

func (*UserTypeRegular) UserTypeConstructor() string {
	return ConstructorUserTypeRegular
}

// A deleted user or deleted bot. No information on the user besides the user identifier is available. It is not possible to perform any active actions on this type of user
type UserTypeDeleted struct {
	meta
}

func (entity *UserTypeDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserTypeDeleted

	return json.Marshal((*stub)(entity))
}

func (*UserTypeDeleted) GetType() string {
	return TypeUserType
}

func (*UserTypeDeleted) GetConstructor() string {
	return ConstructorUserTypeDeleted
}

func (*UserTypeDeleted) UserTypeConstructor() string {
	return ConstructorUserTypeDeleted
}

// A bot (see https://core.telegram.org/bots)
type UserTypeBot struct {
	meta
	// True, if the bot is owned by the current user and can be edited using the methods toggleBotUsernameIsActive, reorderBotActiveUsernames, setBotProfilePhoto, setBotName, setBotInfoDescription, and setBotInfoShortDescription
	CanBeEdited bool `json:"can_be_edited"`
	// True, if the bot can be invited to basic group and supergroup chats
	CanJoinGroups bool `json:"can_join_groups"`
	// True, if the bot can read all messages in basic group or supergroup chats and not just those addressed to the bot. In private and channel chats a bot can always read all messages
	CanReadAllGroupMessages bool `json:"can_read_all_group_messages"`
	// True, if the bot has the main Web App
	HasMainWebApp bool `json:"has_main_web_app"`
	// True, if the bot supports inline queries
	IsInline bool `json:"is_inline"`
	// Placeholder for inline queries (displayed on the application input field)
	InlineQueryPlaceholder string `json:"inline_query_placeholder"`
	// True, if the location of the user is expected to be sent with every inline query to this bot
	NeedLocation bool `json:"need_location"`
	// True, if the bot supports connection to Telegram Business accounts
	CanConnectToBusiness bool `json:"can_connect_to_business"`
	// True, if the bot can be added to attachment or side menu
	CanBeAddedToAttachmentMenu bool `json:"can_be_added_to_attachment_menu"`
	// The number of recently active users of the bot
	ActiveUserCount int32 `json:"active_user_count"`
}

func (entity *UserTypeBot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserTypeBot

	return json.Marshal((*stub)(entity))
}

func (*UserTypeBot) GetType() string {
	return TypeUserType
}

func (*UserTypeBot) GetConstructor() string {
	return ConstructorUserTypeBot
}

func (*UserTypeBot) UserTypeConstructor() string {
	return ConstructorUserTypeBot
}

// No information on the user besides the user identifier is available, yet this user has not been deleted. This object is extremely rare and must be handled like a deleted user. It is not possible to perform any actions on users of this type
type UserTypeUnknown struct {
	meta
}

func (entity *UserTypeUnknown) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserTypeUnknown

	return json.Marshal((*stub)(entity))
}

func (*UserTypeUnknown) GetType() string {
	return TypeUserType
}

func (*UserTypeUnknown) GetConstructor() string {
	return ConstructorUserTypeUnknown
}

func (*UserTypeUnknown) UserTypeConstructor() string {
	return ConstructorUserTypeUnknown
}

// Represents a command supported by a bot
type BotCommand struct {
	meta
	// Text of the bot command
	Command string `json:"command"`
	// Description of the bot command
	Description string `json:"description"`
}

func (entity *BotCommand) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotCommand

	return json.Marshal((*stub)(entity))
}

func (*BotCommand) GetType() string {
	return TypeBotCommand
}

func (*BotCommand) GetConstructor() string {
	return ConstructorBotCommand
}

// Contains a list of bot commands
type BotCommands struct {
	meta
	// Bot's user identifier
	BotUserId int64 `json:"bot_user_id"`
	// List of bot commands
	Commands []*BotCommand `json:"commands"`
}

func (entity *BotCommands) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotCommands

	return json.Marshal((*stub)(entity))
}

func (*BotCommands) GetType() string {
	return TypeBotCommands
}

func (*BotCommands) GetConstructor() string {
	return ConstructorBotCommands
}

// Describes a button to be shown instead of bot commands menu button
type BotMenuButton struct {
	meta
	// Text of the button
	Text string `json:"text"`
	// URL of a Web App to open when the button is pressed. If the link is of the type internalLinkTypeWebApp, then it must be processed accordingly. Otherwise, the link must be passed to openWebApp
	Url string `json:"url"`
}

func (entity *BotMenuButton) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotMenuButton

	return json.Marshal((*stub)(entity))
}

func (*BotMenuButton) GetType() string {
	return TypeBotMenuButton
}

func (*BotMenuButton) GetConstructor() string {
	return ConstructorBotMenuButton
}

// Represents a location to which a chat is connected
type ChatLocation struct {
	meta
	// The location
	Location *Location `json:"location"`
	// Location address; 1-64 characters, as defined by the chat owner
	Address string `json:"address"`
}

func (entity *ChatLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatLocation

	return json.Marshal((*stub)(entity))
}

func (*ChatLocation) GetType() string {
	return TypeChatLocation
}

func (*ChatLocation) GetConstructor() string {
	return ConstructorChatLocation
}

// Represents a birthdate of a user
type Birthdate struct {
	meta
	// Day of the month; 1-31
	Day int32 `json:"day"`
	// Month of the year; 1-12
	Month int32 `json:"month"`
	// Birth year; 0 if unknown
	Year int32 `json:"year"`
}

func (entity *Birthdate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Birthdate

	return json.Marshal((*stub)(entity))
}

func (*Birthdate) GetType() string {
	return TypeBirthdate
}

func (*Birthdate) GetConstructor() string {
	return ConstructorBirthdate
}

// Describes a user that had or will have a birthday soon
type CloseBirthdayUser struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
	// Birthdate of the user
	Birthdate *Birthdate `json:"birthdate"`
}

func (entity *CloseBirthdayUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CloseBirthdayUser

	return json.Marshal((*stub)(entity))
}

func (*CloseBirthdayUser) GetType() string {
	return TypeCloseBirthdayUser
}

func (*CloseBirthdayUser) GetConstructor() string {
	return ConstructorCloseBirthdayUser
}

// Send away messages always
type BusinessAwayMessageScheduleAlways struct {
	meta
}

func (entity *BusinessAwayMessageScheduleAlways) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessAwayMessageScheduleAlways

	return json.Marshal((*stub)(entity))
}

func (*BusinessAwayMessageScheduleAlways) GetType() string {
	return TypeBusinessAwayMessageSchedule
}

func (*BusinessAwayMessageScheduleAlways) GetConstructor() string {
	return ConstructorBusinessAwayMessageScheduleAlways
}

func (*BusinessAwayMessageScheduleAlways) BusinessAwayMessageScheduleConstructor() string {
	return ConstructorBusinessAwayMessageScheduleAlways
}

// Send away messages outside of the business opening hours
type BusinessAwayMessageScheduleOutsideOfOpeningHours struct {
	meta
}

func (entity *BusinessAwayMessageScheduleOutsideOfOpeningHours) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessAwayMessageScheduleOutsideOfOpeningHours

	return json.Marshal((*stub)(entity))
}

func (*BusinessAwayMessageScheduleOutsideOfOpeningHours) GetType() string {
	return TypeBusinessAwayMessageSchedule
}

func (*BusinessAwayMessageScheduleOutsideOfOpeningHours) GetConstructor() string {
	return ConstructorBusinessAwayMessageScheduleOutsideOfOpeningHours
}

func (*BusinessAwayMessageScheduleOutsideOfOpeningHours) BusinessAwayMessageScheduleConstructor() string {
	return ConstructorBusinessAwayMessageScheduleOutsideOfOpeningHours
}

// Send away messages only in the specified time span
type BusinessAwayMessageScheduleCustom struct {
	meta
	// Point in time (Unix timestamp) when the away messages will start to be sent
	StartDate int32 `json:"start_date"`
	// Point in time (Unix timestamp) when the away messages will stop to be sent
	EndDate int32 `json:"end_date"`
}

func (entity *BusinessAwayMessageScheduleCustom) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessAwayMessageScheduleCustom

	return json.Marshal((*stub)(entity))
}

func (*BusinessAwayMessageScheduleCustom) GetType() string {
	return TypeBusinessAwayMessageSchedule
}

func (*BusinessAwayMessageScheduleCustom) GetConstructor() string {
	return ConstructorBusinessAwayMessageScheduleCustom
}

func (*BusinessAwayMessageScheduleCustom) BusinessAwayMessageScheduleConstructor() string {
	return ConstructorBusinessAwayMessageScheduleCustom
}

// Represents a location of a business
type BusinessLocation struct {
	meta
	// The location; may be null if not specified
	Location *Location `json:"location"`
	// Location address; 1-96 characters
	Address string `json:"address"`
}

func (entity *BusinessLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessLocation

	return json.Marshal((*stub)(entity))
}

func (*BusinessLocation) GetType() string {
	return TypeBusinessLocation
}

func (*BusinessLocation) GetConstructor() string {
	return ConstructorBusinessLocation
}

// Describes private chats chosen for automatic interaction with a business
type BusinessRecipients struct {
	meta
	// Identifiers of selected private chats
	ChatIds []int64 `json:"chat_ids"`
	// Identifiers of private chats that are always excluded; for businessConnectedBot only
	ExcludedChatIds []int64 `json:"excluded_chat_ids"`
	// True, if all existing private chats are selected
	SelectExistingChats bool `json:"select_existing_chats"`
	// True, if all new private chats are selected
	SelectNewChats bool `json:"select_new_chats"`
	// True, if all private chats with contacts are selected
	SelectContacts bool `json:"select_contacts"`
	// True, if all private chats with non-contacts are selected
	SelectNonContacts bool `json:"select_non_contacts"`
	// If true, then all private chats except the selected are chosen. Otherwise, only the selected chats are chosen
	ExcludeSelected bool `json:"exclude_selected"`
}

func (entity *BusinessRecipients) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessRecipients

	return json.Marshal((*stub)(entity))
}

func (*BusinessRecipients) GetType() string {
	return TypeBusinessRecipients
}

func (*BusinessRecipients) GetConstructor() string {
	return ConstructorBusinessRecipients
}

// Describes settings for messages that are automatically sent by a Telegram Business account when it is away
type BusinessAwayMessageSettings struct {
	meta
	// Unique quick reply shortcut identifier for the away messages
	ShortcutId int32 `json:"shortcut_id"`
	// Chosen recipients of the away messages
	Recipients *BusinessRecipients `json:"recipients"`
	// Settings used to check whether the current user is away
	Schedule BusinessAwayMessageSchedule `json:"schedule"`
	// True, if the messages must not be sent if the account was online in the last 10 minutes
	OfflineOnly bool `json:"offline_only"`
}

func (entity *BusinessAwayMessageSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessAwayMessageSettings

	return json.Marshal((*stub)(entity))
}

func (*BusinessAwayMessageSettings) GetType() string {
	return TypeBusinessAwayMessageSettings
}

func (*BusinessAwayMessageSettings) GetConstructor() string {
	return ConstructorBusinessAwayMessageSettings
}

func (businessAwayMessageSettings *BusinessAwayMessageSettings) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ShortcutId  int32               `json:"shortcut_id"`
		Recipients  *BusinessRecipients `json:"recipients"`
		Schedule    json.RawMessage     `json:"schedule"`
		OfflineOnly bool                `json:"offline_only"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	businessAwayMessageSettings.ShortcutId = tmp.ShortcutId
	businessAwayMessageSettings.Recipients = tmp.Recipients
	businessAwayMessageSettings.OfflineOnly = tmp.OfflineOnly

	fieldSchedule, _ := UnmarshalBusinessAwayMessageSchedule(tmp.Schedule)
	businessAwayMessageSettings.Schedule = fieldSchedule

	return nil
}

// Describes settings for greeting messages that are automatically sent by a Telegram Business account as response to incoming messages in an inactive private chat
type BusinessGreetingMessageSettings struct {
	meta
	// Unique quick reply shortcut identifier for the greeting messages
	ShortcutId int32 `json:"shortcut_id"`
	// Chosen recipients of the greeting messages
	Recipients *BusinessRecipients `json:"recipients"`
	// The number of days after which a chat will be considered as inactive; currently, must be on of 7, 14, 21, or 28
	InactivityDays int32 `json:"inactivity_days"`
}

func (entity *BusinessGreetingMessageSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessGreetingMessageSettings

	return json.Marshal((*stub)(entity))
}

func (*BusinessGreetingMessageSettings) GetType() string {
	return TypeBusinessGreetingMessageSettings
}

func (*BusinessGreetingMessageSettings) GetConstructor() string {
	return ConstructorBusinessGreetingMessageSettings
}

// Describes a bot connected to a business account
type BusinessConnectedBot struct {
	meta
	// User identifier of the bot
	BotUserId int64 `json:"bot_user_id"`
	// Private chats that will be accessible to the bot
	Recipients *BusinessRecipients `json:"recipients"`
	// True, if the bot can send messages to the private chats; false otherwise
	CanReply bool `json:"can_reply"`
}

func (entity *BusinessConnectedBot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessConnectedBot

	return json.Marshal((*stub)(entity))
}

func (*BusinessConnectedBot) GetType() string {
	return TypeBusinessConnectedBot
}

func (*BusinessConnectedBot) GetConstructor() string {
	return ConstructorBusinessConnectedBot
}

// Describes settings for a business account start page
type BusinessStartPage struct {
	meta
	// Title text of the start page
	Title string `json:"title"`
	// Message text of the start page
	Message string `json:"message"`
	// Greeting sticker of the start page; may be null if none
	Sticker *Sticker `json:"sticker"`
}

func (entity *BusinessStartPage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessStartPage

	return json.Marshal((*stub)(entity))
}

func (*BusinessStartPage) GetType() string {
	return TypeBusinessStartPage
}

func (*BusinessStartPage) GetConstructor() string {
	return ConstructorBusinessStartPage
}

// Describes settings for a business account start page to set
type InputBusinessStartPage struct {
	meta
	// Title text of the start page; 0-getOption("business_start_page_title_length_max") characters
	Title string `json:"title"`
	// Message text of the start page; 0-getOption("business_start_page_message_length_max") characters
	Message string `json:"message"`
	// Greeting sticker of the start page; pass null if none. The sticker must belong to a sticker set and must not be a custom emoji
	Sticker InputFile `json:"sticker"`
}

func (entity *InputBusinessStartPage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputBusinessStartPage

	return json.Marshal((*stub)(entity))
}

func (*InputBusinessStartPage) GetType() string {
	return TypeInputBusinessStartPage
}

func (*InputBusinessStartPage) GetConstructor() string {
	return ConstructorInputBusinessStartPage
}

func (inputBusinessStartPage *InputBusinessStartPage) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Title   string          `json:"title"`
		Message string          `json:"message"`
		Sticker json.RawMessage `json:"sticker"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputBusinessStartPage.Title = tmp.Title
	inputBusinessStartPage.Message = tmp.Message

	fieldSticker, _ := UnmarshalInputFile(tmp.Sticker)
	inputBusinessStartPage.Sticker = fieldSticker

	return nil
}

// Describes an interval of time when the business is open
type BusinessOpeningHoursInterval struct {
	meta
	// The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0-7*24*60
	StartMinute int32 `json:"start_minute"`
	// The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 1-8*24*60
	EndMinute int32 `json:"end_minute"`
}

func (entity *BusinessOpeningHoursInterval) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessOpeningHoursInterval

	return json.Marshal((*stub)(entity))
}

func (*BusinessOpeningHoursInterval) GetType() string {
	return TypeBusinessOpeningHoursInterval
}

func (*BusinessOpeningHoursInterval) GetConstructor() string {
	return ConstructorBusinessOpeningHoursInterval
}

// Describes opening hours of a business
type BusinessOpeningHours struct {
	meta
	// Unique time zone identifier
	TimeZoneId string `json:"time_zone_id"`
	// Intervals of the time when the business is open
	OpeningHours []*BusinessOpeningHoursInterval `json:"opening_hours"`
}

func (entity *BusinessOpeningHours) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessOpeningHours

	return json.Marshal((*stub)(entity))
}

func (*BusinessOpeningHours) GetType() string {
	return TypeBusinessOpeningHours
}

func (*BusinessOpeningHours) GetConstructor() string {
	return ConstructorBusinessOpeningHours
}

// Contains information about a Telegram Business account
type BusinessInfo struct {
	meta
	// Location of the business; may be null if none
	Location *BusinessLocation `json:"location"`
	// Opening hours of the business; may be null if none. The hours are guaranteed to be valid and has already been split by week days
	OpeningHours *BusinessOpeningHours `json:"opening_hours"`
	// Opening hours of the business in the local time; may be null if none. The hours are guaranteed to be valid and has already been split by week days. Local time zone identifier will be empty. An updateUserFullInfo update is not triggered when value of this field changes
	LocalOpeningHours *BusinessOpeningHours `json:"local_opening_hours"`
	// Time left before the business will open the next time, in seconds; 0 if unknown. An updateUserFullInfo update is not triggered when value of this field changes
	NextOpenIn int32 `json:"next_open_in"`
	// Time left before the business will close the next time, in seconds; 0 if unknown. An updateUserFullInfo update is not triggered when value of this field changes
	NextCloseIn int32 `json:"next_close_in"`
	// The greeting message; may be null if none or the Business account is not of the current user
	GreetingMessageSettings *BusinessGreetingMessageSettings `json:"greeting_message_settings"`
	// The away message; may be null if none or the Business account is not of the current user
	AwayMessageSettings *BusinessAwayMessageSettings `json:"away_message_settings"`
	// Information about start page of the account; may be null if none
	StartPage *BusinessStartPage `json:"start_page"`
}

func (entity *BusinessInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessInfo

	return json.Marshal((*stub)(entity))
}

func (*BusinessInfo) GetType() string {
	return TypeBusinessInfo
}

func (*BusinessInfo) GetConstructor() string {
	return ConstructorBusinessInfo
}

// Contains information about a business chat link
type BusinessChatLink struct {
	meta
	// The HTTPS link
	Link string `json:"link"`
	// Message draft text that will be added to the input field
	Text *FormattedText `json:"text"`
	// Link title
	Title string `json:"title"`
	// Number of times the link was used
	ViewCount int32 `json:"view_count"`
}

func (entity *BusinessChatLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessChatLink

	return json.Marshal((*stub)(entity))
}

func (*BusinessChatLink) GetType() string {
	return TypeBusinessChatLink
}

func (*BusinessChatLink) GetConstructor() string {
	return ConstructorBusinessChatLink
}

// Contains a list of business chat links created by the user
type BusinessChatLinks struct {
	meta
	// List of links
	Links []*BusinessChatLink `json:"links"`
}

func (entity *BusinessChatLinks) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessChatLinks

	return json.Marshal((*stub)(entity))
}

func (*BusinessChatLinks) GetType() string {
	return TypeBusinessChatLinks
}

func (*BusinessChatLinks) GetConstructor() string {
	return ConstructorBusinessChatLinks
}

// Describes a business chat link to create or edit
type InputBusinessChatLink struct {
	meta
	// Message draft text that will be added to the input field
	Text *FormattedText `json:"text"`
	// Link title
	Title string `json:"title"`
}

func (entity *InputBusinessChatLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputBusinessChatLink

	return json.Marshal((*stub)(entity))
}

func (*InputBusinessChatLink) GetType() string {
	return TypeInputBusinessChatLink
}

func (*InputBusinessChatLink) GetConstructor() string {
	return ConstructorInputBusinessChatLink
}

// Contains information about a business chat link
type BusinessChatLinkInfo struct {
	meta
	// Identifier of the private chat that created the link
	ChatId int64 `json:"chat_id"`
	// Message draft text that must be added to the input field
	Text *FormattedText `json:"text"`
}

func (entity *BusinessChatLinkInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessChatLinkInfo

	return json.Marshal((*stub)(entity))
}

func (*BusinessChatLinkInfo) GetType() string {
	return TypeBusinessChatLinkInfo
}

func (*BusinessChatLinkInfo) GetConstructor() string {
	return ConstructorBusinessChatLinkInfo
}

// Information about the sticker, which was used to create the chat photo
type ChatPhotoStickerTypeRegularOrMask struct {
	meta
	// Sticker set identifier
	StickerSetId JsonInt64 `json:"sticker_set_id"`
	// Identifier of the sticker in the set
	StickerId JsonInt64 `json:"sticker_id"`
}

func (entity *ChatPhotoStickerTypeRegularOrMask) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatPhotoStickerTypeRegularOrMask

	return json.Marshal((*stub)(entity))
}

func (*ChatPhotoStickerTypeRegularOrMask) GetType() string {
	return TypeChatPhotoStickerType
}

func (*ChatPhotoStickerTypeRegularOrMask) GetConstructor() string {
	return ConstructorChatPhotoStickerTypeRegularOrMask
}

func (*ChatPhotoStickerTypeRegularOrMask) ChatPhotoStickerTypeConstructor() string {
	return ConstructorChatPhotoStickerTypeRegularOrMask
}

// Information about the custom emoji, which was used to create the chat photo
type ChatPhotoStickerTypeCustomEmoji struct {
	meta
	// Identifier of the custom emoji
	CustomEmojiId JsonInt64 `json:"custom_emoji_id"`
}

func (entity *ChatPhotoStickerTypeCustomEmoji) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatPhotoStickerTypeCustomEmoji

	return json.Marshal((*stub)(entity))
}

func (*ChatPhotoStickerTypeCustomEmoji) GetType() string {
	return TypeChatPhotoStickerType
}

func (*ChatPhotoStickerTypeCustomEmoji) GetConstructor() string {
	return ConstructorChatPhotoStickerTypeCustomEmoji
}

func (*ChatPhotoStickerTypeCustomEmoji) ChatPhotoStickerTypeConstructor() string {
	return ConstructorChatPhotoStickerTypeCustomEmoji
}

// Information about the sticker, which was used to create the chat photo. The sticker is shown at the center of the photo and occupies at most 67% of it
type ChatPhotoSticker struct {
	meta
	// Type of the sticker
	Type ChatPhotoStickerType `json:"type"`
	// The fill to be used as background for the sticker; rotation angle in backgroundFillGradient isn't supported
	BackgroundFill BackgroundFill `json:"background_fill"`
}

func (entity *ChatPhotoSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatPhotoSticker

	return json.Marshal((*stub)(entity))
}

func (*ChatPhotoSticker) GetType() string {
	return TypeChatPhotoSticker
}

func (*ChatPhotoSticker) GetConstructor() string {
	return ConstructorChatPhotoSticker
}

func (chatPhotoSticker *ChatPhotoSticker) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type           json.RawMessage `json:"type"`
		BackgroundFill json.RawMessage `json:"background_fill"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldType, _ := UnmarshalChatPhotoStickerType(tmp.Type)
	chatPhotoSticker.Type = fieldType

	fieldBackgroundFill, _ := UnmarshalBackgroundFill(tmp.BackgroundFill)
	chatPhotoSticker.BackgroundFill = fieldBackgroundFill

	return nil
}

// Animated variant of a chat photo in MPEG4 format
type AnimatedChatPhoto struct {
	meta
	// Animation width and height
	Length int32 `json:"length"`
	// Information about the animation file
	File *File `json:"file"`
	// Timestamp of the frame, used as a static chat photo
	MainFrameTimestamp float64 `json:"main_frame_timestamp"`
}

func (entity *AnimatedChatPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AnimatedChatPhoto

	return json.Marshal((*stub)(entity))
}

func (*AnimatedChatPhoto) GetType() string {
	return TypeAnimatedChatPhoto
}

func (*AnimatedChatPhoto) GetConstructor() string {
	return ConstructorAnimatedChatPhoto
}

// Describes a chat or user profile photo
type ChatPhoto struct {
	meta
	// Unique photo identifier
	Id JsonInt64 `json:"id"`
	// Point in time (Unix timestamp) when the photo has been added
	AddedDate int32 `json:"added_date"`
	// Photo minithumbnail; may be null
	Minithumbnail *Minithumbnail `json:"minithumbnail"`
	// Available variants of the photo in JPEG format, in different size
	Sizes []*PhotoSize `json:"sizes"`
	// A big (up to 1280x1280) animated variant of the photo in MPEG4 format; may be null
	Animation *AnimatedChatPhoto `json:"animation"`
	// A small (160x160) animated variant of the photo in MPEG4 format; may be null even the big animation is available
	SmallAnimation *AnimatedChatPhoto `json:"small_animation"`
	// Sticker-based version of the chat photo; may be null
	Sticker *ChatPhotoSticker `json:"sticker"`
}

func (entity *ChatPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatPhoto

	return json.Marshal((*stub)(entity))
}

func (*ChatPhoto) GetType() string {
	return TypeChatPhoto
}

func (*ChatPhoto) GetConstructor() string {
	return ConstructorChatPhoto
}

// Contains a list of chat or user profile photos
type ChatPhotos struct {
	meta
	// Total number of photos
	TotalCount int32 `json:"total_count"`
	// List of photos
	Photos []*ChatPhoto `json:"photos"`
}

func (entity *ChatPhotos) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatPhotos

	return json.Marshal((*stub)(entity))
}

func (*ChatPhotos) GetType() string {
	return TypeChatPhotos
}

func (*ChatPhotos) GetConstructor() string {
	return ConstructorChatPhotos
}

// A previously used profile photo of the current user
type InputChatPhotoPrevious struct {
	meta
	// Identifier of the current user's profile photo to reuse
	ChatPhotoId JsonInt64 `json:"chat_photo_id"`
}

func (entity *InputChatPhotoPrevious) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputChatPhotoPrevious

	return json.Marshal((*stub)(entity))
}

func (*InputChatPhotoPrevious) GetType() string {
	return TypeInputChatPhoto
}

func (*InputChatPhotoPrevious) GetConstructor() string {
	return ConstructorInputChatPhotoPrevious
}

func (*InputChatPhotoPrevious) InputChatPhotoConstructor() string {
	return ConstructorInputChatPhotoPrevious
}

// A static photo in JPEG format
type InputChatPhotoStatic struct {
	meta
	// Photo to be set as profile photo. Only inputFileLocal and inputFileGenerated are allowed
	Photo InputFile `json:"photo"`
}

func (entity *InputChatPhotoStatic) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputChatPhotoStatic

	return json.Marshal((*stub)(entity))
}

func (*InputChatPhotoStatic) GetType() string {
	return TypeInputChatPhoto
}

func (*InputChatPhotoStatic) GetConstructor() string {
	return ConstructorInputChatPhotoStatic
}

func (*InputChatPhotoStatic) InputChatPhotoConstructor() string {
	return ConstructorInputChatPhotoStatic
}

func (inputChatPhotoStatic *InputChatPhotoStatic) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Photo json.RawMessage `json:"photo"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldPhoto, _ := UnmarshalInputFile(tmp.Photo)
	inputChatPhotoStatic.Photo = fieldPhoto

	return nil
}

// An animation in MPEG4 format; must be square, at most 10 seconds long, have width between 160 and 1280 and be at most 2MB in size
type InputChatPhotoAnimation struct {
	meta
	// Animation to be set as profile photo. Only inputFileLocal and inputFileGenerated are allowed
	Animation InputFile `json:"animation"`
	// Timestamp of the frame, which will be used as static chat photo
	MainFrameTimestamp float64 `json:"main_frame_timestamp"`
}

func (entity *InputChatPhotoAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputChatPhotoAnimation

	return json.Marshal((*stub)(entity))
}

func (*InputChatPhotoAnimation) GetType() string {
	return TypeInputChatPhoto
}

func (*InputChatPhotoAnimation) GetConstructor() string {
	return ConstructorInputChatPhotoAnimation
}

func (*InputChatPhotoAnimation) InputChatPhotoConstructor() string {
	return ConstructorInputChatPhotoAnimation
}

func (inputChatPhotoAnimation *InputChatPhotoAnimation) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Animation          json.RawMessage `json:"animation"`
		MainFrameTimestamp float64         `json:"main_frame_timestamp"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputChatPhotoAnimation.MainFrameTimestamp = tmp.MainFrameTimestamp

	fieldAnimation, _ := UnmarshalInputFile(tmp.Animation)
	inputChatPhotoAnimation.Animation = fieldAnimation

	return nil
}

// A sticker on a custom background
type InputChatPhotoSticker struct {
	meta
	// Information about the sticker
	Sticker *ChatPhotoSticker `json:"sticker"`
}

func (entity *InputChatPhotoSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputChatPhotoSticker

	return json.Marshal((*stub)(entity))
}

func (*InputChatPhotoSticker) GetType() string {
	return TypeInputChatPhoto
}

func (*InputChatPhotoSticker) GetConstructor() string {
	return ConstructorInputChatPhotoSticker
}

func (*InputChatPhotoSticker) InputChatPhotoConstructor() string {
	return ConstructorInputChatPhotoSticker
}

// Describes actions that a user is allowed to take in a chat
type ChatPermissions struct {
	meta
	// True, if the user can send text messages, contacts, giveaways, giveaway winners, invoices, locations, and venues
	CanSendBasicMessages bool `json:"can_send_basic_messages"`
	// True, if the user can send music files
	CanSendAudios bool `json:"can_send_audios"`
	// True, if the user can send documents
	CanSendDocuments bool `json:"can_send_documents"`
	// True, if the user can send photos
	CanSendPhotos bool `json:"can_send_photos"`
	// True, if the user can send videos
	CanSendVideos bool `json:"can_send_videos"`
	// True, if the user can send video notes
	CanSendVideoNotes bool `json:"can_send_video_notes"`
	// True, if the user can send voice notes
	CanSendVoiceNotes bool `json:"can_send_voice_notes"`
	// True, if the user can send polls
	CanSendPolls bool `json:"can_send_polls"`
	// True, if the user can send animations, games, stickers, and dice and use inline bots
	CanSendOtherMessages bool `json:"can_send_other_messages"`
	// True, if the user may add a link preview to their messages
	CanAddLinkPreviews bool `json:"can_add_link_previews"`
	// True, if the user can change the chat title, photo, and other settings
	CanChangeInfo bool `json:"can_change_info"`
	// True, if the user can invite new users to the chat
	CanInviteUsers bool `json:"can_invite_users"`
	// True, if the user can pin messages
	CanPinMessages bool `json:"can_pin_messages"`
	// True, if the user can create topics
	CanCreateTopics bool `json:"can_create_topics"`
}

func (entity *ChatPermissions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatPermissions

	return json.Marshal((*stub)(entity))
}

func (*ChatPermissions) GetType() string {
	return TypeChatPermissions
}

func (*ChatPermissions) GetConstructor() string {
	return ConstructorChatPermissions
}

// Describes rights of the administrator
type ChatAdministratorRights struct {
	meta
	// True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report supergroup spam messages and ignore slow mode. Implied by any other privilege; applicable to supergroups and channels only
	CanManageChat bool `json:"can_manage_chat"`
	// True, if the administrator can change the chat title, photo, and other settings
	CanChangeInfo bool `json:"can_change_info"`
	// True, if the administrator can create channel posts or view channel statistics; applicable to channels only
	CanPostMessages bool `json:"can_post_messages"`
	// True, if the administrator can edit messages of other users and pin messages; applicable to channels only
	CanEditMessages bool `json:"can_edit_messages"`
	// True, if the administrator can delete messages of other users
	CanDeleteMessages bool `json:"can_delete_messages"`
	// True, if the administrator can invite new users to the chat
	CanInviteUsers bool `json:"can_invite_users"`
	// True, if the administrator can restrict, ban, or unban chat members or view supergroup statistics; always true for channels
	CanRestrictMembers bool `json:"can_restrict_members"`
	// True, if the administrator can pin messages; applicable to basic groups and supergroups only
	CanPinMessages bool `json:"can_pin_messages"`
	// True, if the administrator can create, rename, close, reopen, hide, and unhide forum topics; applicable to forum supergroups only
	CanManageTopics bool `json:"can_manage_topics"`
	// True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that were directly or indirectly promoted by them
	CanPromoteMembers bool `json:"can_promote_members"`
	// True, if the administrator can manage video chats
	CanManageVideoChats bool `json:"can_manage_video_chats"`
	// True, if the administrator can create new chat stories, or edit and delete posted stories; applicable to supergroups and channels only
	CanPostStories bool `json:"can_post_stories"`
	// True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access story archive; applicable to supergroups and channels only
	CanEditStories bool `json:"can_edit_stories"`
	// True, if the administrator can delete stories posted by other users; applicable to supergroups and channels only
	CanDeleteStories bool `json:"can_delete_stories"`
	// True, if the administrator isn't shown in the chat member list and sends messages anonymously; applicable to supergroups only
	IsAnonymous bool `json:"is_anonymous"`
}

func (entity *ChatAdministratorRights) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatAdministratorRights

	return json.Marshal((*stub)(entity))
}

func (*ChatAdministratorRights) GetType() string {
	return TypeChatAdministratorRights
}

func (*ChatAdministratorRights) GetConstructor() string {
	return ConstructorChatAdministratorRights
}

// Describes a subscription to a channel chat
type StarSubscriptionTypeChannel struct {
	meta
	// True, if the subscription is active and the user can use the method reuseStarSubscription to join the subscribed chat again
	CanReuse bool `json:"can_reuse"`
	// The invite link that can be used to renew the subscription if it has been expired; may be empty, if the link isn't available anymore
	InviteLink string `json:"invite_link"`
}

func (entity *StarSubscriptionTypeChannel) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarSubscriptionTypeChannel

	return json.Marshal((*stub)(entity))
}

func (*StarSubscriptionTypeChannel) GetType() string {
	return TypeStarSubscriptionType
}

func (*StarSubscriptionTypeChannel) GetConstructor() string {
	return ConstructorStarSubscriptionTypeChannel
}

func (*StarSubscriptionTypeChannel) StarSubscriptionTypeConstructor() string {
	return ConstructorStarSubscriptionTypeChannel
}

// Describes a subscription in a bot or a business account
type StarSubscriptionTypeBot struct {
	meta
	// True, if the subscription was canceled by the bot and can't be extended
	IsCanceledByBot bool `json:"is_canceled_by_bot"`
	// Subscription invoice title
	Title string `json:"title"`
	// Subscription invoice photo
	Photo *Photo `json:"photo"`
	// The link to the subscription invoice
	InvoiceLink string `json:"invoice_link"`
}

func (entity *StarSubscriptionTypeBot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarSubscriptionTypeBot

	return json.Marshal((*stub)(entity))
}

func (*StarSubscriptionTypeBot) GetType() string {
	return TypeStarSubscriptionType
}

func (*StarSubscriptionTypeBot) GetConstructor() string {
	return ConstructorStarSubscriptionTypeBot
}

func (*StarSubscriptionTypeBot) StarSubscriptionTypeConstructor() string {
	return ConstructorStarSubscriptionTypeBot
}

// Describes subscription plan paid in Telegram Stars
type StarSubscriptionPricing struct {
	meta
	// The number of seconds between consecutive Telegram Star debiting
	Period int32 `json:"period"`
	// The amount of Telegram Stars that must be paid for each period
	StarCount int64 `json:"star_count"`
}

func (entity *StarSubscriptionPricing) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarSubscriptionPricing

	return json.Marshal((*stub)(entity))
}

func (*StarSubscriptionPricing) GetType() string {
	return TypeStarSubscriptionPricing
}

func (*StarSubscriptionPricing) GetConstructor() string {
	return ConstructorStarSubscriptionPricing
}

// Contains information about subscription to a channel chat, a bot, or a business account that was paid in Telegram Stars
type StarSubscription struct {
	meta
	// Unique identifier of the subscription
	Id string `json:"id"`
	// Identifier of the chat that is subscribed
	ChatId int64 `json:"chat_id"`
	// Point in time (Unix timestamp) when the subscription will expire or expired
	ExpirationDate int32 `json:"expiration_date"`
	// True, if the subscription was canceled
	IsCanceled bool `json:"is_canceled"`
	// True, if the subscription expires soon and there are no enough Telegram Stars on the user's balance to extend it
	IsExpiring bool `json:"is_expiring"`
	// The subscription plan
	Pricing *StarSubscriptionPricing `json:"pricing"`
	// Type of the subscription
	Type StarSubscriptionType `json:"type"`
}

func (entity *StarSubscription) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarSubscription

	return json.Marshal((*stub)(entity))
}

func (*StarSubscription) GetType() string {
	return TypeStarSubscription
}

func (*StarSubscription) GetConstructor() string {
	return ConstructorStarSubscription
}

func (starSubscription *StarSubscription) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id             string                   `json:"id"`
		ChatId         int64                    `json:"chat_id"`
		ExpirationDate int32                    `json:"expiration_date"`
		IsCanceled     bool                     `json:"is_canceled"`
		IsExpiring     bool                     `json:"is_expiring"`
		Pricing        *StarSubscriptionPricing `json:"pricing"`
		Type           json.RawMessage          `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	starSubscription.Id = tmp.Id
	starSubscription.ChatId = tmp.ChatId
	starSubscription.ExpirationDate = tmp.ExpirationDate
	starSubscription.IsCanceled = tmp.IsCanceled
	starSubscription.IsExpiring = tmp.IsExpiring
	starSubscription.Pricing = tmp.Pricing

	fieldType, _ := UnmarshalStarSubscriptionType(tmp.Type)
	starSubscription.Type = fieldType

	return nil
}

// Represents a list of Telegram Star subscriptions
type StarSubscriptions struct {
	meta
	// The amount of owned Telegram Stars
	StarCount int64 `json:"star_count"`
	// List of subscriptions for Telegram Stars
	Subscriptions []*StarSubscription `json:"subscriptions"`
	// The number of Telegram Stars required to buy to extend subscriptions expiring soon
	RequiredStarCount int64 `json:"required_star_count"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *StarSubscriptions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarSubscriptions

	return json.Marshal((*stub)(entity))
}

func (*StarSubscriptions) GetType() string {
	return TypeStarSubscriptions
}

func (*StarSubscriptions) GetConstructor() string {
	return ConstructorStarSubscriptions
}

// Contains information about a product that can be paid with invoice
type ProductInfo struct {
	meta
	// Product title
	Title string `json:"title"`
	// Product description
	Description *FormattedText `json:"description"`
	// Product photo; may be null
	Photo *Photo `json:"photo"`
}

func (entity *ProductInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ProductInfo

	return json.Marshal((*stub)(entity))
}

func (*ProductInfo) GetType() string {
	return TypeProductInfo
}

func (*ProductInfo) GetConstructor() string {
	return ConstructorProductInfo
}

// Describes an option for buying Telegram Premium to a user
type PremiumPaymentOption struct {
	meta
	// ISO 4217 currency code for Telegram Premium subscription payment
	Currency string `json:"currency"`
	// The amount to pay, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// The discount associated with this option, as a percentage
	DiscountPercentage int32 `json:"discount_percentage"`
	// Number of months the Telegram Premium subscription will be active. Use getPremiumInfoSticker to get the sticker to be used as representation of the Telegram Premium subscription
	MonthCount int32 `json:"month_count"`
	// Identifier of the store product associated with the option
	StoreProductId string `json:"store_product_id"`
	// An internal link to be opened for buying Telegram Premium to the user if store payment isn't possible; may be null if direct payment isn't available
	PaymentLink InternalLinkType `json:"payment_link"`
}

func (entity *PremiumPaymentOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumPaymentOption

	return json.Marshal((*stub)(entity))
}

func (*PremiumPaymentOption) GetType() string {
	return TypePremiumPaymentOption
}

func (*PremiumPaymentOption) GetConstructor() string {
	return ConstructorPremiumPaymentOption
}

func (premiumPaymentOption *PremiumPaymentOption) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Currency           string          `json:"currency"`
		Amount             int64           `json:"amount"`
		DiscountPercentage int32           `json:"discount_percentage"`
		MonthCount         int32           `json:"month_count"`
		StoreProductId     string          `json:"store_product_id"`
		PaymentLink        json.RawMessage `json:"payment_link"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	premiumPaymentOption.Currency = tmp.Currency
	premiumPaymentOption.Amount = tmp.Amount
	premiumPaymentOption.DiscountPercentage = tmp.DiscountPercentage
	premiumPaymentOption.MonthCount = tmp.MonthCount
	premiumPaymentOption.StoreProductId = tmp.StoreProductId

	fieldPaymentLink, _ := UnmarshalInternalLinkType(tmp.PaymentLink)
	premiumPaymentOption.PaymentLink = fieldPaymentLink

	return nil
}

// Describes an option for buying or upgrading Telegram Premium for self
type PremiumStatePaymentOption struct {
	meta
	// Information about the payment option
	PaymentOption *PremiumPaymentOption `json:"payment_option"`
	// True, if this is the currently used Telegram Premium subscription option
	IsCurrent bool `json:"is_current"`
	// True, if the payment option can be used to upgrade the existing Telegram Premium subscription
	IsUpgrade bool `json:"is_upgrade"`
	// Identifier of the last in-store transaction for the currently used option
	LastTransactionId string `json:"last_transaction_id"`
}

func (entity *PremiumStatePaymentOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumStatePaymentOption

	return json.Marshal((*stub)(entity))
}

func (*PremiumStatePaymentOption) GetType() string {
	return TypePremiumStatePaymentOption
}

func (*PremiumStatePaymentOption) GetConstructor() string {
	return ConstructorPremiumStatePaymentOption
}

// Describes an option for creating Telegram Premium gift codes or Telegram Premium giveaway. Use telegramPaymentPurposePremiumGiftCodes or telegramPaymentPurposePremiumGiveaway for out-of-store payments
type PremiumGiftCodePaymentOption struct {
	meta
	// ISO 4217 currency code for Telegram Premium gift code payment
	Currency string `json:"currency"`
	// The amount to pay, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// The discount associated with this option, as a percentage
	DiscountPercentage int32 `json:"discount_percentage"`
	// Number of users which will be able to activate the gift codes
	WinnerCount int32 `json:"winner_count"`
	// Number of months the Telegram Premium subscription will be active
	MonthCount int32 `json:"month_count"`
	// Identifier of the store product associated with the option; may be empty if none
	StoreProductId string `json:"store_product_id"`
	// Number of times the store product must be paid
	StoreProductQuantity int32 `json:"store_product_quantity"`
	// A sticker to be shown along with the gift code; may be null if unknown
	Sticker *Sticker `json:"sticker"`
}

func (entity *PremiumGiftCodePaymentOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumGiftCodePaymentOption

	return json.Marshal((*stub)(entity))
}

func (*PremiumGiftCodePaymentOption) GetType() string {
	return TypePremiumGiftCodePaymentOption
}

func (*PremiumGiftCodePaymentOption) GetConstructor() string {
	return ConstructorPremiumGiftCodePaymentOption
}

// Contains a list of options for creating Telegram Premium gift codes or Telegram Premium giveaway
type PremiumGiftCodePaymentOptions struct {
	meta
	// The list of options
	Options []*PremiumGiftCodePaymentOption `json:"options"`
}

func (entity *PremiumGiftCodePaymentOptions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumGiftCodePaymentOptions

	return json.Marshal((*stub)(entity))
}

func (*PremiumGiftCodePaymentOptions) GetType() string {
	return TypePremiumGiftCodePaymentOptions
}

func (*PremiumGiftCodePaymentOptions) GetConstructor() string {
	return ConstructorPremiumGiftCodePaymentOptions
}

// Contains information about a Telegram Premium gift code
type PremiumGiftCodeInfo struct {
	meta
	// Identifier of a chat or a user that created the gift code; may be null if unknown. If null and the code is from messagePremiumGiftCode message, then creator_id from the message can be used
	CreatorId MessageSender `json:"creator_id"`
	// Point in time (Unix timestamp) when the code was created
	CreationDate int32 `json:"creation_date"`
	// True, if the gift code was created for a giveaway
	IsFromGiveaway bool `json:"is_from_giveaway"`
	// Identifier of the corresponding giveaway message in the creator_id chat; can be 0 or an identifier of a deleted message
	GiveawayMessageId int64 `json:"giveaway_message_id"`
	// Number of months the Telegram Premium subscription will be active after code activation
	MonthCount int32 `json:"month_count"`
	// Identifier of a user for which the code was created; 0 if none
	UserId int64 `json:"user_id"`
	// Point in time (Unix timestamp) when the code was activated; 0 if none
	UseDate int32 `json:"use_date"`
}

func (entity *PremiumGiftCodeInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumGiftCodeInfo

	return json.Marshal((*stub)(entity))
}

func (*PremiumGiftCodeInfo) GetType() string {
	return TypePremiumGiftCodeInfo
}

func (*PremiumGiftCodeInfo) GetConstructor() string {
	return ConstructorPremiumGiftCodeInfo
}

func (premiumGiftCodeInfo *PremiumGiftCodeInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		CreatorId         json.RawMessage `json:"creator_id"`
		CreationDate      int32           `json:"creation_date"`
		IsFromGiveaway    bool            `json:"is_from_giveaway"`
		GiveawayMessageId int64           `json:"giveaway_message_id"`
		MonthCount        int32           `json:"month_count"`
		UserId            int64           `json:"user_id"`
		UseDate           int32           `json:"use_date"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	premiumGiftCodeInfo.CreationDate = tmp.CreationDate
	premiumGiftCodeInfo.IsFromGiveaway = tmp.IsFromGiveaway
	premiumGiftCodeInfo.GiveawayMessageId = tmp.GiveawayMessageId
	premiumGiftCodeInfo.MonthCount = tmp.MonthCount
	premiumGiftCodeInfo.UserId = tmp.UserId
	premiumGiftCodeInfo.UseDate = tmp.UseDate

	fieldCreatorId, _ := UnmarshalMessageSender(tmp.CreatorId)
	premiumGiftCodeInfo.CreatorId = fieldCreatorId

	return nil
}

// Describes an option for buying Telegram Stars. Use telegramPaymentPurposeStars for out-of-store payments
type StarPaymentOption struct {
	meta
	// ISO 4217 currency code for the payment
	Currency string `json:"currency"`
	// The amount to pay, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Number of Telegram Stars that will be purchased
	StarCount int64 `json:"star_count"`
	// Identifier of the store product associated with the option; may be empty if none
	StoreProductId string `json:"store_product_id"`
	// True, if the option must be shown only in the full list of payment options
	IsAdditional bool `json:"is_additional"`
}

func (entity *StarPaymentOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarPaymentOption

	return json.Marshal((*stub)(entity))
}

func (*StarPaymentOption) GetType() string {
	return TypeStarPaymentOption
}

func (*StarPaymentOption) GetConstructor() string {
	return ConstructorStarPaymentOption
}

// Contains a list of options for buying Telegram Stars
type StarPaymentOptions struct {
	meta
	// The list of options
	Options []*StarPaymentOption `json:"options"`
}

func (entity *StarPaymentOptions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarPaymentOptions

	return json.Marshal((*stub)(entity))
}

func (*StarPaymentOptions) GetType() string {
	return TypeStarPaymentOptions
}

func (*StarPaymentOptions) GetConstructor() string {
	return ConstructorStarPaymentOptions
}

// Describes an option for the number of winners of a Telegram Star giveaway
type StarGiveawayWinnerOption struct {
	meta
	// The number of users that will be chosen as winners
	WinnerCount int32 `json:"winner_count"`
	// The number of Telegram Stars that will be won by the winners of the giveaway
	WonStarCount int64 `json:"won_star_count"`
	// True, if the option must be chosen by default
	IsDefault bool `json:"is_default"`
}

func (entity *StarGiveawayWinnerOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarGiveawayWinnerOption

	return json.Marshal((*stub)(entity))
}

func (*StarGiveawayWinnerOption) GetType() string {
	return TypeStarGiveawayWinnerOption
}

func (*StarGiveawayWinnerOption) GetConstructor() string {
	return ConstructorStarGiveawayWinnerOption
}

// Describes an option for creating Telegram Star giveaway. Use telegramPaymentPurposeStarGiveaway for out-of-store payments
type StarGiveawayPaymentOption struct {
	meta
	// ISO 4217 currency code for the payment
	Currency string `json:"currency"`
	// The amount to pay, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Number of Telegram Stars that will be distributed among winners
	StarCount int64 `json:"star_count"`
	// Identifier of the store product associated with the option; may be empty if none
	StoreProductId string `json:"store_product_id"`
	// Number of times the chat will be boosted for one year if the option is chosen
	YearlyBoostCount int32 `json:"yearly_boost_count"`
	// Allowed options for the number of giveaway winners
	WinnerOptions []*StarGiveawayWinnerOption `json:"winner_options"`
	// True, if the option must be chosen by default
	IsDefault bool `json:"is_default"`
	// True, if the option must be shown only in the full list of payment options
	IsAdditional bool `json:"is_additional"`
}

func (entity *StarGiveawayPaymentOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarGiveawayPaymentOption

	return json.Marshal((*stub)(entity))
}

func (*StarGiveawayPaymentOption) GetType() string {
	return TypeStarGiveawayPaymentOption
}

func (*StarGiveawayPaymentOption) GetConstructor() string {
	return ConstructorStarGiveawayPaymentOption
}

// Contains a list of options for creating Telegram Star giveaway
type StarGiveawayPaymentOptions struct {
	meta
	// The list of options
	Options []*StarGiveawayPaymentOption `json:"options"`
}

func (entity *StarGiveawayPaymentOptions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarGiveawayPaymentOptions

	return json.Marshal((*stub)(entity))
}

func (*StarGiveawayPaymentOptions) GetType() string {
	return TypeStarGiveawayPaymentOptions
}

func (*StarGiveawayPaymentOptions) GetConstructor() string {
	return ConstructorStarGiveawayPaymentOptions
}

// Describes a gift that can be sent to another user
type Gift struct {
	meta
	// Unique identifier of the gift
	Id JsonInt64 `json:"id"`
	// The sticker representing the gift
	Sticker *Sticker `json:"sticker"`
	// Number of Telegram Stars that must be paid for the gift
	StarCount int64 `json:"star_count"`
	// Number of Telegram Stars that can be claimed by the receiver instead of the gift by default. If the gift was paid with just bought Telegram Stars, then full value can be claimed
	DefaultSellStarCount int64 `json:"default_sell_star_count"`
	// True, if the gift is a birthday gift
	IsForBirthday bool `json:"is_for_birthday"`
	// Number of remaining times the gift can be purchased by all users; 0 if not limited or the gift was sold out
	RemainingCount int32 `json:"remaining_count"`
	// Number of total times the gift can be purchased by all users; 0 if not limited
	TotalCount int32 `json:"total_count"`
	// Point in time (Unix timestamp) when the gift was send for the first time; for sold out gifts only
	FirstSendDate int32 `json:"first_send_date"`
	// Point in time (Unix timestamp) when the gift was send for the last time; for sold out gifts only
	LastSendDate int32 `json:"last_send_date"`
}

func (entity *Gift) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Gift

	return json.Marshal((*stub)(entity))
}

func (*Gift) GetType() string {
	return TypeGift
}

func (*Gift) GetConstructor() string {
	return ConstructorGift
}

// Contains a list of gifts that can be sent to another user
type Gifts struct {
	meta
	// The list of gifts
	Gifts []*Gift `json:"gifts"`
}

func (entity *Gifts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Gifts

	return json.Marshal((*stub)(entity))
}

func (*Gifts) GetType() string {
	return TypeGifts
}

func (*Gifts) GetConstructor() string {
	return ConstructorGifts
}

// Represents a gift received by a user
type UserGift struct {
	meta
	// Identifier of the user that sent the gift; 0 if unknown
	SenderUserId int64 `json:"sender_user_id"`
	// Message added to the gift
	Text *FormattedText `json:"text"`
	// True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone are able to see them
	IsPrivate bool `json:"is_private"`
	// True, if the gift is displayed on the user's profile page; may be false only for the receiver of the gift
	IsSaved bool `json:"is_saved"`
	// Point in time (Unix timestamp) when the gift was sent
	Date int32 `json:"date"`
	// The gift
	Gift *Gift `json:"gift"`
	// Identifier of the message with the gift in the chat with the sender of the gift; can be 0 or an identifier of a deleted message; only for the gift receiver
	MessageId int64 `json:"message_id"`
	// Number of Telegram Stars that can be claimed by the receiver instead of the gift; 0 if the gift can't be sold by the current user
	SellStarCount int64 `json:"sell_star_count"`
}

func (entity *UserGift) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserGift

	return json.Marshal((*stub)(entity))
}

func (*UserGift) GetType() string {
	return TypeUserGift
}

func (*UserGift) GetConstructor() string {
	return ConstructorUserGift
}

// Represents a list of gifts received by a user
type UserGifts struct {
	meta
	// The total number of received gifts
	TotalCount int32 `json:"total_count"`
	// The list of gifts
	Gifts []*UserGift `json:"gifts"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *UserGifts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserGifts

	return json.Marshal((*stub)(entity))
}

func (*UserGifts) GetType() string {
	return TypeUserGifts
}

func (*UserGifts) GetConstructor() string {
	return ConstructorUserGifts
}

// The transaction is incoming and increases the number of owned Telegram Stars
type StarTransactionDirectionIncoming struct {
	meta
}

func (entity *StarTransactionDirectionIncoming) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionDirectionIncoming

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionDirectionIncoming) GetType() string {
	return TypeStarTransactionDirection
}

func (*StarTransactionDirectionIncoming) GetConstructor() string {
	return ConstructorStarTransactionDirectionIncoming
}

func (*StarTransactionDirectionIncoming) StarTransactionDirectionConstructor() string {
	return ConstructorStarTransactionDirectionIncoming
}

// The transaction is outgoing and decreases the number of owned Telegram Stars
type StarTransactionDirectionOutgoing struct {
	meta
}

func (entity *StarTransactionDirectionOutgoing) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionDirectionOutgoing

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionDirectionOutgoing) GetType() string {
	return TypeStarTransactionDirection
}

func (*StarTransactionDirectionOutgoing) GetConstructor() string {
	return ConstructorStarTransactionDirectionOutgoing
}

func (*StarTransactionDirectionOutgoing) StarTransactionDirectionConstructor() string {
	return ConstructorStarTransactionDirectionOutgoing
}

// Paid media were bought
type BotTransactionPurposePaidMedia struct {
	meta
	// The bought media if the transaction wasn't refunded
	Media []PaidMedia `json:"media"`
	// Bot-provided payload; for bots only
	Payload string `json:"payload"`
}

func (entity *BotTransactionPurposePaidMedia) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotTransactionPurposePaidMedia

	return json.Marshal((*stub)(entity))
}

func (*BotTransactionPurposePaidMedia) GetType() string {
	return TypeBotTransactionPurpose
}

func (*BotTransactionPurposePaidMedia) GetConstructor() string {
	return ConstructorBotTransactionPurposePaidMedia
}

func (*BotTransactionPurposePaidMedia) BotTransactionPurposeConstructor() string {
	return ConstructorBotTransactionPurposePaidMedia
}

func (botTransactionPurposePaidMedia *BotTransactionPurposePaidMedia) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Media   []json.RawMessage `json:"media"`
		Payload string            `json:"payload"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	botTransactionPurposePaidMedia.Payload = tmp.Payload

	fieldMedia, _ := UnmarshalListOfPaidMedia(tmp.Media)
	botTransactionPurposePaidMedia.Media = fieldMedia

	return nil
}

// User bought a product from the bot
type BotTransactionPurposeInvoicePayment struct {
	meta
	// Information about the bought product; may be null if not applicable
	ProductInfo *ProductInfo `json:"product_info"`
	// Invoice payload; for bots only
	InvoicePayload []byte `json:"invoice_payload"`
}

func (entity *BotTransactionPurposeInvoicePayment) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotTransactionPurposeInvoicePayment

	return json.Marshal((*stub)(entity))
}

func (*BotTransactionPurposeInvoicePayment) GetType() string {
	return TypeBotTransactionPurpose
}

func (*BotTransactionPurposeInvoicePayment) GetConstructor() string {
	return ConstructorBotTransactionPurposeInvoicePayment
}

func (*BotTransactionPurposeInvoicePayment) BotTransactionPurposeConstructor() string {
	return ConstructorBotTransactionPurposeInvoicePayment
}

// User bought a subscription in a bot or a business account
type BotTransactionPurposeSubscription struct {
	meta
	// The number of seconds between consecutive Telegram Star debiting
	Period int32 `json:"period"`
	// Information about the bought subscription; may be null if not applicable
	ProductInfo *ProductInfo `json:"product_info"`
	// Invoice payload; for bots only
	InvoicePayload []byte `json:"invoice_payload"`
}

func (entity *BotTransactionPurposeSubscription) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotTransactionPurposeSubscription

	return json.Marshal((*stub)(entity))
}

func (*BotTransactionPurposeSubscription) GetType() string {
	return TypeBotTransactionPurpose
}

func (*BotTransactionPurposeSubscription) GetConstructor() string {
	return ConstructorBotTransactionPurposeSubscription
}

func (*BotTransactionPurposeSubscription) BotTransactionPurposeConstructor() string {
	return ConstructorBotTransactionPurposeSubscription
}

// Paid media were bought
type ChatTransactionPurposePaidMedia struct {
	meta
	// Identifier of the corresponding message with paid media; can be 0 or an identifier of a deleted message
	MessageId int64 `json:"message_id"`
	// The bought media if the transaction wasn't refunded
	Media []PaidMedia `json:"media"`
}

func (entity *ChatTransactionPurposePaidMedia) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatTransactionPurposePaidMedia

	return json.Marshal((*stub)(entity))
}

func (*ChatTransactionPurposePaidMedia) GetType() string {
	return TypeChatTransactionPurpose
}

func (*ChatTransactionPurposePaidMedia) GetConstructor() string {
	return ConstructorChatTransactionPurposePaidMedia
}

func (*ChatTransactionPurposePaidMedia) ChatTransactionPurposeConstructor() string {
	return ConstructorChatTransactionPurposePaidMedia
}

func (chatTransactionPurposePaidMedia *ChatTransactionPurposePaidMedia) UnmarshalJSON(data []byte) error {
	var tmp struct {
		MessageId int64             `json:"message_id"`
		Media     []json.RawMessage `json:"media"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatTransactionPurposePaidMedia.MessageId = tmp.MessageId

	fieldMedia, _ := UnmarshalListOfPaidMedia(tmp.Media)
	chatTransactionPurposePaidMedia.Media = fieldMedia

	return nil
}

// User joined the channel and subscribed to regular payments in Telegram Stars
type ChatTransactionPurposeJoin struct {
	meta
	// The number of seconds between consecutive Telegram Star debiting
	Period int32 `json:"period"`
}

func (entity *ChatTransactionPurposeJoin) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatTransactionPurposeJoin

	return json.Marshal((*stub)(entity))
}

func (*ChatTransactionPurposeJoin) GetType() string {
	return TypeChatTransactionPurpose
}

func (*ChatTransactionPurposeJoin) GetConstructor() string {
	return ConstructorChatTransactionPurposeJoin
}

func (*ChatTransactionPurposeJoin) ChatTransactionPurposeConstructor() string {
	return ConstructorChatTransactionPurposeJoin
}

// User paid for a reaction
type ChatTransactionPurposeReaction struct {
	meta
	// Identifier of the reacted message; can be 0 or an identifier of a deleted message
	MessageId int64 `json:"message_id"`
}

func (entity *ChatTransactionPurposeReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatTransactionPurposeReaction

	return json.Marshal((*stub)(entity))
}

func (*ChatTransactionPurposeReaction) GetType() string {
	return TypeChatTransactionPurpose
}

func (*ChatTransactionPurposeReaction) GetConstructor() string {
	return ConstructorChatTransactionPurposeReaction
}

func (*ChatTransactionPurposeReaction) ChatTransactionPurposeConstructor() string {
	return ConstructorChatTransactionPurposeReaction
}

// User received Telegram Stars from a giveaway
type ChatTransactionPurposeGiveaway struct {
	meta
	// Identifier of the message with giveaway; can be 0 or an identifier of a deleted message
	GiveawayMessageId int64 `json:"giveaway_message_id"`
}

func (entity *ChatTransactionPurposeGiveaway) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatTransactionPurposeGiveaway

	return json.Marshal((*stub)(entity))
}

func (*ChatTransactionPurposeGiveaway) GetType() string {
	return TypeChatTransactionPurpose
}

func (*ChatTransactionPurposeGiveaway) GetConstructor() string {
	return ConstructorChatTransactionPurposeGiveaway
}

func (*ChatTransactionPurposeGiveaway) ChatTransactionPurposeConstructor() string {
	return ConstructorChatTransactionPurposeGiveaway
}

// A user gifted Telegram Stars
type UserTransactionPurposeGiftedStars struct {
	meta
	// A sticker to be shown in the transaction information; may be null if unknown
	Sticker *Sticker `json:"sticker"`
}

func (entity *UserTransactionPurposeGiftedStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserTransactionPurposeGiftedStars

	return json.Marshal((*stub)(entity))
}

func (*UserTransactionPurposeGiftedStars) GetType() string {
	return TypeUserTransactionPurpose
}

func (*UserTransactionPurposeGiftedStars) GetConstructor() string {
	return ConstructorUserTransactionPurposeGiftedStars
}

func (*UserTransactionPurposeGiftedStars) UserTransactionPurposeConstructor() string {
	return ConstructorUserTransactionPurposeGiftedStars
}

// The user sold a gift received from another user or bot
type UserTransactionPurposeGiftSell struct {
	meta
	// The gift
	Gift *Gift `json:"gift"`
}

func (entity *UserTransactionPurposeGiftSell) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserTransactionPurposeGiftSell

	return json.Marshal((*stub)(entity))
}

func (*UserTransactionPurposeGiftSell) GetType() string {
	return TypeUserTransactionPurpose
}

func (*UserTransactionPurposeGiftSell) GetConstructor() string {
	return ConstructorUserTransactionPurposeGiftSell
}

func (*UserTransactionPurposeGiftSell) UserTransactionPurposeConstructor() string {
	return ConstructorUserTransactionPurposeGiftSell
}

// The user or the bot sent a gift to a user
type UserTransactionPurposeGiftSend struct {
	meta
	// The gift
	Gift *Gift `json:"gift"`
}

func (entity *UserTransactionPurposeGiftSend) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserTransactionPurposeGiftSend

	return json.Marshal((*stub)(entity))
}

func (*UserTransactionPurposeGiftSend) GetType() string {
	return TypeUserTransactionPurpose
}

func (*UserTransactionPurposeGiftSend) GetConstructor() string {
	return ConstructorUserTransactionPurposeGiftSend
}

func (*UserTransactionPurposeGiftSend) UserTransactionPurposeConstructor() string {
	return ConstructorUserTransactionPurposeGiftSend
}

// The transaction is a transaction with Telegram through a bot
type StarTransactionPartnerTelegram struct {
	meta
}

func (entity *StarTransactionPartnerTelegram) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerTelegram

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerTelegram) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerTelegram) GetConstructor() string {
	return ConstructorStarTransactionPartnerTelegram
}

func (*StarTransactionPartnerTelegram) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerTelegram
}

// The transaction is a transaction with App Store
type StarTransactionPartnerAppStore struct {
	meta
}

func (entity *StarTransactionPartnerAppStore) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerAppStore

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerAppStore) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerAppStore) GetConstructor() string {
	return ConstructorStarTransactionPartnerAppStore
}

func (*StarTransactionPartnerAppStore) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerAppStore
}

// The transaction is a transaction with Google Play
type StarTransactionPartnerGooglePlay struct {
	meta
}

func (entity *StarTransactionPartnerGooglePlay) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerGooglePlay

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerGooglePlay) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerGooglePlay) GetConstructor() string {
	return ConstructorStarTransactionPartnerGooglePlay
}

func (*StarTransactionPartnerGooglePlay) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerGooglePlay
}

// The transaction is a transaction with Fragment
type StarTransactionPartnerFragment struct {
	meta
	// State of the withdrawal; may be null for refunds from Fragment or for Telegram Stars bought on Fragment
	WithdrawalState RevenueWithdrawalState `json:"withdrawal_state"`
}

func (entity *StarTransactionPartnerFragment) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerFragment

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerFragment) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerFragment) GetConstructor() string {
	return ConstructorStarTransactionPartnerFragment
}

func (*StarTransactionPartnerFragment) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerFragment
}

func (starTransactionPartnerFragment *StarTransactionPartnerFragment) UnmarshalJSON(data []byte) error {
	var tmp struct {
		WithdrawalState json.RawMessage `json:"withdrawal_state"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldWithdrawalState, _ := UnmarshalRevenueWithdrawalState(tmp.WithdrawalState)
	starTransactionPartnerFragment.WithdrawalState = fieldWithdrawalState

	return nil
}

// The transaction is a transaction with Telegram Ad platform
type StarTransactionPartnerTelegramAds struct {
	meta
}

func (entity *StarTransactionPartnerTelegramAds) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerTelegramAds

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerTelegramAds) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerTelegramAds) GetConstructor() string {
	return ConstructorStarTransactionPartnerTelegramAds
}

func (*StarTransactionPartnerTelegramAds) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerTelegramAds
}

// The transaction is a transaction with Telegram for API usage
type StarTransactionPartnerTelegramApi struct {
	meta
	// The number of billed requests
	RequestCount int32 `json:"request_count"`
}

func (entity *StarTransactionPartnerTelegramApi) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerTelegramApi

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerTelegramApi) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerTelegramApi) GetConstructor() string {
	return ConstructorStarTransactionPartnerTelegramApi
}

func (*StarTransactionPartnerTelegramApi) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerTelegramApi
}

// The transaction is a transaction with a bot
type StarTransactionPartnerBot struct {
	meta
	// Identifier of the bot
	UserId int64 `json:"user_id"`
	// Purpose of the transaction
	Purpose BotTransactionPurpose `json:"purpose"`
}

func (entity *StarTransactionPartnerBot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerBot

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerBot) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerBot) GetConstructor() string {
	return ConstructorStarTransactionPartnerBot
}

func (*StarTransactionPartnerBot) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerBot
}

func (starTransactionPartnerBot *StarTransactionPartnerBot) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserId  int64           `json:"user_id"`
		Purpose json.RawMessage `json:"purpose"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	starTransactionPartnerBot.UserId = tmp.UserId

	fieldPurpose, _ := UnmarshalBotTransactionPurpose(tmp.Purpose)
	starTransactionPartnerBot.Purpose = fieldPurpose

	return nil
}

// The transaction is a transaction with a business account
type StarTransactionPartnerBusiness struct {
	meta
	// Identifier of the business account user
	UserId int64 `json:"user_id"`
	// The bought media if the transaction wasn't refunded
	Media []PaidMedia `json:"media"`
}

func (entity *StarTransactionPartnerBusiness) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerBusiness

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerBusiness) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerBusiness) GetConstructor() string {
	return ConstructorStarTransactionPartnerBusiness
}

func (*StarTransactionPartnerBusiness) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerBusiness
}

func (starTransactionPartnerBusiness *StarTransactionPartnerBusiness) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserId int64             `json:"user_id"`
		Media  []json.RawMessage `json:"media"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	starTransactionPartnerBusiness.UserId = tmp.UserId

	fieldMedia, _ := UnmarshalListOfPaidMedia(tmp.Media)
	starTransactionPartnerBusiness.Media = fieldMedia

	return nil
}

// The transaction is a transaction with a supergroup or a channel chat
type StarTransactionPartnerChat struct {
	meta
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// Purpose of the transaction
	Purpose ChatTransactionPurpose `json:"purpose"`
}

func (entity *StarTransactionPartnerChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerChat

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerChat) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerChat) GetConstructor() string {
	return ConstructorStarTransactionPartnerChat
}

func (*StarTransactionPartnerChat) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerChat
}

func (starTransactionPartnerChat *StarTransactionPartnerChat) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId  int64           `json:"chat_id"`
		Purpose json.RawMessage `json:"purpose"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	starTransactionPartnerChat.ChatId = tmp.ChatId

	fieldPurpose, _ := UnmarshalChatTransactionPurpose(tmp.Purpose)
	starTransactionPartnerChat.Purpose = fieldPurpose

	return nil
}

// The transaction is a transaction with another user
type StarTransactionPartnerUser struct {
	meta
	// Identifier of the user; 0 if the user was anonymous
	UserId int64 `json:"user_id"`
	// Purpose of the transaction
	Purpose UserTransactionPurpose `json:"purpose"`
}

func (entity *StarTransactionPartnerUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerUser

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerUser) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerUser) GetConstructor() string {
	return ConstructorStarTransactionPartnerUser
}

func (*StarTransactionPartnerUser) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerUser
}

func (starTransactionPartnerUser *StarTransactionPartnerUser) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserId  int64           `json:"user_id"`
		Purpose json.RawMessage `json:"purpose"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	starTransactionPartnerUser.UserId = tmp.UserId

	fieldPurpose, _ := UnmarshalUserTransactionPurpose(tmp.Purpose)
	starTransactionPartnerUser.Purpose = fieldPurpose

	return nil
}

// The transaction is a transaction with unknown partner
type StarTransactionPartnerUnsupported struct {
	meta
}

func (entity *StarTransactionPartnerUnsupported) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactionPartnerUnsupported

	return json.Marshal((*stub)(entity))
}

func (*StarTransactionPartnerUnsupported) GetType() string {
	return TypeStarTransactionPartner
}

func (*StarTransactionPartnerUnsupported) GetConstructor() string {
	return ConstructorStarTransactionPartnerUnsupported
}

func (*StarTransactionPartnerUnsupported) StarTransactionPartnerConstructor() string {
	return ConstructorStarTransactionPartnerUnsupported
}

// Represents a transaction changing the amount of owned Telegram Stars
type StarTransaction struct {
	meta
	// Unique identifier of the transaction
	Id string `json:"id"`
	// The amount of added owned Telegram Stars; negative for outgoing transactions
	StarCount int64 `json:"star_count"`
	// True, if the transaction is a refund of a previous transaction
	IsRefund bool `json:"is_refund"`
	// Point in time (Unix timestamp) when the transaction was completed
	Date int32 `json:"date"`
	// Source of the incoming transaction, or its recipient for outgoing transactions
	Partner StarTransactionPartner `json:"partner"`
}

func (entity *StarTransaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransaction

	return json.Marshal((*stub)(entity))
}

func (*StarTransaction) GetType() string {
	return TypeStarTransaction
}

func (*StarTransaction) GetConstructor() string {
	return ConstructorStarTransaction
}

func (starTransaction *StarTransaction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id        string          `json:"id"`
		StarCount int64           `json:"star_count"`
		IsRefund  bool            `json:"is_refund"`
		Date      int32           `json:"date"`
		Partner   json.RawMessage `json:"partner"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	starTransaction.Id = tmp.Id
	starTransaction.StarCount = tmp.StarCount
	starTransaction.IsRefund = tmp.IsRefund
	starTransaction.Date = tmp.Date

	fieldPartner, _ := UnmarshalStarTransactionPartner(tmp.Partner)
	starTransaction.Partner = fieldPartner

	return nil
}

// Represents a list of Telegram Star transactions
type StarTransactions struct {
	meta
	// The amount of owned Telegram Stars
	StarCount int64 `json:"star_count"`
	// List of transactions with Telegram Stars
	Transactions []*StarTransaction `json:"transactions"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *StarTransactions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarTransactions

	return json.Marshal((*stub)(entity))
}

func (*StarTransactions) GetType() string {
	return TypeStarTransactions
}

func (*StarTransactions) GetConstructor() string {
	return ConstructorStarTransactions
}

// The user is eligible for the giveaway
type GiveawayParticipantStatusEligible struct {
	meta
}

func (entity *GiveawayParticipantStatusEligible) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GiveawayParticipantStatusEligible

	return json.Marshal((*stub)(entity))
}

func (*GiveawayParticipantStatusEligible) GetType() string {
	return TypeGiveawayParticipantStatus
}

func (*GiveawayParticipantStatusEligible) GetConstructor() string {
	return ConstructorGiveawayParticipantStatusEligible
}

func (*GiveawayParticipantStatusEligible) GiveawayParticipantStatusConstructor() string {
	return ConstructorGiveawayParticipantStatusEligible
}

// The user participates in the giveaway
type GiveawayParticipantStatusParticipating struct {
	meta
}

func (entity *GiveawayParticipantStatusParticipating) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GiveawayParticipantStatusParticipating

	return json.Marshal((*stub)(entity))
}

func (*GiveawayParticipantStatusParticipating) GetType() string {
	return TypeGiveawayParticipantStatus
}

func (*GiveawayParticipantStatusParticipating) GetConstructor() string {
	return ConstructorGiveawayParticipantStatusParticipating
}

func (*GiveawayParticipantStatusParticipating) GiveawayParticipantStatusConstructor() string {
	return ConstructorGiveawayParticipantStatusParticipating
}

// The user can't participate in the giveaway, because they have already been member of the chat
type GiveawayParticipantStatusAlreadyWasMember struct {
	meta
	// Point in time (Unix timestamp) when the user joined the chat
	JoinedChatDate int32 `json:"joined_chat_date"`
}

func (entity *GiveawayParticipantStatusAlreadyWasMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GiveawayParticipantStatusAlreadyWasMember

	return json.Marshal((*stub)(entity))
}

func (*GiveawayParticipantStatusAlreadyWasMember) GetType() string {
	return TypeGiveawayParticipantStatus
}

func (*GiveawayParticipantStatusAlreadyWasMember) GetConstructor() string {
	return ConstructorGiveawayParticipantStatusAlreadyWasMember
}

func (*GiveawayParticipantStatusAlreadyWasMember) GiveawayParticipantStatusConstructor() string {
	return ConstructorGiveawayParticipantStatusAlreadyWasMember
}

// The user can't participate in the giveaway, because they are an administrator in one of the chats that created the giveaway
type GiveawayParticipantStatusAdministrator struct {
	meta
	// Identifier of the chat administered by the user
	ChatId int64 `json:"chat_id"`
}

func (entity *GiveawayParticipantStatusAdministrator) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GiveawayParticipantStatusAdministrator

	return json.Marshal((*stub)(entity))
}

func (*GiveawayParticipantStatusAdministrator) GetType() string {
	return TypeGiveawayParticipantStatus
}

func (*GiveawayParticipantStatusAdministrator) GetConstructor() string {
	return ConstructorGiveawayParticipantStatusAdministrator
}

func (*GiveawayParticipantStatusAdministrator) GiveawayParticipantStatusConstructor() string {
	return ConstructorGiveawayParticipantStatusAdministrator
}

// The user can't participate in the giveaway, because they phone number is from a disallowed country
type GiveawayParticipantStatusDisallowedCountry struct {
	meta
	// A two-letter ISO 3166-1 alpha-2 country code of the user's country
	UserCountryCode string `json:"user_country_code"`
}

func (entity *GiveawayParticipantStatusDisallowedCountry) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GiveawayParticipantStatusDisallowedCountry

	return json.Marshal((*stub)(entity))
}

func (*GiveawayParticipantStatusDisallowedCountry) GetType() string {
	return TypeGiveawayParticipantStatus
}

func (*GiveawayParticipantStatusDisallowedCountry) GetConstructor() string {
	return ConstructorGiveawayParticipantStatusDisallowedCountry
}

func (*GiveawayParticipantStatusDisallowedCountry) GiveawayParticipantStatusConstructor() string {
	return ConstructorGiveawayParticipantStatusDisallowedCountry
}

// Describes an ongoing giveaway
type GiveawayInfoOngoing struct {
	meta
	// Point in time (Unix timestamp) when the giveaway was created
	CreationDate int32 `json:"creation_date"`
	// Status of the current user in the giveaway
	Status GiveawayParticipantStatus `json:"status"`
	// True, if the giveaway has ended and results are being prepared
	IsEnded bool `json:"is_ended"`
}

func (entity *GiveawayInfoOngoing) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GiveawayInfoOngoing

	return json.Marshal((*stub)(entity))
}

func (*GiveawayInfoOngoing) GetType() string {
	return TypeGiveawayInfo
}

func (*GiveawayInfoOngoing) GetConstructor() string {
	return ConstructorGiveawayInfoOngoing
}

func (*GiveawayInfoOngoing) GiveawayInfoConstructor() string {
	return ConstructorGiveawayInfoOngoing
}

func (giveawayInfoOngoing *GiveawayInfoOngoing) UnmarshalJSON(data []byte) error {
	var tmp struct {
		CreationDate int32           `json:"creation_date"`
		Status       json.RawMessage `json:"status"`
		IsEnded      bool            `json:"is_ended"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	giveawayInfoOngoing.CreationDate = tmp.CreationDate
	giveawayInfoOngoing.IsEnded = tmp.IsEnded

	fieldStatus, _ := UnmarshalGiveawayParticipantStatus(tmp.Status)
	giveawayInfoOngoing.Status = fieldStatus

	return nil
}

// Describes a completed giveaway
type GiveawayInfoCompleted struct {
	meta
	// Point in time (Unix timestamp) when the giveaway was created
	CreationDate int32 `json:"creation_date"`
	// Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in parameters of the giveaway
	ActualWinnersSelectionDate int32 `json:"actual_winners_selection_date"`
	// True, if the giveaway was canceled and was fully refunded
	WasRefunded bool `json:"was_refunded"`
	// True, if the current user is a winner of the giveaway
	IsWinner bool `json:"is_winner"`
	// Number of winners in the giveaway
	WinnerCount int32 `json:"winner_count"`
	// Number of winners, which activated their gift codes; for Telegram Premium giveaways only
	ActivationCount int32 `json:"activation_count"`
	// Telegram Premium gift code that was received by the current user; empty if the user isn't a winner in the giveaway or the giveaway isn't a Telegram Premium giveaway
	GiftCode string `json:"gift_code"`
	// The amount of Telegram Stars won by the current user; 0 if the user isn't a winner in the giveaway or the giveaway isn't a Telegram Star giveaway
	WonStarCount int64 `json:"won_star_count"`
}

func (entity *GiveawayInfoCompleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GiveawayInfoCompleted

	return json.Marshal((*stub)(entity))
}

func (*GiveawayInfoCompleted) GetType() string {
	return TypeGiveawayInfo
}

func (*GiveawayInfoCompleted) GetConstructor() string {
	return ConstructorGiveawayInfoCompleted
}

func (*GiveawayInfoCompleted) GiveawayInfoConstructor() string {
	return ConstructorGiveawayInfoCompleted
}

// The giveaway sends Telegram Premium subscriptions to the winners
type GiveawayPrizePremium struct {
	meta
	// Number of months the Telegram Premium subscription will be active after code activation
	MonthCount int32 `json:"month_count"`
}

func (entity *GiveawayPrizePremium) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GiveawayPrizePremium

	return json.Marshal((*stub)(entity))
}

func (*GiveawayPrizePremium) GetType() string {
	return TypeGiveawayPrize
}

func (*GiveawayPrizePremium) GetConstructor() string {
	return ConstructorGiveawayPrizePremium
}

func (*GiveawayPrizePremium) GiveawayPrizeConstructor() string {
	return ConstructorGiveawayPrizePremium
}

// The giveaway sends Telegram Stars to the winners
type GiveawayPrizeStars struct {
	meta
	// Number of Telegram Stars that will be shared by all winners
	StarCount int64 `json:"star_count"`
}

func (entity *GiveawayPrizeStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GiveawayPrizeStars

	return json.Marshal((*stub)(entity))
}

func (*GiveawayPrizeStars) GetType() string {
	return TypeGiveawayPrize
}

func (*GiveawayPrizeStars) GetConstructor() string {
	return ConstructorGiveawayPrizeStars
}

func (*GiveawayPrizeStars) GiveawayPrizeConstructor() string {
	return ConstructorGiveawayPrizeStars
}

// Contains information about supported accent color for user/chat name, background of empty chat photo, replies to messages and link previews
type AccentColor struct {
	meta
	// Accent color identifier
	Id int32 `json:"id"`
	// Identifier of a built-in color to use in places, where only one color is needed; 0-6
	BuiltInAccentColorId int32 `json:"built_in_accent_color_id"`
	// The list of 1-3 colors in RGB format, describing the accent color, as expected to be shown in light themes
	LightThemeColors []int32 `json:"light_theme_colors"`
	// The list of 1-3 colors in RGB format, describing the accent color, as expected to be shown in dark themes
	DarkThemeColors []int32 `json:"dark_theme_colors"`
	// The minimum chat boost level required to use the color in a channel chat
	MinChannelChatBoostLevel int32 `json:"min_channel_chat_boost_level"`
}

func (entity *AccentColor) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AccentColor

	return json.Marshal((*stub)(entity))
}

func (*AccentColor) GetType() string {
	return TypeAccentColor
}

func (*AccentColor) GetConstructor() string {
	return ConstructorAccentColor
}

// Contains information about supported accent colors for user profile photo background in RGB format
type ProfileAccentColors struct {
	meta
	// The list of 1-2 colors in RGB format, describing the colors, as expected to be shown in the color palette settings
	PaletteColors []int32 `json:"palette_colors"`
	// The list of 1-2 colors in RGB format, describing the colors, as expected to be used for the profile photo background
	BackgroundColors []int32 `json:"background_colors"`
	// The list of 2 colors in RGB format, describing the colors of the gradient to be used for the unread active story indicator around profile photo
	StoryColors []int32 `json:"story_colors"`
}

func (entity *ProfileAccentColors) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ProfileAccentColors

	return json.Marshal((*stub)(entity))
}

func (*ProfileAccentColors) GetType() string {
	return TypeProfileAccentColors
}

func (*ProfileAccentColors) GetConstructor() string {
	return ConstructorProfileAccentColors
}

// Contains information about supported accent color for user profile photo background
type ProfileAccentColor struct {
	meta
	// Profile accent color identifier
	Id int32 `json:"id"`
	// Accent colors expected to be used in light themes
	LightThemeColors *ProfileAccentColors `json:"light_theme_colors"`
	// Accent colors expected to be used in dark themes
	DarkThemeColors *ProfileAccentColors `json:"dark_theme_colors"`
	// The minimum chat boost level required to use the color in a supergroup chat
	MinSupergroupChatBoostLevel int32 `json:"min_supergroup_chat_boost_level"`
	// The minimum chat boost level required to use the color in a channel chat
	MinChannelChatBoostLevel int32 `json:"min_channel_chat_boost_level"`
}

func (entity *ProfileAccentColor) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ProfileAccentColor

	return json.Marshal((*stub)(entity))
}

func (*ProfileAccentColor) GetType() string {
	return TypeProfileAccentColor
}

func (*ProfileAccentColor) GetConstructor() string {
	return ConstructorProfileAccentColor
}

// Describes a custom emoji to be shown instead of the Telegram Premium badge
type EmojiStatus struct {
	meta
	// Identifier of the custom emoji in stickerFormatTgs format
	CustomEmojiId JsonInt64 `json:"custom_emoji_id"`
	// Point in time (Unix timestamp) when the status will expire; 0 if never
	ExpirationDate int32 `json:"expiration_date"`
}

func (entity *EmojiStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiStatus

	return json.Marshal((*stub)(entity))
}

func (*EmojiStatus) GetType() string {
	return TypeEmojiStatus
}

func (*EmojiStatus) GetConstructor() string {
	return ConstructorEmojiStatus
}

// Contains a list of custom emoji identifiers for emoji statuses
type EmojiStatuses struct {
	meta
	// The list of custom emoji identifiers
	CustomEmojiIds []JsonInt64 `json:"custom_emoji_ids"`
}

func (entity *EmojiStatuses) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiStatuses

	return json.Marshal((*stub)(entity))
}

func (*EmojiStatuses) GetType() string {
	return TypeEmojiStatuses
}

func (*EmojiStatuses) GetConstructor() string {
	return ConstructorEmojiStatuses
}

// Describes usernames assigned to a user, a supergroup, or a channel
type Usernames struct {
	meta
	// List of active usernames; the first one must be shown as the primary username. The order of active usernames can be changed with reorderActiveUsernames, reorderBotActiveUsernames or reorderSupergroupActiveUsernames
	ActiveUsernames []string `json:"active_usernames"`
	// List of currently disabled usernames; the username can be activated with toggleUsernameIsActive, toggleBotUsernameIsActive, or toggleSupergroupUsernameIsActive
	DisabledUsernames []string `json:"disabled_usernames"`
	// The active username, which can be changed with setUsername or setSupergroupUsername. Information about other active usernames can be received using getCollectibleItemInfo
	EditableUsername string `json:"editable_username"`
}

func (entity *Usernames) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Usernames

	return json.Marshal((*stub)(entity))
}

func (*Usernames) GetType() string {
	return TypeUsernames
}

func (*Usernames) GetConstructor() string {
	return ConstructorUsernames
}

// Represents a user
type User struct {
	meta
	// User identifier
	Id int64 `json:"id"`
	// First name of the user
	FirstName string `json:"first_name"`
	// Last name of the user
	LastName string `json:"last_name"`
	// Usernames of the user; may be null
	Usernames *Usernames `json:"usernames"`
	// Phone number of the user
	PhoneNumber string `json:"phone_number"`
	// Current online status of the user
	Status UserStatus `json:"status"`
	// Profile photo of the user; may be null
	ProfilePhoto *ProfilePhoto `json:"profile_photo"`
	// Identifier of the accent color for name, and backgrounds of profile photo, reply header, and link preview. For Telegram Premium users only
	AccentColorId int32 `json:"accent_color_id"`
	// Identifier of a custom emoji to be shown on the reply header and link preview background; 0 if none. For Telegram Premium users only
	BackgroundCustomEmojiId JsonInt64 `json:"background_custom_emoji_id"`
	// Identifier of the accent color for the user's profile; -1 if none. For Telegram Premium users only
	ProfileAccentColorId int32 `json:"profile_accent_color_id"`
	// Identifier of a custom emoji to be shown on the background of the user's profile; 0 if none. For Telegram Premium users only
	ProfileBackgroundCustomEmojiId JsonInt64 `json:"profile_background_custom_emoji_id"`
	// Emoji status to be shown instead of the default Telegram Premium badge; may be null. For Telegram Premium users only
	EmojiStatus *EmojiStatus `json:"emoji_status"`
	// The user is a contact of the current user
	IsContact bool `json:"is_contact"`
	// The user is a contact of the current user and the current user is a contact of the user
	IsMutualContact bool `json:"is_mutual_contact"`
	// The user is a close friend of the current user; implies that the user is a contact
	IsCloseFriend bool `json:"is_close_friend"`
	// True, if the user is verified
	IsVerified bool `json:"is_verified"`
	// True, if the user is a Telegram Premium user
	IsPremium bool `json:"is_premium"`
	// True, if the user is Telegram support account
	IsSupport bool `json:"is_support"`
	// If non-empty, it contains a human-readable description of the reason why access to this user must be restricted
	RestrictionReason string `json:"restriction_reason"`
	// True, if many users reported this user as a scam
	IsScam bool `json:"is_scam"`
	// True, if many users reported this user as a fake account
	IsFake bool `json:"is_fake"`
	// True, if the user has non-expired stories available to the current user
	HasActiveStories bool `json:"has_active_stories"`
	// True, if the user has unread non-expired stories available to the current user
	HasUnreadActiveStories bool `json:"has_unread_active_stories"`
	// True, if the user may restrict new chats with non-contacts. Use canSendMessageToUser to check whether the current user can message the user or try to create a chat with them
	RestrictsNewChats bool `json:"restricts_new_chats"`
	// If false, the user is inaccessible, and the only information known about the user is inside this class. Identifier of the user can't be passed to any method
	HaveAccess bool `json:"have_access"`
	// Type of the user
	Type UserType `json:"type"`
	// IETF language tag of the user's language; only available to bots
	LanguageCode string `json:"language_code"`
	// True, if the user added the current bot to attachment menu; only available to bots
	AddedToAttachmentMenu bool `json:"added_to_attachment_menu"`
}

func (entity *User) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub User

	return json.Marshal((*stub)(entity))
}

func (*User) GetType() string {
	return TypeUser
}

func (*User) GetConstructor() string {
	return ConstructorUser
}

func (user *User) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                             int64           `json:"id"`
		FirstName                      string          `json:"first_name"`
		LastName                       string          `json:"last_name"`
		Usernames                      *Usernames      `json:"usernames"`
		PhoneNumber                    string          `json:"phone_number"`
		Status                         json.RawMessage `json:"status"`
		ProfilePhoto                   *ProfilePhoto   `json:"profile_photo"`
		AccentColorId                  int32           `json:"accent_color_id"`
		BackgroundCustomEmojiId        JsonInt64       `json:"background_custom_emoji_id"`
		ProfileAccentColorId           int32           `json:"profile_accent_color_id"`
		ProfileBackgroundCustomEmojiId JsonInt64       `json:"profile_background_custom_emoji_id"`
		EmojiStatus                    *EmojiStatus    `json:"emoji_status"`
		IsContact                      bool            `json:"is_contact"`
		IsMutualContact                bool            `json:"is_mutual_contact"`
		IsCloseFriend                  bool            `json:"is_close_friend"`
		IsVerified                     bool            `json:"is_verified"`
		IsPremium                      bool            `json:"is_premium"`
		IsSupport                      bool            `json:"is_support"`
		RestrictionReason              string          `json:"restriction_reason"`
		IsScam                         bool            `json:"is_scam"`
		IsFake                         bool            `json:"is_fake"`
		HasActiveStories               bool            `json:"has_active_stories"`
		HasUnreadActiveStories         bool            `json:"has_unread_active_stories"`
		RestrictsNewChats              bool            `json:"restricts_new_chats"`
		HaveAccess                     bool            `json:"have_access"`
		Type                           json.RawMessage `json:"type"`
		LanguageCode                   string          `json:"language_code"`
		AddedToAttachmentMenu          bool            `json:"added_to_attachment_menu"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	user.Id = tmp.Id
	user.FirstName = tmp.FirstName
	user.LastName = tmp.LastName
	user.Usernames = tmp.Usernames
	user.PhoneNumber = tmp.PhoneNumber
	user.ProfilePhoto = tmp.ProfilePhoto
	user.AccentColorId = tmp.AccentColorId
	user.BackgroundCustomEmojiId = tmp.BackgroundCustomEmojiId
	user.ProfileAccentColorId = tmp.ProfileAccentColorId
	user.ProfileBackgroundCustomEmojiId = tmp.ProfileBackgroundCustomEmojiId
	user.EmojiStatus = tmp.EmojiStatus
	user.IsContact = tmp.IsContact
	user.IsMutualContact = tmp.IsMutualContact
	user.IsCloseFriend = tmp.IsCloseFriend
	user.IsVerified = tmp.IsVerified
	user.IsPremium = tmp.IsPremium
	user.IsSupport = tmp.IsSupport
	user.RestrictionReason = tmp.RestrictionReason
	user.IsScam = tmp.IsScam
	user.IsFake = tmp.IsFake
	user.HasActiveStories = tmp.HasActiveStories
	user.HasUnreadActiveStories = tmp.HasUnreadActiveStories
	user.RestrictsNewChats = tmp.RestrictsNewChats
	user.HaveAccess = tmp.HaveAccess
	user.LanguageCode = tmp.LanguageCode
	user.AddedToAttachmentMenu = tmp.AddedToAttachmentMenu

	fieldStatus, _ := UnmarshalUserStatus(tmp.Status)
	user.Status = fieldStatus

	fieldType, _ := UnmarshalUserType(tmp.Type)
	user.Type = fieldType

	return nil
}

// Contains information about a bot
type BotInfo struct {
	meta
	// The text that is shown on the bot's profile page and is sent together with the link when users share the bot
	ShortDescription string `json:"short_description"`
	// The text shown in the chat with the bot if the chat is empty
	Description string `json:"description"`
	// Photo shown in the chat with the bot if the chat is empty; may be null
	Photo *Photo `json:"photo"`
	// Animation shown in the chat with the bot if the chat is empty; may be null
	Animation *Animation `json:"animation"`
	// Information about a button to show instead of the bot commands menu button; may be null if ordinary bot commands menu must be shown
	MenuButton *BotMenuButton `json:"menu_button"`
	// List of the bot commands
	Commands []*BotCommand `json:"commands"`
	// The HTTP link to the privacy policy of the bot. If empty, then /privacy command must be used if supported by the bot. If the command isn't supported, then https://telegram.org/privacy-tpa must be opened
	PrivacyPolicyUrl string `json:"privacy_policy_url"`
	// Default administrator rights for adding the bot to basic group and supergroup chats; may be null
	DefaultGroupAdministratorRights *ChatAdministratorRights `json:"default_group_administrator_rights"`
	// Default administrator rights for adding the bot to channels; may be null
	DefaultChannelAdministratorRights *ChatAdministratorRights `json:"default_channel_administrator_rights"`
	// Default light background color for bot Web Apps; -1 if not specified
	WebAppBackgroundLightColor int32 `json:"web_app_background_light_color"`
	// Default dark background color for bot Web Apps; -1 if not specified
	WebAppBackgroundDarkColor int32 `json:"web_app_background_dark_color"`
	// Default light header color for bot Web Apps; -1 if not specified
	WebAppHeaderLightColor int32 `json:"web_app_header_light_color"`
	// Default dark header color for bot Web Apps; -1 if not specified
	WebAppHeaderDarkColor int32 `json:"web_app_header_dark_color"`
	// True, if the bot's revenue statistics are available to the current user
	CanGetRevenueStatistics bool `json:"can_get_revenue_statistics"`
	// True, if the bot can manage emoji status of the current user
	CanManageEmojiStatus bool `json:"can_manage_emoji_status"`
	// True, if the bot has media previews
	HasMediaPreviews bool `json:"has_media_previews"`
	// The internal link, which can be used to edit bot commands; may be null
	EditCommandsLink InternalLinkType `json:"edit_commands_link"`
	// The internal link, which can be used to edit bot description; may be null
	EditDescriptionLink InternalLinkType `json:"edit_description_link"`
	// The internal link, which can be used to edit the photo or animation shown in the chat with the bot if the chat is empty; may be null
	EditDescriptionMediaLink InternalLinkType `json:"edit_description_media_link"`
	// The internal link, which can be used to edit bot settings; may be null
	EditSettingsLink InternalLinkType `json:"edit_settings_link"`
}

func (entity *BotInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotInfo

	return json.Marshal((*stub)(entity))
}

func (*BotInfo) GetType() string {
	return TypeBotInfo
}

func (*BotInfo) GetConstructor() string {
	return ConstructorBotInfo
}

func (botInfo *BotInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ShortDescription                  string                   `json:"short_description"`
		Description                       string                   `json:"description"`
		Photo                             *Photo                   `json:"photo"`
		Animation                         *Animation               `json:"animation"`
		MenuButton                        *BotMenuButton           `json:"menu_button"`
		Commands                          []*BotCommand            `json:"commands"`
		PrivacyPolicyUrl                  string                   `json:"privacy_policy_url"`
		DefaultGroupAdministratorRights   *ChatAdministratorRights `json:"default_group_administrator_rights"`
		DefaultChannelAdministratorRights *ChatAdministratorRights `json:"default_channel_administrator_rights"`
		WebAppBackgroundLightColor        int32                    `json:"web_app_background_light_color"`
		WebAppBackgroundDarkColor         int32                    `json:"web_app_background_dark_color"`
		WebAppHeaderLightColor            int32                    `json:"web_app_header_light_color"`
		WebAppHeaderDarkColor             int32                    `json:"web_app_header_dark_color"`
		CanGetRevenueStatistics           bool                     `json:"can_get_revenue_statistics"`
		CanManageEmojiStatus              bool                     `json:"can_manage_emoji_status"`
		HasMediaPreviews                  bool                     `json:"has_media_previews"`
		EditCommandsLink                  json.RawMessage          `json:"edit_commands_link"`
		EditDescriptionLink               json.RawMessage          `json:"edit_description_link"`
		EditDescriptionMediaLink          json.RawMessage          `json:"edit_description_media_link"`
		EditSettingsLink                  json.RawMessage          `json:"edit_settings_link"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	botInfo.ShortDescription = tmp.ShortDescription
	botInfo.Description = tmp.Description
	botInfo.Photo = tmp.Photo
	botInfo.Animation = tmp.Animation
	botInfo.MenuButton = tmp.MenuButton
	botInfo.Commands = tmp.Commands
	botInfo.PrivacyPolicyUrl = tmp.PrivacyPolicyUrl
	botInfo.DefaultGroupAdministratorRights = tmp.DefaultGroupAdministratorRights
	botInfo.DefaultChannelAdministratorRights = tmp.DefaultChannelAdministratorRights
	botInfo.WebAppBackgroundLightColor = tmp.WebAppBackgroundLightColor
	botInfo.WebAppBackgroundDarkColor = tmp.WebAppBackgroundDarkColor
	botInfo.WebAppHeaderLightColor = tmp.WebAppHeaderLightColor
	botInfo.WebAppHeaderDarkColor = tmp.WebAppHeaderDarkColor
	botInfo.CanGetRevenueStatistics = tmp.CanGetRevenueStatistics
	botInfo.CanManageEmojiStatus = tmp.CanManageEmojiStatus
	botInfo.HasMediaPreviews = tmp.HasMediaPreviews

	fieldEditCommandsLink, _ := UnmarshalInternalLinkType(tmp.EditCommandsLink)
	botInfo.EditCommandsLink = fieldEditCommandsLink

	fieldEditDescriptionLink, _ := UnmarshalInternalLinkType(tmp.EditDescriptionLink)
	botInfo.EditDescriptionLink = fieldEditDescriptionLink

	fieldEditDescriptionMediaLink, _ := UnmarshalInternalLinkType(tmp.EditDescriptionMediaLink)
	botInfo.EditDescriptionMediaLink = fieldEditDescriptionMediaLink

	fieldEditSettingsLink, _ := UnmarshalInternalLinkType(tmp.EditSettingsLink)
	botInfo.EditSettingsLink = fieldEditSettingsLink

	return nil
}

// Contains full information about a user
type UserFullInfo struct {
	meta
	// User profile photo set by the current user for the contact; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null, then it is the same photo as in user.profile_photo and chat.photo. This photo isn't returned in the list of user photos
	PersonalPhoto *ChatPhoto `json:"personal_photo"`
	// User profile photo; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null and personal_photo is null, then it is the same photo as in user.profile_photo and chat.photo
	Photo *ChatPhoto `json:"photo"`
	// User profile photo visible if the main photo is hidden by privacy settings; may be null. If null and user.profile_photo is null, then the photo is empty; otherwise, it is unknown. If non-null and both photo and personal_photo are null, then it is the same photo as in user.profile_photo and chat.photo. This photo isn't returned in the list of user photos
	PublicPhoto *ChatPhoto `json:"public_photo"`
	// Block list to which the user is added; may be null if none
	BlockList BlockList `json:"block_list"`
	// True, if the user can be called
	CanBeCalled bool `json:"can_be_called"`
	// True, if a video call can be created with the user
	SupportsVideoCalls bool `json:"supports_video_calls"`
	// True, if the user can't be called due to their privacy settings
	HasPrivateCalls bool `json:"has_private_calls"`
	// True, if the user can't be linked in forwarded messages due to their privacy settings
	HasPrivateForwards bool `json:"has_private_forwards"`
	// True, if voice and video notes can't be sent or forwarded to the user
	HasRestrictedVoiceAndVideoNoteMessages bool `json:"has_restricted_voice_and_video_note_messages"`
	// True, if the user has posted to profile stories
	HasPostedToProfileStories bool `json:"has_posted_to_profile_stories"`
	// True, if the user always enabled sponsored messages; known only for the current user
	HasSponsoredMessagesEnabled bool `json:"has_sponsored_messages_enabled"`
	// True, if the current user needs to explicitly allow to share their phone number with the user when the method addContact is used
	NeedPhoneNumberPrivacyException bool `json:"need_phone_number_privacy_exception"`
	// True, if the user set chat background for both chat users and it wasn't reverted yet
	SetChatBackground bool `json:"set_chat_background"`
	// A short user bio; may be null for bots
	Bio *FormattedText `json:"bio"`
	// Birthdate of the user; may be null if unknown
	Birthdate *Birthdate `json:"birthdate"`
	// Identifier of the personal chat of the user; 0 if none
	PersonalChatId int64 `json:"personal_chat_id"`
	// Number of gifts saved to profile by the user
	GiftCount int32 `json:"gift_count"`
	// Number of group chats where both the other user and the current user are a member; 0 for the current user
	GroupInCommonCount int32 `json:"group_in_common_count"`
	// Information about business settings for Telegram Business accounts; may be null if none
	BusinessInfo *BusinessInfo `json:"business_info"`
	// For bots, information about the bot; may be null if the user isn't a bot
	BotInfo *BotInfo `json:"bot_info"`
}

func (entity *UserFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserFullInfo

	return json.Marshal((*stub)(entity))
}

func (*UserFullInfo) GetType() string {
	return TypeUserFullInfo
}

func (*UserFullInfo) GetConstructor() string {
	return ConstructorUserFullInfo
}

func (userFullInfo *UserFullInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		PersonalPhoto                          *ChatPhoto      `json:"personal_photo"`
		Photo                                  *ChatPhoto      `json:"photo"`
		PublicPhoto                            *ChatPhoto      `json:"public_photo"`
		BlockList                              json.RawMessage `json:"block_list"`
		CanBeCalled                            bool            `json:"can_be_called"`
		SupportsVideoCalls                     bool            `json:"supports_video_calls"`
		HasPrivateCalls                        bool            `json:"has_private_calls"`
		HasPrivateForwards                     bool            `json:"has_private_forwards"`
		HasRestrictedVoiceAndVideoNoteMessages bool            `json:"has_restricted_voice_and_video_note_messages"`
		HasPostedToProfileStories              bool            `json:"has_posted_to_profile_stories"`
		HasSponsoredMessagesEnabled            bool            `json:"has_sponsored_messages_enabled"`
		NeedPhoneNumberPrivacyException        bool            `json:"need_phone_number_privacy_exception"`
		SetChatBackground                      bool            `json:"set_chat_background"`
		Bio                                    *FormattedText  `json:"bio"`
		Birthdate                              *Birthdate      `json:"birthdate"`
		PersonalChatId                         int64           `json:"personal_chat_id"`
		GiftCount                              int32           `json:"gift_count"`
		GroupInCommonCount                     int32           `json:"group_in_common_count"`
		BusinessInfo                           *BusinessInfo   `json:"business_info"`
		BotInfo                                *BotInfo        `json:"bot_info"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	userFullInfo.PersonalPhoto = tmp.PersonalPhoto
	userFullInfo.Photo = tmp.Photo
	userFullInfo.PublicPhoto = tmp.PublicPhoto
	userFullInfo.CanBeCalled = tmp.CanBeCalled
	userFullInfo.SupportsVideoCalls = tmp.SupportsVideoCalls
	userFullInfo.HasPrivateCalls = tmp.HasPrivateCalls
	userFullInfo.HasPrivateForwards = tmp.HasPrivateForwards
	userFullInfo.HasRestrictedVoiceAndVideoNoteMessages = tmp.HasRestrictedVoiceAndVideoNoteMessages
	userFullInfo.HasPostedToProfileStories = tmp.HasPostedToProfileStories
	userFullInfo.HasSponsoredMessagesEnabled = tmp.HasSponsoredMessagesEnabled
	userFullInfo.NeedPhoneNumberPrivacyException = tmp.NeedPhoneNumberPrivacyException
	userFullInfo.SetChatBackground = tmp.SetChatBackground
	userFullInfo.Bio = tmp.Bio
	userFullInfo.Birthdate = tmp.Birthdate
	userFullInfo.PersonalChatId = tmp.PersonalChatId
	userFullInfo.GiftCount = tmp.GiftCount
	userFullInfo.GroupInCommonCount = tmp.GroupInCommonCount
	userFullInfo.BusinessInfo = tmp.BusinessInfo
	userFullInfo.BotInfo = tmp.BotInfo

	fieldBlockList, _ := UnmarshalBlockList(tmp.BlockList)
	userFullInfo.BlockList = fieldBlockList

	return nil
}

// Represents a list of users
type Users struct {
	meta
	// Approximate total number of users found
	TotalCount int32 `json:"total_count"`
	// A list of user identifiers
	UserIds []int64 `json:"user_ids"`
}

func (entity *Users) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Users

	return json.Marshal((*stub)(entity))
}

func (*Users) GetType() string {
	return TypeUsers
}

func (*Users) GetConstructor() string {
	return ConstructorUsers
}

// Represents a list of found users
type FoundUsers struct {
	meta
	// Identifiers of the found users
	UserIds []int64 `json:"user_ids"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *FoundUsers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FoundUsers

	return json.Marshal((*stub)(entity))
}

func (*FoundUsers) GetType() string {
	return TypeFoundUsers
}

func (*FoundUsers) GetConstructor() string {
	return ConstructorFoundUsers
}

// Contains information about a chat administrator
type ChatAdministrator struct {
	meta
	// User identifier of the administrator
	UserId int64 `json:"user_id"`
	// Custom title of the administrator
	CustomTitle string `json:"custom_title"`
	// True, if the user is the owner of the chat
	IsOwner bool `json:"is_owner"`
}

func (entity *ChatAdministrator) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatAdministrator

	return json.Marshal((*stub)(entity))
}

func (*ChatAdministrator) GetType() string {
	return TypeChatAdministrator
}

func (*ChatAdministrator) GetConstructor() string {
	return ConstructorChatAdministrator
}

// Represents a list of chat administrators
type ChatAdministrators struct {
	meta
	// A list of chat administrators
	Administrators []*ChatAdministrator `json:"administrators"`
}

func (entity *ChatAdministrators) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatAdministrators

	return json.Marshal((*stub)(entity))
}

func (*ChatAdministrators) GetType() string {
	return TypeChatAdministrators
}

func (*ChatAdministrators) GetConstructor() string {
	return ConstructorChatAdministrators
}

// The user is the owner of the chat and has all the administrator privileges
type ChatMemberStatusCreator struct {
	meta
	// A custom title of the owner; 0-16 characters without emoji; applicable to supergroups only
	CustomTitle string `json:"custom_title"`
	// True, if the creator isn't shown in the chat member list and sends messages anonymously; applicable to supergroups only
	IsAnonymous bool `json:"is_anonymous"`
	// True, if the user is a member of the chat
	IsMember bool `json:"is_member"`
}

func (entity *ChatMemberStatusCreator) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMemberStatusCreator

	return json.Marshal((*stub)(entity))
}

func (*ChatMemberStatusCreator) GetType() string {
	return TypeChatMemberStatus
}

func (*ChatMemberStatusCreator) GetConstructor() string {
	return ConstructorChatMemberStatusCreator
}

func (*ChatMemberStatusCreator) ChatMemberStatusConstructor() string {
	return ConstructorChatMemberStatusCreator
}

// The user is a member of the chat and has some additional privileges. In basic groups, administrators can edit and delete messages sent by others, add new members, ban unprivileged members, and manage video chats. In supergroups and channels, there are more detailed options for administrator privileges
type ChatMemberStatusAdministrator struct {
	meta
	// A custom title of the administrator; 0-16 characters without emoji; applicable to supergroups only
	CustomTitle string `json:"custom_title"`
	// True, if the current user can edit the administrator privileges for the called user
	CanBeEdited bool `json:"can_be_edited"`
	// Rights of the administrator
	Rights *ChatAdministratorRights `json:"rights"`
}

func (entity *ChatMemberStatusAdministrator) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMemberStatusAdministrator

	return json.Marshal((*stub)(entity))
}

func (*ChatMemberStatusAdministrator) GetType() string {
	return TypeChatMemberStatus
}

func (*ChatMemberStatusAdministrator) GetConstructor() string {
	return ConstructorChatMemberStatusAdministrator
}

func (*ChatMemberStatusAdministrator) ChatMemberStatusConstructor() string {
	return ConstructorChatMemberStatusAdministrator
}

// The user is a member of the chat, without any additional privileges or restrictions
type ChatMemberStatusMember struct {
	meta
	// Point in time (Unix timestamp) when the user will be removed from the chat because of the expired subscription; 0 if never. Ignored in setChatMemberStatus
	MemberUntilDate int32 `json:"member_until_date"`
}

func (entity *ChatMemberStatusMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMemberStatusMember

	return json.Marshal((*stub)(entity))
}

func (*ChatMemberStatusMember) GetType() string {
	return TypeChatMemberStatus
}

func (*ChatMemberStatusMember) GetConstructor() string {
	return ConstructorChatMemberStatusMember
}

func (*ChatMemberStatusMember) ChatMemberStatusConstructor() string {
	return ConstructorChatMemberStatusMember
}

// The user is under certain restrictions in the chat. Not supported in basic groups and channels
type ChatMemberStatusRestricted struct {
	meta
	// True, if the user is a member of the chat
	IsMember bool `json:"is_member"`
	// Point in time (Unix timestamp) when restrictions will be lifted from the user; 0 if never. If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is considered to be restricted forever
	RestrictedUntilDate int32 `json:"restricted_until_date"`
	// User permissions in the chat
	Permissions *ChatPermissions `json:"permissions"`
}

func (entity *ChatMemberStatusRestricted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMemberStatusRestricted

	return json.Marshal((*stub)(entity))
}

func (*ChatMemberStatusRestricted) GetType() string {
	return TypeChatMemberStatus
}

func (*ChatMemberStatusRestricted) GetConstructor() string {
	return ConstructorChatMemberStatusRestricted
}

func (*ChatMemberStatusRestricted) ChatMemberStatusConstructor() string {
	return ConstructorChatMemberStatusRestricted
}

// The user or the chat is not a chat member
type ChatMemberStatusLeft struct {
	meta
}

func (entity *ChatMemberStatusLeft) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMemberStatusLeft

	return json.Marshal((*stub)(entity))
}

func (*ChatMemberStatusLeft) GetType() string {
	return TypeChatMemberStatus
}

func (*ChatMemberStatusLeft) GetConstructor() string {
	return ConstructorChatMemberStatusLeft
}

func (*ChatMemberStatusLeft) ChatMemberStatusConstructor() string {
	return ConstructorChatMemberStatusLeft
}

// The user or the chat was banned (and hence is not a member of the chat). Implies the user can't return to the chat, view messages, or be used as a participant identifier to join a video chat of the chat
type ChatMemberStatusBanned struct {
	meta
	// Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever. Always 0 in basic groups
	BannedUntilDate int32 `json:"banned_until_date"`
}

func (entity *ChatMemberStatusBanned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMemberStatusBanned

	return json.Marshal((*stub)(entity))
}

func (*ChatMemberStatusBanned) GetType() string {
	return TypeChatMemberStatus
}

func (*ChatMemberStatusBanned) GetConstructor() string {
	return ConstructorChatMemberStatusBanned
}

func (*ChatMemberStatusBanned) ChatMemberStatusConstructor() string {
	return ConstructorChatMemberStatusBanned
}

// Describes a user or a chat as a member of another chat
type ChatMember struct {
	meta
	// Identifier of the chat member. Currently, other chats can be only Left or Banned. Only supergroups and channels can have other chats as Left or Banned members and these chats must be supergroups or channels
	MemberId MessageSender `json:"member_id"`
	// Identifier of a user that invited/promoted/banned this member in the chat; 0 if unknown
	InviterUserId int64 `json:"inviter_user_id"`
	// Point in time (Unix timestamp) when the user joined/was promoted/was banned in the chat
	JoinedChatDate int32 `json:"joined_chat_date"`
	// Status of the member in the chat
	Status ChatMemberStatus `json:"status"`
}

func (entity *ChatMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMember

	return json.Marshal((*stub)(entity))
}

func (*ChatMember) GetType() string {
	return TypeChatMember
}

func (*ChatMember) GetConstructor() string {
	return ConstructorChatMember
}

func (chatMember *ChatMember) UnmarshalJSON(data []byte) error {
	var tmp struct {
		MemberId       json.RawMessage `json:"member_id"`
		InviterUserId  int64           `json:"inviter_user_id"`
		JoinedChatDate int32           `json:"joined_chat_date"`
		Status         json.RawMessage `json:"status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatMember.InviterUserId = tmp.InviterUserId
	chatMember.JoinedChatDate = tmp.JoinedChatDate

	fieldMemberId, _ := UnmarshalMessageSender(tmp.MemberId)
	chatMember.MemberId = fieldMemberId

	fieldStatus, _ := UnmarshalChatMemberStatus(tmp.Status)
	chatMember.Status = fieldStatus

	return nil
}

// Contains a list of chat members
type ChatMembers struct {
	meta
	// Approximate total number of chat members found
	TotalCount int32 `json:"total_count"`
	// A list of chat members
	Members []*ChatMember `json:"members"`
}

func (entity *ChatMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMembers

	return json.Marshal((*stub)(entity))
}

func (*ChatMembers) GetType() string {
	return TypeChatMembers
}

func (*ChatMembers) GetConstructor() string {
	return ConstructorChatMembers
}

// Returns contacts of the user
type ChatMembersFilterContacts struct {
	meta
}

func (entity *ChatMembersFilterContacts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMembersFilterContacts

	return json.Marshal((*stub)(entity))
}

func (*ChatMembersFilterContacts) GetType() string {
	return TypeChatMembersFilter
}

func (*ChatMembersFilterContacts) GetConstructor() string {
	return ConstructorChatMembersFilterContacts
}

func (*ChatMembersFilterContacts) ChatMembersFilterConstructor() string {
	return ConstructorChatMembersFilterContacts
}

// Returns the owner and administrators
type ChatMembersFilterAdministrators struct {
	meta
}

func (entity *ChatMembersFilterAdministrators) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMembersFilterAdministrators

	return json.Marshal((*stub)(entity))
}

func (*ChatMembersFilterAdministrators) GetType() string {
	return TypeChatMembersFilter
}

func (*ChatMembersFilterAdministrators) GetConstructor() string {
	return ConstructorChatMembersFilterAdministrators
}

func (*ChatMembersFilterAdministrators) ChatMembersFilterConstructor() string {
	return ConstructorChatMembersFilterAdministrators
}

// Returns all chat members, including restricted chat members
type ChatMembersFilterMembers struct {
	meta
}

func (entity *ChatMembersFilterMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMembersFilterMembers

	return json.Marshal((*stub)(entity))
}

func (*ChatMembersFilterMembers) GetType() string {
	return TypeChatMembersFilter
}

func (*ChatMembersFilterMembers) GetConstructor() string {
	return ConstructorChatMembersFilterMembers
}

func (*ChatMembersFilterMembers) ChatMembersFilterConstructor() string {
	return ConstructorChatMembersFilterMembers
}

// Returns users which can be mentioned in the chat
type ChatMembersFilterMention struct {
	meta
	// If non-zero, the identifier of the current message thread
	MessageThreadId int64 `json:"message_thread_id"`
}

func (entity *ChatMembersFilterMention) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMembersFilterMention

	return json.Marshal((*stub)(entity))
}

func (*ChatMembersFilterMention) GetType() string {
	return TypeChatMembersFilter
}

func (*ChatMembersFilterMention) GetConstructor() string {
	return ConstructorChatMembersFilterMention
}

func (*ChatMembersFilterMention) ChatMembersFilterConstructor() string {
	return ConstructorChatMembersFilterMention
}

// Returns users under certain restrictions in the chat; can be used only by administrators in a supergroup
type ChatMembersFilterRestricted struct {
	meta
}

func (entity *ChatMembersFilterRestricted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMembersFilterRestricted

	return json.Marshal((*stub)(entity))
}

func (*ChatMembersFilterRestricted) GetType() string {
	return TypeChatMembersFilter
}

func (*ChatMembersFilterRestricted) GetConstructor() string {
	return ConstructorChatMembersFilterRestricted
}

func (*ChatMembersFilterRestricted) ChatMembersFilterConstructor() string {
	return ConstructorChatMembersFilterRestricted
}

// Returns users banned from the chat; can be used only by administrators in a supergroup or in a channel
type ChatMembersFilterBanned struct {
	meta
}

func (entity *ChatMembersFilterBanned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMembersFilterBanned

	return json.Marshal((*stub)(entity))
}

func (*ChatMembersFilterBanned) GetType() string {
	return TypeChatMembersFilter
}

func (*ChatMembersFilterBanned) GetConstructor() string {
	return ConstructorChatMembersFilterBanned
}

func (*ChatMembersFilterBanned) ChatMembersFilterConstructor() string {
	return ConstructorChatMembersFilterBanned
}

// Returns bot members of the chat
type ChatMembersFilterBots struct {
	meta
}

func (entity *ChatMembersFilterBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMembersFilterBots

	return json.Marshal((*stub)(entity))
}

func (*ChatMembersFilterBots) GetType() string {
	return TypeChatMembersFilter
}

func (*ChatMembersFilterBots) GetConstructor() string {
	return ConstructorChatMembersFilterBots
}

func (*ChatMembersFilterBots) ChatMembersFilterConstructor() string {
	return ConstructorChatMembersFilterBots
}

// Returns recently active users in reverse chronological order
type SupergroupMembersFilterRecent struct {
	meta
}

func (entity *SupergroupMembersFilterRecent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SupergroupMembersFilterRecent

	return json.Marshal((*stub)(entity))
}

func (*SupergroupMembersFilterRecent) GetType() string {
	return TypeSupergroupMembersFilter
}

func (*SupergroupMembersFilterRecent) GetConstructor() string {
	return ConstructorSupergroupMembersFilterRecent
}

func (*SupergroupMembersFilterRecent) SupergroupMembersFilterConstructor() string {
	return ConstructorSupergroupMembersFilterRecent
}

// Returns contacts of the user, which are members of the supergroup or channel
type SupergroupMembersFilterContacts struct {
	meta
	// Query to search for
	Query string `json:"query"`
}

func (entity *SupergroupMembersFilterContacts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SupergroupMembersFilterContacts

	return json.Marshal((*stub)(entity))
}

func (*SupergroupMembersFilterContacts) GetType() string {
	return TypeSupergroupMembersFilter
}

func (*SupergroupMembersFilterContacts) GetConstructor() string {
	return ConstructorSupergroupMembersFilterContacts
}

func (*SupergroupMembersFilterContacts) SupergroupMembersFilterConstructor() string {
	return ConstructorSupergroupMembersFilterContacts
}

// Returns the owner and administrators
type SupergroupMembersFilterAdministrators struct {
	meta
}

func (entity *SupergroupMembersFilterAdministrators) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SupergroupMembersFilterAdministrators

	return json.Marshal((*stub)(entity))
}

func (*SupergroupMembersFilterAdministrators) GetType() string {
	return TypeSupergroupMembersFilter
}

func (*SupergroupMembersFilterAdministrators) GetConstructor() string {
	return ConstructorSupergroupMembersFilterAdministrators
}

func (*SupergroupMembersFilterAdministrators) SupergroupMembersFilterConstructor() string {
	return ConstructorSupergroupMembersFilterAdministrators
}

// Used to search for supergroup or channel members via a (string) query
type SupergroupMembersFilterSearch struct {
	meta
	// Query to search for
	Query string `json:"query"`
}

func (entity *SupergroupMembersFilterSearch) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SupergroupMembersFilterSearch

	return json.Marshal((*stub)(entity))
}

func (*SupergroupMembersFilterSearch) GetType() string {
	return TypeSupergroupMembersFilter
}

func (*SupergroupMembersFilterSearch) GetConstructor() string {
	return ConstructorSupergroupMembersFilterSearch
}

func (*SupergroupMembersFilterSearch) SupergroupMembersFilterConstructor() string {
	return ConstructorSupergroupMembersFilterSearch
}

// Returns restricted supergroup members; can be used only by administrators
type SupergroupMembersFilterRestricted struct {
	meta
	// Query to search for
	Query string `json:"query"`
}

func (entity *SupergroupMembersFilterRestricted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SupergroupMembersFilterRestricted

	return json.Marshal((*stub)(entity))
}

func (*SupergroupMembersFilterRestricted) GetType() string {
	return TypeSupergroupMembersFilter
}

func (*SupergroupMembersFilterRestricted) GetConstructor() string {
	return ConstructorSupergroupMembersFilterRestricted
}

func (*SupergroupMembersFilterRestricted) SupergroupMembersFilterConstructor() string {
	return ConstructorSupergroupMembersFilterRestricted
}

// Returns users banned from the supergroup or channel; can be used only by administrators
type SupergroupMembersFilterBanned struct {
	meta
	// Query to search for
	Query string `json:"query"`
}

func (entity *SupergroupMembersFilterBanned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SupergroupMembersFilterBanned

	return json.Marshal((*stub)(entity))
}

func (*SupergroupMembersFilterBanned) GetType() string {
	return TypeSupergroupMembersFilter
}

func (*SupergroupMembersFilterBanned) GetConstructor() string {
	return ConstructorSupergroupMembersFilterBanned
}

func (*SupergroupMembersFilterBanned) SupergroupMembersFilterConstructor() string {
	return ConstructorSupergroupMembersFilterBanned
}

// Returns users which can be mentioned in the supergroup
type SupergroupMembersFilterMention struct {
	meta
	// Query to search for
	Query string `json:"query"`
	// If non-zero, the identifier of the current message thread
	MessageThreadId int64 `json:"message_thread_id"`
}

func (entity *SupergroupMembersFilterMention) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SupergroupMembersFilterMention

	return json.Marshal((*stub)(entity))
}

func (*SupergroupMembersFilterMention) GetType() string {
	return TypeSupergroupMembersFilter
}

func (*SupergroupMembersFilterMention) GetConstructor() string {
	return ConstructorSupergroupMembersFilterMention
}

func (*SupergroupMembersFilterMention) SupergroupMembersFilterConstructor() string {
	return ConstructorSupergroupMembersFilterMention
}

// Returns bot members of the supergroup or channel
type SupergroupMembersFilterBots struct {
	meta
}

func (entity *SupergroupMembersFilterBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SupergroupMembersFilterBots

	return json.Marshal((*stub)(entity))
}

func (*SupergroupMembersFilterBots) GetType() string {
	return TypeSupergroupMembersFilter
}

func (*SupergroupMembersFilterBots) GetConstructor() string {
	return ConstructorSupergroupMembersFilterBots
}

func (*SupergroupMembersFilterBots) SupergroupMembersFilterConstructor() string {
	return ConstructorSupergroupMembersFilterBots
}

// Contains a chat invite link
type ChatInviteLink struct {
	meta
	// Chat invite link
	InviteLink string `json:"invite_link"`
	// Name of the link
	Name string `json:"name"`
	// User identifier of an administrator created the link
	CreatorUserId int64 `json:"creator_user_id"`
	// Point in time (Unix timestamp) when the link was created
	Date int32 `json:"date"`
	// Point in time (Unix timestamp) when the link was last edited; 0 if never or unknown
	EditDate int32 `json:"edit_date"`
	// Point in time (Unix timestamp) when the link will expire; 0 if never
	ExpirationDate int32 `json:"expiration_date"`
	// Information about subscription plan that is applied to the users joining the chat by the link; may be null if the link doesn't require subscription
	SubscriptionPricing *StarSubscriptionPricing `json:"subscription_pricing"`
	// The maximum number of members, which can join the chat using the link simultaneously; 0 if not limited. Always 0 if the link requires approval
	MemberLimit int32 `json:"member_limit"`
	// Number of chat members, which joined the chat using the link
	MemberCount int32 `json:"member_count"`
	// Number of chat members, which joined the chat using the link, but have already left because of expired subscription; for subscription links only
	ExpiredMemberCount int32 `json:"expired_member_count"`
	// Number of pending join requests created using this link
	PendingJoinRequestCount int32 `json:"pending_join_request_count"`
	// True, if the link only creates join request. If true, total number of joining members will be unlimited
	CreatesJoinRequest bool `json:"creates_join_request"`
	// True, if the link is primary. Primary invite link can't have name, expiration date, or usage limit. There is exactly one primary invite link for each administrator with can_invite_users right at a given time
	IsPrimary bool `json:"is_primary"`
	// True, if the link was revoked
	IsRevoked bool `json:"is_revoked"`
}

func (entity *ChatInviteLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatInviteLink

	return json.Marshal((*stub)(entity))
}

func (*ChatInviteLink) GetType() string {
	return TypeChatInviteLink
}

func (*ChatInviteLink) GetConstructor() string {
	return ConstructorChatInviteLink
}

// Contains a list of chat invite links
type ChatInviteLinks struct {
	meta
	// Approximate total number of chat invite links found
	TotalCount int32 `json:"total_count"`
	// List of invite links
	InviteLinks []*ChatInviteLink `json:"invite_links"`
}

func (entity *ChatInviteLinks) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatInviteLinks

	return json.Marshal((*stub)(entity))
}

func (*ChatInviteLinks) GetType() string {
	return TypeChatInviteLinks
}

func (*ChatInviteLinks) GetConstructor() string {
	return ConstructorChatInviteLinks
}

// Describes a chat administrator with a number of active and revoked chat invite links
type ChatInviteLinkCount struct {
	meta
	// Administrator's user identifier
	UserId int64 `json:"user_id"`
	// Number of active invite links
	InviteLinkCount int32 `json:"invite_link_count"`
	// Number of revoked invite links
	RevokedInviteLinkCount int32 `json:"revoked_invite_link_count"`
}

func (entity *ChatInviteLinkCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatInviteLinkCount

	return json.Marshal((*stub)(entity))
}

func (*ChatInviteLinkCount) GetType() string {
	return TypeChatInviteLinkCount
}

func (*ChatInviteLinkCount) GetConstructor() string {
	return ConstructorChatInviteLinkCount
}

// Contains a list of chat invite link counts
type ChatInviteLinkCounts struct {
	meta
	// List of invite link counts
	InviteLinkCounts []*ChatInviteLinkCount `json:"invite_link_counts"`
}

func (entity *ChatInviteLinkCounts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatInviteLinkCounts

	return json.Marshal((*stub)(entity))
}

func (*ChatInviteLinkCounts) GetType() string {
	return TypeChatInviteLinkCounts
}

func (*ChatInviteLinkCounts) GetConstructor() string {
	return ConstructorChatInviteLinkCounts
}

// Describes a chat member joined a chat via an invite link
type ChatInviteLinkMember struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
	// Point in time (Unix timestamp) when the user joined the chat
	JoinedChatDate int32 `json:"joined_chat_date"`
	// True, if the user has joined the chat using an invite link for a chat folder
	ViaChatFolderInviteLink bool `json:"via_chat_folder_invite_link"`
	// User identifier of the chat administrator, approved user join request
	ApproverUserId int64 `json:"approver_user_id"`
}

func (entity *ChatInviteLinkMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatInviteLinkMember

	return json.Marshal((*stub)(entity))
}

func (*ChatInviteLinkMember) GetType() string {
	return TypeChatInviteLinkMember
}

func (*ChatInviteLinkMember) GetConstructor() string {
	return ConstructorChatInviteLinkMember
}

// Contains a list of chat members joined a chat via an invite link
type ChatInviteLinkMembers struct {
	meta
	// Approximate total number of chat members found
	TotalCount int32 `json:"total_count"`
	// List of chat members, joined a chat via an invite link
	Members []*ChatInviteLinkMember `json:"members"`
}

func (entity *ChatInviteLinkMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatInviteLinkMembers

	return json.Marshal((*stub)(entity))
}

func (*ChatInviteLinkMembers) GetType() string {
	return TypeChatInviteLinkMembers
}

func (*ChatInviteLinkMembers) GetConstructor() string {
	return ConstructorChatInviteLinkMembers
}

// The link is an invite link for a basic group
type InviteLinkChatTypeBasicGroup struct {
	meta
}

func (entity *InviteLinkChatTypeBasicGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InviteLinkChatTypeBasicGroup

	return json.Marshal((*stub)(entity))
}

func (*InviteLinkChatTypeBasicGroup) GetType() string {
	return TypeInviteLinkChatType
}

func (*InviteLinkChatTypeBasicGroup) GetConstructor() string {
	return ConstructorInviteLinkChatTypeBasicGroup
}

func (*InviteLinkChatTypeBasicGroup) InviteLinkChatTypeConstructor() string {
	return ConstructorInviteLinkChatTypeBasicGroup
}

// The link is an invite link for a supergroup
type InviteLinkChatTypeSupergroup struct {
	meta
}

func (entity *InviteLinkChatTypeSupergroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InviteLinkChatTypeSupergroup

	return json.Marshal((*stub)(entity))
}

func (*InviteLinkChatTypeSupergroup) GetType() string {
	return TypeInviteLinkChatType
}

func (*InviteLinkChatTypeSupergroup) GetConstructor() string {
	return ConstructorInviteLinkChatTypeSupergroup
}

func (*InviteLinkChatTypeSupergroup) InviteLinkChatTypeConstructor() string {
	return ConstructorInviteLinkChatTypeSupergroup
}

// The link is an invite link for a channel
type InviteLinkChatTypeChannel struct {
	meta
}

func (entity *InviteLinkChatTypeChannel) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InviteLinkChatTypeChannel

	return json.Marshal((*stub)(entity))
}

func (*InviteLinkChatTypeChannel) GetType() string {
	return TypeInviteLinkChatType
}

func (*InviteLinkChatTypeChannel) GetConstructor() string {
	return ConstructorInviteLinkChatTypeChannel
}

func (*InviteLinkChatTypeChannel) InviteLinkChatTypeConstructor() string {
	return ConstructorInviteLinkChatTypeChannel
}

// Contains information about subscription plan that must be paid by the user to use a chat invite link
type ChatInviteLinkSubscriptionInfo struct {
	meta
	// Information about subscription plan that must be paid by the user to use the link
	Pricing *StarSubscriptionPricing `json:"pricing"`
	// True, if the user has already paid for the subscription and can use joinChatByInviteLink to join the subscribed chat again
	CanReuse bool `json:"can_reuse"`
	// Identifier of the payment form to use for subscription payment; 0 if the subscription can't be paid
	FormId JsonInt64 `json:"form_id"`
}

func (entity *ChatInviteLinkSubscriptionInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatInviteLinkSubscriptionInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatInviteLinkSubscriptionInfo) GetType() string {
	return TypeChatInviteLinkSubscriptionInfo
}

func (*ChatInviteLinkSubscriptionInfo) GetConstructor() string {
	return ConstructorChatInviteLinkSubscriptionInfo
}

// Contains information about a chat invite link
type ChatInviteLinkInfo struct {
	meta
	// Chat identifier of the invite link; 0 if the user has no access to the chat before joining
	ChatId int64 `json:"chat_id"`
	// If non-zero, the amount of time for which read access to the chat will remain available, in seconds
	AccessibleFor int32 `json:"accessible_for"`
	// Type of the chat
	Type InviteLinkChatType `json:"type"`
	// Title of the chat
	Title string `json:"title"`
	// Chat photo; may be null
	Photo *ChatPhotoInfo `json:"photo"`
	// Identifier of the accent color for chat title and background of chat photo
	AccentColorId int32 `json:"accent_color_id"`
	// Chat description
	Description string `json:"description"`
	// Number of members in the chat
	MemberCount int32 `json:"member_count"`
	// User identifiers of some chat members that may be known to the current user
	MemberUserIds []int64 `json:"member_user_ids"`
	// Information about subscription plan that must be paid by the user to use the link; may be null if the link doesn't require subscription
	SubscriptionInfo *ChatInviteLinkSubscriptionInfo `json:"subscription_info"`
	// True, if the link only creates join request
	CreatesJoinRequest bool `json:"creates_join_request"`
	// True, if the chat is a public supergroup or channel, i.e. it has a username or it is a location-based supergroup
	IsPublic bool `json:"is_public"`
	// True, if the chat is verified
	IsVerified bool `json:"is_verified"`
	// True, if many users reported this chat as a scam
	IsScam bool `json:"is_scam"`
	// True, if many users reported this chat as a fake account
	IsFake bool `json:"is_fake"`
}

func (entity *ChatInviteLinkInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatInviteLinkInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatInviteLinkInfo) GetType() string {
	return TypeChatInviteLinkInfo
}

func (*ChatInviteLinkInfo) GetConstructor() string {
	return ConstructorChatInviteLinkInfo
}

func (chatInviteLinkInfo *ChatInviteLinkInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId             int64                           `json:"chat_id"`
		AccessibleFor      int32                           `json:"accessible_for"`
		Type               json.RawMessage                 `json:"type"`
		Title              string                          `json:"title"`
		Photo              *ChatPhotoInfo                  `json:"photo"`
		AccentColorId      int32                           `json:"accent_color_id"`
		Description        string                          `json:"description"`
		MemberCount        int32                           `json:"member_count"`
		MemberUserIds      []int64                         `json:"member_user_ids"`
		SubscriptionInfo   *ChatInviteLinkSubscriptionInfo `json:"subscription_info"`
		CreatesJoinRequest bool                            `json:"creates_join_request"`
		IsPublic           bool                            `json:"is_public"`
		IsVerified         bool                            `json:"is_verified"`
		IsScam             bool                            `json:"is_scam"`
		IsFake             bool                            `json:"is_fake"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatInviteLinkInfo.ChatId = tmp.ChatId
	chatInviteLinkInfo.AccessibleFor = tmp.AccessibleFor
	chatInviteLinkInfo.Title = tmp.Title
	chatInviteLinkInfo.Photo = tmp.Photo
	chatInviteLinkInfo.AccentColorId = tmp.AccentColorId
	chatInviteLinkInfo.Description = tmp.Description
	chatInviteLinkInfo.MemberCount = tmp.MemberCount
	chatInviteLinkInfo.MemberUserIds = tmp.MemberUserIds
	chatInviteLinkInfo.SubscriptionInfo = tmp.SubscriptionInfo
	chatInviteLinkInfo.CreatesJoinRequest = tmp.CreatesJoinRequest
	chatInviteLinkInfo.IsPublic = tmp.IsPublic
	chatInviteLinkInfo.IsVerified = tmp.IsVerified
	chatInviteLinkInfo.IsScam = tmp.IsScam
	chatInviteLinkInfo.IsFake = tmp.IsFake

	fieldType, _ := UnmarshalInviteLinkChatType(tmp.Type)
	chatInviteLinkInfo.Type = fieldType

	return nil
}

// Describes a user that sent a join request and waits for administrator approval
type ChatJoinRequest struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
	// Point in time (Unix timestamp) when the user sent the join request
	Date int32 `json:"date"`
	// A short bio of the user
	Bio string `json:"bio"`
}

func (entity *ChatJoinRequest) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatJoinRequest

	return json.Marshal((*stub)(entity))
}

func (*ChatJoinRequest) GetType() string {
	return TypeChatJoinRequest
}

func (*ChatJoinRequest) GetConstructor() string {
	return ConstructorChatJoinRequest
}

// Contains a list of requests to join a chat
type ChatJoinRequests struct {
	meta
	// Approximate total number of requests found
	TotalCount int32 `json:"total_count"`
	// List of the requests
	Requests []*ChatJoinRequest `json:"requests"`
}

func (entity *ChatJoinRequests) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatJoinRequests

	return json.Marshal((*stub)(entity))
}

func (*ChatJoinRequests) GetType() string {
	return TypeChatJoinRequests
}

func (*ChatJoinRequests) GetConstructor() string {
	return ConstructorChatJoinRequests
}

// Contains information about pending join requests for a chat
type ChatJoinRequestsInfo struct {
	meta
	// Total number of pending join requests
	TotalCount int32 `json:"total_count"`
	// Identifiers of at most 3 users sent the newest pending join requests
	UserIds []int64 `json:"user_ids"`
}

func (entity *ChatJoinRequestsInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatJoinRequestsInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatJoinRequestsInfo) GetType() string {
	return TypeChatJoinRequestsInfo
}

func (*ChatJoinRequestsInfo) GetConstructor() string {
	return ConstructorChatJoinRequestsInfo
}

// Represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users)
type BasicGroup struct {
	meta
	// Group identifier
	Id int64 `json:"id"`
	// Number of members in the group
	MemberCount int32 `json:"member_count"`
	// Status of the current user in the group
	Status ChatMemberStatus `json:"status"`
	// True, if the group is active
	IsActive bool `json:"is_active"`
	// Identifier of the supergroup to which this group was upgraded; 0 if none
	UpgradedToSupergroupId int64 `json:"upgraded_to_supergroup_id"`
}

func (entity *BasicGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BasicGroup

	return json.Marshal((*stub)(entity))
}

func (*BasicGroup) GetType() string {
	return TypeBasicGroup
}

func (*BasicGroup) GetConstructor() string {
	return ConstructorBasicGroup
}

func (basicGroup *BasicGroup) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                     int64           `json:"id"`
		MemberCount            int32           `json:"member_count"`
		Status                 json.RawMessage `json:"status"`
		IsActive               bool            `json:"is_active"`
		UpgradedToSupergroupId int64           `json:"upgraded_to_supergroup_id"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	basicGroup.Id = tmp.Id
	basicGroup.MemberCount = tmp.MemberCount
	basicGroup.IsActive = tmp.IsActive
	basicGroup.UpgradedToSupergroupId = tmp.UpgradedToSupergroupId

	fieldStatus, _ := UnmarshalChatMemberStatus(tmp.Status)
	basicGroup.Status = fieldStatus

	return nil
}

// Contains full information about a basic group
type BasicGroupFullInfo struct {
	meta
	// Chat photo; may be null if empty or unknown. If non-null, then it is the same photo as in chat.photo
	Photo *ChatPhoto `json:"photo"`
	// Group description. Updated only after the basic group is opened
	Description string `json:"description"`
	// User identifier of the creator of the group; 0 if unknown
	CreatorUserId int64 `json:"creator_user_id"`
	// Group members
	Members []*ChatMember `json:"members"`
	// True, if non-administrators and non-bots can be hidden in responses to getSupergroupMembers and searchChatMembers for non-administrators after upgrading the basic group to a supergroup
	CanHideMembers bool `json:"can_hide_members"`
	// True, if aggressive anti-spam checks can be enabled or disabled in the supergroup after upgrading the basic group to a supergroup
	CanToggleAggressiveAntiSpam bool `json:"can_toggle_aggressive_anti_spam"`
	// Primary invite link for this group; may be null. For chat administrators with can_invite_users right only. Updated only after the basic group is opened
	InviteLink *ChatInviteLink `json:"invite_link"`
	// List of commands of bots in the group
	BotCommands []*BotCommands `json:"bot_commands"`
}

func (entity *BasicGroupFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BasicGroupFullInfo

	return json.Marshal((*stub)(entity))
}

func (*BasicGroupFullInfo) GetType() string {
	return TypeBasicGroupFullInfo
}

func (*BasicGroupFullInfo) GetConstructor() string {
	return ConstructorBasicGroupFullInfo
}

// Represents a supergroup or channel with zero or more members (subscribers in the case of channels). From the point of view of the system, a channel is a special kind of a supergroup: only administrators can post and see the list of members, and posts from all administrators use the name and photo of the channel instead of individual names and profile photos. Unlike supergroups, channels can have an unlimited number of subscribers
type Supergroup struct {
	meta
	// Supergroup or channel identifier
	Id int64 `json:"id"`
	// Usernames of the supergroup or channel; may be null
	Usernames *Usernames `json:"usernames"`
	// Point in time (Unix timestamp) when the current user joined, or the point in time when the supergroup or channel was created, in case the user is not a member
	Date int32 `json:"date"`
	// Status of the current user in the supergroup or channel; custom title will always be empty
	Status ChatMemberStatus `json:"status"`
	// Number of members in the supergroup or channel; 0 if unknown. Currently, it is guaranteed to be known only if the supergroup or channel was received through getChatSimilarChats, getChatsToSendStories, getCreatedPublicChats, getGroupsInCommon, getInactiveSupergroupChats, getRecommendedChats, getSuitableDiscussionChats, getUserPrivacySettingRules, getVideoChatAvailableParticipants, searchPublicChats, or in chatFolderInviteLinkInfo.missing_chat_ids, or in userFullInfo.personal_chat_id, or for chats with messages or stories from publicForwards and foundStories
	MemberCount int32 `json:"member_count"`
	// Approximate boost level for the chat
	BoostLevel int32 `json:"boost_level"`
	// True, if the channel has a discussion group, or the supergroup is the designated discussion group for a channel
	HasLinkedChat bool `json:"has_linked_chat"`
	// True, if the supergroup is connected to a location, i.e. the supergroup is a location-based supergroup
	HasLocation bool `json:"has_location"`
	// True, if messages sent to the channel contains name of the sender. This field is only applicable to channels
	SignMessages bool `json:"sign_messages"`
	// True, if messages sent to the channel have information about the sender user. This field is only applicable to channels
	ShowMessageSender bool `json:"show_message_sender"`
	// True, if users need to join the supergroup before they can send messages. Always true for channels and non-discussion supergroups
	JoinToSendMessages bool `json:"join_to_send_messages"`
	// True, if all users directly joining the supergroup need to be approved by supergroup administrators. Always false for channels and supergroups without username, location, or a linked chat
	JoinByRequest bool `json:"join_by_request"`
	// True, if the slow mode is enabled in the supergroup
	IsSlowModeEnabled bool `json:"is_slow_mode_enabled"`
	// True, if the supergroup is a channel
	IsChannel bool `json:"is_channel"`
	// True, if the supergroup is a broadcast group, i.e. only administrators can send messages and there is no limit on the number of members
	IsBroadcastGroup bool `json:"is_broadcast_group"`
	// True, if the supergroup is a forum with topics
	IsForum bool `json:"is_forum"`
	// True, if the supergroup or channel is verified
	IsVerified bool `json:"is_verified"`
	// True, if content of media messages in the supergroup or channel chat must be hidden with 18+ spoiler
	HasSensitiveContent bool `json:"has_sensitive_content"`
	// If non-empty, contains a human-readable description of the reason why access to this supergroup or channel must be restricted
	RestrictionReason string `json:"restriction_reason"`
	// True, if many users reported this supergroup or channel as a scam
	IsScam bool `json:"is_scam"`
	// True, if many users reported this supergroup or channel as a fake account
	IsFake bool `json:"is_fake"`
	// True, if the supergroup or channel has non-expired stories available to the current user
	HasActiveStories bool `json:"has_active_stories"`
	// True, if the supergroup or channel has unread non-expired stories available to the current user
	HasUnreadActiveStories bool `json:"has_unread_active_stories"`
}

func (entity *Supergroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Supergroup

	return json.Marshal((*stub)(entity))
}

func (*Supergroup) GetType() string {
	return TypeSupergroup
}

func (*Supergroup) GetConstructor() string {
	return ConstructorSupergroup
}

func (supergroup *Supergroup) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                     int64           `json:"id"`
		Usernames              *Usernames      `json:"usernames"`
		Date                   int32           `json:"date"`
		Status                 json.RawMessage `json:"status"`
		MemberCount            int32           `json:"member_count"`
		BoostLevel             int32           `json:"boost_level"`
		HasLinkedChat          bool            `json:"has_linked_chat"`
		HasLocation            bool            `json:"has_location"`
		SignMessages           bool            `json:"sign_messages"`
		ShowMessageSender      bool            `json:"show_message_sender"`
		JoinToSendMessages     bool            `json:"join_to_send_messages"`
		JoinByRequest          bool            `json:"join_by_request"`
		IsSlowModeEnabled      bool            `json:"is_slow_mode_enabled"`
		IsChannel              bool            `json:"is_channel"`
		IsBroadcastGroup       bool            `json:"is_broadcast_group"`
		IsForum                bool            `json:"is_forum"`
		IsVerified             bool            `json:"is_verified"`
		HasSensitiveContent    bool            `json:"has_sensitive_content"`
		RestrictionReason      string          `json:"restriction_reason"`
		IsScam                 bool            `json:"is_scam"`
		IsFake                 bool            `json:"is_fake"`
		HasActiveStories       bool            `json:"has_active_stories"`
		HasUnreadActiveStories bool            `json:"has_unread_active_stories"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	supergroup.Id = tmp.Id
	supergroup.Usernames = tmp.Usernames
	supergroup.Date = tmp.Date
	supergroup.MemberCount = tmp.MemberCount
	supergroup.BoostLevel = tmp.BoostLevel
	supergroup.HasLinkedChat = tmp.HasLinkedChat
	supergroup.HasLocation = tmp.HasLocation
	supergroup.SignMessages = tmp.SignMessages
	supergroup.ShowMessageSender = tmp.ShowMessageSender
	supergroup.JoinToSendMessages = tmp.JoinToSendMessages
	supergroup.JoinByRequest = tmp.JoinByRequest
	supergroup.IsSlowModeEnabled = tmp.IsSlowModeEnabled
	supergroup.IsChannel = tmp.IsChannel
	supergroup.IsBroadcastGroup = tmp.IsBroadcastGroup
	supergroup.IsForum = tmp.IsForum
	supergroup.IsVerified = tmp.IsVerified
	supergroup.HasSensitiveContent = tmp.HasSensitiveContent
	supergroup.RestrictionReason = tmp.RestrictionReason
	supergroup.IsScam = tmp.IsScam
	supergroup.IsFake = tmp.IsFake
	supergroup.HasActiveStories = tmp.HasActiveStories
	supergroup.HasUnreadActiveStories = tmp.HasUnreadActiveStories

	fieldStatus, _ := UnmarshalChatMemberStatus(tmp.Status)
	supergroup.Status = fieldStatus

	return nil
}

// Contains full information about a supergroup or channel
type SupergroupFullInfo struct {
	meta
	// Chat photo; may be null if empty or unknown. If non-null, then it is the same photo as in chat.photo
	Photo *ChatPhoto `json:"photo"`
	// Supergroup or channel description
	Description string `json:"description"`
	// Number of members in the supergroup or channel; 0 if unknown
	MemberCount int32 `json:"member_count"`
	// Number of privileged users in the supergroup or channel; 0 if unknown
	AdministratorCount int32 `json:"administrator_count"`
	// Number of restricted users in the supergroup; 0 if unknown
	RestrictedCount int32 `json:"restricted_count"`
	// Number of users banned from chat; 0 if unknown
	BannedCount int32 `json:"banned_count"`
	// Chat identifier of a discussion group for the channel, or a channel, for which the supergroup is the designated discussion group; 0 if none or unknown
	LinkedChatId int64 `json:"linked_chat_id"`
	// Delay between consecutive sent messages for non-administrator supergroup members, in seconds
	SlowModeDelay int32 `json:"slow_mode_delay"`
	// Time left before next message can be sent in the supergroup, in seconds. An updateSupergroupFullInfo update is not triggered when value of this field changes, but both new and old values are non-zero
	SlowModeDelayExpiresIn float64 `json:"slow_mode_delay_expires_in"`
	// True, if paid reaction can be enabled in the channel chat; for channels only
	CanEnablePaidReaction bool `json:"can_enable_paid_reaction"`
	// True, if members of the chat can be retrieved via getSupergroupMembers or searchChatMembers
	CanGetMembers bool `json:"can_get_members"`
	// True, if non-administrators can receive only administrators and bots using getSupergroupMembers or searchChatMembers
	HasHiddenMembers bool `json:"has_hidden_members"`
	// True, if non-administrators and non-bots can be hidden in responses to getSupergroupMembers and searchChatMembers for non-administrators
	CanHideMembers bool `json:"can_hide_members"`
	// True, if the supergroup sticker set can be changed
	CanSetStickerSet bool `json:"can_set_sticker_set"`
	// True, if the supergroup location can be changed
	CanSetLocation bool `json:"can_set_location"`
	// True, if the supergroup or channel statistics are available
	CanGetStatistics bool `json:"can_get_statistics"`
	// True, if the supergroup or channel revenue statistics are available
	CanGetRevenueStatistics bool `json:"can_get_revenue_statistics"`
	// True, if the supergroup or channel Telegram Star revenue statistics are available
	CanGetStarRevenueStatistics bool `json:"can_get_star_revenue_statistics"`
	// True, if aggressive anti-spam checks can be enabled or disabled in the supergroup
	CanToggleAggressiveAntiSpam bool `json:"can_toggle_aggressive_anti_spam"`
	// True, if new chat members will have access to old messages. In public, discussion, of forum groups and all channels, old messages are always available, so this option affects only private non-forum supergroups without a linked chat. The value of this field is only available to chat administrators
	IsAllHistoryAvailable bool `json:"is_all_history_available"`
	// True, if the chat can have sponsored messages. The value of this field is only available to the owner of the chat
	CanHaveSponsoredMessages bool `json:"can_have_sponsored_messages"`
	// True, if aggressive anti-spam checks are enabled in the supergroup. The value of this field is only available to chat administrators
	HasAggressiveAntiSpamEnabled bool `json:"has_aggressive_anti_spam_enabled"`
	// True, if paid media can be sent and forwarded to the channel chat; for channels only
	HasPaidMediaAllowed bool `json:"has_paid_media_allowed"`
	// True, if the supergroup or channel has pinned stories
	HasPinnedStories bool `json:"has_pinned_stories"`
	// Number of times the current user boosted the supergroup or channel
	MyBoostCount int32 `json:"my_boost_count"`
	// Number of times the supergroup must be boosted by a user to ignore slow mode and chat permission restrictions; 0 if unspecified
	UnrestrictBoostCount int32 `json:"unrestrict_boost_count"`
	// Identifier of the supergroup sticker set that must be shown before user sticker sets; 0 if none
	StickerSetId JsonInt64 `json:"sticker_set_id"`
	// Identifier of the custom emoji sticker set that can be used in the supergroup without Telegram Premium subscription; 0 if none
	CustomEmojiStickerSetId JsonInt64 `json:"custom_emoji_sticker_set_id"`
	// Location to which the supergroup is connected; may be null if none
	Location *ChatLocation `json:"location"`
	// Primary invite link for the chat; may be null. For chat administrators with can_invite_users right only
	InviteLink *ChatInviteLink `json:"invite_link"`
	// List of commands of bots in the group
	BotCommands []*BotCommands `json:"bot_commands"`
	// Identifier of the basic group from which supergroup was upgraded; 0 if none
	UpgradedFromBasicGroupId int64 `json:"upgraded_from_basic_group_id"`
	// Identifier of the last message in the basic group from which supergroup was upgraded; 0 if none
	UpgradedFromMaxMessageId int64 `json:"upgraded_from_max_message_id"`
}

func (entity *SupergroupFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SupergroupFullInfo

	return json.Marshal((*stub)(entity))
}

func (*SupergroupFullInfo) GetType() string {
	return TypeSupergroupFullInfo
}

func (*SupergroupFullInfo) GetConstructor() string {
	return ConstructorSupergroupFullInfo
}

// The secret chat is not yet created; waiting for the other user to get online
type SecretChatStatePending struct {
	meta
}

func (entity *SecretChatStatePending) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SecretChatStatePending

	return json.Marshal((*stub)(entity))
}

func (*SecretChatStatePending) GetType() string {
	return TypeSecretChatState
}

func (*SecretChatStatePending) GetConstructor() string {
	return ConstructorSecretChatStatePending
}

func (*SecretChatStatePending) SecretChatStateConstructor() string {
	return ConstructorSecretChatStatePending
}

// The secret chat is ready to use
type SecretChatStateReady struct {
	meta
}

func (entity *SecretChatStateReady) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SecretChatStateReady

	return json.Marshal((*stub)(entity))
}

func (*SecretChatStateReady) GetType() string {
	return TypeSecretChatState
}

func (*SecretChatStateReady) GetConstructor() string {
	return ConstructorSecretChatStateReady
}

func (*SecretChatStateReady) SecretChatStateConstructor() string {
	return ConstructorSecretChatStateReady
}

// The secret chat is closed
type SecretChatStateClosed struct {
	meta
}

func (entity *SecretChatStateClosed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SecretChatStateClosed

	return json.Marshal((*stub)(entity))
}

func (*SecretChatStateClosed) GetType() string {
	return TypeSecretChatState
}

func (*SecretChatStateClosed) GetConstructor() string {
	return ConstructorSecretChatStateClosed
}

func (*SecretChatStateClosed) SecretChatStateConstructor() string {
	return ConstructorSecretChatStateClosed
}

// Represents a secret chat
type SecretChat struct {
	meta
	// Secret chat identifier
	Id int32 `json:"id"`
	// Identifier of the chat partner
	UserId int64 `json:"user_id"`
	// State of the secret chat
	State SecretChatState `json:"state"`
	// True, if the chat was created by the current user; false otherwise
	IsOutbound bool `json:"is_outbound"`
	// Hash of the currently used key for comparison with the hash of the chat partner's key. This is a string of 36 little-endian bytes, which must be split into groups of 2 bits, each denoting a pixel of one of 4 colors FFFFFF, D5E6F3, 2D5775, and 2F99C9. The pixels must be used to make a 12x12 square image filled from left to right, top to bottom. Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32 2-digit hex numbers
	KeyHash []byte `json:"key_hash"`
	// Secret chat layer; determines features supported by the chat partner's application. Nested text entities and underline and strikethrough entities are supported if the layer >= 101, files bigger than 2000MB are supported if the layer >= 143, spoiler and custom emoji text entities are supported if the layer >= 144
	Layer int32 `json:"layer"`
}

func (entity *SecretChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SecretChat

	return json.Marshal((*stub)(entity))
}

func (*SecretChat) GetType() string {
	return TypeSecretChat
}

func (*SecretChat) GetConstructor() string {
	return ConstructorSecretChat
}

func (secretChat *SecretChat) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id         int32           `json:"id"`
		UserId     int64           `json:"user_id"`
		State      json.RawMessage `json:"state"`
		IsOutbound bool            `json:"is_outbound"`
		KeyHash    []byte          `json:"key_hash"`
		Layer      int32           `json:"layer"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	secretChat.Id = tmp.Id
	secretChat.UserId = tmp.UserId
	secretChat.IsOutbound = tmp.IsOutbound
	secretChat.KeyHash = tmp.KeyHash
	secretChat.Layer = tmp.Layer

	fieldState, _ := UnmarshalSecretChatState(tmp.State)
	secretChat.State = fieldState

	return nil
}

// The message was sent by a known user
type MessageSenderUser struct {
	meta
	// Identifier of the user that sent the message
	UserId int64 `json:"user_id"`
}

func (entity *MessageSenderUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSenderUser

	return json.Marshal((*stub)(entity))
}

func (*MessageSenderUser) GetType() string {
	return TypeMessageSender
}

func (*MessageSenderUser) GetConstructor() string {
	return ConstructorMessageSenderUser
}

func (*MessageSenderUser) MessageSenderConstructor() string {
	return ConstructorMessageSenderUser
}

// The message was sent on behalf of a chat
type MessageSenderChat struct {
	meta
	// Identifier of the chat that sent the message
	ChatId int64 `json:"chat_id"`
}

func (entity *MessageSenderChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSenderChat

	return json.Marshal((*stub)(entity))
}

func (*MessageSenderChat) GetType() string {
	return TypeMessageSender
}

func (*MessageSenderChat) GetConstructor() string {
	return ConstructorMessageSenderChat
}

func (*MessageSenderChat) MessageSenderConstructor() string {
	return ConstructorMessageSenderChat
}

// Represents a list of message senders
type MessageSenders struct {
	meta
	// Approximate total number of messages senders found
	TotalCount int32 `json:"total_count"`
	// List of message senders
	Senders []MessageSender `json:"senders"`
}

func (entity *MessageSenders) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSenders

	return json.Marshal((*stub)(entity))
}

func (*MessageSenders) GetType() string {
	return TypeMessageSenders
}

func (*MessageSenders) GetConstructor() string {
	return ConstructorMessageSenders
}

func (messageSenders *MessageSenders) UnmarshalJSON(data []byte) error {
	var tmp struct {
		TotalCount int32             `json:"total_count"`
		Senders    []json.RawMessage `json:"senders"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageSenders.TotalCount = tmp.TotalCount

	fieldSenders, _ := UnmarshalListOfMessageSender(tmp.Senders)
	messageSenders.Senders = fieldSenders

	return nil
}

// Represents a message sender, which can be used to send messages in a chat
type ChatMessageSender struct {
	meta
	// The message sender
	Sender MessageSender `json:"sender"`
	// True, if Telegram Premium is needed to use the message sender
	NeedsPremium bool `json:"needs_premium"`
}

func (entity *ChatMessageSender) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMessageSender

	return json.Marshal((*stub)(entity))
}

func (*ChatMessageSender) GetType() string {
	return TypeChatMessageSender
}

func (*ChatMessageSender) GetConstructor() string {
	return ConstructorChatMessageSender
}

func (chatMessageSender *ChatMessageSender) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Sender       json.RawMessage `json:"sender"`
		NeedsPremium bool            `json:"needs_premium"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatMessageSender.NeedsPremium = tmp.NeedsPremium

	fieldSender, _ := UnmarshalMessageSender(tmp.Sender)
	chatMessageSender.Sender = fieldSender

	return nil
}

// Represents a list of message senders, which can be used to send messages in a chat
type ChatMessageSenders struct {
	meta
	// List of available message senders
	Senders []*ChatMessageSender `json:"senders"`
}

func (entity *ChatMessageSenders) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatMessageSenders

	return json.Marshal((*stub)(entity))
}

func (*ChatMessageSenders) GetType() string {
	return TypeChatMessageSenders
}

func (*ChatMessageSenders) GetConstructor() string {
	return ConstructorChatMessageSenders
}

// Contains read date of the message
type MessageReadDateRead struct {
	meta
	// Point in time (Unix timestamp) when the message was read by the other user
	ReadDate int32 `json:"read_date"`
}

func (entity *MessageReadDateRead) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageReadDateRead

	return json.Marshal((*stub)(entity))
}

func (*MessageReadDateRead) GetType() string {
	return TypeMessageReadDate
}

func (*MessageReadDateRead) GetConstructor() string {
	return ConstructorMessageReadDateRead
}

func (*MessageReadDateRead) MessageReadDateConstructor() string {
	return ConstructorMessageReadDateRead
}

// The message is unread yet
type MessageReadDateUnread struct {
	meta
}

func (entity *MessageReadDateUnread) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageReadDateUnread

	return json.Marshal((*stub)(entity))
}

func (*MessageReadDateUnread) GetType() string {
	return TypeMessageReadDate
}

func (*MessageReadDateUnread) GetConstructor() string {
	return ConstructorMessageReadDateUnread
}

func (*MessageReadDateUnread) MessageReadDateConstructor() string {
	return ConstructorMessageReadDateUnread
}

// The message is too old to get read date
type MessageReadDateTooOld struct {
	meta
}

func (entity *MessageReadDateTooOld) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageReadDateTooOld

	return json.Marshal((*stub)(entity))
}

func (*MessageReadDateTooOld) GetType() string {
	return TypeMessageReadDate
}

func (*MessageReadDateTooOld) GetConstructor() string {
	return ConstructorMessageReadDateTooOld
}

func (*MessageReadDateTooOld) MessageReadDateConstructor() string {
	return ConstructorMessageReadDateTooOld
}

// The read date is unknown due to privacy settings of the other user
type MessageReadDateUserPrivacyRestricted struct {
	meta
}

func (entity *MessageReadDateUserPrivacyRestricted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageReadDateUserPrivacyRestricted

	return json.Marshal((*stub)(entity))
}

func (*MessageReadDateUserPrivacyRestricted) GetType() string {
	return TypeMessageReadDate
}

func (*MessageReadDateUserPrivacyRestricted) GetConstructor() string {
	return ConstructorMessageReadDateUserPrivacyRestricted
}

func (*MessageReadDateUserPrivacyRestricted) MessageReadDateConstructor() string {
	return ConstructorMessageReadDateUserPrivacyRestricted
}

// The read date is unknown due to privacy settings of the current user, but will be known if the user subscribes to Telegram Premium
type MessageReadDateMyPrivacyRestricted struct {
	meta
}

func (entity *MessageReadDateMyPrivacyRestricted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageReadDateMyPrivacyRestricted

	return json.Marshal((*stub)(entity))
}

func (*MessageReadDateMyPrivacyRestricted) GetType() string {
	return TypeMessageReadDate
}

func (*MessageReadDateMyPrivacyRestricted) GetConstructor() string {
	return ConstructorMessageReadDateMyPrivacyRestricted
}

func (*MessageReadDateMyPrivacyRestricted) MessageReadDateConstructor() string {
	return ConstructorMessageReadDateMyPrivacyRestricted
}

// Represents a viewer of a message
type MessageViewer struct {
	meta
	// User identifier of the viewer
	UserId int64 `json:"user_id"`
	// Approximate point in time (Unix timestamp) when the message was viewed
	ViewDate int32 `json:"view_date"`
}

func (entity *MessageViewer) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageViewer

	return json.Marshal((*stub)(entity))
}

func (*MessageViewer) GetType() string {
	return TypeMessageViewer
}

func (*MessageViewer) GetConstructor() string {
	return ConstructorMessageViewer
}

// Represents a list of message viewers
type MessageViewers struct {
	meta
	// List of message viewers
	Viewers []*MessageViewer `json:"viewers"`
}

func (entity *MessageViewers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageViewers

	return json.Marshal((*stub)(entity))
}

func (*MessageViewers) GetType() string {
	return TypeMessageViewers
}

func (*MessageViewers) GetConstructor() string {
	return ConstructorMessageViewers
}

// The message was originally sent by a known user
type MessageOriginUser struct {
	meta
	// Identifier of the user that originally sent the message
	SenderUserId int64 `json:"sender_user_id"`
}

func (entity *MessageOriginUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageOriginUser

	return json.Marshal((*stub)(entity))
}

func (*MessageOriginUser) GetType() string {
	return TypeMessageOrigin
}

func (*MessageOriginUser) GetConstructor() string {
	return ConstructorMessageOriginUser
}

func (*MessageOriginUser) MessageOriginConstructor() string {
	return ConstructorMessageOriginUser
}

// The message was originally sent by a user, which is hidden by their privacy settings
type MessageOriginHiddenUser struct {
	meta
	// Name of the sender
	SenderName string `json:"sender_name"`
}

func (entity *MessageOriginHiddenUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageOriginHiddenUser

	return json.Marshal((*stub)(entity))
}

func (*MessageOriginHiddenUser) GetType() string {
	return TypeMessageOrigin
}

func (*MessageOriginHiddenUser) GetConstructor() string {
	return ConstructorMessageOriginHiddenUser
}

func (*MessageOriginHiddenUser) MessageOriginConstructor() string {
	return ConstructorMessageOriginHiddenUser
}

// The message was originally sent on behalf of a chat
type MessageOriginChat struct {
	meta
	// Identifier of the chat that originally sent the message
	SenderChatId int64 `json:"sender_chat_id"`
	// For messages originally sent by an anonymous chat administrator, original message author signature
	AuthorSignature string `json:"author_signature"`
}

func (entity *MessageOriginChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageOriginChat

	return json.Marshal((*stub)(entity))
}

func (*MessageOriginChat) GetType() string {
	return TypeMessageOrigin
}

func (*MessageOriginChat) GetConstructor() string {
	return ConstructorMessageOriginChat
}

func (*MessageOriginChat) MessageOriginConstructor() string {
	return ConstructorMessageOriginChat
}

// The message was originally a post in a channel
type MessageOriginChannel struct {
	meta
	// Identifier of the channel chat to which the message was originally sent
	ChatId int64 `json:"chat_id"`
	// Message identifier of the original message
	MessageId int64 `json:"message_id"`
	// Original post author signature
	AuthorSignature string `json:"author_signature"`
}

func (entity *MessageOriginChannel) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageOriginChannel

	return json.Marshal((*stub)(entity))
}

func (*MessageOriginChannel) GetType() string {
	return TypeMessageOrigin
}

func (*MessageOriginChannel) GetConstructor() string {
	return ConstructorMessageOriginChannel
}

func (*MessageOriginChannel) MessageOriginConstructor() string {
	return ConstructorMessageOriginChannel
}

// Contains information about the last message from which a new message was forwarded last time
type ForwardSource struct {
	meta
	// Identifier of the chat to which the message that was forwarded belonged; may be 0 if unknown
	ChatId int64 `json:"chat_id"`
	// Identifier of the message; may be 0 if unknown
	MessageId int64 `json:"message_id"`
	// Identifier of the sender of the message; may be null if unknown or the new message was forwarded not to Saved Messages
	SenderId MessageSender `json:"sender_id"`
	// Name of the sender of the message if the sender is hidden by their privacy settings
	SenderName string `json:"sender_name"`
	// Point in time (Unix timestamp) when the message is sent; 0 if unknown
	Date int32 `json:"date"`
	// True, if the message that was forwarded is outgoing; always false if sender is unknown
	IsOutgoing bool `json:"is_outgoing"`
}

func (entity *ForwardSource) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ForwardSource

	return json.Marshal((*stub)(entity))
}

func (*ForwardSource) GetType() string {
	return TypeForwardSource
}

func (*ForwardSource) GetConstructor() string {
	return ConstructorForwardSource
}

func (forwardSource *ForwardSource) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId     int64           `json:"chat_id"`
		MessageId  int64           `json:"message_id"`
		SenderId   json.RawMessage `json:"sender_id"`
		SenderName string          `json:"sender_name"`
		Date       int32           `json:"date"`
		IsOutgoing bool            `json:"is_outgoing"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	forwardSource.ChatId = tmp.ChatId
	forwardSource.MessageId = tmp.MessageId
	forwardSource.SenderName = tmp.SenderName
	forwardSource.Date = tmp.Date
	forwardSource.IsOutgoing = tmp.IsOutgoing

	fieldSenderId, _ := UnmarshalMessageSender(tmp.SenderId)
	forwardSource.SenderId = fieldSenderId

	return nil
}

// A reaction with an emoji
type ReactionTypeEmoji struct {
	meta
	// Text representation of the reaction
	Emoji string `json:"emoji"`
}

func (entity *ReactionTypeEmoji) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReactionTypeEmoji

	return json.Marshal((*stub)(entity))
}

func (*ReactionTypeEmoji) GetType() string {
	return TypeReactionType
}

func (*ReactionTypeEmoji) GetConstructor() string {
	return ConstructorReactionTypeEmoji
}

func (*ReactionTypeEmoji) ReactionTypeConstructor() string {
	return ConstructorReactionTypeEmoji
}

// A reaction with a custom emoji
type ReactionTypeCustomEmoji struct {
	meta
	// Unique identifier of the custom emoji
	CustomEmojiId JsonInt64 `json:"custom_emoji_id"`
}

func (entity *ReactionTypeCustomEmoji) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReactionTypeCustomEmoji

	return json.Marshal((*stub)(entity))
}

func (*ReactionTypeCustomEmoji) GetType() string {
	return TypeReactionType
}

func (*ReactionTypeCustomEmoji) GetConstructor() string {
	return ConstructorReactionTypeCustomEmoji
}

func (*ReactionTypeCustomEmoji) ReactionTypeConstructor() string {
	return ConstructorReactionTypeCustomEmoji
}

// The paid reaction in a channel chat
type ReactionTypePaid struct {
	meta
}

func (entity *ReactionTypePaid) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReactionTypePaid

	return json.Marshal((*stub)(entity))
}

func (*ReactionTypePaid) GetType() string {
	return TypeReactionType
}

func (*ReactionTypePaid) GetConstructor() string {
	return ConstructorReactionTypePaid
}

func (*ReactionTypePaid) ReactionTypeConstructor() string {
	return ConstructorReactionTypePaid
}

// Contains information about a user that added paid reactions
type PaidReactor struct {
	meta
	// Identifier of the user or chat that added the reactions; may be null for anonymous reactors that aren't the current user
	SenderId MessageSender `json:"sender_id"`
	// Number of Telegram Stars added
	StarCount int32 `json:"star_count"`
	// True, if the reactor is one of the most active reactors; may be false if the reactor is the current user
	IsTop bool `json:"is_top"`
	// True, if the paid reaction was added by the current user
	IsMe bool `json:"is_me"`
	// True, if the reactor is anonymous
	IsAnonymous bool `json:"is_anonymous"`
}

func (entity *PaidReactor) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaidReactor

	return json.Marshal((*stub)(entity))
}

func (*PaidReactor) GetType() string {
	return TypePaidReactor
}

func (*PaidReactor) GetConstructor() string {
	return ConstructorPaidReactor
}

func (paidReactor *PaidReactor) UnmarshalJSON(data []byte) error {
	var tmp struct {
		SenderId    json.RawMessage `json:"sender_id"`
		StarCount   int32           `json:"star_count"`
		IsTop       bool            `json:"is_top"`
		IsMe        bool            `json:"is_me"`
		IsAnonymous bool            `json:"is_anonymous"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	paidReactor.StarCount = tmp.StarCount
	paidReactor.IsTop = tmp.IsTop
	paidReactor.IsMe = tmp.IsMe
	paidReactor.IsAnonymous = tmp.IsAnonymous

	fieldSenderId, _ := UnmarshalMessageSender(tmp.SenderId)
	paidReactor.SenderId = fieldSenderId

	return nil
}

// Contains information about a forwarded message
type MessageForwardInfo struct {
	meta
	// Origin of the forwarded message
	Origin MessageOrigin `json:"origin"`
	// Point in time (Unix timestamp) when the message was originally sent
	Date int32 `json:"date"`
	// For messages forwarded to the chat with the current user (Saved Messages), to the Replies bot chat, or to the channel's discussion group, information about the source message from which the message was forwarded last time; may be null for other forwards or if unknown
	Source *ForwardSource `json:"source"`
	// The type of public service announcement for the forwarded message
	PublicServiceAnnouncementType string `json:"public_service_announcement_type"`
}

func (entity *MessageForwardInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageForwardInfo

	return json.Marshal((*stub)(entity))
}

func (*MessageForwardInfo) GetType() string {
	return TypeMessageForwardInfo
}

func (*MessageForwardInfo) GetConstructor() string {
	return ConstructorMessageForwardInfo
}

func (messageForwardInfo *MessageForwardInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Origin                        json.RawMessage `json:"origin"`
		Date                          int32           `json:"date"`
		Source                        *ForwardSource  `json:"source"`
		PublicServiceAnnouncementType string          `json:"public_service_announcement_type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageForwardInfo.Date = tmp.Date
	messageForwardInfo.Source = tmp.Source
	messageForwardInfo.PublicServiceAnnouncementType = tmp.PublicServiceAnnouncementType

	fieldOrigin, _ := UnmarshalMessageOrigin(tmp.Origin)
	messageForwardInfo.Origin = fieldOrigin

	return nil
}

// Contains information about a message created with importMessages
type MessageImportInfo struct {
	meta
	// Name of the original sender
	SenderName string `json:"sender_name"`
	// Point in time (Unix timestamp) when the message was originally sent
	Date int32 `json:"date"`
}

func (entity *MessageImportInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageImportInfo

	return json.Marshal((*stub)(entity))
}

func (*MessageImportInfo) GetType() string {
	return TypeMessageImportInfo
}

func (*MessageImportInfo) GetConstructor() string {
	return ConstructorMessageImportInfo
}

// Contains information about replies to a message
type MessageReplyInfo struct {
	meta
	// Number of times the message was directly or indirectly replied
	ReplyCount int32 `json:"reply_count"`
	// Identifiers of at most 3 recent repliers to the message; available in channels with a discussion supergroup. The users and chats are expected to be inaccessible: only their photo and name will be available
	RecentReplierIds []MessageSender `json:"recent_replier_ids"`
	// Identifier of the last read incoming reply to the message
	LastReadInboxMessageId int64 `json:"last_read_inbox_message_id"`
	// Identifier of the last read outgoing reply to the message
	LastReadOutboxMessageId int64 `json:"last_read_outbox_message_id"`
	// Identifier of the last reply to the message
	LastMessageId int64 `json:"last_message_id"`
}

func (entity *MessageReplyInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageReplyInfo

	return json.Marshal((*stub)(entity))
}

func (*MessageReplyInfo) GetType() string {
	return TypeMessageReplyInfo
}

func (*MessageReplyInfo) GetConstructor() string {
	return ConstructorMessageReplyInfo
}

func (messageReplyInfo *MessageReplyInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ReplyCount              int32             `json:"reply_count"`
		RecentReplierIds        []json.RawMessage `json:"recent_replier_ids"`
		LastReadInboxMessageId  int64             `json:"last_read_inbox_message_id"`
		LastReadOutboxMessageId int64             `json:"last_read_outbox_message_id"`
		LastMessageId           int64             `json:"last_message_id"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageReplyInfo.ReplyCount = tmp.ReplyCount
	messageReplyInfo.LastReadInboxMessageId = tmp.LastReadInboxMessageId
	messageReplyInfo.LastReadOutboxMessageId = tmp.LastReadOutboxMessageId
	messageReplyInfo.LastMessageId = tmp.LastMessageId

	fieldRecentReplierIds, _ := UnmarshalListOfMessageSender(tmp.RecentReplierIds)
	messageReplyInfo.RecentReplierIds = fieldRecentReplierIds

	return nil
}

// Contains information about a reaction to a message
type MessageReaction struct {
	meta
	// Type of the reaction
	Type ReactionType `json:"type"`
	// Number of times the reaction was added
	TotalCount int32 `json:"total_count"`
	// True, if the reaction is chosen by the current user
	IsChosen bool `json:"is_chosen"`
	// Identifier of the message sender used by the current user to add the reaction; may be null if unknown or the reaction isn't chosen
	UsedSenderId MessageSender `json:"used_sender_id"`
	// Identifiers of at most 3 recent message senders, added the reaction; available in private, basic group and supergroup chats
	RecentSenderIds []MessageSender `json:"recent_sender_ids"`
}

func (entity *MessageReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageReaction

	return json.Marshal((*stub)(entity))
}

func (*MessageReaction) GetType() string {
	return TypeMessageReaction
}

func (*MessageReaction) GetConstructor() string {
	return ConstructorMessageReaction
}

func (messageReaction *MessageReaction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type            json.RawMessage   `json:"type"`
		TotalCount      int32             `json:"total_count"`
		IsChosen        bool              `json:"is_chosen"`
		UsedSenderId    json.RawMessage   `json:"used_sender_id"`
		RecentSenderIds []json.RawMessage `json:"recent_sender_ids"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageReaction.TotalCount = tmp.TotalCount
	messageReaction.IsChosen = tmp.IsChosen

	fieldType, _ := UnmarshalReactionType(tmp.Type)
	messageReaction.Type = fieldType

	fieldUsedSenderId, _ := UnmarshalMessageSender(tmp.UsedSenderId)
	messageReaction.UsedSenderId = fieldUsedSenderId

	fieldRecentSenderIds, _ := UnmarshalListOfMessageSender(tmp.RecentSenderIds)
	messageReaction.RecentSenderIds = fieldRecentSenderIds

	return nil
}

// Contains a list of reactions added to a message
type MessageReactions struct {
	meta
	// List of added reactions
	Reactions []*MessageReaction `json:"reactions"`
	// True, if the reactions are tags and Telegram Premium users can filter messages by them
	AreTags bool `json:"are_tags"`
	// Information about top users that added the paid reaction
	PaidReactors []*PaidReactor `json:"paid_reactors"`
	// True, if the list of added reactions is available using getMessageAddedReactions
	CanGetAddedReactions bool `json:"can_get_added_reactions"`
}

func (entity *MessageReactions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageReactions

	return json.Marshal((*stub)(entity))
}

func (*MessageReactions) GetType() string {
	return TypeMessageReactions
}

func (*MessageReactions) GetConstructor() string {
	return ConstructorMessageReactions
}

// Contains information about interactions with a message
type MessageInteractionInfo struct {
	meta
	// Number of times the message was viewed
	ViewCount int32 `json:"view_count"`
	// Number of times the message was forwarded
	ForwardCount int32 `json:"forward_count"`
	// Information about direct or indirect replies to the message; may be null. Currently, available only in channels with a discussion supergroup and discussion supergroups for messages, which are not replies itself
	ReplyInfo *MessageReplyInfo `json:"reply_info"`
	// The list of reactions or tags added to the message; may be null
	Reactions *MessageReactions `json:"reactions"`
}

func (entity *MessageInteractionInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageInteractionInfo

	return json.Marshal((*stub)(entity))
}

func (*MessageInteractionInfo) GetType() string {
	return TypeMessageInteractionInfo
}

func (*MessageInteractionInfo) GetConstructor() string {
	return ConstructorMessageInteractionInfo
}

// Contains information about an unread reaction to a message
type UnreadReaction struct {
	meta
	// Type of the reaction
	Type ReactionType `json:"type"`
	// Identifier of the sender, added the reaction
	SenderId MessageSender `json:"sender_id"`
	// True, if the reaction was added with a big animation
	IsBig bool `json:"is_big"`
}

func (entity *UnreadReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UnreadReaction

	return json.Marshal((*stub)(entity))
}

func (*UnreadReaction) GetType() string {
	return TypeUnreadReaction
}

func (*UnreadReaction) GetConstructor() string {
	return ConstructorUnreadReaction
}

func (unreadReaction *UnreadReaction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type     json.RawMessage `json:"type"`
		SenderId json.RawMessage `json:"sender_id"`
		IsBig    bool            `json:"is_big"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	unreadReaction.IsBig = tmp.IsBig

	fieldType, _ := UnmarshalReactionType(tmp.Type)
	unreadReaction.Type = fieldType

	fieldSenderId, _ := UnmarshalMessageSender(tmp.SenderId)
	unreadReaction.SenderId = fieldSenderId

	return nil
}

// An effect from an emoji reaction
type MessageEffectTypeEmojiReaction struct {
	meta
	// Select animation for the effect in TGS format
	SelectAnimation *Sticker `json:"select_animation"`
	// Effect animation for the effect in TGS format
	EffectAnimation *Sticker `json:"effect_animation"`
}

func (entity *MessageEffectTypeEmojiReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageEffectTypeEmojiReaction

	return json.Marshal((*stub)(entity))
}

func (*MessageEffectTypeEmojiReaction) GetType() string {
	return TypeMessageEffectType
}

func (*MessageEffectTypeEmojiReaction) GetConstructor() string {
	return ConstructorMessageEffectTypeEmojiReaction
}

func (*MessageEffectTypeEmojiReaction) MessageEffectTypeConstructor() string {
	return ConstructorMessageEffectTypeEmojiReaction
}

// An effect from a premium sticker
type MessageEffectTypePremiumSticker struct {
	meta
	// The premium sticker. The effect can be found at sticker.full_type.premium_animation
	Sticker *Sticker `json:"sticker"`
}

func (entity *MessageEffectTypePremiumSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageEffectTypePremiumSticker

	return json.Marshal((*stub)(entity))
}

func (*MessageEffectTypePremiumSticker) GetType() string {
	return TypeMessageEffectType
}

func (*MessageEffectTypePremiumSticker) GetConstructor() string {
	return ConstructorMessageEffectTypePremiumSticker
}

func (*MessageEffectTypePremiumSticker) MessageEffectTypeConstructor() string {
	return ConstructorMessageEffectTypePremiumSticker
}

// Contains information about an effect added to a message
type MessageEffect struct {
	meta
	// Unique identifier of the effect
	Id JsonInt64 `json:"id"`
	// Static icon for the effect in WEBP format; may be null if none
	StaticIcon *Sticker `json:"static_icon"`
	// Emoji corresponding to the effect that can be used if static icon isn't available
	Emoji string `json:"emoji"`
	// True, if Telegram Premium subscription is required to use the effect
	IsPremium bool `json:"is_premium"`
	// Type of the effect
	Type MessageEffectType `json:"type"`
}

func (entity *MessageEffect) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageEffect

	return json.Marshal((*stub)(entity))
}

func (*MessageEffect) GetType() string {
	return TypeMessageEffect
}

func (*MessageEffect) GetConstructor() string {
	return ConstructorMessageEffect
}

func (messageEffect *MessageEffect) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id         JsonInt64       `json:"id"`
		StaticIcon *Sticker        `json:"static_icon"`
		Emoji      string          `json:"emoji"`
		IsPremium  bool            `json:"is_premium"`
		Type       json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageEffect.Id = tmp.Id
	messageEffect.StaticIcon = tmp.StaticIcon
	messageEffect.Emoji = tmp.Emoji
	messageEffect.IsPremium = tmp.IsPremium

	fieldType, _ := UnmarshalMessageEffectType(tmp.Type)
	messageEffect.Type = fieldType

	return nil
}

// The message is being sent now, but has not yet been delivered to the server
type MessageSendingStatePending struct {
	meta
	// Non-persistent message sending identifier, specified by the application
	SendingId int32 `json:"sending_id"`
}

func (entity *MessageSendingStatePending) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSendingStatePending

	return json.Marshal((*stub)(entity))
}

func (*MessageSendingStatePending) GetType() string {
	return TypeMessageSendingState
}

func (*MessageSendingStatePending) GetConstructor() string {
	return ConstructorMessageSendingStatePending
}

func (*MessageSendingStatePending) MessageSendingStateConstructor() string {
	return ConstructorMessageSendingStatePending
}

// The message failed to be sent
type MessageSendingStateFailed struct {
	meta
	// The cause of the message sending failure
	Error *Error `json:"error"`
	// True, if the message can be re-sent using resendMessages or readdQuickReplyShortcutMessages
	CanRetry bool `json:"can_retry"`
	// True, if the message can be re-sent only on behalf of a different sender
	NeedAnotherSender bool `json:"need_another_sender"`
	// True, if the message can be re-sent only if another quote is chosen in the message that is replied by the given message
	NeedAnotherReplyQuote bool `json:"need_another_reply_quote"`
	// True, if the message can be re-sent only if the message to be replied is removed. This will be done automatically by resendMessages
	NeedDropReply bool `json:"need_drop_reply"`
	// Time left before the message can be re-sent, in seconds. No update is sent when this field changes
	RetryAfter float64 `json:"retry_after"`
}

func (entity *MessageSendingStateFailed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSendingStateFailed

	return json.Marshal((*stub)(entity))
}

func (*MessageSendingStateFailed) GetType() string {
	return TypeMessageSendingState
}

func (*MessageSendingStateFailed) GetConstructor() string {
	return ConstructorMessageSendingStateFailed
}

func (*MessageSendingStateFailed) MessageSendingStateConstructor() string {
	return ConstructorMessageSendingStateFailed
}

// Describes manually or automatically chosen quote from another message
type TextQuote struct {
	meta
	// Text of the quote. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities can be present in the text
	Text *FormattedText `json:"text"`
	// Approximate quote position in the original message in UTF-16 code units as specified by the message sender
	Position int32 `json:"position"`
	// True, if the quote was manually chosen by the message sender
	IsManual bool `json:"is_manual"`
}

func (entity *TextQuote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextQuote

	return json.Marshal((*stub)(entity))
}

func (*TextQuote) GetType() string {
	return TypeTextQuote
}

func (*TextQuote) GetConstructor() string {
	return ConstructorTextQuote
}

// Describes manually chosen quote from another message
type InputTextQuote struct {
	meta
	// Text of the quote; 0-getOption("message_reply_quote_length_max") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed to be kept and must be kept in the quote
	Text *FormattedText `json:"text"`
	// Quote position in the original message in UTF-16 code units
	Position int32 `json:"position"`
}

func (entity *InputTextQuote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputTextQuote

	return json.Marshal((*stub)(entity))
}

func (*InputTextQuote) GetType() string {
	return TypeInputTextQuote
}

func (*InputTextQuote) GetConstructor() string {
	return ConstructorInputTextQuote
}

// Describes a message replied by a given message
type MessageReplyToMessage struct {
	meta
	// The identifier of the chat to which the message belongs; may be 0 if the replied message is in unknown chat
	ChatId int64 `json:"chat_id"`
	// The identifier of the message; may be 0 if the replied message is in unknown chat
	MessageId int64 `json:"message_id"`
	// Chosen quote from the replied message; may be null if none
	Quote *TextQuote `json:"quote"`
	// Information about origin of the message if the message was from another chat or topic; may be null for messages from the same chat
	Origin MessageOrigin `json:"origin"`
	// Point in time (Unix timestamp) when the message was sent if the message was from another chat or topic; 0 for messages from the same chat
	OriginSendDate int32 `json:"origin_send_date"`
	// Media content of the message if the message was from another chat or topic; may be null for messages from the same chat and messages without media. Can be only one of the following types: messageAnimation, messageAudio, messageContact, messageDice, messageDocument, messageGame, messageGiveaway, messageGiveawayWinners, messageInvoice, messageLocation, messagePaidMedia, messagePhoto, messagePoll, messageSticker, messageStory, messageText (for link preview), messageVenue, messageVideo, messageVideoNote, or messageVoiceNote
	Content MessageContent `json:"content"`
}

func (entity *MessageReplyToMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageReplyToMessage

	return json.Marshal((*stub)(entity))
}

func (*MessageReplyToMessage) GetType() string {
	return TypeMessageReplyTo
}

func (*MessageReplyToMessage) GetConstructor() string {
	return ConstructorMessageReplyToMessage
}

func (*MessageReplyToMessage) MessageReplyToConstructor() string {
	return ConstructorMessageReplyToMessage
}

func (messageReplyToMessage *MessageReplyToMessage) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId         int64           `json:"chat_id"`
		MessageId      int64           `json:"message_id"`
		Quote          *TextQuote      `json:"quote"`
		Origin         json.RawMessage `json:"origin"`
		OriginSendDate int32           `json:"origin_send_date"`
		Content        json.RawMessage `json:"content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageReplyToMessage.ChatId = tmp.ChatId
	messageReplyToMessage.MessageId = tmp.MessageId
	messageReplyToMessage.Quote = tmp.Quote
	messageReplyToMessage.OriginSendDate = tmp.OriginSendDate

	fieldOrigin, _ := UnmarshalMessageOrigin(tmp.Origin)
	messageReplyToMessage.Origin = fieldOrigin

	fieldContent, _ := UnmarshalMessageContent(tmp.Content)
	messageReplyToMessage.Content = fieldContent

	return nil
}

// Describes a story replied by a given message
type MessageReplyToStory struct {
	meta
	// The identifier of the sender of the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// The identifier of the story
	StoryId int32 `json:"story_id"`
}

func (entity *MessageReplyToStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageReplyToStory

	return json.Marshal((*stub)(entity))
}

func (*MessageReplyToStory) GetType() string {
	return TypeMessageReplyTo
}

func (*MessageReplyToStory) GetConstructor() string {
	return ConstructorMessageReplyToStory
}

func (*MessageReplyToStory) MessageReplyToConstructor() string {
	return ConstructorMessageReplyToStory
}

// Describes a message to be replied in the same chat and forum topic
type InputMessageReplyToMessage struct {
	meta
	// The identifier of the message to be replied in the same chat and forum topic. A message can be replied in the same chat and forum topic only if messageProperties.can_be_replied
	MessageId int64 `json:"message_id"`
	// Quote from the message to be replied; pass null if none. Must always be null for replies in secret chats
	Quote *InputTextQuote `json:"quote"`
}

func (entity *InputMessageReplyToMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageReplyToMessage

	return json.Marshal((*stub)(entity))
}

func (*InputMessageReplyToMessage) GetType() string {
	return TypeInputMessageReplyTo
}

func (*InputMessageReplyToMessage) GetConstructor() string {
	return ConstructorInputMessageReplyToMessage
}

func (*InputMessageReplyToMessage) InputMessageReplyToConstructor() string {
	return ConstructorInputMessageReplyToMessage
}

// Describes a message to be replied that is from a different chat or a forum topic; not supported in secret chats
type InputMessageReplyToExternalMessage struct {
	meta
	// The identifier of the chat to which the message to be replied belongs
	ChatId int64 `json:"chat_id"`
	// The identifier of the message to be replied in the specified chat. A message can be replied in another chat or forum topic only if messageProperties.can_be_replied_in_another_chat
	MessageId int64 `json:"message_id"`
	// Quote from the message to be replied; pass null if none
	Quote *InputTextQuote `json:"quote"`
}

func (entity *InputMessageReplyToExternalMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageReplyToExternalMessage

	return json.Marshal((*stub)(entity))
}

func (*InputMessageReplyToExternalMessage) GetType() string {
	return TypeInputMessageReplyTo
}

func (*InputMessageReplyToExternalMessage) GetConstructor() string {
	return ConstructorInputMessageReplyToExternalMessage
}

func (*InputMessageReplyToExternalMessage) InputMessageReplyToConstructor() string {
	return ConstructorInputMessageReplyToExternalMessage
}

// Describes a story to be replied
type InputMessageReplyToStory struct {
	meta
	// The identifier of the sender of the story. Currently, stories can be replied only in the sender's chat and channel stories can't be replied
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// The identifier of the story
	StoryId int32 `json:"story_id"`
}

func (entity *InputMessageReplyToStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageReplyToStory

	return json.Marshal((*stub)(entity))
}

func (*InputMessageReplyToStory) GetType() string {
	return TypeInputMessageReplyTo
}

func (*InputMessageReplyToStory) GetConstructor() string {
	return ConstructorInputMessageReplyToStory
}

func (*InputMessageReplyToStory) InputMessageReplyToConstructor() string {
	return ConstructorInputMessageReplyToStory
}

// Describes a fact-check added to the message by an independent checker
type FactCheck struct {
	meta
	// Text of the fact-check
	Text *FormattedText `json:"text"`
	// A two-letter ISO 3166-1 alpha-2 country code of the country for which the fact-check is shown
	CountryCode string `json:"country_code"`
}

func (entity *FactCheck) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FactCheck

	return json.Marshal((*stub)(entity))
}

func (*FactCheck) GetType() string {
	return TypeFactCheck
}

func (*FactCheck) GetConstructor() string {
	return ConstructorFactCheck
}

// Describes a message
type Message struct {
	meta
	// Message identifier; unique for the chat to which the message belongs
	Id int64 `json:"id"`
	// Identifier of the sender of the message
	SenderId MessageSender `json:"sender_id"`
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The sending state of the message; may be null if the message isn't being sent and didn't fail to be sent
	SendingState MessageSendingState `json:"sending_state"`
	// The scheduling state of the message; may be null if the message isn't scheduled
	SchedulingState MessageSchedulingState `json:"scheduling_state"`
	// True, if the message is outgoing
	IsOutgoing bool `json:"is_outgoing"`
	// True, if the message is pinned
	IsPinned bool `json:"is_pinned"`
	// True, if the message was sent because of a scheduled action by the message sender, for example, as away, or greeting service message
	IsFromOffline bool `json:"is_from_offline"`
	// True, if content of the message can be saved locally or copied using inputMessageForwarded or forwardMessages with copy options
	CanBeSaved bool `json:"can_be_saved"`
	// True, if media timestamp entities refers to a media in this message as opposed to a media in the replied message
	HasTimestampedMedia bool `json:"has_timestamped_media"`
	// True, if the message is a channel post. All messages to channels are channel posts, all other messages are not channel posts
	IsChannelPost bool `json:"is_channel_post"`
	// True, if the message is a forum topic message
	IsTopicMessage bool `json:"is_topic_message"`
	// True, if the message contains an unread mention for the current user
	ContainsUnreadMention bool `json:"contains_unread_mention"`
	// Point in time (Unix timestamp) when the message was sent; 0 for scheduled messages
	Date int32 `json:"date"`
	// Point in time (Unix timestamp) when the message was last edited; 0 for scheduled messages
	EditDate int32 `json:"edit_date"`
	// Information about the initial message sender; may be null if none or unknown
	ForwardInfo *MessageForwardInfo `json:"forward_info"`
	// Information about the initial message for messages created with importMessages; may be null if the message isn't imported
	ImportInfo *MessageImportInfo `json:"import_info"`
	// Information about interactions with the message; may be null if none
	InteractionInfo *MessageInteractionInfo `json:"interaction_info"`
	// Information about unread reactions added to the message
	UnreadReactions []*UnreadReaction `json:"unread_reactions"`
	// Information about fact-check added to the message; may be null if none
	FactCheck *FactCheck `json:"fact_check"`
	// Information about the message or the story this message is replying to; may be null if none
	ReplyTo MessageReplyTo `json:"reply_to"`
	// If non-zero, the identifier of the message thread the message belongs to; unique within the chat to which the message belongs
	MessageThreadId int64 `json:"message_thread_id"`
	// Identifier of the Saved Messages topic for the message; 0 for messages not from Saved Messages
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
	// The message's self-destruct type; may be null if none
	SelfDestructType MessageSelfDestructType `json:"self_destruct_type"`
	// Time left before the message self-destruct timer expires, in seconds; 0 if self-destruction isn't scheduled yet
	SelfDestructIn float64 `json:"self_destruct_in"`
	// Time left before the message will be automatically deleted by message_auto_delete_time setting of the chat, in seconds; 0 if never
	AutoDeleteIn float64 `json:"auto_delete_in"`
	// If non-zero, the user identifier of the inline bot through which this message was sent
	ViaBotUserId int64 `json:"via_bot_user_id"`
	// If non-zero, the user identifier of the business bot that sent this message
	SenderBusinessBotUserId int64 `json:"sender_business_bot_user_id"`
	// Number of times the sender of the message boosted the supergroup at the time the message was sent; 0 if none or unknown. For messages sent by the current user, supergroupFullInfo.my_boost_count must be used instead
	SenderBoostCount int32 `json:"sender_boost_count"`
	// For channel posts and anonymous group messages, optional author signature
	AuthorSignature string `json:"author_signature"`
	// Unique identifier of an album this message belongs to; 0 if none. Only audios, documents, photos and videos can be grouped together in albums
	MediaAlbumId JsonInt64 `json:"media_album_id"`
	// Unique identifier of the effect added to the message; 0 if none
	EffectId JsonInt64 `json:"effect_id"`
	// True, if media content of the message must be hidden with 18+ spoiler
	HasSensitiveContent bool `json:"has_sensitive_content"`
	// If non-empty, contains a human-readable description of the reason why access to this message must be restricted
	RestrictionReason string `json:"restriction_reason"`
	// Content of the message
	Content MessageContent `json:"content"`
	// Reply markup for the message; may be null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

func (entity *Message) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Message

	return json.Marshal((*stub)(entity))
}

func (*Message) GetType() string {
	return TypeMessage
}

func (*Message) GetConstructor() string {
	return ConstructorMessage
}

func (message *Message) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                      int64                   `json:"id"`
		SenderId                json.RawMessage         `json:"sender_id"`
		ChatId                  int64                   `json:"chat_id"`
		SendingState            json.RawMessage         `json:"sending_state"`
		SchedulingState         json.RawMessage         `json:"scheduling_state"`
		IsOutgoing              bool                    `json:"is_outgoing"`
		IsPinned                bool                    `json:"is_pinned"`
		IsFromOffline           bool                    `json:"is_from_offline"`
		CanBeSaved              bool                    `json:"can_be_saved"`
		HasTimestampedMedia     bool                    `json:"has_timestamped_media"`
		IsChannelPost           bool                    `json:"is_channel_post"`
		IsTopicMessage          bool                    `json:"is_topic_message"`
		ContainsUnreadMention   bool                    `json:"contains_unread_mention"`
		Date                    int32                   `json:"date"`
		EditDate                int32                   `json:"edit_date"`
		ForwardInfo             *MessageForwardInfo     `json:"forward_info"`
		ImportInfo              *MessageImportInfo      `json:"import_info"`
		InteractionInfo         *MessageInteractionInfo `json:"interaction_info"`
		UnreadReactions         []*UnreadReaction       `json:"unread_reactions"`
		FactCheck               *FactCheck              `json:"fact_check"`
		ReplyTo                 json.RawMessage         `json:"reply_to"`
		MessageThreadId         int64                   `json:"message_thread_id"`
		SavedMessagesTopicId    int64                   `json:"saved_messages_topic_id"`
		SelfDestructType        json.RawMessage         `json:"self_destruct_type"`
		SelfDestructIn          float64                 `json:"self_destruct_in"`
		AutoDeleteIn            float64                 `json:"auto_delete_in"`
		ViaBotUserId            int64                   `json:"via_bot_user_id"`
		SenderBusinessBotUserId int64                   `json:"sender_business_bot_user_id"`
		SenderBoostCount        int32                   `json:"sender_boost_count"`
		AuthorSignature         string                  `json:"author_signature"`
		MediaAlbumId            JsonInt64               `json:"media_album_id"`
		EffectId                JsonInt64               `json:"effect_id"`
		HasSensitiveContent     bool                    `json:"has_sensitive_content"`
		RestrictionReason       string                  `json:"restriction_reason"`
		Content                 json.RawMessage         `json:"content"`
		ReplyMarkup             json.RawMessage         `json:"reply_markup"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	message.Id = tmp.Id
	message.ChatId = tmp.ChatId
	message.IsOutgoing = tmp.IsOutgoing
	message.IsPinned = tmp.IsPinned
	message.IsFromOffline = tmp.IsFromOffline
	message.CanBeSaved = tmp.CanBeSaved
	message.HasTimestampedMedia = tmp.HasTimestampedMedia
	message.IsChannelPost = tmp.IsChannelPost
	message.IsTopicMessage = tmp.IsTopicMessage
	message.ContainsUnreadMention = tmp.ContainsUnreadMention
	message.Date = tmp.Date
	message.EditDate = tmp.EditDate
	message.ForwardInfo = tmp.ForwardInfo
	message.ImportInfo = tmp.ImportInfo
	message.InteractionInfo = tmp.InteractionInfo
	message.UnreadReactions = tmp.UnreadReactions
	message.FactCheck = tmp.FactCheck
	message.MessageThreadId = tmp.MessageThreadId
	message.SavedMessagesTopicId = tmp.SavedMessagesTopicId
	message.SelfDestructIn = tmp.SelfDestructIn
	message.AutoDeleteIn = tmp.AutoDeleteIn
	message.ViaBotUserId = tmp.ViaBotUserId
	message.SenderBusinessBotUserId = tmp.SenderBusinessBotUserId
	message.SenderBoostCount = tmp.SenderBoostCount
	message.AuthorSignature = tmp.AuthorSignature
	message.MediaAlbumId = tmp.MediaAlbumId
	message.EffectId = tmp.EffectId
	message.HasSensitiveContent = tmp.HasSensitiveContent
	message.RestrictionReason = tmp.RestrictionReason

	fieldSenderId, _ := UnmarshalMessageSender(tmp.SenderId)
	message.SenderId = fieldSenderId

	fieldSendingState, _ := UnmarshalMessageSendingState(tmp.SendingState)
	message.SendingState = fieldSendingState

	fieldSchedulingState, _ := UnmarshalMessageSchedulingState(tmp.SchedulingState)
	message.SchedulingState = fieldSchedulingState

	fieldReplyTo, _ := UnmarshalMessageReplyTo(tmp.ReplyTo)
	message.ReplyTo = fieldReplyTo

	fieldSelfDestructType, _ := UnmarshalMessageSelfDestructType(tmp.SelfDestructType)
	message.SelfDestructType = fieldSelfDestructType

	fieldContent, _ := UnmarshalMessageContent(tmp.Content)
	message.Content = fieldContent

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	message.ReplyMarkup = fieldReplyMarkup

	return nil
}

// Contains a list of messages
type Messages struct {
	meta
	// Approximate total number of messages found
	TotalCount int32 `json:"total_count"`
	// List of messages; messages may be null
	Messages []*Message `json:"messages"`
}

func (entity *Messages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Messages

	return json.Marshal((*stub)(entity))
}

func (*Messages) GetType() string {
	return TypeMessages
}

func (*Messages) GetConstructor() string {
	return ConstructorMessages
}

// Contains a list of messages found by a search
type FoundMessages struct {
	meta
	// Approximate total number of messages found; -1 if unknown
	TotalCount int32 `json:"total_count"`
	// List of messages
	Messages []*Message `json:"messages"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *FoundMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FoundMessages

	return json.Marshal((*stub)(entity))
}

func (*FoundMessages) GetType() string {
	return TypeFoundMessages
}

func (*FoundMessages) GetConstructor() string {
	return ConstructorFoundMessages
}

// Contains a list of messages found by a search in a given chat
type FoundChatMessages struct {
	meta
	// Approximate total number of messages found; -1 if unknown
	TotalCount int32 `json:"total_count"`
	// List of messages
	Messages []*Message `json:"messages"`
	// The offset for the next request. If 0, there are no more results
	NextFromMessageId int64 `json:"next_from_message_id"`
}

func (entity *FoundChatMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FoundChatMessages

	return json.Marshal((*stub)(entity))
}

func (*FoundChatMessages) GetType() string {
	return TypeFoundChatMessages
}

func (*FoundChatMessages) GetConstructor() string {
	return ConstructorFoundChatMessages
}

// Contains information about a message in a specific position
type MessagePosition struct {
	meta
	// 0-based message position in the full list of suitable messages
	Position int32 `json:"position"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// Point in time (Unix timestamp) when the message was sent
	Date int32 `json:"date"`
}

func (entity *MessagePosition) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePosition

	return json.Marshal((*stub)(entity))
}

func (*MessagePosition) GetType() string {
	return TypeMessagePosition
}

func (*MessagePosition) GetConstructor() string {
	return ConstructorMessagePosition
}

// Contains a list of message positions
type MessagePositions struct {
	meta
	// Total number of messages found
	TotalCount int32 `json:"total_count"`
	// List of message positions
	Positions []*MessagePosition `json:"positions"`
}

func (entity *MessagePositions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePositions

	return json.Marshal((*stub)(entity))
}

func (*MessagePositions) GetType() string {
	return TypeMessagePositions
}

func (*MessagePositions) GetConstructor() string {
	return ConstructorMessagePositions
}

// Contains information about found messages sent on a specific day
type MessageCalendarDay struct {
	meta
	// Total number of found messages sent on the day
	TotalCount int32 `json:"total_count"`
	// First message sent on the day
	Message *Message `json:"message"`
}

func (entity *MessageCalendarDay) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageCalendarDay

	return json.Marshal((*stub)(entity))
}

func (*MessageCalendarDay) GetType() string {
	return TypeMessageCalendarDay
}

func (*MessageCalendarDay) GetConstructor() string {
	return ConstructorMessageCalendarDay
}

// Contains information about found messages, split by days according to the option "utc_time_offset"
type MessageCalendar struct {
	meta
	// Total number of found messages
	TotalCount int32 `json:"total_count"`
	// Information about messages sent
	Days []*MessageCalendarDay `json:"days"`
}

func (entity *MessageCalendar) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageCalendar

	return json.Marshal((*stub)(entity))
}

func (*MessageCalendar) GetType() string {
	return TypeMessageCalendar
}

func (*MessageCalendar) GetConstructor() string {
	return ConstructorMessageCalendar
}

// Describes a message from a business account as received by a bot
type BusinessMessage struct {
	meta
	// The message
	Message *Message `json:"message"`
	// Message that is replied by the message in the same chat; may be null if none
	ReplyToMessage *Message `json:"reply_to_message"`
}

func (entity *BusinessMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessMessage

	return json.Marshal((*stub)(entity))
}

func (*BusinessMessage) GetType() string {
	return TypeBusinessMessage
}

func (*BusinessMessage) GetConstructor() string {
	return ConstructorBusinessMessage
}

// Contains a list of messages from a business account as received by a bot
type BusinessMessages struct {
	meta
	// List of business messages
	Messages []*BusinessMessage `json:"messages"`
}

func (entity *BusinessMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessMessages

	return json.Marshal((*stub)(entity))
}

func (*BusinessMessages) GetType() string {
	return TypeBusinessMessages
}

func (*BusinessMessages) GetConstructor() string {
	return ConstructorBusinessMessages
}

// The message is from a chat history
type MessageSourceChatHistory struct {
	meta
}

func (entity *MessageSourceChatHistory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSourceChatHistory

	return json.Marshal((*stub)(entity))
}

func (*MessageSourceChatHistory) GetType() string {
	return TypeMessageSource
}

func (*MessageSourceChatHistory) GetConstructor() string {
	return ConstructorMessageSourceChatHistory
}

func (*MessageSourceChatHistory) MessageSourceConstructor() string {
	return ConstructorMessageSourceChatHistory
}

// The message is from a message thread history
type MessageSourceMessageThreadHistory struct {
	meta
}

func (entity *MessageSourceMessageThreadHistory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSourceMessageThreadHistory

	return json.Marshal((*stub)(entity))
}

func (*MessageSourceMessageThreadHistory) GetType() string {
	return TypeMessageSource
}

func (*MessageSourceMessageThreadHistory) GetConstructor() string {
	return ConstructorMessageSourceMessageThreadHistory
}

func (*MessageSourceMessageThreadHistory) MessageSourceConstructor() string {
	return ConstructorMessageSourceMessageThreadHistory
}

// The message is from a forum topic history
type MessageSourceForumTopicHistory struct {
	meta
}

func (entity *MessageSourceForumTopicHistory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSourceForumTopicHistory

	return json.Marshal((*stub)(entity))
}

func (*MessageSourceForumTopicHistory) GetType() string {
	return TypeMessageSource
}

func (*MessageSourceForumTopicHistory) GetConstructor() string {
	return ConstructorMessageSourceForumTopicHistory
}

func (*MessageSourceForumTopicHistory) MessageSourceConstructor() string {
	return ConstructorMessageSourceForumTopicHistory
}

// The message is from chat, message thread or forum topic history preview
type MessageSourceHistoryPreview struct {
	meta
}

func (entity *MessageSourceHistoryPreview) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSourceHistoryPreview

	return json.Marshal((*stub)(entity))
}

func (*MessageSourceHistoryPreview) GetType() string {
	return TypeMessageSource
}

func (*MessageSourceHistoryPreview) GetConstructor() string {
	return ConstructorMessageSourceHistoryPreview
}

func (*MessageSourceHistoryPreview) MessageSourceConstructor() string {
	return ConstructorMessageSourceHistoryPreview
}

// The message is from a chat list or a forum topic list
type MessageSourceChatList struct {
	meta
}

func (entity *MessageSourceChatList) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSourceChatList

	return json.Marshal((*stub)(entity))
}

func (*MessageSourceChatList) GetType() string {
	return TypeMessageSource
}

func (*MessageSourceChatList) GetConstructor() string {
	return ConstructorMessageSourceChatList
}

func (*MessageSourceChatList) MessageSourceConstructor() string {
	return ConstructorMessageSourceChatList
}

// The message is from search results, including file downloads, local file list, outgoing document messages, calendar
type MessageSourceSearch struct {
	meta
}

func (entity *MessageSourceSearch) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSourceSearch

	return json.Marshal((*stub)(entity))
}

func (*MessageSourceSearch) GetType() string {
	return TypeMessageSource
}

func (*MessageSourceSearch) GetConstructor() string {
	return ConstructorMessageSourceSearch
}

func (*MessageSourceSearch) MessageSourceConstructor() string {
	return ConstructorMessageSourceSearch
}

// The message is from a chat event log
type MessageSourceChatEventLog struct {
	meta
}

func (entity *MessageSourceChatEventLog) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSourceChatEventLog

	return json.Marshal((*stub)(entity))
}

func (*MessageSourceChatEventLog) GetType() string {
	return TypeMessageSource
}

func (*MessageSourceChatEventLog) GetConstructor() string {
	return ConstructorMessageSourceChatEventLog
}

func (*MessageSourceChatEventLog) MessageSourceConstructor() string {
	return ConstructorMessageSourceChatEventLog
}

// The message is from a notification
type MessageSourceNotification struct {
	meta
}

func (entity *MessageSourceNotification) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSourceNotification

	return json.Marshal((*stub)(entity))
}

func (*MessageSourceNotification) GetType() string {
	return TypeMessageSource
}

func (*MessageSourceNotification) GetConstructor() string {
	return ConstructorMessageSourceNotification
}

func (*MessageSourceNotification) MessageSourceConstructor() string {
	return ConstructorMessageSourceNotification
}

// The message was screenshotted; the source must be used only if the message content was visible during the screenshot
type MessageSourceScreenshot struct {
	meta
}

func (entity *MessageSourceScreenshot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSourceScreenshot

	return json.Marshal((*stub)(entity))
}

func (*MessageSourceScreenshot) GetType() string {
	return TypeMessageSource
}

func (*MessageSourceScreenshot) GetConstructor() string {
	return ConstructorMessageSourceScreenshot
}

func (*MessageSourceScreenshot) MessageSourceConstructor() string {
	return ConstructorMessageSourceScreenshot
}

// The message is from some other source
type MessageSourceOther struct {
	meta
}

func (entity *MessageSourceOther) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSourceOther

	return json.Marshal((*stub)(entity))
}

func (*MessageSourceOther) GetType() string {
	return TypeMessageSource
}

func (*MessageSourceOther) GetConstructor() string {
	return ConstructorMessageSourceOther
}

func (*MessageSourceOther) MessageSourceConstructor() string {
	return ConstructorMessageSourceOther
}

// Information about the sponsor of a message
type MessageSponsor struct {
	meta
	// URL of the sponsor to be opened when the message is clicked
	Url string `json:"url"`
	// Photo of the sponsor; may be null if must not be shown
	Photo *Photo `json:"photo"`
	// Additional optional information about the sponsor to be shown along with the message
	Info string `json:"info"`
}

func (entity *MessageSponsor) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSponsor

	return json.Marshal((*stub)(entity))
}

func (*MessageSponsor) GetType() string {
	return TypeMessageSponsor
}

func (*MessageSponsor) GetConstructor() string {
	return ConstructorMessageSponsor
}

// Describes a sponsored message
type SponsoredMessage struct {
	meta
	// Message identifier; unique for the chat to which the sponsored message belongs among both ordinary and sponsored messages
	MessageId int64 `json:"message_id"`
	// True, if the message needs to be labeled as "recommended" instead of "sponsored"
	IsRecommended bool `json:"is_recommended"`
	// True, if the message can be reported to Telegram moderators through reportChatSponsoredMessage
	CanBeReported bool `json:"can_be_reported"`
	// Content of the message. Currently, can be only of the types messageText, messageAnimation, messagePhoto, or messageVideo. Video messages can be viewed fullscreen
	Content MessageContent `json:"content"`
	// Information about the sponsor of the message
	Sponsor *MessageSponsor `json:"sponsor"`
	// Title of the sponsored message
	Title string `json:"title"`
	// Text for the message action button
	ButtonText string `json:"button_text"`
	// Identifier of the accent color for title, button text and message background
	AccentColorId int32 `json:"accent_color_id"`
	// Identifier of a custom emoji to be shown on the message background; 0 if none
	BackgroundCustomEmojiId JsonInt64 `json:"background_custom_emoji_id"`
	// If non-empty, additional information about the sponsored message to be shown along with the message
	AdditionalInfo string `json:"additional_info"`
}

func (entity *SponsoredMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SponsoredMessage

	return json.Marshal((*stub)(entity))
}

func (*SponsoredMessage) GetType() string {
	return TypeSponsoredMessage
}

func (*SponsoredMessage) GetConstructor() string {
	return ConstructorSponsoredMessage
}

func (sponsoredMessage *SponsoredMessage) UnmarshalJSON(data []byte) error {
	var tmp struct {
		MessageId               int64           `json:"message_id"`
		IsRecommended           bool            `json:"is_recommended"`
		CanBeReported           bool            `json:"can_be_reported"`
		Content                 json.RawMessage `json:"content"`
		Sponsor                 *MessageSponsor `json:"sponsor"`
		Title                   string          `json:"title"`
		ButtonText              string          `json:"button_text"`
		AccentColorId           int32           `json:"accent_color_id"`
		BackgroundCustomEmojiId JsonInt64       `json:"background_custom_emoji_id"`
		AdditionalInfo          string          `json:"additional_info"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	sponsoredMessage.MessageId = tmp.MessageId
	sponsoredMessage.IsRecommended = tmp.IsRecommended
	sponsoredMessage.CanBeReported = tmp.CanBeReported
	sponsoredMessage.Sponsor = tmp.Sponsor
	sponsoredMessage.Title = tmp.Title
	sponsoredMessage.ButtonText = tmp.ButtonText
	sponsoredMessage.AccentColorId = tmp.AccentColorId
	sponsoredMessage.BackgroundCustomEmojiId = tmp.BackgroundCustomEmojiId
	sponsoredMessage.AdditionalInfo = tmp.AdditionalInfo

	fieldContent, _ := UnmarshalMessageContent(tmp.Content)
	sponsoredMessage.Content = fieldContent

	return nil
}

// Contains a list of sponsored messages
type SponsoredMessages struct {
	meta
	// List of sponsored messages
	Messages []*SponsoredMessage `json:"messages"`
	// The minimum number of messages between shown sponsored messages, or 0 if only one sponsored message must be shown after all ordinary messages
	MessagesBetween int32 `json:"messages_between"`
}

func (entity *SponsoredMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SponsoredMessages

	return json.Marshal((*stub)(entity))
}

func (*SponsoredMessages) GetType() string {
	return TypeSponsoredMessages
}

func (*SponsoredMessages) GetConstructor() string {
	return ConstructorSponsoredMessages
}

// Describes an option to report an entity to Telegram
type ReportOption struct {
	meta
	// Unique identifier of the option
	Id []byte `json:"id"`
	// Text of the option
	Text string `json:"text"`
}

func (entity *ReportOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportOption

	return json.Marshal((*stub)(entity))
}

func (*ReportOption) GetType() string {
	return TypeReportOption
}

func (*ReportOption) GetConstructor() string {
	return ConstructorReportOption
}

// The message was reported successfully
type ReportChatSponsoredMessageResultOk struct {
	meta
}

func (entity *ReportChatSponsoredMessageResultOk) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportChatSponsoredMessageResultOk

	return json.Marshal((*stub)(entity))
}

func (*ReportChatSponsoredMessageResultOk) GetType() string {
	return TypeReportChatSponsoredMessageResult
}

func (*ReportChatSponsoredMessageResultOk) GetConstructor() string {
	return ConstructorReportChatSponsoredMessageResultOk
}

func (*ReportChatSponsoredMessageResultOk) ReportChatSponsoredMessageResultConstructor() string {
	return ConstructorReportChatSponsoredMessageResultOk
}

// The sponsored message is too old or not found
type ReportChatSponsoredMessageResultFailed struct {
	meta
}

func (entity *ReportChatSponsoredMessageResultFailed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportChatSponsoredMessageResultFailed

	return json.Marshal((*stub)(entity))
}

func (*ReportChatSponsoredMessageResultFailed) GetType() string {
	return TypeReportChatSponsoredMessageResult
}

func (*ReportChatSponsoredMessageResultFailed) GetConstructor() string {
	return ConstructorReportChatSponsoredMessageResultFailed
}

func (*ReportChatSponsoredMessageResultFailed) ReportChatSponsoredMessageResultConstructor() string {
	return ConstructorReportChatSponsoredMessageResultFailed
}

// The user must choose an option to report the message and repeat request with the chosen option
type ReportChatSponsoredMessageResultOptionRequired struct {
	meta
	// Title for the option choice
	Title string `json:"title"`
	// List of available options
	Options []*ReportOption `json:"options"`
}

func (entity *ReportChatSponsoredMessageResultOptionRequired) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportChatSponsoredMessageResultOptionRequired

	return json.Marshal((*stub)(entity))
}

func (*ReportChatSponsoredMessageResultOptionRequired) GetType() string {
	return TypeReportChatSponsoredMessageResult
}

func (*ReportChatSponsoredMessageResultOptionRequired) GetConstructor() string {
	return ConstructorReportChatSponsoredMessageResultOptionRequired
}

func (*ReportChatSponsoredMessageResultOptionRequired) ReportChatSponsoredMessageResultConstructor() string {
	return ConstructorReportChatSponsoredMessageResultOptionRequired
}

// Sponsored messages were hidden for the user in all chats
type ReportChatSponsoredMessageResultAdsHidden struct {
	meta
}

func (entity *ReportChatSponsoredMessageResultAdsHidden) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportChatSponsoredMessageResultAdsHidden

	return json.Marshal((*stub)(entity))
}

func (*ReportChatSponsoredMessageResultAdsHidden) GetType() string {
	return TypeReportChatSponsoredMessageResult
}

func (*ReportChatSponsoredMessageResultAdsHidden) GetConstructor() string {
	return ConstructorReportChatSponsoredMessageResultAdsHidden
}

func (*ReportChatSponsoredMessageResultAdsHidden) ReportChatSponsoredMessageResultConstructor() string {
	return ConstructorReportChatSponsoredMessageResultAdsHidden
}

// The user asked to hide sponsored messages, but Telegram Premium is required for this
type ReportChatSponsoredMessageResultPremiumRequired struct {
	meta
}

func (entity *ReportChatSponsoredMessageResultPremiumRequired) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportChatSponsoredMessageResultPremiumRequired

	return json.Marshal((*stub)(entity))
}

func (*ReportChatSponsoredMessageResultPremiumRequired) GetType() string {
	return TypeReportChatSponsoredMessageResult
}

func (*ReportChatSponsoredMessageResultPremiumRequired) GetConstructor() string {
	return ConstructorReportChatSponsoredMessageResultPremiumRequired
}

func (*ReportChatSponsoredMessageResultPremiumRequired) ReportChatSponsoredMessageResultConstructor() string {
	return ConstructorReportChatSponsoredMessageResultPremiumRequired
}

// Describes a file added to file download list
type FileDownload struct {
	meta
	// File identifier
	FileId int32 `json:"file_id"`
	// The message with the file
	Message *Message `json:"message"`
	// Point in time (Unix timestamp) when the file was added to the download list
	AddDate int32 `json:"add_date"`
	// Point in time (Unix timestamp) when the file downloading was completed; 0 if the file downloading isn't completed
	CompleteDate int32 `json:"complete_date"`
	// True, if downloading of the file is paused
	IsPaused bool `json:"is_paused"`
}

func (entity *FileDownload) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileDownload

	return json.Marshal((*stub)(entity))
}

func (*FileDownload) GetType() string {
	return TypeFileDownload
}

func (*FileDownload) GetConstructor() string {
	return ConstructorFileDownload
}

// Contains number of being downloaded and recently downloaded files found
type DownloadedFileCounts struct {
	meta
	// Number of active file downloads found, including paused
	ActiveCount int32 `json:"active_count"`
	// Number of paused file downloads found
	PausedCount int32 `json:"paused_count"`
	// Number of completed file downloads found
	CompletedCount int32 `json:"completed_count"`
}

func (entity *DownloadedFileCounts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DownloadedFileCounts

	return json.Marshal((*stub)(entity))
}

func (*DownloadedFileCounts) GetType() string {
	return TypeDownloadedFileCounts
}

func (*DownloadedFileCounts) GetConstructor() string {
	return ConstructorDownloadedFileCounts
}

// Contains a list of downloaded files, found by a search
type FoundFileDownloads struct {
	meta
	// Total number of suitable files, ignoring offset
	TotalCounts *DownloadedFileCounts `json:"total_counts"`
	// The list of files
	Files []*FileDownload `json:"files"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *FoundFileDownloads) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FoundFileDownloads

	return json.Marshal((*stub)(entity))
}

func (*FoundFileDownloads) GetType() string {
	return TypeFoundFileDownloads
}

func (*FoundFileDownloads) GetConstructor() string {
	return ConstructorFoundFileDownloads
}

// Notification settings applied to all private and secret chats when the corresponding chat setting has a default value
type NotificationSettingsScopePrivateChats struct {
	meta
}

func (entity *NotificationSettingsScopePrivateChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationSettingsScopePrivateChats

	return json.Marshal((*stub)(entity))
}

func (*NotificationSettingsScopePrivateChats) GetType() string {
	return TypeNotificationSettingsScope
}

func (*NotificationSettingsScopePrivateChats) GetConstructor() string {
	return ConstructorNotificationSettingsScopePrivateChats
}

func (*NotificationSettingsScopePrivateChats) NotificationSettingsScopeConstructor() string {
	return ConstructorNotificationSettingsScopePrivateChats
}

// Notification settings applied to all basic group and supergroup chats when the corresponding chat setting has a default value
type NotificationSettingsScopeGroupChats struct {
	meta
}

func (entity *NotificationSettingsScopeGroupChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationSettingsScopeGroupChats

	return json.Marshal((*stub)(entity))
}

func (*NotificationSettingsScopeGroupChats) GetType() string {
	return TypeNotificationSettingsScope
}

func (*NotificationSettingsScopeGroupChats) GetConstructor() string {
	return ConstructorNotificationSettingsScopeGroupChats
}

func (*NotificationSettingsScopeGroupChats) NotificationSettingsScopeConstructor() string {
	return ConstructorNotificationSettingsScopeGroupChats
}

// Notification settings applied to all channel chats when the corresponding chat setting has a default value
type NotificationSettingsScopeChannelChats struct {
	meta
}

func (entity *NotificationSettingsScopeChannelChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationSettingsScopeChannelChats

	return json.Marshal((*stub)(entity))
}

func (*NotificationSettingsScopeChannelChats) GetType() string {
	return TypeNotificationSettingsScope
}

func (*NotificationSettingsScopeChannelChats) GetConstructor() string {
	return ConstructorNotificationSettingsScopeChannelChats
}

func (*NotificationSettingsScopeChannelChats) NotificationSettingsScopeConstructor() string {
	return ConstructorNotificationSettingsScopeChannelChats
}

// Contains information about notification settings for a chat or a forum topic
type ChatNotificationSettings struct {
	meta
	// If true, the value for the relevant type of chat or the forum chat is used instead of mute_for
	UseDefaultMuteFor bool `json:"use_default_mute_for"`
	// Time left before notifications will be unmuted, in seconds
	MuteFor int32 `json:"mute_for"`
	// If true, the value for the relevant type of chat or the forum chat is used instead of sound_id
	UseDefaultSound bool `json:"use_default_sound"`
	// Identifier of the notification sound to be played for messages; 0 if sound is disabled
	SoundId JsonInt64 `json:"sound_id"`
	// If true, the value for the relevant type of chat or the forum chat is used instead of show_preview
	UseDefaultShowPreview bool `json:"use_default_show_preview"`
	// True, if message content must be displayed in notifications
	ShowPreview bool `json:"show_preview"`
	// If true, the value for the relevant type of chat is used instead of mute_stories
	UseDefaultMuteStories bool `json:"use_default_mute_stories"`
	// True, if story notifications are disabled for the chat
	MuteStories bool `json:"mute_stories"`
	// If true, the value for the relevant type of chat is used instead of story_sound_id
	UseDefaultStorySound bool `json:"use_default_story_sound"`
	// Identifier of the notification sound to be played for stories; 0 if sound is disabled
	StorySoundId JsonInt64 `json:"story_sound_id"`
	// If true, the value for the relevant type of chat is used instead of show_story_sender
	UseDefaultShowStorySender bool `json:"use_default_show_story_sender"`
	// True, if the sender of stories must be displayed in notifications
	ShowStorySender bool `json:"show_story_sender"`
	// If true, the value for the relevant type of chat or the forum chat is used instead of disable_pinned_message_notifications
	UseDefaultDisablePinnedMessageNotifications bool `json:"use_default_disable_pinned_message_notifications"`
	// If true, notifications for incoming pinned messages will be created as for an ordinary unread message
	DisablePinnedMessageNotifications bool `json:"disable_pinned_message_notifications"`
	// If true, the value for the relevant type of chat or the forum chat is used instead of disable_mention_notifications
	UseDefaultDisableMentionNotifications bool `json:"use_default_disable_mention_notifications"`
	// If true, notifications for messages with mentions will be created as for an ordinary unread message
	DisableMentionNotifications bool `json:"disable_mention_notifications"`
}

func (entity *ChatNotificationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatNotificationSettings

	return json.Marshal((*stub)(entity))
}

func (*ChatNotificationSettings) GetType() string {
	return TypeChatNotificationSettings
}

func (*ChatNotificationSettings) GetConstructor() string {
	return ConstructorChatNotificationSettings
}

// Contains information about notification settings for several chats
type ScopeNotificationSettings struct {
	meta
	// Time left before notifications will be unmuted, in seconds
	MuteFor int32 `json:"mute_for"`
	// Identifier of the notification sound to be played; 0 if sound is disabled
	SoundId JsonInt64 `json:"sound_id"`
	// True, if message content must be displayed in notifications
	ShowPreview bool `json:"show_preview"`
	// If true, story notifications are received only for the first 5 chats from topChatCategoryUsers regardless of the value of mute_stories
	UseDefaultMuteStories bool `json:"use_default_mute_stories"`
	// True, if story notifications are disabled
	MuteStories bool `json:"mute_stories"`
	// Identifier of the notification sound to be played for stories; 0 if sound is disabled
	StorySoundId JsonInt64 `json:"story_sound_id"`
	// True, if the sender of stories must be displayed in notifications
	ShowStorySender bool `json:"show_story_sender"`
	// True, if notifications for incoming pinned messages will be created as for an ordinary unread message
	DisablePinnedMessageNotifications bool `json:"disable_pinned_message_notifications"`
	// True, if notifications for messages with mentions will be created as for an ordinary unread message
	DisableMentionNotifications bool `json:"disable_mention_notifications"`
}

func (entity *ScopeNotificationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ScopeNotificationSettings

	return json.Marshal((*stub)(entity))
}

func (*ScopeNotificationSettings) GetType() string {
	return TypeScopeNotificationSettings
}

func (*ScopeNotificationSettings) GetConstructor() string {
	return ConstructorScopeNotificationSettings
}

// Notifications for reactions are disabled
type ReactionNotificationSourceNone struct {
	meta
}

func (entity *ReactionNotificationSourceNone) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReactionNotificationSourceNone

	return json.Marshal((*stub)(entity))
}

func (*ReactionNotificationSourceNone) GetType() string {
	return TypeReactionNotificationSource
}

func (*ReactionNotificationSourceNone) GetConstructor() string {
	return ConstructorReactionNotificationSourceNone
}

func (*ReactionNotificationSourceNone) ReactionNotificationSourceConstructor() string {
	return ConstructorReactionNotificationSourceNone
}

// Notifications for reactions are shown only for reactions from contacts
type ReactionNotificationSourceContacts struct {
	meta
}

func (entity *ReactionNotificationSourceContacts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReactionNotificationSourceContacts

	return json.Marshal((*stub)(entity))
}

func (*ReactionNotificationSourceContacts) GetType() string {
	return TypeReactionNotificationSource
}

func (*ReactionNotificationSourceContacts) GetConstructor() string {
	return ConstructorReactionNotificationSourceContacts
}

func (*ReactionNotificationSourceContacts) ReactionNotificationSourceConstructor() string {
	return ConstructorReactionNotificationSourceContacts
}

// Notifications for reactions are shown for all reactions
type ReactionNotificationSourceAll struct {
	meta
}

func (entity *ReactionNotificationSourceAll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReactionNotificationSourceAll

	return json.Marshal((*stub)(entity))
}

func (*ReactionNotificationSourceAll) GetType() string {
	return TypeReactionNotificationSource
}

func (*ReactionNotificationSourceAll) GetConstructor() string {
	return ConstructorReactionNotificationSourceAll
}

func (*ReactionNotificationSourceAll) ReactionNotificationSourceConstructor() string {
	return ConstructorReactionNotificationSourceAll
}

// Contains information about notification settings for reactions
type ReactionNotificationSettings struct {
	meta
	// Source of message reactions for which notifications are shown
	MessageReactionSource ReactionNotificationSource `json:"message_reaction_source"`
	// Source of story reactions for which notifications are shown
	StoryReactionSource ReactionNotificationSource `json:"story_reaction_source"`
	// Identifier of the notification sound to be played; 0 if sound is disabled
	SoundId JsonInt64 `json:"sound_id"`
	// True, if reaction sender and emoji must be displayed in notifications
	ShowPreview bool `json:"show_preview"`
}

func (entity *ReactionNotificationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReactionNotificationSettings

	return json.Marshal((*stub)(entity))
}

func (*ReactionNotificationSettings) GetType() string {
	return TypeReactionNotificationSettings
}

func (*ReactionNotificationSettings) GetConstructor() string {
	return ConstructorReactionNotificationSettings
}

func (reactionNotificationSettings *ReactionNotificationSettings) UnmarshalJSON(data []byte) error {
	var tmp struct {
		MessageReactionSource json.RawMessage `json:"message_reaction_source"`
		StoryReactionSource   json.RawMessage `json:"story_reaction_source"`
		SoundId               JsonInt64       `json:"sound_id"`
		ShowPreview           bool            `json:"show_preview"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	reactionNotificationSettings.SoundId = tmp.SoundId
	reactionNotificationSettings.ShowPreview = tmp.ShowPreview

	fieldMessageReactionSource, _ := UnmarshalReactionNotificationSource(tmp.MessageReactionSource)
	reactionNotificationSettings.MessageReactionSource = fieldMessageReactionSource

	fieldStoryReactionSource, _ := UnmarshalReactionNotificationSource(tmp.StoryReactionSource)
	reactionNotificationSettings.StoryReactionSource = fieldStoryReactionSource

	return nil
}

// Contains information about a message draft
type DraftMessage struct {
	meta
	// Information about the message to be replied; must be of the type inputMessageReplyToMessage; may be null if none
	ReplyTo InputMessageReplyTo `json:"reply_to"`
	// Point in time (Unix timestamp) when the draft was created
	Date int32 `json:"date"`
	// Content of the message draft; must be of the type inputMessageText, inputMessageVideoNote, or inputMessageVoiceNote
	InputMessageText InputMessageContent `json:"input_message_text"`
	// Identifier of the effect to apply to the message when it is sent; 0 if none
	EffectId JsonInt64 `json:"effect_id"`
}

func (entity *DraftMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DraftMessage

	return json.Marshal((*stub)(entity))
}

func (*DraftMessage) GetType() string {
	return TypeDraftMessage
}

func (*DraftMessage) GetConstructor() string {
	return ConstructorDraftMessage
}

func (draftMessage *DraftMessage) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ReplyTo          json.RawMessage `json:"reply_to"`
		Date             int32           `json:"date"`
		InputMessageText json.RawMessage `json:"input_message_text"`
		EffectId         JsonInt64       `json:"effect_id"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	draftMessage.Date = tmp.Date
	draftMessage.EffectId = tmp.EffectId

	fieldReplyTo, _ := UnmarshalInputMessageReplyTo(tmp.ReplyTo)
	draftMessage.ReplyTo = fieldReplyTo

	fieldInputMessageText, _ := UnmarshalInputMessageContent(tmp.InputMessageText)
	draftMessage.InputMessageText = fieldInputMessageText

	return nil
}

// An ordinary chat with a user
type ChatTypePrivate struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
}

func (entity *ChatTypePrivate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatTypePrivate

	return json.Marshal((*stub)(entity))
}

func (*ChatTypePrivate) GetType() string {
	return TypeChatType
}

func (*ChatTypePrivate) GetConstructor() string {
	return ConstructorChatTypePrivate
}

func (*ChatTypePrivate) ChatTypeConstructor() string {
	return ConstructorChatTypePrivate
}

// A basic group (a chat with 0-200 other users)
type ChatTypeBasicGroup struct {
	meta
	// Basic group identifier
	BasicGroupId int64 `json:"basic_group_id"`
}

func (entity *ChatTypeBasicGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatTypeBasicGroup

	return json.Marshal((*stub)(entity))
}

func (*ChatTypeBasicGroup) GetType() string {
	return TypeChatType
}

func (*ChatTypeBasicGroup) GetConstructor() string {
	return ConstructorChatTypeBasicGroup
}

func (*ChatTypeBasicGroup) ChatTypeConstructor() string {
	return ConstructorChatTypeBasicGroup
}

// A supergroup or channel (with unlimited members)
type ChatTypeSupergroup struct {
	meta
	// Supergroup or channel identifier
	SupergroupId int64 `json:"supergroup_id"`
	// True, if the supergroup is a channel
	IsChannel bool `json:"is_channel"`
}

func (entity *ChatTypeSupergroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatTypeSupergroup

	return json.Marshal((*stub)(entity))
}

func (*ChatTypeSupergroup) GetType() string {
	return TypeChatType
}

func (*ChatTypeSupergroup) GetConstructor() string {
	return ConstructorChatTypeSupergroup
}

func (*ChatTypeSupergroup) ChatTypeConstructor() string {
	return ConstructorChatTypeSupergroup
}

// A secret chat with a user
type ChatTypeSecret struct {
	meta
	// Secret chat identifier
	SecretChatId int32 `json:"secret_chat_id"`
	// User identifier of the other user in the secret chat
	UserId int64 `json:"user_id"`
}

func (entity *ChatTypeSecret) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatTypeSecret

	return json.Marshal((*stub)(entity))
}

func (*ChatTypeSecret) GetType() string {
	return TypeChatType
}

func (*ChatTypeSecret) GetConstructor() string {
	return ConstructorChatTypeSecret
}

func (*ChatTypeSecret) ChatTypeConstructor() string {
	return ConstructorChatTypeSecret
}

// Represents an icon for a chat folder
type ChatFolderIcon struct {
	meta
	// The chosen icon name for short folder representation; one of "All", "Unread", "Unmuted", "Bots", "Channels", "Groups", "Private", "Custom", "Setup", "Cat", "Crown", "Favorite", "Flower", "Game", "Home", "Love", "Mask", "Party", "Sport", "Study", "Trade", "Travel", "Work", "Airplane", "Book", "Light", "Like", "Money", "Note", "Palette"
	Name string `json:"name"`
}

func (entity *ChatFolderIcon) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatFolderIcon

	return json.Marshal((*stub)(entity))
}

func (*ChatFolderIcon) GetType() string {
	return TypeChatFolderIcon
}

func (*ChatFolderIcon) GetConstructor() string {
	return ConstructorChatFolderIcon
}

// Represents a folder for user chats
type ChatFolder struct {
	meta
	// The title of the folder; 1-12 characters without line feeds
	Title string `json:"title"`
	// The chosen icon for the chat folder; may be null. If null, use getChatFolderDefaultIconName to get default icon name for the folder
	Icon *ChatFolderIcon `json:"icon"`
	// The identifier of the chosen color for the chat folder icon; from -1 to 6. If -1, then color is disabled. Can't be changed if folder tags are disabled or the current user doesn't have Telegram Premium subscription
	ColorId int32 `json:"color_id"`
	// True, if at least one link has been created for the folder
	IsShareable bool `json:"is_shareable"`
	// The chat identifiers of pinned chats in the folder. There can be up to getOption("chat_folder_chosen_chat_count_max") pinned and always included non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium
	PinnedChatIds []int64 `json:"pinned_chat_ids"`
	// The chat identifiers of always included chats in the folder. There can be up to getOption("chat_folder_chosen_chat_count_max") pinned and always included non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium
	IncludedChatIds []int64 `json:"included_chat_ids"`
	// The chat identifiers of always excluded chats in the folder. There can be up to getOption("chat_folder_chosen_chat_count_max") always excluded non-secret chats and the same number of secret chats, but the limit can be increased with Telegram Premium
	ExcludedChatIds []int64 `json:"excluded_chat_ids"`
	// True, if muted chats need to be excluded
	ExcludeMuted bool `json:"exclude_muted"`
	// True, if read chats need to be excluded
	ExcludeRead bool `json:"exclude_read"`
	// True, if archived chats need to be excluded
	ExcludeArchived bool `json:"exclude_archived"`
	// True, if contacts need to be included
	IncludeContacts bool `json:"include_contacts"`
	// True, if non-contact users need to be included
	IncludeNonContacts bool `json:"include_non_contacts"`
	// True, if bots need to be included
	IncludeBots bool `json:"include_bots"`
	// True, if basic groups and supergroups need to be included
	IncludeGroups bool `json:"include_groups"`
	// True, if channels need to be included
	IncludeChannels bool `json:"include_channels"`
}

func (entity *ChatFolder) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatFolder

	return json.Marshal((*stub)(entity))
}

func (*ChatFolder) GetType() string {
	return TypeChatFolder
}

func (*ChatFolder) GetConstructor() string {
	return ConstructorChatFolder
}

// Contains basic information about a chat folder
type ChatFolderInfo struct {
	meta
	// Unique chat folder identifier
	Id int32 `json:"id"`
	// The title of the folder; 1-12 characters without line feeds
	Title string `json:"title"`
	// The chosen or default icon for the chat folder
	Icon *ChatFolderIcon `json:"icon"`
	// The identifier of the chosen color for the chat folder icon; from -1 to 6. If -1, then color is disabled
	ColorId int32 `json:"color_id"`
	// True, if at least one link has been created for the folder
	IsShareable bool `json:"is_shareable"`
	// True, if the chat folder has invite links created by the current user
	HasMyInviteLinks bool `json:"has_my_invite_links"`
}

func (entity *ChatFolderInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatFolderInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatFolderInfo) GetType() string {
	return TypeChatFolderInfo
}

func (*ChatFolderInfo) GetConstructor() string {
	return ConstructorChatFolderInfo
}

// Contains a chat folder invite link
type ChatFolderInviteLink struct {
	meta
	// The chat folder invite link
	InviteLink string `json:"invite_link"`
	// Name of the link
	Name string `json:"name"`
	// Identifiers of chats, included in the link
	ChatIds []int64 `json:"chat_ids"`
}

func (entity *ChatFolderInviteLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatFolderInviteLink

	return json.Marshal((*stub)(entity))
}

func (*ChatFolderInviteLink) GetType() string {
	return TypeChatFolderInviteLink
}

func (*ChatFolderInviteLink) GetConstructor() string {
	return ConstructorChatFolderInviteLink
}

// Represents a list of chat folder invite links
type ChatFolderInviteLinks struct {
	meta
	// List of the invite links
	InviteLinks []*ChatFolderInviteLink `json:"invite_links"`
}

func (entity *ChatFolderInviteLinks) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatFolderInviteLinks

	return json.Marshal((*stub)(entity))
}

func (*ChatFolderInviteLinks) GetType() string {
	return TypeChatFolderInviteLinks
}

func (*ChatFolderInviteLinks) GetConstructor() string {
	return ConstructorChatFolderInviteLinks
}

// Contains information about an invite link to a chat folder
type ChatFolderInviteLinkInfo struct {
	meta
	// Basic information about the chat folder; chat folder identifier will be 0 if the user didn't have the chat folder yet
	ChatFolderInfo *ChatFolderInfo `json:"chat_folder_info"`
	// Identifiers of the chats from the link, which aren't added to the folder yet
	MissingChatIds []int64 `json:"missing_chat_ids"`
	// Identifiers of the chats from the link, which are added to the folder already
	AddedChatIds []int64 `json:"added_chat_ids"`
}

func (entity *ChatFolderInviteLinkInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatFolderInviteLinkInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatFolderInviteLinkInfo) GetType() string {
	return TypeChatFolderInviteLinkInfo
}

func (*ChatFolderInviteLinkInfo) GetConstructor() string {
	return ConstructorChatFolderInviteLinkInfo
}

// Describes a recommended chat folder
type RecommendedChatFolder struct {
	meta
	// The chat folder
	Folder *ChatFolder `json:"folder"`
	// Chat folder description
	Description string `json:"description"`
}

func (entity *RecommendedChatFolder) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RecommendedChatFolder

	return json.Marshal((*stub)(entity))
}

func (*RecommendedChatFolder) GetType() string {
	return TypeRecommendedChatFolder
}

func (*RecommendedChatFolder) GetConstructor() string {
	return ConstructorRecommendedChatFolder
}

// Contains a list of recommended chat folders
type RecommendedChatFolders struct {
	meta
	// List of recommended chat folders
	ChatFolders []*RecommendedChatFolder `json:"chat_folders"`
}

func (entity *RecommendedChatFolders) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RecommendedChatFolders

	return json.Marshal((*stub)(entity))
}

func (*RecommendedChatFolders) GetType() string {
	return TypeRecommendedChatFolders
}

func (*RecommendedChatFolders) GetConstructor() string {
	return ConstructorRecommendedChatFolders
}

// Contains settings for automatic moving of chats to and from the Archive chat lists
type ArchiveChatListSettings struct {
	meta
	// True, if new chats from non-contacts will be automatically archived and muted. Can be set to true only if the option "can_archive_and_mute_new_chats_from_unknown_users" is true
	ArchiveAndMuteNewChatsFromUnknownUsers bool `json:"archive_and_mute_new_chats_from_unknown_users"`
	// True, if unmuted chats will be kept in the Archive chat list when they get a new message
	KeepUnmutedChatsArchived bool `json:"keep_unmuted_chats_archived"`
	// True, if unmuted chats, that are always included or pinned in a folder, will be kept in the Archive chat list when they get a new message. Ignored if keep_unmuted_chats_archived == true
	KeepChatsFromFoldersArchived bool `json:"keep_chats_from_folders_archived"`
}

func (entity *ArchiveChatListSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ArchiveChatListSettings

	return json.Marshal((*stub)(entity))
}

func (*ArchiveChatListSettings) GetType() string {
	return TypeArchiveChatListSettings
}

func (*ArchiveChatListSettings) GetConstructor() string {
	return ConstructorArchiveChatListSettings
}

// A main list of chats
type ChatListMain struct {
	meta
}

func (entity *ChatListMain) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatListMain

	return json.Marshal((*stub)(entity))
}

func (*ChatListMain) GetType() string {
	return TypeChatList
}

func (*ChatListMain) GetConstructor() string {
	return ConstructorChatListMain
}

func (*ChatListMain) ChatListConstructor() string {
	return ConstructorChatListMain
}

// A list of chats usually located at the top of the main chat list. Unmuted chats are automatically moved from the Archive to the Main chat list when a new message arrives
type ChatListArchive struct {
	meta
}

func (entity *ChatListArchive) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatListArchive

	return json.Marshal((*stub)(entity))
}

func (*ChatListArchive) GetType() string {
	return TypeChatList
}

func (*ChatListArchive) GetConstructor() string {
	return ConstructorChatListArchive
}

func (*ChatListArchive) ChatListConstructor() string {
	return ConstructorChatListArchive
}

// A list of chats added to a chat folder
type ChatListFolder struct {
	meta
	// Chat folder identifier
	ChatFolderId int32 `json:"chat_folder_id"`
}

func (entity *ChatListFolder) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatListFolder

	return json.Marshal((*stub)(entity))
}

func (*ChatListFolder) GetType() string {
	return TypeChatList
}

func (*ChatListFolder) GetConstructor() string {
	return ConstructorChatListFolder
}

func (*ChatListFolder) ChatListConstructor() string {
	return ConstructorChatListFolder
}

// Contains a list of chat lists
type ChatLists struct {
	meta
	// List of chat lists
	ChatLists []ChatList `json:"chat_lists"`
}

func (entity *ChatLists) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatLists

	return json.Marshal((*stub)(entity))
}

func (*ChatLists) GetType() string {
	return TypeChatLists
}

func (*ChatLists) GetConstructor() string {
	return ConstructorChatLists
}

func (chatLists *ChatLists) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatLists []json.RawMessage `json:"chat_lists"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldChatLists, _ := UnmarshalListOfChatList(tmp.ChatLists)
	chatLists.ChatLists = fieldChatLists

	return nil
}

// The chat is sponsored by the user's MTProxy server
type ChatSourceMtprotoProxy struct {
	meta
}

func (entity *ChatSourceMtprotoProxy) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatSourceMtprotoProxy

	return json.Marshal((*stub)(entity))
}

func (*ChatSourceMtprotoProxy) GetType() string {
	return TypeChatSource
}

func (*ChatSourceMtprotoProxy) GetConstructor() string {
	return ConstructorChatSourceMtprotoProxy
}

func (*ChatSourceMtprotoProxy) ChatSourceConstructor() string {
	return ConstructorChatSourceMtprotoProxy
}

// The chat contains a public service announcement
type ChatSourcePublicServiceAnnouncement struct {
	meta
	// The type of the announcement
	Type string `json:"type"`
	// The text of the announcement
	Text string `json:"text"`
}

func (entity *ChatSourcePublicServiceAnnouncement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatSourcePublicServiceAnnouncement

	return json.Marshal((*stub)(entity))
}

func (*ChatSourcePublicServiceAnnouncement) GetType() string {
	return TypeChatSource
}

func (*ChatSourcePublicServiceAnnouncement) GetConstructor() string {
	return ConstructorChatSourcePublicServiceAnnouncement
}

func (*ChatSourcePublicServiceAnnouncement) ChatSourceConstructor() string {
	return ConstructorChatSourcePublicServiceAnnouncement
}

// Describes a position of a chat in a chat list
type ChatPosition struct {
	meta
	// The chat list
	List ChatList `json:"list"`
	// A parameter used to determine order of the chat in the chat list. Chats must be sorted by the pair (order, chat.id) in descending order
	Order JsonInt64 `json:"order"`
	// True, if the chat is pinned in the chat list
	IsPinned bool `json:"is_pinned"`
	// Source of the chat in the chat list; may be null
	Source ChatSource `json:"source"`
}

func (entity *ChatPosition) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatPosition

	return json.Marshal((*stub)(entity))
}

func (*ChatPosition) GetType() string {
	return TypeChatPosition
}

func (*ChatPosition) GetConstructor() string {
	return ConstructorChatPosition
}

func (chatPosition *ChatPosition) UnmarshalJSON(data []byte) error {
	var tmp struct {
		List     json.RawMessage `json:"list"`
		Order    JsonInt64       `json:"order"`
		IsPinned bool            `json:"is_pinned"`
		Source   json.RawMessage `json:"source"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatPosition.Order = tmp.Order
	chatPosition.IsPinned = tmp.IsPinned

	fieldList, _ := UnmarshalChatList(tmp.List)
	chatPosition.List = fieldList

	fieldSource, _ := UnmarshalChatSource(tmp.Source)
	chatPosition.Source = fieldSource

	return nil
}

// All reactions are available in the chat, excluding the paid reaction and custom reactions in channel chats
type ChatAvailableReactionsAll struct {
	meta
	// The maximum allowed number of reactions per message; 1-11
	MaxReactionCount int32 `json:"max_reaction_count"`
}

func (entity *ChatAvailableReactionsAll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatAvailableReactionsAll

	return json.Marshal((*stub)(entity))
}

func (*ChatAvailableReactionsAll) GetType() string {
	return TypeChatAvailableReactions
}

func (*ChatAvailableReactionsAll) GetConstructor() string {
	return ConstructorChatAvailableReactionsAll
}

func (*ChatAvailableReactionsAll) ChatAvailableReactionsConstructor() string {
	return ConstructorChatAvailableReactionsAll
}

// Only specific reactions are available in the chat
type ChatAvailableReactionsSome struct {
	meta
	// The list of reactions
	Reactions []ReactionType `json:"reactions"`
	// The maximum allowed number of reactions per message; 1-11
	MaxReactionCount int32 `json:"max_reaction_count"`
}

func (entity *ChatAvailableReactionsSome) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatAvailableReactionsSome

	return json.Marshal((*stub)(entity))
}

func (*ChatAvailableReactionsSome) GetType() string {
	return TypeChatAvailableReactions
}

func (*ChatAvailableReactionsSome) GetConstructor() string {
	return ConstructorChatAvailableReactionsSome
}

func (*ChatAvailableReactionsSome) ChatAvailableReactionsConstructor() string {
	return ConstructorChatAvailableReactionsSome
}

func (chatAvailableReactionsSome *ChatAvailableReactionsSome) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Reactions        []json.RawMessage `json:"reactions"`
		MaxReactionCount int32             `json:"max_reaction_count"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatAvailableReactionsSome.MaxReactionCount = tmp.MaxReactionCount

	fieldReactions, _ := UnmarshalListOfReactionType(tmp.Reactions)
	chatAvailableReactionsSome.Reactions = fieldReactions

	return nil
}

// Represents a tag used in Saved Messages or a Saved Messages topic
type SavedMessagesTag struct {
	meta
	// The tag
	Tag ReactionType `json:"tag"`
	// Label of the tag; 0-12 characters. Always empty if the tag is returned for a Saved Messages topic
	Label string `json:"label"`
	// Number of times the tag was used; may be 0 if the tag has non-empty label
	Count int32 `json:"count"`
}

func (entity *SavedMessagesTag) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SavedMessagesTag

	return json.Marshal((*stub)(entity))
}

func (*SavedMessagesTag) GetType() string {
	return TypeSavedMessagesTag
}

func (*SavedMessagesTag) GetConstructor() string {
	return ConstructorSavedMessagesTag
}

func (savedMessagesTag *SavedMessagesTag) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Tag   json.RawMessage `json:"tag"`
		Label string          `json:"label"`
		Count int32           `json:"count"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	savedMessagesTag.Label = tmp.Label
	savedMessagesTag.Count = tmp.Count

	fieldTag, _ := UnmarshalReactionType(tmp.Tag)
	savedMessagesTag.Tag = fieldTag

	return nil
}

// Contains a list of tags used in Saved Messages
type SavedMessagesTags struct {
	meta
	// List of tags
	Tags []*SavedMessagesTag `json:"tags"`
}

func (entity *SavedMessagesTags) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SavedMessagesTags

	return json.Marshal((*stub)(entity))
}

func (*SavedMessagesTags) GetType() string {
	return TypeSavedMessagesTags
}

func (*SavedMessagesTags) GetConstructor() string {
	return ConstructorSavedMessagesTags
}

// Contains information about a business bot that manages the chat
type BusinessBotManageBar struct {
	meta
	// User identifier of the bot
	BotUserId int64 `json:"bot_user_id"`
	// URL to be opened to manage the bot
	ManageUrl string `json:"manage_url"`
	// True, if the bot is paused. Use toggleBusinessConnectedBotChatIsPaused to change the value of the field
	IsBotPaused bool `json:"is_bot_paused"`
	// True, if the bot can reply
	CanBotReply bool `json:"can_bot_reply"`
}

func (entity *BusinessBotManageBar) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessBotManageBar

	return json.Marshal((*stub)(entity))
}

func (*BusinessBotManageBar) GetType() string {
	return TypeBusinessBotManageBar
}

func (*BusinessBotManageBar) GetConstructor() string {
	return ConstructorBusinessBotManageBar
}

// Describes a video chat
type VideoChat struct {
	meta
	// Group call identifier of an active video chat; 0 if none. Full information about the video chat can be received through the method getGroupCall
	GroupCallId int32 `json:"group_call_id"`
	// True, if the video chat has participants
	HasParticipants bool `json:"has_participants"`
	// Default group call participant identifier to join the video chat; may be null
	DefaultParticipantId MessageSender `json:"default_participant_id"`
}

func (entity *VideoChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub VideoChat

	return json.Marshal((*stub)(entity))
}

func (*VideoChat) GetType() string {
	return TypeVideoChat
}

func (*VideoChat) GetConstructor() string {
	return ConstructorVideoChat
}

func (videoChat *VideoChat) UnmarshalJSON(data []byte) error {
	var tmp struct {
		GroupCallId          int32           `json:"group_call_id"`
		HasParticipants      bool            `json:"has_participants"`
		DefaultParticipantId json.RawMessage `json:"default_participant_id"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	videoChat.GroupCallId = tmp.GroupCallId
	videoChat.HasParticipants = tmp.HasParticipants

	fieldDefaultParticipantId, _ := UnmarshalMessageSender(tmp.DefaultParticipantId)
	videoChat.DefaultParticipantId = fieldDefaultParticipantId

	return nil
}

// A chat. (Can be a private chat, basic group, supergroup, or secret chat)
type Chat struct {
	meta
	// Chat unique identifier
	Id int64 `json:"id"`
	// Type of the chat
	Type ChatType `json:"type"`
	// Chat title
	Title string `json:"title"`
	// Chat photo; may be null
	Photo *ChatPhotoInfo `json:"photo"`
	// Identifier of the accent color for message sender name, and backgrounds of chat photo, reply header, and link preview
	AccentColorId int32 `json:"accent_color_id"`
	// Identifier of a custom emoji to be shown on the reply header and link preview background for messages sent by the chat; 0 if none
	BackgroundCustomEmojiId JsonInt64 `json:"background_custom_emoji_id"`
	// Identifier of the profile accent color for the chat's profile; -1 if none
	ProfileAccentColorId int32 `json:"profile_accent_color_id"`
	// Identifier of a custom emoji to be shown on the background of the chat's profile; 0 if none
	ProfileBackgroundCustomEmojiId JsonInt64 `json:"profile_background_custom_emoji_id"`
	// Actions that non-administrator chat members are allowed to take in the chat
	Permissions *ChatPermissions `json:"permissions"`
	// Last message in the chat; may be null if none or unknown
	LastMessage *Message `json:"last_message"`
	// Positions of the chat in chat lists
	Positions []*ChatPosition `json:"positions"`
	// Chat lists to which the chat belongs. A chat can have a non-zero position in a chat list even it doesn't belong to the chat list and have no position in a chat list even it belongs to the chat list
	ChatLists []ChatList `json:"chat_lists"`
	// Identifier of a user or chat that is selected to send messages in the chat; may be null if the user can't change message sender
	MessageSenderId MessageSender `json:"message_sender_id"`
	// Block list to which the chat is added; may be null if none
	BlockList BlockList `json:"block_list"`
	// True, if chat content can't be saved locally, forwarded, or copied
	HasProtectedContent bool `json:"has_protected_content"`
	// True, if translation of all messages in the chat must be suggested to the user
	IsTranslatable bool `json:"is_translatable"`
	// True, if the chat is marked as unread
	IsMarkedAsUnread bool `json:"is_marked_as_unread"`
	// True, if the chat is a forum supergroup that must be shown in the "View as topics" mode, or Saved Messages chat that must be shown in the "View as chats"
	ViewAsTopics bool `json:"view_as_topics"`
	// True, if the chat has scheduled messages
	HasScheduledMessages bool `json:"has_scheduled_messages"`
	// True, if the chat messages can be deleted only for the current user while other users will continue to see the messages
	CanBeDeletedOnlyForSelf bool `json:"can_be_deleted_only_for_self"`
	// True, if the chat messages can be deleted for all users
	CanBeDeletedForAllUsers bool `json:"can_be_deleted_for_all_users"`
	// True, if the chat can be reported to Telegram moderators through reportChat or reportChatPhoto
	CanBeReported bool `json:"can_be_reported"`
	// Default value of the disable_notification parameter, used when a message is sent to the chat
	DefaultDisableNotification bool `json:"default_disable_notification"`
	// Number of unread messages in the chat
	UnreadCount int32 `json:"unread_count"`
	// Identifier of the last read incoming message
	LastReadInboxMessageId int64 `json:"last_read_inbox_message_id"`
	// Identifier of the last read outgoing message
	LastReadOutboxMessageId int64 `json:"last_read_outbox_message_id"`
	// Number of unread messages with a mention/reply in the chat
	UnreadMentionCount int32 `json:"unread_mention_count"`
	// Number of messages with unread reactions in the chat
	UnreadReactionCount int32 `json:"unread_reaction_count"`
	// Notification settings for the chat
	NotificationSettings *ChatNotificationSettings `json:"notification_settings"`
	// Types of reaction, available in the chat
	AvailableReactions ChatAvailableReactions `json:"available_reactions"`
	// Current message auto-delete or self-destruct timer setting for the chat, in seconds; 0 if disabled. Self-destruct timer in secret chats starts after the message or its content is viewed. Auto-delete timer in other chats starts from the send date
	MessageAutoDeleteTime int32 `json:"message_auto_delete_time"`
	// Emoji status to be shown along with chat title; may be null
	EmojiStatus *EmojiStatus `json:"emoji_status"`
	// Background set for the chat; may be null if none
	Background *ChatBackground `json:"background"`
	// If non-empty, name of a theme, set for the chat
	ThemeName string `json:"theme_name"`
	// Information about actions which must be possible to do through the chat action bar; may be null if none
	ActionBar ChatActionBar `json:"action_bar"`
	// Information about bar for managing a business bot in the chat; may be null if none
	BusinessBotManageBar *BusinessBotManageBar `json:"business_bot_manage_bar"`
	// Information about video chat of the chat
	VideoChat *VideoChat `json:"video_chat"`
	// Information about pending join requests; may be null if none
	PendingJoinRequests *ChatJoinRequestsInfo `json:"pending_join_requests"`
	// Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat
	ReplyMarkupMessageId int64 `json:"reply_markup_message_id"`
	// A draft of a message in the chat; may be null if none
	DraftMessage *DraftMessage `json:"draft_message"`
	// Application-specific data associated with the chat. (For example, the chat scroll position or local chat notification settings can be stored here.) Persistent if the message database is used
	ClientData string `json:"client_data"`
}

func (entity *Chat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Chat

	return json.Marshal((*stub)(entity))
}

func (*Chat) GetType() string {
	return TypeChat
}

func (*Chat) GetConstructor() string {
	return ConstructorChat
}

func (chat *Chat) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                             int64                     `json:"id"`
		Type                           json.RawMessage           `json:"type"`
		Title                          string                    `json:"title"`
		Photo                          *ChatPhotoInfo            `json:"photo"`
		AccentColorId                  int32                     `json:"accent_color_id"`
		BackgroundCustomEmojiId        JsonInt64                 `json:"background_custom_emoji_id"`
		ProfileAccentColorId           int32                     `json:"profile_accent_color_id"`
		ProfileBackgroundCustomEmojiId JsonInt64                 `json:"profile_background_custom_emoji_id"`
		Permissions                    *ChatPermissions          `json:"permissions"`
		LastMessage                    *Message                  `json:"last_message"`
		Positions                      []*ChatPosition           `json:"positions"`
		ChatLists                      []json.RawMessage         `json:"chat_lists"`
		MessageSenderId                json.RawMessage           `json:"message_sender_id"`
		BlockList                      json.RawMessage           `json:"block_list"`
		HasProtectedContent            bool                      `json:"has_protected_content"`
		IsTranslatable                 bool                      `json:"is_translatable"`
		IsMarkedAsUnread               bool                      `json:"is_marked_as_unread"`
		ViewAsTopics                   bool                      `json:"view_as_topics"`
		HasScheduledMessages           bool                      `json:"has_scheduled_messages"`
		CanBeDeletedOnlyForSelf        bool                      `json:"can_be_deleted_only_for_self"`
		CanBeDeletedForAllUsers        bool                      `json:"can_be_deleted_for_all_users"`
		CanBeReported                  bool                      `json:"can_be_reported"`
		DefaultDisableNotification     bool                      `json:"default_disable_notification"`
		UnreadCount                    int32                     `json:"unread_count"`
		LastReadInboxMessageId         int64                     `json:"last_read_inbox_message_id"`
		LastReadOutboxMessageId        int64                     `json:"last_read_outbox_message_id"`
		UnreadMentionCount             int32                     `json:"unread_mention_count"`
		UnreadReactionCount            int32                     `json:"unread_reaction_count"`
		NotificationSettings           *ChatNotificationSettings `json:"notification_settings"`
		AvailableReactions             json.RawMessage           `json:"available_reactions"`
		MessageAutoDeleteTime          int32                     `json:"message_auto_delete_time"`
		EmojiStatus                    *EmojiStatus              `json:"emoji_status"`
		Background                     *ChatBackground           `json:"background"`
		ThemeName                      string                    `json:"theme_name"`
		ActionBar                      json.RawMessage           `json:"action_bar"`
		BusinessBotManageBar           *BusinessBotManageBar     `json:"business_bot_manage_bar"`
		VideoChat                      *VideoChat                `json:"video_chat"`
		PendingJoinRequests            *ChatJoinRequestsInfo     `json:"pending_join_requests"`
		ReplyMarkupMessageId           int64                     `json:"reply_markup_message_id"`
		DraftMessage                   *DraftMessage             `json:"draft_message"`
		ClientData                     string                    `json:"client_data"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chat.Id = tmp.Id
	chat.Title = tmp.Title
	chat.Photo = tmp.Photo
	chat.AccentColorId = tmp.AccentColorId
	chat.BackgroundCustomEmojiId = tmp.BackgroundCustomEmojiId
	chat.ProfileAccentColorId = tmp.ProfileAccentColorId
	chat.ProfileBackgroundCustomEmojiId = tmp.ProfileBackgroundCustomEmojiId
	chat.Permissions = tmp.Permissions
	chat.LastMessage = tmp.LastMessage
	chat.Positions = tmp.Positions
	chat.HasProtectedContent = tmp.HasProtectedContent
	chat.IsTranslatable = tmp.IsTranslatable
	chat.IsMarkedAsUnread = tmp.IsMarkedAsUnread
	chat.ViewAsTopics = tmp.ViewAsTopics
	chat.HasScheduledMessages = tmp.HasScheduledMessages
	chat.CanBeDeletedOnlyForSelf = tmp.CanBeDeletedOnlyForSelf
	chat.CanBeDeletedForAllUsers = tmp.CanBeDeletedForAllUsers
	chat.CanBeReported = tmp.CanBeReported
	chat.DefaultDisableNotification = tmp.DefaultDisableNotification
	chat.UnreadCount = tmp.UnreadCount
	chat.LastReadInboxMessageId = tmp.LastReadInboxMessageId
	chat.LastReadOutboxMessageId = tmp.LastReadOutboxMessageId
	chat.UnreadMentionCount = tmp.UnreadMentionCount
	chat.UnreadReactionCount = tmp.UnreadReactionCount
	chat.NotificationSettings = tmp.NotificationSettings
	chat.MessageAutoDeleteTime = tmp.MessageAutoDeleteTime
	chat.EmojiStatus = tmp.EmojiStatus
	chat.Background = tmp.Background
	chat.ThemeName = tmp.ThemeName
	chat.BusinessBotManageBar = tmp.BusinessBotManageBar
	chat.VideoChat = tmp.VideoChat
	chat.PendingJoinRequests = tmp.PendingJoinRequests
	chat.ReplyMarkupMessageId = tmp.ReplyMarkupMessageId
	chat.DraftMessage = tmp.DraftMessage
	chat.ClientData = tmp.ClientData

	fieldType, _ := UnmarshalChatType(tmp.Type)
	chat.Type = fieldType

	fieldChatLists, _ := UnmarshalListOfChatList(tmp.ChatLists)
	chat.ChatLists = fieldChatLists

	fieldMessageSenderId, _ := UnmarshalMessageSender(tmp.MessageSenderId)
	chat.MessageSenderId = fieldMessageSenderId

	fieldBlockList, _ := UnmarshalBlockList(tmp.BlockList)
	chat.BlockList = fieldBlockList

	fieldAvailableReactions, _ := UnmarshalChatAvailableReactions(tmp.AvailableReactions)
	chat.AvailableReactions = fieldAvailableReactions

	fieldActionBar, _ := UnmarshalChatActionBar(tmp.ActionBar)
	chat.ActionBar = fieldActionBar

	return nil
}

// Represents a list of chats
type Chats struct {
	meta
	// Approximate total number of chats found
	TotalCount int32 `json:"total_count"`
	// List of chat identifiers
	ChatIds []int64 `json:"chat_ids"`
}

func (entity *Chats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Chats

	return json.Marshal((*stub)(entity))
}

func (*Chats) GetType() string {
	return TypeChats
}

func (*Chats) GetConstructor() string {
	return ConstructorChats
}

// Contains information about a user that has failed to be added to a chat
type FailedToAddMember struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
	// True, if subscription to Telegram Premium would have allowed to add the user to the chat
	PremiumWouldAllowInvite bool `json:"premium_would_allow_invite"`
	// True, if subscription to Telegram Premium is required to send the user chat invite link
	PremiumRequiredToSendMessages bool `json:"premium_required_to_send_messages"`
}

func (entity *FailedToAddMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FailedToAddMember

	return json.Marshal((*stub)(entity))
}

func (*FailedToAddMember) GetType() string {
	return TypeFailedToAddMember
}

func (*FailedToAddMember) GetConstructor() string {
	return ConstructorFailedToAddMember
}

// Represents a list of users that has failed to be added to a chat
type FailedToAddMembers struct {
	meta
	// Information about users that weren't added to the chat
	FailedToAddMembers []*FailedToAddMember `json:"failed_to_add_members"`
}

func (entity *FailedToAddMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FailedToAddMembers

	return json.Marshal((*stub)(entity))
}

func (*FailedToAddMembers) GetType() string {
	return TypeFailedToAddMembers
}

func (*FailedToAddMembers) GetConstructor() string {
	return ConstructorFailedToAddMembers
}

// Contains information about a newly created basic group chat
type CreatedBasicGroupChat struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Information about failed to add members
	FailedToAddMembers *FailedToAddMembers `json:"failed_to_add_members"`
}

func (entity *CreatedBasicGroupChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CreatedBasicGroupChat

	return json.Marshal((*stub)(entity))
}

func (*CreatedBasicGroupChat) GetType() string {
	return TypeCreatedBasicGroupChat
}

func (*CreatedBasicGroupChat) GetConstructor() string {
	return ConstructorCreatedBasicGroupChat
}

// The chat is public, because it has an active username
type PublicChatTypeHasUsername struct {
	meta
}

func (entity *PublicChatTypeHasUsername) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PublicChatTypeHasUsername

	return json.Marshal((*stub)(entity))
}

func (*PublicChatTypeHasUsername) GetType() string {
	return TypePublicChatType
}

func (*PublicChatTypeHasUsername) GetConstructor() string {
	return ConstructorPublicChatTypeHasUsername
}

func (*PublicChatTypeHasUsername) PublicChatTypeConstructor() string {
	return ConstructorPublicChatTypeHasUsername
}

// The chat is public, because it is a location-based supergroup
type PublicChatTypeIsLocationBased struct {
	meta
}

func (entity *PublicChatTypeIsLocationBased) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PublicChatTypeIsLocationBased

	return json.Marshal((*stub)(entity))
}

func (*PublicChatTypeIsLocationBased) GetType() string {
	return TypePublicChatType
}

func (*PublicChatTypeIsLocationBased) GetConstructor() string {
	return ConstructorPublicChatTypeIsLocationBased
}

func (*PublicChatTypeIsLocationBased) PublicChatTypeConstructor() string {
	return ConstructorPublicChatTypeIsLocationBased
}

// The chat can be reported as spam using the method reportChat with an empty option_id and message_ids. If the chat is a private chat with a user with an emoji status, then a notice about emoji status usage must be shown
type ChatActionBarReportSpam struct {
	meta
	// If true, the chat was automatically archived and can be moved back to the main chat list using addChatToList simultaneously with setting chat notification settings to default using setChatNotificationSettings
	CanUnarchive bool `json:"can_unarchive"`
}

func (entity *ChatActionBarReportSpam) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionBarReportSpam

	return json.Marshal((*stub)(entity))
}

func (*ChatActionBarReportSpam) GetType() string {
	return TypeChatActionBar
}

func (*ChatActionBarReportSpam) GetConstructor() string {
	return ConstructorChatActionBarReportSpam
}

func (*ChatActionBarReportSpam) ChatActionBarConstructor() string {
	return ConstructorChatActionBarReportSpam
}

// The chat is a recently created group chat to which new members can be invited
type ChatActionBarInviteMembers struct {
	meta
}

func (entity *ChatActionBarInviteMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionBarInviteMembers

	return json.Marshal((*stub)(entity))
}

func (*ChatActionBarInviteMembers) GetType() string {
	return TypeChatActionBar
}

func (*ChatActionBarInviteMembers) GetConstructor() string {
	return ConstructorChatActionBarInviteMembers
}

func (*ChatActionBarInviteMembers) ChatActionBarConstructor() string {
	return ConstructorChatActionBarInviteMembers
}

// The chat is a private or secret chat, which can be reported using the method reportChat, or the other user can be blocked using the method setMessageSenderBlockList, or the other user can be added to the contact list using the method addContact. If the chat is a private chat with a user with an emoji status, then a notice about emoji status usage must be shown
type ChatActionBarReportAddBlock struct {
	meta
	// If true, the chat was automatically archived and can be moved back to the main chat list using addChatToList simultaneously with setting chat notification settings to default using setChatNotificationSettings
	CanUnarchive bool `json:"can_unarchive"`
}

func (entity *ChatActionBarReportAddBlock) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionBarReportAddBlock

	return json.Marshal((*stub)(entity))
}

func (*ChatActionBarReportAddBlock) GetType() string {
	return TypeChatActionBar
}

func (*ChatActionBarReportAddBlock) GetConstructor() string {
	return ConstructorChatActionBarReportAddBlock
}

func (*ChatActionBarReportAddBlock) ChatActionBarConstructor() string {
	return ConstructorChatActionBarReportAddBlock
}

// The chat is a private or secret chat and the other user can be added to the contact list using the method addContact
type ChatActionBarAddContact struct {
	meta
}

func (entity *ChatActionBarAddContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionBarAddContact

	return json.Marshal((*stub)(entity))
}

func (*ChatActionBarAddContact) GetType() string {
	return TypeChatActionBar
}

func (*ChatActionBarAddContact) GetConstructor() string {
	return ConstructorChatActionBarAddContact
}

func (*ChatActionBarAddContact) ChatActionBarConstructor() string {
	return ConstructorChatActionBarAddContact
}

// The chat is a private or secret chat with a mutual contact and the user's phone number can be shared with the other user using the method sharePhoneNumber
type ChatActionBarSharePhoneNumber struct {
	meta
}

func (entity *ChatActionBarSharePhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionBarSharePhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*ChatActionBarSharePhoneNumber) GetType() string {
	return TypeChatActionBar
}

func (*ChatActionBarSharePhoneNumber) GetConstructor() string {
	return ConstructorChatActionBarSharePhoneNumber
}

func (*ChatActionBarSharePhoneNumber) ChatActionBarConstructor() string {
	return ConstructorChatActionBarSharePhoneNumber
}

// The chat is a private chat with an administrator of a chat to which the user sent join request
type ChatActionBarJoinRequest struct {
	meta
	// Title of the chat to which the join request was sent
	Title string `json:"title"`
	// True, if the join request was sent to a channel chat
	IsChannel bool `json:"is_channel"`
	// Point in time (Unix timestamp) when the join request was sent
	RequestDate int32 `json:"request_date"`
}

func (entity *ChatActionBarJoinRequest) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionBarJoinRequest

	return json.Marshal((*stub)(entity))
}

func (*ChatActionBarJoinRequest) GetType() string {
	return TypeChatActionBar
}

func (*ChatActionBarJoinRequest) GetConstructor() string {
	return ConstructorChatActionBarJoinRequest
}

func (*ChatActionBarJoinRequest) ChatActionBarConstructor() string {
	return ConstructorChatActionBarJoinRequest
}

// A simple button, with text that must be sent when the button is pressed
type KeyboardButtonTypeText struct {
	meta
}

func (entity *KeyboardButtonTypeText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub KeyboardButtonTypeText

	return json.Marshal((*stub)(entity))
}

func (*KeyboardButtonTypeText) GetType() string {
	return TypeKeyboardButtonType
}

func (*KeyboardButtonTypeText) GetConstructor() string {
	return ConstructorKeyboardButtonTypeText
}

func (*KeyboardButtonTypeText) KeyboardButtonTypeConstructor() string {
	return ConstructorKeyboardButtonTypeText
}

// A button that sends the user's phone number when pressed; available only in private chats
type KeyboardButtonTypeRequestPhoneNumber struct {
	meta
}

func (entity *KeyboardButtonTypeRequestPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub KeyboardButtonTypeRequestPhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*KeyboardButtonTypeRequestPhoneNumber) GetType() string {
	return TypeKeyboardButtonType
}

func (*KeyboardButtonTypeRequestPhoneNumber) GetConstructor() string {
	return ConstructorKeyboardButtonTypeRequestPhoneNumber
}

func (*KeyboardButtonTypeRequestPhoneNumber) KeyboardButtonTypeConstructor() string {
	return ConstructorKeyboardButtonTypeRequestPhoneNumber
}

// A button that sends the user's location when pressed; available only in private chats
type KeyboardButtonTypeRequestLocation struct {
	meta
}

func (entity *KeyboardButtonTypeRequestLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub KeyboardButtonTypeRequestLocation

	return json.Marshal((*stub)(entity))
}

func (*KeyboardButtonTypeRequestLocation) GetType() string {
	return TypeKeyboardButtonType
}

func (*KeyboardButtonTypeRequestLocation) GetConstructor() string {
	return ConstructorKeyboardButtonTypeRequestLocation
}

func (*KeyboardButtonTypeRequestLocation) KeyboardButtonTypeConstructor() string {
	return ConstructorKeyboardButtonTypeRequestLocation
}

// A button that allows the user to create and send a poll when pressed; available only in private chats
type KeyboardButtonTypeRequestPoll struct {
	meta
	// If true, only regular polls must be allowed to create
	ForceRegular bool `json:"force_regular"`
	// If true, only polls in quiz mode must be allowed to create
	ForceQuiz bool `json:"force_quiz"`
}

func (entity *KeyboardButtonTypeRequestPoll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub KeyboardButtonTypeRequestPoll

	return json.Marshal((*stub)(entity))
}

func (*KeyboardButtonTypeRequestPoll) GetType() string {
	return TypeKeyboardButtonType
}

func (*KeyboardButtonTypeRequestPoll) GetConstructor() string {
	return ConstructorKeyboardButtonTypeRequestPoll
}

func (*KeyboardButtonTypeRequestPoll) KeyboardButtonTypeConstructor() string {
	return ConstructorKeyboardButtonTypeRequestPoll
}

// A button that requests users to be shared by the current user; available only in private chats. Use the method shareUsersWithBot to complete the request
type KeyboardButtonTypeRequestUsers struct {
	meta
	// Unique button identifier
	Id int32 `json:"id"`
	// True, if the shared users must or must not be bots
	RestrictUserIsBot bool `json:"restrict_user_is_bot"`
	// True, if the shared users must be bots; otherwise, the shared users must not be bots. Ignored if restrict_user_is_bot is false
	UserIsBot bool `json:"user_is_bot"`
	// True, if the shared users must or must not be Telegram Premium users
	RestrictUserIsPremium bool `json:"restrict_user_is_premium"`
	// True, if the shared users must be Telegram Premium users; otherwise, the shared users must not be Telegram Premium users. Ignored if restrict_user_is_premium is false
	UserIsPremium bool `json:"user_is_premium"`
	// The maximum number of users to share
	MaxQuantity int32 `json:"max_quantity"`
	// Pass true to request name of the users; bots only
	RequestName bool `json:"request_name"`
	// Pass true to request username of the users; bots only
	RequestUsername bool `json:"request_username"`
	// Pass true to request photo of the users; bots only
	RequestPhoto bool `json:"request_photo"`
}

func (entity *KeyboardButtonTypeRequestUsers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub KeyboardButtonTypeRequestUsers

	return json.Marshal((*stub)(entity))
}

func (*KeyboardButtonTypeRequestUsers) GetType() string {
	return TypeKeyboardButtonType
}

func (*KeyboardButtonTypeRequestUsers) GetConstructor() string {
	return ConstructorKeyboardButtonTypeRequestUsers
}

func (*KeyboardButtonTypeRequestUsers) KeyboardButtonTypeConstructor() string {
	return ConstructorKeyboardButtonTypeRequestUsers
}

// A button that requests a chat to be shared by the current user; available only in private chats. Use the method shareChatWithBot to complete the request
type KeyboardButtonTypeRequestChat struct {
	meta
	// Unique button identifier
	Id int32 `json:"id"`
	// True, if the chat must be a channel; otherwise, a basic group or a supergroup chat is shared
	ChatIsChannel bool `json:"chat_is_channel"`
	// True, if the chat must or must not be a forum supergroup
	RestrictChatIsForum bool `json:"restrict_chat_is_forum"`
	// True, if the chat must be a forum supergroup; otherwise, the chat must not be a forum supergroup. Ignored if restrict_chat_is_forum is false
	ChatIsForum bool `json:"chat_is_forum"`
	// True, if the chat must or must not have a username
	RestrictChatHasUsername bool `json:"restrict_chat_has_username"`
	// True, if the chat must have a username; otherwise, the chat must not have a username. Ignored if restrict_chat_has_username is false
	ChatHasUsername bool `json:"chat_has_username"`
	// True, if the chat must be created by the current user
	ChatIsCreated bool `json:"chat_is_created"`
	// Expected user administrator rights in the chat; may be null if they aren't restricted
	UserAdministratorRights *ChatAdministratorRights `json:"user_administrator_rights"`
	// Expected bot administrator rights in the chat; may be null if they aren't restricted
	BotAdministratorRights *ChatAdministratorRights `json:"bot_administrator_rights"`
	// True, if the bot must be a member of the chat; for basic group and supergroup chats only
	BotIsMember bool `json:"bot_is_member"`
	// Pass true to request title of the chat; bots only
	RequestTitle bool `json:"request_title"`
	// Pass true to request username of the chat; bots only
	RequestUsername bool `json:"request_username"`
	// Pass true to request photo of the chat; bots only
	RequestPhoto bool `json:"request_photo"`
}

func (entity *KeyboardButtonTypeRequestChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub KeyboardButtonTypeRequestChat

	return json.Marshal((*stub)(entity))
}

func (*KeyboardButtonTypeRequestChat) GetType() string {
	return TypeKeyboardButtonType
}

func (*KeyboardButtonTypeRequestChat) GetConstructor() string {
	return ConstructorKeyboardButtonTypeRequestChat
}

func (*KeyboardButtonTypeRequestChat) KeyboardButtonTypeConstructor() string {
	return ConstructorKeyboardButtonTypeRequestChat
}

// A button that opens a Web App by calling getWebAppUrl
type KeyboardButtonTypeWebApp struct {
	meta
	// An HTTP URL to pass to getWebAppUrl
	Url string `json:"url"`
}

func (entity *KeyboardButtonTypeWebApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub KeyboardButtonTypeWebApp

	return json.Marshal((*stub)(entity))
}

func (*KeyboardButtonTypeWebApp) GetType() string {
	return TypeKeyboardButtonType
}

func (*KeyboardButtonTypeWebApp) GetConstructor() string {
	return ConstructorKeyboardButtonTypeWebApp
}

func (*KeyboardButtonTypeWebApp) KeyboardButtonTypeConstructor() string {
	return ConstructorKeyboardButtonTypeWebApp
}

// Represents a single button in a bot keyboard
type KeyboardButton struct {
	meta
	// Text of the button
	Text string `json:"text"`
	// Type of the button
	Type KeyboardButtonType `json:"type"`
}

func (entity *KeyboardButton) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub KeyboardButton

	return json.Marshal((*stub)(entity))
}

func (*KeyboardButton) GetType() string {
	return TypeKeyboardButton
}

func (*KeyboardButton) GetConstructor() string {
	return ConstructorKeyboardButton
}

func (keyboardButton *KeyboardButton) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text string          `json:"text"`
		Type json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	keyboardButton.Text = tmp.Text

	fieldType, _ := UnmarshalKeyboardButtonType(tmp.Type)
	keyboardButton.Type = fieldType

	return nil
}

// A button that opens a specified URL
type InlineKeyboardButtonTypeUrl struct {
	meta
	// HTTP or tg:// URL to open. If the link is of the type internalLinkTypeWebApp, then the button must be marked as a Web App button
	Url string `json:"url"`
}

func (entity *InlineKeyboardButtonTypeUrl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButtonTypeUrl

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButtonTypeUrl) GetType() string {
	return TypeInlineKeyboardButtonType
}

func (*InlineKeyboardButtonTypeUrl) GetConstructor() string {
	return ConstructorInlineKeyboardButtonTypeUrl
}

func (*InlineKeyboardButtonTypeUrl) InlineKeyboardButtonTypeConstructor() string {
	return ConstructorInlineKeyboardButtonTypeUrl
}

// A button that opens a specified URL and automatically authorize the current user by calling getLoginUrlInfo
type InlineKeyboardButtonTypeLoginUrl struct {
	meta
	// An HTTP URL to pass to getLoginUrlInfo
	Url string `json:"url"`
	// Unique button identifier
	Id int64 `json:"id"`
	// If non-empty, new text of the button in forwarded messages
	ForwardText string `json:"forward_text"`
}

func (entity *InlineKeyboardButtonTypeLoginUrl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButtonTypeLoginUrl

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButtonTypeLoginUrl) GetType() string {
	return TypeInlineKeyboardButtonType
}

func (*InlineKeyboardButtonTypeLoginUrl) GetConstructor() string {
	return ConstructorInlineKeyboardButtonTypeLoginUrl
}

func (*InlineKeyboardButtonTypeLoginUrl) InlineKeyboardButtonTypeConstructor() string {
	return ConstructorInlineKeyboardButtonTypeLoginUrl
}

// A button that opens a Web App by calling openWebApp
type InlineKeyboardButtonTypeWebApp struct {
	meta
	// An HTTP URL to pass to openWebApp
	Url string `json:"url"`
}

func (entity *InlineKeyboardButtonTypeWebApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButtonTypeWebApp

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButtonTypeWebApp) GetType() string {
	return TypeInlineKeyboardButtonType
}

func (*InlineKeyboardButtonTypeWebApp) GetConstructor() string {
	return ConstructorInlineKeyboardButtonTypeWebApp
}

func (*InlineKeyboardButtonTypeWebApp) InlineKeyboardButtonTypeConstructor() string {
	return ConstructorInlineKeyboardButtonTypeWebApp
}

// A button that sends a callback query to a bot
type InlineKeyboardButtonTypeCallback struct {
	meta
	// Data to be sent to the bot via a callback query
	Data []byte `json:"data"`
}

func (entity *InlineKeyboardButtonTypeCallback) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButtonTypeCallback

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButtonTypeCallback) GetType() string {
	return TypeInlineKeyboardButtonType
}

func (*InlineKeyboardButtonTypeCallback) GetConstructor() string {
	return ConstructorInlineKeyboardButtonTypeCallback
}

func (*InlineKeyboardButtonTypeCallback) InlineKeyboardButtonTypeConstructor() string {
	return ConstructorInlineKeyboardButtonTypeCallback
}

// A button that asks for the 2-step verification password of the current user and then sends a callback query to a bot
type InlineKeyboardButtonTypeCallbackWithPassword struct {
	meta
	// Data to be sent to the bot via a callback query
	Data []byte `json:"data"`
}

func (entity *InlineKeyboardButtonTypeCallbackWithPassword) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButtonTypeCallbackWithPassword

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButtonTypeCallbackWithPassword) GetType() string {
	return TypeInlineKeyboardButtonType
}

func (*InlineKeyboardButtonTypeCallbackWithPassword) GetConstructor() string {
	return ConstructorInlineKeyboardButtonTypeCallbackWithPassword
}

func (*InlineKeyboardButtonTypeCallbackWithPassword) InlineKeyboardButtonTypeConstructor() string {
	return ConstructorInlineKeyboardButtonTypeCallbackWithPassword
}

// A button with a game that sends a callback query to a bot. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageGame
type InlineKeyboardButtonTypeCallbackGame struct {
	meta
}

func (entity *InlineKeyboardButtonTypeCallbackGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButtonTypeCallbackGame

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButtonTypeCallbackGame) GetType() string {
	return TypeInlineKeyboardButtonType
}

func (*InlineKeyboardButtonTypeCallbackGame) GetConstructor() string {
	return ConstructorInlineKeyboardButtonTypeCallbackGame
}

func (*InlineKeyboardButtonTypeCallbackGame) InlineKeyboardButtonTypeConstructor() string {
	return ConstructorInlineKeyboardButtonTypeCallbackGame
}

// A button that forces an inline query to the bot to be inserted in the input field
type InlineKeyboardButtonTypeSwitchInline struct {
	meta
	// Inline query to be sent to the bot
	Query string `json:"query"`
	// Target chat from which to send the inline query
	TargetChat TargetChat `json:"target_chat"`
}

func (entity *InlineKeyboardButtonTypeSwitchInline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButtonTypeSwitchInline

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButtonTypeSwitchInline) GetType() string {
	return TypeInlineKeyboardButtonType
}

func (*InlineKeyboardButtonTypeSwitchInline) GetConstructor() string {
	return ConstructorInlineKeyboardButtonTypeSwitchInline
}

func (*InlineKeyboardButtonTypeSwitchInline) InlineKeyboardButtonTypeConstructor() string {
	return ConstructorInlineKeyboardButtonTypeSwitchInline
}

func (inlineKeyboardButtonTypeSwitchInline *InlineKeyboardButtonTypeSwitchInline) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Query      string          `json:"query"`
		TargetChat json.RawMessage `json:"target_chat"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inlineKeyboardButtonTypeSwitchInline.Query = tmp.Query

	fieldTargetChat, _ := UnmarshalTargetChat(tmp.TargetChat)
	inlineKeyboardButtonTypeSwitchInline.TargetChat = fieldTargetChat

	return nil
}

// A button to buy something. This button must be in the first column and row of the keyboard and can be attached only to a message with content of the type messageInvoice
type InlineKeyboardButtonTypeBuy struct {
	meta
}

func (entity *InlineKeyboardButtonTypeBuy) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButtonTypeBuy

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButtonTypeBuy) GetType() string {
	return TypeInlineKeyboardButtonType
}

func (*InlineKeyboardButtonTypeBuy) GetConstructor() string {
	return ConstructorInlineKeyboardButtonTypeBuy
}

func (*InlineKeyboardButtonTypeBuy) InlineKeyboardButtonTypeConstructor() string {
	return ConstructorInlineKeyboardButtonTypeBuy
}

// A button with a user reference to be handled in the same way as textEntityTypeMentionName entities
type InlineKeyboardButtonTypeUser struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
}

func (entity *InlineKeyboardButtonTypeUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButtonTypeUser

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButtonTypeUser) GetType() string {
	return TypeInlineKeyboardButtonType
}

func (*InlineKeyboardButtonTypeUser) GetConstructor() string {
	return ConstructorInlineKeyboardButtonTypeUser
}

func (*InlineKeyboardButtonTypeUser) InlineKeyboardButtonTypeConstructor() string {
	return ConstructorInlineKeyboardButtonTypeUser
}

// A button that copies specified text to clipboard
type InlineKeyboardButtonTypeCopyText struct {
	meta
	// The text to copy to clipboard
	Text string `json:"text"`
}

func (entity *InlineKeyboardButtonTypeCopyText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButtonTypeCopyText

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButtonTypeCopyText) GetType() string {
	return TypeInlineKeyboardButtonType
}

func (*InlineKeyboardButtonTypeCopyText) GetConstructor() string {
	return ConstructorInlineKeyboardButtonTypeCopyText
}

func (*InlineKeyboardButtonTypeCopyText) InlineKeyboardButtonTypeConstructor() string {
	return ConstructorInlineKeyboardButtonTypeCopyText
}

// Represents a single button in an inline keyboard
type InlineKeyboardButton struct {
	meta
	// Text of the button
	Text string `json:"text"`
	// Type of the button
	Type InlineKeyboardButtonType `json:"type"`
}

func (entity *InlineKeyboardButton) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineKeyboardButton

	return json.Marshal((*stub)(entity))
}

func (*InlineKeyboardButton) GetType() string {
	return TypeInlineKeyboardButton
}

func (*InlineKeyboardButton) GetConstructor() string {
	return ConstructorInlineKeyboardButton
}

func (inlineKeyboardButton *InlineKeyboardButton) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text string          `json:"text"`
		Type json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inlineKeyboardButton.Text = tmp.Text

	fieldType, _ := UnmarshalInlineKeyboardButtonType(tmp.Type)
	inlineKeyboardButton.Type = fieldType

	return nil
}

// Instructs application to remove the keyboard once this message has been received. This kind of keyboard can't be received in an incoming message; instead, updateChatReplyMarkup with message_id == 0 will be sent
type ReplyMarkupRemoveKeyboard struct {
	meta
	// True, if the keyboard is removed only for the mentioned users or the target user of a reply
	IsPersonal bool `json:"is_personal"`
}

func (entity *ReplyMarkupRemoveKeyboard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReplyMarkupRemoveKeyboard

	return json.Marshal((*stub)(entity))
}

func (*ReplyMarkupRemoveKeyboard) GetType() string {
	return TypeReplyMarkup
}

func (*ReplyMarkupRemoveKeyboard) GetConstructor() string {
	return ConstructorReplyMarkupRemoveKeyboard
}

func (*ReplyMarkupRemoveKeyboard) ReplyMarkupConstructor() string {
	return ConstructorReplyMarkupRemoveKeyboard
}

// Instructs application to force a reply to this message
type ReplyMarkupForceReply struct {
	meta
	// True, if a forced reply must automatically be shown to the current user. For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user of a reply
	IsPersonal bool `json:"is_personal"`
	// If non-empty, the placeholder to be shown in the input field when the reply is active; 0-64 characters
	InputFieldPlaceholder string `json:"input_field_placeholder"`
}

func (entity *ReplyMarkupForceReply) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReplyMarkupForceReply

	return json.Marshal((*stub)(entity))
}

func (*ReplyMarkupForceReply) GetType() string {
	return TypeReplyMarkup
}

func (*ReplyMarkupForceReply) GetConstructor() string {
	return ConstructorReplyMarkupForceReply
}

func (*ReplyMarkupForceReply) ReplyMarkupConstructor() string {
	return ConstructorReplyMarkupForceReply
}

// Contains a custom keyboard layout to quickly reply to bots
type ReplyMarkupShowKeyboard struct {
	meta
	// A list of rows of bot keyboard buttons
	Rows [][]*KeyboardButton `json:"rows"`
	// True, if the keyboard is expected to always be shown when the ordinary keyboard is hidden
	IsPersistent bool `json:"is_persistent"`
	// True, if the application needs to resize the keyboard vertically
	ResizeKeyboard bool `json:"resize_keyboard"`
	// True, if the application needs to hide the keyboard after use
	OneTime bool `json:"one_time"`
	// True, if the keyboard must automatically be shown to the current user. For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of a reply
	IsPersonal bool `json:"is_personal"`
	// If non-empty, the placeholder to be shown in the input field when the keyboard is active; 0-64 characters
	InputFieldPlaceholder string `json:"input_field_placeholder"`
}

func (entity *ReplyMarkupShowKeyboard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReplyMarkupShowKeyboard

	return json.Marshal((*stub)(entity))
}

func (*ReplyMarkupShowKeyboard) GetType() string {
	return TypeReplyMarkup
}

func (*ReplyMarkupShowKeyboard) GetConstructor() string {
	return ConstructorReplyMarkupShowKeyboard
}

func (*ReplyMarkupShowKeyboard) ReplyMarkupConstructor() string {
	return ConstructorReplyMarkupShowKeyboard
}

// Contains an inline keyboard layout
type ReplyMarkupInlineKeyboard struct {
	meta
	// A list of rows of inline keyboard buttons
	Rows [][]*InlineKeyboardButton `json:"rows"`
}

func (entity *ReplyMarkupInlineKeyboard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReplyMarkupInlineKeyboard

	return json.Marshal((*stub)(entity))
}

func (*ReplyMarkupInlineKeyboard) GetType() string {
	return TypeReplyMarkup
}

func (*ReplyMarkupInlineKeyboard) GetConstructor() string {
	return ConstructorReplyMarkupInlineKeyboard
}

func (*ReplyMarkupInlineKeyboard) ReplyMarkupConstructor() string {
	return ConstructorReplyMarkupInlineKeyboard
}

// An HTTP URL needs to be open
type LoginUrlInfoOpen struct {
	meta
	// The URL to open
	Url string `json:"url"`
	// True, if there is no need to show an ordinary open URL confirmation
	SkipConfirmation bool `json:"skip_confirmation"`
}

func (entity *LoginUrlInfoOpen) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LoginUrlInfoOpen

	return json.Marshal((*stub)(entity))
}

func (*LoginUrlInfoOpen) GetType() string {
	return TypeLoginUrlInfo
}

func (*LoginUrlInfoOpen) GetConstructor() string {
	return ConstructorLoginUrlInfoOpen
}

func (*LoginUrlInfoOpen) LoginUrlInfoConstructor() string {
	return ConstructorLoginUrlInfoOpen
}

// An authorization confirmation dialog needs to be shown to the user
type LoginUrlInfoRequestConfirmation struct {
	meta
	// An HTTP URL to be opened
	Url string `json:"url"`
	// A domain of the URL
	Domain string `json:"domain"`
	// User identifier of a bot linked with the website
	BotUserId int64 `json:"bot_user_id"`
	// True, if the user must be asked for the permission to the bot to send them messages
	RequestWriteAccess bool `json:"request_write_access"`
}

func (entity *LoginUrlInfoRequestConfirmation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LoginUrlInfoRequestConfirmation

	return json.Marshal((*stub)(entity))
}

func (*LoginUrlInfoRequestConfirmation) GetType() string {
	return TypeLoginUrlInfo
}

func (*LoginUrlInfoRequestConfirmation) GetConstructor() string {
	return ConstructorLoginUrlInfoRequestConfirmation
}

func (*LoginUrlInfoRequestConfirmation) LoginUrlInfoConstructor() string {
	return ConstructorLoginUrlInfoRequestConfirmation
}

// Contains parameters of the application theme
type ThemeParameters struct {
	meta
	// A color of the background in the RGB format
	BackgroundColor int32 `json:"background_color"`
	// A secondary color for the background in the RGB format
	SecondaryBackgroundColor int32 `json:"secondary_background_color"`
	// A color of the header background in the RGB format
	HeaderBackgroundColor int32 `json:"header_background_color"`
	// A color of the bottom bar background in the RGB format
	BottomBarBackgroundColor int32 `json:"bottom_bar_background_color"`
	// A color of the section background in the RGB format
	SectionBackgroundColor int32 `json:"section_background_color"`
	// A color of the section separator in the RGB format
	SectionSeparatorColor int32 `json:"section_separator_color"`
	// A color of text in the RGB format
	TextColor int32 `json:"text_color"`
	// An accent color of the text in the RGB format
	AccentTextColor int32 `json:"accent_text_color"`
	// A color of text on the section headers in the RGB format
	SectionHeaderTextColor int32 `json:"section_header_text_color"`
	// A color of the subtitle text in the RGB format
	SubtitleTextColor int32 `json:"subtitle_text_color"`
	// A color of the text for destructive actions in the RGB format
	DestructiveTextColor int32 `json:"destructive_text_color"`
	// A color of hints in the RGB format
	HintColor int32 `json:"hint_color"`
	// A color of links in the RGB format
	LinkColor int32 `json:"link_color"`
	// A color of the buttons in the RGB format
	ButtonColor int32 `json:"button_color"`
	// A color of text on the buttons in the RGB format
	ButtonTextColor int32 `json:"button_text_color"`
}

func (entity *ThemeParameters) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ThemeParameters

	return json.Marshal((*stub)(entity))
}

func (*ThemeParameters) GetType() string {
	return TypeThemeParameters
}

func (*ThemeParameters) GetConstructor() string {
	return ConstructorThemeParameters
}

// The Web App is opened in the compact mode
type WebAppOpenModeCompact struct {
	meta
}

func (entity *WebAppOpenModeCompact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub WebAppOpenModeCompact

	return json.Marshal((*stub)(entity))
}

func (*WebAppOpenModeCompact) GetType() string {
	return TypeWebAppOpenMode
}

func (*WebAppOpenModeCompact) GetConstructor() string {
	return ConstructorWebAppOpenModeCompact
}

func (*WebAppOpenModeCompact) WebAppOpenModeConstructor() string {
	return ConstructorWebAppOpenModeCompact
}

// The Web App is opened in the full-size mode
type WebAppOpenModeFullSize struct {
	meta
}

func (entity *WebAppOpenModeFullSize) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub WebAppOpenModeFullSize

	return json.Marshal((*stub)(entity))
}

func (*WebAppOpenModeFullSize) GetType() string {
	return TypeWebAppOpenMode
}

func (*WebAppOpenModeFullSize) GetConstructor() string {
	return ConstructorWebAppOpenModeFullSize
}

func (*WebAppOpenModeFullSize) WebAppOpenModeConstructor() string {
	return ConstructorWebAppOpenModeFullSize
}

// The Web App is opened in the full-screen mode
type WebAppOpenModeFullScreen struct {
	meta
}

func (entity *WebAppOpenModeFullScreen) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub WebAppOpenModeFullScreen

	return json.Marshal((*stub)(entity))
}

func (*WebAppOpenModeFullScreen) GetType() string {
	return TypeWebAppOpenMode
}

func (*WebAppOpenModeFullScreen) GetConstructor() string {
	return ConstructorWebAppOpenModeFullScreen
}

func (*WebAppOpenModeFullScreen) WebAppOpenModeConstructor() string {
	return ConstructorWebAppOpenModeFullScreen
}

// Contains information about a Web App found by its short name
type FoundWebApp struct {
	meta
	// The Web App
	WebApp *WebApp `json:"web_app"`
	// True, if the user must be asked for the permission to the bot to send them messages
	RequestWriteAccess bool `json:"request_write_access"`
	// True, if there is no need to show an ordinary open URL confirmation before opening the Web App. The field must be ignored and confirmation must be shown anyway if the Web App link was hidden
	SkipConfirmation bool `json:"skip_confirmation"`
}

func (entity *FoundWebApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FoundWebApp

	return json.Marshal((*stub)(entity))
}

func (*FoundWebApp) GetType() string {
	return TypeFoundWebApp
}

func (*FoundWebApp) GetConstructor() string {
	return ConstructorFoundWebApp
}

// Contains information about a Web App
type WebAppInfo struct {
	meta
	// Unique identifier for the Web App launch
	LaunchId JsonInt64 `json:"launch_id"`
	// A Web App URL to open in a web view
	Url string `json:"url"`
}

func (entity *WebAppInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub WebAppInfo

	return json.Marshal((*stub)(entity))
}

func (*WebAppInfo) GetType() string {
	return TypeWebAppInfo
}

func (*WebAppInfo) GetConstructor() string {
	return ConstructorWebAppInfo
}

// Contains information about the main Web App of a bot
type MainWebApp struct {
	meta
	// URL of the Web App to open
	Url string `json:"url"`
	// The mode in which the Web App must be opened
	Mode WebAppOpenMode `json:"mode"`
}

func (entity *MainWebApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MainWebApp

	return json.Marshal((*stub)(entity))
}

func (*MainWebApp) GetType() string {
	return TypeMainWebApp
}

func (*MainWebApp) GetConstructor() string {
	return ConstructorMainWebApp
}

func (mainWebApp *MainWebApp) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Url  string          `json:"url"`
		Mode json.RawMessage `json:"mode"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	mainWebApp.Url = tmp.Url

	fieldMode, _ := UnmarshalWebAppOpenMode(tmp.Mode)
	mainWebApp.Mode = fieldMode

	return nil
}

// Options to be used when a Web App is opened
type WebAppOpenParameters struct {
	meta
	// Preferred Web App theme; pass null to use the default theme
	Theme *ThemeParameters `json:"theme"`
	// Short name of the current application; 0-64 English letters, digits, and underscores
	ApplicationName string `json:"application_name"`
	// The mode in which the Web App is opened; pass null to open in webAppOpenModeFullSize
	Mode WebAppOpenMode `json:"mode"`
}

func (entity *WebAppOpenParameters) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub WebAppOpenParameters

	return json.Marshal((*stub)(entity))
}

func (*WebAppOpenParameters) GetType() string {
	return TypeWebAppOpenParameters
}

func (*WebAppOpenParameters) GetConstructor() string {
	return ConstructorWebAppOpenParameters
}

func (webAppOpenParameters *WebAppOpenParameters) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Theme           *ThemeParameters `json:"theme"`
		ApplicationName string           `json:"application_name"`
		Mode            json.RawMessage  `json:"mode"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	webAppOpenParameters.Theme = tmp.Theme
	webAppOpenParameters.ApplicationName = tmp.ApplicationName

	fieldMode, _ := UnmarshalWebAppOpenMode(tmp.Mode)
	webAppOpenParameters.Mode = fieldMode

	return nil
}

// Contains information about a message thread
type MessageThreadInfo struct {
	meta
	// Identifier of the chat to which the message thread belongs
	ChatId int64 `json:"chat_id"`
	// Message thread identifier, unique within the chat
	MessageThreadId int64 `json:"message_thread_id"`
	// Information about the message thread; may be null for forum topic threads
	ReplyInfo *MessageReplyInfo `json:"reply_info"`
	// Approximate number of unread messages in the message thread
	UnreadMessageCount int32 `json:"unread_message_count"`
	// The messages from which the thread starts. The messages are returned in reverse chronological order (i.e., in order of decreasing message_id)
	Messages []*Message `json:"messages"`
	// A draft of a message in the message thread; may be null if none
	DraftMessage *DraftMessage `json:"draft_message"`
}

func (entity *MessageThreadInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageThreadInfo

	return json.Marshal((*stub)(entity))
}

func (*MessageThreadInfo) GetType() string {
	return TypeMessageThreadInfo
}

func (*MessageThreadInfo) GetConstructor() string {
	return ConstructorMessageThreadInfo
}

// Topic containing messages sent by the current user of forwarded from an unknown chat
type SavedMessagesTopicTypeMyNotes struct {
	meta
}

func (entity *SavedMessagesTopicTypeMyNotes) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SavedMessagesTopicTypeMyNotes

	return json.Marshal((*stub)(entity))
}

func (*SavedMessagesTopicTypeMyNotes) GetType() string {
	return TypeSavedMessagesTopicType
}

func (*SavedMessagesTopicTypeMyNotes) GetConstructor() string {
	return ConstructorSavedMessagesTopicTypeMyNotes
}

func (*SavedMessagesTopicTypeMyNotes) SavedMessagesTopicTypeConstructor() string {
	return ConstructorSavedMessagesTopicTypeMyNotes
}

// Topic containing messages forwarded from a user with hidden privacy
type SavedMessagesTopicTypeAuthorHidden struct {
	meta
}

func (entity *SavedMessagesTopicTypeAuthorHidden) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SavedMessagesTopicTypeAuthorHidden

	return json.Marshal((*stub)(entity))
}

func (*SavedMessagesTopicTypeAuthorHidden) GetType() string {
	return TypeSavedMessagesTopicType
}

func (*SavedMessagesTopicTypeAuthorHidden) GetConstructor() string {
	return ConstructorSavedMessagesTopicTypeAuthorHidden
}

func (*SavedMessagesTopicTypeAuthorHidden) SavedMessagesTopicTypeConstructor() string {
	return ConstructorSavedMessagesTopicTypeAuthorHidden
}

// Topic containing messages forwarded from a specific chat
type SavedMessagesTopicTypeSavedFromChat struct {
	meta
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
}

func (entity *SavedMessagesTopicTypeSavedFromChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SavedMessagesTopicTypeSavedFromChat

	return json.Marshal((*stub)(entity))
}

func (*SavedMessagesTopicTypeSavedFromChat) GetType() string {
	return TypeSavedMessagesTopicType
}

func (*SavedMessagesTopicTypeSavedFromChat) GetConstructor() string {
	return ConstructorSavedMessagesTopicTypeSavedFromChat
}

func (*SavedMessagesTopicTypeSavedFromChat) SavedMessagesTopicTypeConstructor() string {
	return ConstructorSavedMessagesTopicTypeSavedFromChat
}

// Contains information about a Saved Messages topic
type SavedMessagesTopic struct {
	meta
	// Unique topic identifier
	Id int64 `json:"id"`
	// Type of the topic
	Type SavedMessagesTopicType `json:"type"`
	// True, if the topic is pinned
	IsPinned bool `json:"is_pinned"`
	// A parameter used to determine order of the topic in the topic list. Topics must be sorted by the order in descending order
	Order JsonInt64 `json:"order"`
	// Last message in the topic; may be null if none or unknown
	LastMessage *Message `json:"last_message"`
	// A draft of a message in the topic; may be null if none
	DraftMessage *DraftMessage `json:"draft_message"`
}

func (entity *SavedMessagesTopic) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SavedMessagesTopic

	return json.Marshal((*stub)(entity))
}

func (*SavedMessagesTopic) GetType() string {
	return TypeSavedMessagesTopic
}

func (*SavedMessagesTopic) GetConstructor() string {
	return ConstructorSavedMessagesTopic
}

func (savedMessagesTopic *SavedMessagesTopic) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id           int64           `json:"id"`
		Type         json.RawMessage `json:"type"`
		IsPinned     bool            `json:"is_pinned"`
		Order        JsonInt64       `json:"order"`
		LastMessage  *Message        `json:"last_message"`
		DraftMessage *DraftMessage   `json:"draft_message"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	savedMessagesTopic.Id = tmp.Id
	savedMessagesTopic.IsPinned = tmp.IsPinned
	savedMessagesTopic.Order = tmp.Order
	savedMessagesTopic.LastMessage = tmp.LastMessage
	savedMessagesTopic.DraftMessage = tmp.DraftMessage

	fieldType, _ := UnmarshalSavedMessagesTopicType(tmp.Type)
	savedMessagesTopic.Type = fieldType

	return nil
}

// Describes a forum topic icon
type ForumTopicIcon struct {
	meta
	// Color of the topic icon in RGB format
	Color int32 `json:"color"`
	// Unique identifier of the custom emoji shown on the topic icon; 0 if none
	CustomEmojiId JsonInt64 `json:"custom_emoji_id"`
}

func (entity *ForumTopicIcon) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ForumTopicIcon

	return json.Marshal((*stub)(entity))
}

func (*ForumTopicIcon) GetType() string {
	return TypeForumTopicIcon
}

func (*ForumTopicIcon) GetConstructor() string {
	return ConstructorForumTopicIcon
}

// Contains basic information about a forum topic
type ForumTopicInfo struct {
	meta
	// Message thread identifier of the topic
	MessageThreadId int64 `json:"message_thread_id"`
	// Name of the topic
	Name string `json:"name"`
	// Icon of the topic
	Icon *ForumTopicIcon `json:"icon"`
	// Point in time (Unix timestamp) when the topic was created
	CreationDate int32 `json:"creation_date"`
	// Identifier of the creator of the topic
	CreatorId MessageSender `json:"creator_id"`
	// True, if the topic is the General topic list
	IsGeneral bool `json:"is_general"`
	// True, if the topic was created by the current user
	IsOutgoing bool `json:"is_outgoing"`
	// True, if the topic is closed
	IsClosed bool `json:"is_closed"`
	// True, if the topic is hidden above the topic list and closed; for General topic only
	IsHidden bool `json:"is_hidden"`
}

func (entity *ForumTopicInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ForumTopicInfo

	return json.Marshal((*stub)(entity))
}

func (*ForumTopicInfo) GetType() string {
	return TypeForumTopicInfo
}

func (*ForumTopicInfo) GetConstructor() string {
	return ConstructorForumTopicInfo
}

func (forumTopicInfo *ForumTopicInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		MessageThreadId int64           `json:"message_thread_id"`
		Name            string          `json:"name"`
		Icon            *ForumTopicIcon `json:"icon"`
		CreationDate    int32           `json:"creation_date"`
		CreatorId       json.RawMessage `json:"creator_id"`
		IsGeneral       bool            `json:"is_general"`
		IsOutgoing      bool            `json:"is_outgoing"`
		IsClosed        bool            `json:"is_closed"`
		IsHidden        bool            `json:"is_hidden"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	forumTopicInfo.MessageThreadId = tmp.MessageThreadId
	forumTopicInfo.Name = tmp.Name
	forumTopicInfo.Icon = tmp.Icon
	forumTopicInfo.CreationDate = tmp.CreationDate
	forumTopicInfo.IsGeneral = tmp.IsGeneral
	forumTopicInfo.IsOutgoing = tmp.IsOutgoing
	forumTopicInfo.IsClosed = tmp.IsClosed
	forumTopicInfo.IsHidden = tmp.IsHidden

	fieldCreatorId, _ := UnmarshalMessageSender(tmp.CreatorId)
	forumTopicInfo.CreatorId = fieldCreatorId

	return nil
}

// Describes a forum topic
type ForumTopic struct {
	meta
	// Basic information about the topic
	Info *ForumTopicInfo `json:"info"`
	// Last message in the topic; may be null if unknown
	LastMessage *Message `json:"last_message"`
	// True, if the topic is pinned in the topic list
	IsPinned bool `json:"is_pinned"`
	// Number of unread messages in the topic
	UnreadCount int32 `json:"unread_count"`
	// Identifier of the last read incoming message
	LastReadInboxMessageId int64 `json:"last_read_inbox_message_id"`
	// Identifier of the last read outgoing message
	LastReadOutboxMessageId int64 `json:"last_read_outbox_message_id"`
	// Number of unread messages with a mention/reply in the topic
	UnreadMentionCount int32 `json:"unread_mention_count"`
	// Number of messages with unread reactions in the topic
	UnreadReactionCount int32 `json:"unread_reaction_count"`
	// Notification settings for the topic
	NotificationSettings *ChatNotificationSettings `json:"notification_settings"`
	// A draft of a message in the topic; may be null if none
	DraftMessage *DraftMessage `json:"draft_message"`
}

func (entity *ForumTopic) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ForumTopic

	return json.Marshal((*stub)(entity))
}

func (*ForumTopic) GetType() string {
	return TypeForumTopic
}

func (*ForumTopic) GetConstructor() string {
	return ConstructorForumTopic
}

// Describes a list of forum topics
type ForumTopics struct {
	meta
	// Approximate total number of forum topics found
	TotalCount int32 `json:"total_count"`
	// List of forum topics
	Topics []*ForumTopic `json:"topics"`
	// Offset date for the next getForumTopics request
	NextOffsetDate int32 `json:"next_offset_date"`
	// Offset message identifier for the next getForumTopics request
	NextOffsetMessageId int64 `json:"next_offset_message_id"`
	// Offset message thread identifier for the next getForumTopics request
	NextOffsetMessageThreadId int64 `json:"next_offset_message_thread_id"`
}

func (entity *ForumTopics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ForumTopics

	return json.Marshal((*stub)(entity))
}

func (*ForumTopics) GetType() string {
	return TypeForumTopics
}

func (*ForumTopics) GetConstructor() string {
	return ConstructorForumTopics
}

// Options to be used for generation of a link preview
type LinkPreviewOptions struct {
	meta
	// True, if link preview must be disabled
	IsDisabled bool `json:"is_disabled"`
	// URL to use for link preview. If empty, then the first URL found in the message text will be used
	Url string `json:"url"`
	// True, if shown media preview must be small; ignored in secret chats or if the URL isn't explicitly specified
	ForceSmallMedia bool `json:"force_small_media"`
	// True, if shown media preview must be large; ignored in secret chats or if the URL isn't explicitly specified
	ForceLargeMedia bool `json:"force_large_media"`
	// True, if link preview must be shown above message text; otherwise, the link preview will be shown below the message text; ignored in secret chats
	ShowAboveText bool `json:"show_above_text"`
}

func (entity *LinkPreviewOptions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewOptions

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewOptions) GetType() string {
	return TypeLinkPreviewOptions
}

func (*LinkPreviewOptions) GetConstructor() string {
	return ConstructorLinkPreviewOptions
}

// Contains information about a user shared with a bot
type SharedUser struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
	// First name of the user; for bots only
	FirstName string `json:"first_name"`
	// Last name of the user; for bots only
	LastName string `json:"last_name"`
	// Username of the user; for bots only
	Username string `json:"username"`
	// Profile photo of the user; for bots only; may be null
	Photo *Photo `json:"photo"`
}

func (entity *SharedUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SharedUser

	return json.Marshal((*stub)(entity))
}

func (*SharedUser) GetType() string {
	return TypeSharedUser
}

func (*SharedUser) GetConstructor() string {
	return ConstructorSharedUser
}

// Contains information about a chat shared with a bot
type SharedChat struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Title of the chat; for bots only
	Title string `json:"title"`
	// Username of the chat; for bots only
	Username string `json:"username"`
	// Photo of the chat; for bots only; may be null
	Photo *Photo `json:"photo"`
}

func (entity *SharedChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SharedChat

	return json.Marshal((*stub)(entity))
}

func (*SharedChat) GetType() string {
	return TypeSharedChat
}

func (*SharedChat) GetConstructor() string {
	return ConstructorSharedChat
}

// Describes theme settings
type ThemeSettings struct {
	meta
	// Theme accent color in ARGB format
	AccentColor int32 `json:"accent_color"`
	// The background to be used in chats; may be null
	Background *Background `json:"background"`
	// The fill to be used as a background for outgoing messages
	OutgoingMessageFill BackgroundFill `json:"outgoing_message_fill"`
	// If true, the freeform gradient fill needs to be animated on every sent message
	AnimateOutgoingMessageFill bool `json:"animate_outgoing_message_fill"`
	// Accent color of outgoing messages in ARGB format
	OutgoingMessageAccentColor int32 `json:"outgoing_message_accent_color"`
}

func (entity *ThemeSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ThemeSettings

	return json.Marshal((*stub)(entity))
}

func (*ThemeSettings) GetType() string {
	return TypeThemeSettings
}

func (*ThemeSettings) GetConstructor() string {
	return ConstructorThemeSettings
}

func (themeSettings *ThemeSettings) UnmarshalJSON(data []byte) error {
	var tmp struct {
		AccentColor                int32           `json:"accent_color"`
		Background                 *Background     `json:"background"`
		OutgoingMessageFill        json.RawMessage `json:"outgoing_message_fill"`
		AnimateOutgoingMessageFill bool            `json:"animate_outgoing_message_fill"`
		OutgoingMessageAccentColor int32           `json:"outgoing_message_accent_color"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	themeSettings.AccentColor = tmp.AccentColor
	themeSettings.Background = tmp.Background
	themeSettings.AnimateOutgoingMessageFill = tmp.AnimateOutgoingMessageFill
	themeSettings.OutgoingMessageAccentColor = tmp.OutgoingMessageAccentColor

	fieldOutgoingMessageFill, _ := UnmarshalBackgroundFill(tmp.OutgoingMessageFill)
	themeSettings.OutgoingMessageFill = fieldOutgoingMessageFill

	return nil
}

// A plain text
type RichTextPlain struct {
	meta
	// Text
	Text string `json:"text"`
}

func (entity *RichTextPlain) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextPlain

	return json.Marshal((*stub)(entity))
}

func (*RichTextPlain) GetType() string {
	return TypeRichText
}

func (*RichTextPlain) GetConstructor() string {
	return ConstructorRichTextPlain
}

func (*RichTextPlain) RichTextConstructor() string {
	return ConstructorRichTextPlain
}

// A bold rich text
type RichTextBold struct {
	meta
	// Text
	Text RichText `json:"text"`
}

func (entity *RichTextBold) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextBold

	return json.Marshal((*stub)(entity))
}

func (*RichTextBold) GetType() string {
	return TypeRichText
}

func (*RichTextBold) GetConstructor() string {
	return ConstructorRichTextBold
}

func (*RichTextBold) RichTextConstructor() string {
	return ConstructorRichTextBold
}

func (richTextBold *RichTextBold) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextBold.Text = fieldText

	return nil
}

// An italicized rich text
type RichTextItalic struct {
	meta
	// Text
	Text RichText `json:"text"`
}

func (entity *RichTextItalic) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextItalic

	return json.Marshal((*stub)(entity))
}

func (*RichTextItalic) GetType() string {
	return TypeRichText
}

func (*RichTextItalic) GetConstructor() string {
	return ConstructorRichTextItalic
}

func (*RichTextItalic) RichTextConstructor() string {
	return ConstructorRichTextItalic
}

func (richTextItalic *RichTextItalic) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextItalic.Text = fieldText

	return nil
}

// An underlined rich text
type RichTextUnderline struct {
	meta
	// Text
	Text RichText `json:"text"`
}

func (entity *RichTextUnderline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextUnderline

	return json.Marshal((*stub)(entity))
}

func (*RichTextUnderline) GetType() string {
	return TypeRichText
}

func (*RichTextUnderline) GetConstructor() string {
	return ConstructorRichTextUnderline
}

func (*RichTextUnderline) RichTextConstructor() string {
	return ConstructorRichTextUnderline
}

func (richTextUnderline *RichTextUnderline) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextUnderline.Text = fieldText

	return nil
}

// A strikethrough rich text
type RichTextStrikethrough struct {
	meta
	// Text
	Text RichText `json:"text"`
}

func (entity *RichTextStrikethrough) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextStrikethrough

	return json.Marshal((*stub)(entity))
}

func (*RichTextStrikethrough) GetType() string {
	return TypeRichText
}

func (*RichTextStrikethrough) GetConstructor() string {
	return ConstructorRichTextStrikethrough
}

func (*RichTextStrikethrough) RichTextConstructor() string {
	return ConstructorRichTextStrikethrough
}

func (richTextStrikethrough *RichTextStrikethrough) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextStrikethrough.Text = fieldText

	return nil
}

// A fixed-width rich text
type RichTextFixed struct {
	meta
	// Text
	Text RichText `json:"text"`
}

func (entity *RichTextFixed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextFixed

	return json.Marshal((*stub)(entity))
}

func (*RichTextFixed) GetType() string {
	return TypeRichText
}

func (*RichTextFixed) GetConstructor() string {
	return ConstructorRichTextFixed
}

func (*RichTextFixed) RichTextConstructor() string {
	return ConstructorRichTextFixed
}

func (richTextFixed *RichTextFixed) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextFixed.Text = fieldText

	return nil
}

// A rich text URL link
type RichTextUrl struct {
	meta
	// Text
	Text RichText `json:"text"`
	// URL
	Url string `json:"url"`
	// True, if the URL has cached instant view server-side
	IsCached bool `json:"is_cached"`
}

func (entity *RichTextUrl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextUrl

	return json.Marshal((*stub)(entity))
}

func (*RichTextUrl) GetType() string {
	return TypeRichText
}

func (*RichTextUrl) GetConstructor() string {
	return ConstructorRichTextUrl
}

func (*RichTextUrl) RichTextConstructor() string {
	return ConstructorRichTextUrl
}

func (richTextUrl *RichTextUrl) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text     json.RawMessage `json:"text"`
		Url      string          `json:"url"`
		IsCached bool            `json:"is_cached"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	richTextUrl.Url = tmp.Url
	richTextUrl.IsCached = tmp.IsCached

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextUrl.Text = fieldText

	return nil
}

// A rich text email link
type RichTextEmailAddress struct {
	meta
	// Text
	Text RichText `json:"text"`
	// Email address
	EmailAddress string `json:"email_address"`
}

func (entity *RichTextEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextEmailAddress

	return json.Marshal((*stub)(entity))
}

func (*RichTextEmailAddress) GetType() string {
	return TypeRichText
}

func (*RichTextEmailAddress) GetConstructor() string {
	return ConstructorRichTextEmailAddress
}

func (*RichTextEmailAddress) RichTextConstructor() string {
	return ConstructorRichTextEmailAddress
}

func (richTextEmailAddress *RichTextEmailAddress) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text         json.RawMessage `json:"text"`
		EmailAddress string          `json:"email_address"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	richTextEmailAddress.EmailAddress = tmp.EmailAddress

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextEmailAddress.Text = fieldText

	return nil
}

// A subscript rich text
type RichTextSubscript struct {
	meta
	// Text
	Text RichText `json:"text"`
}

func (entity *RichTextSubscript) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextSubscript

	return json.Marshal((*stub)(entity))
}

func (*RichTextSubscript) GetType() string {
	return TypeRichText
}

func (*RichTextSubscript) GetConstructor() string {
	return ConstructorRichTextSubscript
}

func (*RichTextSubscript) RichTextConstructor() string {
	return ConstructorRichTextSubscript
}

func (richTextSubscript *RichTextSubscript) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextSubscript.Text = fieldText

	return nil
}

// A superscript rich text
type RichTextSuperscript struct {
	meta
	// Text
	Text RichText `json:"text"`
}

func (entity *RichTextSuperscript) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextSuperscript

	return json.Marshal((*stub)(entity))
}

func (*RichTextSuperscript) GetType() string {
	return TypeRichText
}

func (*RichTextSuperscript) GetConstructor() string {
	return ConstructorRichTextSuperscript
}

func (*RichTextSuperscript) RichTextConstructor() string {
	return ConstructorRichTextSuperscript
}

func (richTextSuperscript *RichTextSuperscript) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextSuperscript.Text = fieldText

	return nil
}

// A marked rich text
type RichTextMarked struct {
	meta
	// Text
	Text RichText `json:"text"`
}

func (entity *RichTextMarked) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextMarked

	return json.Marshal((*stub)(entity))
}

func (*RichTextMarked) GetType() string {
	return TypeRichText
}

func (*RichTextMarked) GetConstructor() string {
	return ConstructorRichTextMarked
}

func (*RichTextMarked) RichTextConstructor() string {
	return ConstructorRichTextMarked
}

func (richTextMarked *RichTextMarked) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextMarked.Text = fieldText

	return nil
}

// A rich text phone number
type RichTextPhoneNumber struct {
	meta
	// Text
	Text RichText `json:"text"`
	// Phone number
	PhoneNumber string `json:"phone_number"`
}

func (entity *RichTextPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextPhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*RichTextPhoneNumber) GetType() string {
	return TypeRichText
}

func (*RichTextPhoneNumber) GetConstructor() string {
	return ConstructorRichTextPhoneNumber
}

func (*RichTextPhoneNumber) RichTextConstructor() string {
	return ConstructorRichTextPhoneNumber
}

func (richTextPhoneNumber *RichTextPhoneNumber) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text        json.RawMessage `json:"text"`
		PhoneNumber string          `json:"phone_number"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	richTextPhoneNumber.PhoneNumber = tmp.PhoneNumber

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextPhoneNumber.Text = fieldText

	return nil
}

// A small image inside the text
type RichTextIcon struct {
	meta
	// The image represented as a document. The image can be in GIF, JPEG or PNG format
	Document *Document `json:"document"`
	// Width of a bounding box in which the image must be shown; 0 if unknown
	Width int32 `json:"width"`
	// Height of a bounding box in which the image must be shown; 0 if unknown
	Height int32 `json:"height"`
}

func (entity *RichTextIcon) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextIcon

	return json.Marshal((*stub)(entity))
}

func (*RichTextIcon) GetType() string {
	return TypeRichText
}

func (*RichTextIcon) GetConstructor() string {
	return ConstructorRichTextIcon
}

func (*RichTextIcon) RichTextConstructor() string {
	return ConstructorRichTextIcon
}

// A reference to a richTexts object on the same page
type RichTextReference struct {
	meta
	// The text
	Text RichText `json:"text"`
	// The name of a richTextAnchor object, which is the first element of the target richTexts object
	AnchorName string `json:"anchor_name"`
	// An HTTP URL, opening the reference
	Url string `json:"url"`
}

func (entity *RichTextReference) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextReference

	return json.Marshal((*stub)(entity))
}

func (*RichTextReference) GetType() string {
	return TypeRichText
}

func (*RichTextReference) GetConstructor() string {
	return ConstructorRichTextReference
}

func (*RichTextReference) RichTextConstructor() string {
	return ConstructorRichTextReference
}

func (richTextReference *RichTextReference) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text       json.RawMessage `json:"text"`
		AnchorName string          `json:"anchor_name"`
		Url        string          `json:"url"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	richTextReference.AnchorName = tmp.AnchorName
	richTextReference.Url = tmp.Url

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextReference.Text = fieldText

	return nil
}

// An anchor
type RichTextAnchor struct {
	meta
	// Anchor name
	Name string `json:"name"`
}

func (entity *RichTextAnchor) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextAnchor

	return json.Marshal((*stub)(entity))
}

func (*RichTextAnchor) GetType() string {
	return TypeRichText
}

func (*RichTextAnchor) GetConstructor() string {
	return ConstructorRichTextAnchor
}

func (*RichTextAnchor) RichTextConstructor() string {
	return ConstructorRichTextAnchor
}

// A link to an anchor on the same page
type RichTextAnchorLink struct {
	meta
	// The link text
	Text RichText `json:"text"`
	// The anchor name. If the name is empty, the link must bring back to top
	AnchorName string `json:"anchor_name"`
	// An HTTP URL, opening the anchor
	Url string `json:"url"`
}

func (entity *RichTextAnchorLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTextAnchorLink

	return json.Marshal((*stub)(entity))
}

func (*RichTextAnchorLink) GetType() string {
	return TypeRichText
}

func (*RichTextAnchorLink) GetConstructor() string {
	return ConstructorRichTextAnchorLink
}

func (*RichTextAnchorLink) RichTextConstructor() string {
	return ConstructorRichTextAnchorLink
}

func (richTextAnchorLink *RichTextAnchorLink) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text       json.RawMessage `json:"text"`
		AnchorName string          `json:"anchor_name"`
		Url        string          `json:"url"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	richTextAnchorLink.AnchorName = tmp.AnchorName
	richTextAnchorLink.Url = tmp.Url

	fieldText, _ := UnmarshalRichText(tmp.Text)
	richTextAnchorLink.Text = fieldText

	return nil
}

// A concatenation of rich texts
type RichTexts struct {
	meta
	// Texts
	Texts []RichText `json:"texts"`
}

func (entity *RichTexts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RichTexts

	return json.Marshal((*stub)(entity))
}

func (*RichTexts) GetType() string {
	return TypeRichText
}

func (*RichTexts) GetConstructor() string {
	return ConstructorRichTexts
}

func (*RichTexts) RichTextConstructor() string {
	return ConstructorRichTexts
}

func (richTexts *RichTexts) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Texts []json.RawMessage `json:"texts"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldTexts, _ := UnmarshalListOfRichText(tmp.Texts)
	richTexts.Texts = fieldTexts

	return nil
}

// Contains a caption of another block
type PageBlockCaption struct {
	meta
	// Content of the caption
	Text RichText `json:"text"`
	// Block credit (like HTML tag <cite>)
	Credit RichText `json:"credit"`
}

func (entity *PageBlockCaption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockCaption

	return json.Marshal((*stub)(entity))
}

func (*PageBlockCaption) GetType() string {
	return TypePageBlockCaption
}

func (*PageBlockCaption) GetConstructor() string {
	return ConstructorPageBlockCaption
}

func (pageBlockCaption *PageBlockCaption) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text   json.RawMessage `json:"text"`
		Credit json.RawMessage `json:"credit"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	pageBlockCaption.Text = fieldText

	fieldCredit, _ := UnmarshalRichText(tmp.Credit)
	pageBlockCaption.Credit = fieldCredit

	return nil
}

// Describes an item of a list page block
type PageBlockListItem struct {
	meta
	// Item label
	Label string `json:"label"`
	// Item blocks
	PageBlocks []PageBlock `json:"page_blocks"`
}

func (entity *PageBlockListItem) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockListItem

	return json.Marshal((*stub)(entity))
}

func (*PageBlockListItem) GetType() string {
	return TypePageBlockListItem
}

func (*PageBlockListItem) GetConstructor() string {
	return ConstructorPageBlockListItem
}

func (pageBlockListItem *PageBlockListItem) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Label      string            `json:"label"`
		PageBlocks []json.RawMessage `json:"page_blocks"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pageBlockListItem.Label = tmp.Label

	fieldPageBlocks, _ := UnmarshalListOfPageBlock(tmp.PageBlocks)
	pageBlockListItem.PageBlocks = fieldPageBlocks

	return nil
}

// The content must be left-aligned
type PageBlockHorizontalAlignmentLeft struct {
	meta
}

func (entity *PageBlockHorizontalAlignmentLeft) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockHorizontalAlignmentLeft

	return json.Marshal((*stub)(entity))
}

func (*PageBlockHorizontalAlignmentLeft) GetType() string {
	return TypePageBlockHorizontalAlignment
}

func (*PageBlockHorizontalAlignmentLeft) GetConstructor() string {
	return ConstructorPageBlockHorizontalAlignmentLeft
}

func (*PageBlockHorizontalAlignmentLeft) PageBlockHorizontalAlignmentConstructor() string {
	return ConstructorPageBlockHorizontalAlignmentLeft
}

// The content must be center-aligned
type PageBlockHorizontalAlignmentCenter struct {
	meta
}

func (entity *PageBlockHorizontalAlignmentCenter) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockHorizontalAlignmentCenter

	return json.Marshal((*stub)(entity))
}

func (*PageBlockHorizontalAlignmentCenter) GetType() string {
	return TypePageBlockHorizontalAlignment
}

func (*PageBlockHorizontalAlignmentCenter) GetConstructor() string {
	return ConstructorPageBlockHorizontalAlignmentCenter
}

func (*PageBlockHorizontalAlignmentCenter) PageBlockHorizontalAlignmentConstructor() string {
	return ConstructorPageBlockHorizontalAlignmentCenter
}

// The content must be right-aligned
type PageBlockHorizontalAlignmentRight struct {
	meta
}

func (entity *PageBlockHorizontalAlignmentRight) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockHorizontalAlignmentRight

	return json.Marshal((*stub)(entity))
}

func (*PageBlockHorizontalAlignmentRight) GetType() string {
	return TypePageBlockHorizontalAlignment
}

func (*PageBlockHorizontalAlignmentRight) GetConstructor() string {
	return ConstructorPageBlockHorizontalAlignmentRight
}

func (*PageBlockHorizontalAlignmentRight) PageBlockHorizontalAlignmentConstructor() string {
	return ConstructorPageBlockHorizontalAlignmentRight
}

// The content must be top-aligned
type PageBlockVerticalAlignmentTop struct {
	meta
}

func (entity *PageBlockVerticalAlignmentTop) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockVerticalAlignmentTop

	return json.Marshal((*stub)(entity))
}

func (*PageBlockVerticalAlignmentTop) GetType() string {
	return TypePageBlockVerticalAlignment
}

func (*PageBlockVerticalAlignmentTop) GetConstructor() string {
	return ConstructorPageBlockVerticalAlignmentTop
}

func (*PageBlockVerticalAlignmentTop) PageBlockVerticalAlignmentConstructor() string {
	return ConstructorPageBlockVerticalAlignmentTop
}

// The content must be middle-aligned
type PageBlockVerticalAlignmentMiddle struct {
	meta
}

func (entity *PageBlockVerticalAlignmentMiddle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockVerticalAlignmentMiddle

	return json.Marshal((*stub)(entity))
}

func (*PageBlockVerticalAlignmentMiddle) GetType() string {
	return TypePageBlockVerticalAlignment
}

func (*PageBlockVerticalAlignmentMiddle) GetConstructor() string {
	return ConstructorPageBlockVerticalAlignmentMiddle
}

func (*PageBlockVerticalAlignmentMiddle) PageBlockVerticalAlignmentConstructor() string {
	return ConstructorPageBlockVerticalAlignmentMiddle
}

// The content must be bottom-aligned
type PageBlockVerticalAlignmentBottom struct {
	meta
}

func (entity *PageBlockVerticalAlignmentBottom) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockVerticalAlignmentBottom

	return json.Marshal((*stub)(entity))
}

func (*PageBlockVerticalAlignmentBottom) GetType() string {
	return TypePageBlockVerticalAlignment
}

func (*PageBlockVerticalAlignmentBottom) GetConstructor() string {
	return ConstructorPageBlockVerticalAlignmentBottom
}

func (*PageBlockVerticalAlignmentBottom) PageBlockVerticalAlignmentConstructor() string {
	return ConstructorPageBlockVerticalAlignmentBottom
}

// Represents a cell of a table
type PageBlockTableCell struct {
	meta
	// Cell text; may be null. If the text is null, then the cell must be invisible
	Text RichText `json:"text"`
	// True, if it is a header cell
	IsHeader bool `json:"is_header"`
	// The number of columns the cell spans
	Colspan int32 `json:"colspan"`
	// The number of rows the cell spans
	Rowspan int32 `json:"rowspan"`
	// Horizontal cell content alignment
	Align PageBlockHorizontalAlignment `json:"align"`
	// Vertical cell content alignment
	Valign PageBlockVerticalAlignment `json:"valign"`
}

func (entity *PageBlockTableCell) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockTableCell

	return json.Marshal((*stub)(entity))
}

func (*PageBlockTableCell) GetType() string {
	return TypePageBlockTableCell
}

func (*PageBlockTableCell) GetConstructor() string {
	return ConstructorPageBlockTableCell
}

func (pageBlockTableCell *PageBlockTableCell) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text     json.RawMessage `json:"text"`
		IsHeader bool            `json:"is_header"`
		Colspan  int32           `json:"colspan"`
		Rowspan  int32           `json:"rowspan"`
		Align    json.RawMessage `json:"align"`
		Valign   json.RawMessage `json:"valign"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pageBlockTableCell.IsHeader = tmp.IsHeader
	pageBlockTableCell.Colspan = tmp.Colspan
	pageBlockTableCell.Rowspan = tmp.Rowspan

	fieldText, _ := UnmarshalRichText(tmp.Text)
	pageBlockTableCell.Text = fieldText

	fieldAlign, _ := UnmarshalPageBlockHorizontalAlignment(tmp.Align)
	pageBlockTableCell.Align = fieldAlign

	fieldValign, _ := UnmarshalPageBlockVerticalAlignment(tmp.Valign)
	pageBlockTableCell.Valign = fieldValign

	return nil
}

// Contains information about a related article
type PageBlockRelatedArticle struct {
	meta
	// Related article URL
	Url string `json:"url"`
	// Article title; may be empty
	Title string `json:"title"`
	// Article description; may be empty
	Description string `json:"description"`
	// Article photo; may be null
	Photo *Photo `json:"photo"`
	// Article author; may be empty
	Author string `json:"author"`
	// Point in time (Unix timestamp) when the article was published; 0 if unknown
	PublishDate int32 `json:"publish_date"`
}

func (entity *PageBlockRelatedArticle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockRelatedArticle

	return json.Marshal((*stub)(entity))
}

func (*PageBlockRelatedArticle) GetType() string {
	return TypePageBlockRelatedArticle
}

func (*PageBlockRelatedArticle) GetConstructor() string {
	return ConstructorPageBlockRelatedArticle
}

// The title of a page
type PageBlockTitle struct {
	meta
	// Title
	Title RichText `json:"title"`
}

func (entity *PageBlockTitle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockTitle

	return json.Marshal((*stub)(entity))
}

func (*PageBlockTitle) GetType() string {
	return TypePageBlock
}

func (*PageBlockTitle) GetConstructor() string {
	return ConstructorPageBlockTitle
}

func (*PageBlockTitle) PageBlockConstructor() string {
	return ConstructorPageBlockTitle
}

func (pageBlockTitle *PageBlockTitle) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Title json.RawMessage `json:"title"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldTitle, _ := UnmarshalRichText(tmp.Title)
	pageBlockTitle.Title = fieldTitle

	return nil
}

// The subtitle of a page
type PageBlockSubtitle struct {
	meta
	// Subtitle
	Subtitle RichText `json:"subtitle"`
}

func (entity *PageBlockSubtitle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockSubtitle

	return json.Marshal((*stub)(entity))
}

func (*PageBlockSubtitle) GetType() string {
	return TypePageBlock
}

func (*PageBlockSubtitle) GetConstructor() string {
	return ConstructorPageBlockSubtitle
}

func (*PageBlockSubtitle) PageBlockConstructor() string {
	return ConstructorPageBlockSubtitle
}

func (pageBlockSubtitle *PageBlockSubtitle) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Subtitle json.RawMessage `json:"subtitle"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldSubtitle, _ := UnmarshalRichText(tmp.Subtitle)
	pageBlockSubtitle.Subtitle = fieldSubtitle

	return nil
}

// The author and publishing date of a page
type PageBlockAuthorDate struct {
	meta
	// Author
	Author RichText `json:"author"`
	// Point in time (Unix timestamp) when the article was published; 0 if unknown
	PublishDate int32 `json:"publish_date"`
}

func (entity *PageBlockAuthorDate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockAuthorDate

	return json.Marshal((*stub)(entity))
}

func (*PageBlockAuthorDate) GetType() string {
	return TypePageBlock
}

func (*PageBlockAuthorDate) GetConstructor() string {
	return ConstructorPageBlockAuthorDate
}

func (*PageBlockAuthorDate) PageBlockConstructor() string {
	return ConstructorPageBlockAuthorDate
}

func (pageBlockAuthorDate *PageBlockAuthorDate) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Author      json.RawMessage `json:"author"`
		PublishDate int32           `json:"publish_date"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pageBlockAuthorDate.PublishDate = tmp.PublishDate

	fieldAuthor, _ := UnmarshalRichText(tmp.Author)
	pageBlockAuthorDate.Author = fieldAuthor

	return nil
}

// A header
type PageBlockHeader struct {
	meta
	// Header
	Header RichText `json:"header"`
}

func (entity *PageBlockHeader) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockHeader

	return json.Marshal((*stub)(entity))
}

func (*PageBlockHeader) GetType() string {
	return TypePageBlock
}

func (*PageBlockHeader) GetConstructor() string {
	return ConstructorPageBlockHeader
}

func (*PageBlockHeader) PageBlockConstructor() string {
	return ConstructorPageBlockHeader
}

func (pageBlockHeader *PageBlockHeader) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Header json.RawMessage `json:"header"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldHeader, _ := UnmarshalRichText(tmp.Header)
	pageBlockHeader.Header = fieldHeader

	return nil
}

// A subheader
type PageBlockSubheader struct {
	meta
	// Subheader
	Subheader RichText `json:"subheader"`
}

func (entity *PageBlockSubheader) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockSubheader

	return json.Marshal((*stub)(entity))
}

func (*PageBlockSubheader) GetType() string {
	return TypePageBlock
}

func (*PageBlockSubheader) GetConstructor() string {
	return ConstructorPageBlockSubheader
}

func (*PageBlockSubheader) PageBlockConstructor() string {
	return ConstructorPageBlockSubheader
}

func (pageBlockSubheader *PageBlockSubheader) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Subheader json.RawMessage `json:"subheader"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldSubheader, _ := UnmarshalRichText(tmp.Subheader)
	pageBlockSubheader.Subheader = fieldSubheader

	return nil
}

// A kicker
type PageBlockKicker struct {
	meta
	// Kicker
	Kicker RichText `json:"kicker"`
}

func (entity *PageBlockKicker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockKicker

	return json.Marshal((*stub)(entity))
}

func (*PageBlockKicker) GetType() string {
	return TypePageBlock
}

func (*PageBlockKicker) GetConstructor() string {
	return ConstructorPageBlockKicker
}

func (*PageBlockKicker) PageBlockConstructor() string {
	return ConstructorPageBlockKicker
}

func (pageBlockKicker *PageBlockKicker) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Kicker json.RawMessage `json:"kicker"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldKicker, _ := UnmarshalRichText(tmp.Kicker)
	pageBlockKicker.Kicker = fieldKicker

	return nil
}

// A text paragraph
type PageBlockParagraph struct {
	meta
	// Paragraph text
	Text RichText `json:"text"`
}

func (entity *PageBlockParagraph) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockParagraph

	return json.Marshal((*stub)(entity))
}

func (*PageBlockParagraph) GetType() string {
	return TypePageBlock
}

func (*PageBlockParagraph) GetConstructor() string {
	return ConstructorPageBlockParagraph
}

func (*PageBlockParagraph) PageBlockConstructor() string {
	return ConstructorPageBlockParagraph
}

func (pageBlockParagraph *PageBlockParagraph) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text json.RawMessage `json:"text"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	pageBlockParagraph.Text = fieldText

	return nil
}

// A preformatted text paragraph
type PageBlockPreformatted struct {
	meta
	// Paragraph text
	Text RichText `json:"text"`
	// Programming language for which the text needs to be formatted
	Language string `json:"language"`
}

func (entity *PageBlockPreformatted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockPreformatted

	return json.Marshal((*stub)(entity))
}

func (*PageBlockPreformatted) GetType() string {
	return TypePageBlock
}

func (*PageBlockPreformatted) GetConstructor() string {
	return ConstructorPageBlockPreformatted
}

func (*PageBlockPreformatted) PageBlockConstructor() string {
	return ConstructorPageBlockPreformatted
}

func (pageBlockPreformatted *PageBlockPreformatted) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text     json.RawMessage `json:"text"`
		Language string          `json:"language"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pageBlockPreformatted.Language = tmp.Language

	fieldText, _ := UnmarshalRichText(tmp.Text)
	pageBlockPreformatted.Text = fieldText

	return nil
}

// The footer of a page
type PageBlockFooter struct {
	meta
	// Footer
	Footer RichText `json:"footer"`
}

func (entity *PageBlockFooter) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockFooter

	return json.Marshal((*stub)(entity))
}

func (*PageBlockFooter) GetType() string {
	return TypePageBlock
}

func (*PageBlockFooter) GetConstructor() string {
	return ConstructorPageBlockFooter
}

func (*PageBlockFooter) PageBlockConstructor() string {
	return ConstructorPageBlockFooter
}

func (pageBlockFooter *PageBlockFooter) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Footer json.RawMessage `json:"footer"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldFooter, _ := UnmarshalRichText(tmp.Footer)
	pageBlockFooter.Footer = fieldFooter

	return nil
}

// An empty block separating a page
type PageBlockDivider struct {
	meta
}

func (entity *PageBlockDivider) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockDivider

	return json.Marshal((*stub)(entity))
}

func (*PageBlockDivider) GetType() string {
	return TypePageBlock
}

func (*PageBlockDivider) GetConstructor() string {
	return ConstructorPageBlockDivider
}

func (*PageBlockDivider) PageBlockConstructor() string {
	return ConstructorPageBlockDivider
}

// An invisible anchor on a page, which can be used in a URL to open the page from the specified anchor
type PageBlockAnchor struct {
	meta
	// Name of the anchor
	Name string `json:"name"`
}

func (entity *PageBlockAnchor) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockAnchor

	return json.Marshal((*stub)(entity))
}

func (*PageBlockAnchor) GetType() string {
	return TypePageBlock
}

func (*PageBlockAnchor) GetConstructor() string {
	return ConstructorPageBlockAnchor
}

func (*PageBlockAnchor) PageBlockConstructor() string {
	return ConstructorPageBlockAnchor
}

// A list of data blocks
type PageBlockList struct {
	meta
	// The items of the list
	Items []*PageBlockListItem `json:"items"`
}

func (entity *PageBlockList) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockList

	return json.Marshal((*stub)(entity))
}

func (*PageBlockList) GetType() string {
	return TypePageBlock
}

func (*PageBlockList) GetConstructor() string {
	return ConstructorPageBlockList
}

func (*PageBlockList) PageBlockConstructor() string {
	return ConstructorPageBlockList
}

// A block quote
type PageBlockBlockQuote struct {
	meta
	// Quote text
	Text RichText `json:"text"`
	// Quote credit
	Credit RichText `json:"credit"`
}

func (entity *PageBlockBlockQuote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockBlockQuote

	return json.Marshal((*stub)(entity))
}

func (*PageBlockBlockQuote) GetType() string {
	return TypePageBlock
}

func (*PageBlockBlockQuote) GetConstructor() string {
	return ConstructorPageBlockBlockQuote
}

func (*PageBlockBlockQuote) PageBlockConstructor() string {
	return ConstructorPageBlockBlockQuote
}

func (pageBlockBlockQuote *PageBlockBlockQuote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text   json.RawMessage `json:"text"`
		Credit json.RawMessage `json:"credit"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	pageBlockBlockQuote.Text = fieldText

	fieldCredit, _ := UnmarshalRichText(tmp.Credit)
	pageBlockBlockQuote.Credit = fieldCredit

	return nil
}

// A pull quote
type PageBlockPullQuote struct {
	meta
	// Quote text
	Text RichText `json:"text"`
	// Quote credit
	Credit RichText `json:"credit"`
}

func (entity *PageBlockPullQuote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockPullQuote

	return json.Marshal((*stub)(entity))
}

func (*PageBlockPullQuote) GetType() string {
	return TypePageBlock
}

func (*PageBlockPullQuote) GetConstructor() string {
	return ConstructorPageBlockPullQuote
}

func (*PageBlockPullQuote) PageBlockConstructor() string {
	return ConstructorPageBlockPullQuote
}

func (pageBlockPullQuote *PageBlockPullQuote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text   json.RawMessage `json:"text"`
		Credit json.RawMessage `json:"credit"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldText, _ := UnmarshalRichText(tmp.Text)
	pageBlockPullQuote.Text = fieldText

	fieldCredit, _ := UnmarshalRichText(tmp.Credit)
	pageBlockPullQuote.Credit = fieldCredit

	return nil
}

// An animation
type PageBlockAnimation struct {
	meta
	// Animation file; may be null
	Animation *Animation `json:"animation"`
	// Animation caption
	Caption *PageBlockCaption `json:"caption"`
	// True, if the animation must be played automatically
	NeedAutoplay bool `json:"need_autoplay"`
}

func (entity *PageBlockAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockAnimation

	return json.Marshal((*stub)(entity))
}

func (*PageBlockAnimation) GetType() string {
	return TypePageBlock
}

func (*PageBlockAnimation) GetConstructor() string {
	return ConstructorPageBlockAnimation
}

func (*PageBlockAnimation) PageBlockConstructor() string {
	return ConstructorPageBlockAnimation
}

// An audio file
type PageBlockAudio struct {
	meta
	// Audio file; may be null
	Audio *Audio `json:"audio"`
	// Audio file caption
	Caption *PageBlockCaption `json:"caption"`
}

func (entity *PageBlockAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockAudio

	return json.Marshal((*stub)(entity))
}

func (*PageBlockAudio) GetType() string {
	return TypePageBlock
}

func (*PageBlockAudio) GetConstructor() string {
	return ConstructorPageBlockAudio
}

func (*PageBlockAudio) PageBlockConstructor() string {
	return ConstructorPageBlockAudio
}

// A photo
type PageBlockPhoto struct {
	meta
	// Photo file; may be null
	Photo *Photo `json:"photo"`
	// Photo caption
	Caption *PageBlockCaption `json:"caption"`
	// URL that needs to be opened when the photo is clicked
	Url string `json:"url"`
}

func (entity *PageBlockPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockPhoto

	return json.Marshal((*stub)(entity))
}

func (*PageBlockPhoto) GetType() string {
	return TypePageBlock
}

func (*PageBlockPhoto) GetConstructor() string {
	return ConstructorPageBlockPhoto
}

func (*PageBlockPhoto) PageBlockConstructor() string {
	return ConstructorPageBlockPhoto
}

// A video
type PageBlockVideo struct {
	meta
	// Video file; may be null
	Video *Video `json:"video"`
	// Video caption
	Caption *PageBlockCaption `json:"caption"`
	// True, if the video must be played automatically
	NeedAutoplay bool `json:"need_autoplay"`
	// True, if the video must be looped
	IsLooped bool `json:"is_looped"`
}

func (entity *PageBlockVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockVideo

	return json.Marshal((*stub)(entity))
}

func (*PageBlockVideo) GetType() string {
	return TypePageBlock
}

func (*PageBlockVideo) GetConstructor() string {
	return ConstructorPageBlockVideo
}

func (*PageBlockVideo) PageBlockConstructor() string {
	return ConstructorPageBlockVideo
}

// A voice note
type PageBlockVoiceNote struct {
	meta
	// Voice note; may be null
	VoiceNote *VoiceNote `json:"voice_note"`
	// Voice note caption
	Caption *PageBlockCaption `json:"caption"`
}

func (entity *PageBlockVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*PageBlockVoiceNote) GetType() string {
	return TypePageBlock
}

func (*PageBlockVoiceNote) GetConstructor() string {
	return ConstructorPageBlockVoiceNote
}

func (*PageBlockVoiceNote) PageBlockConstructor() string {
	return ConstructorPageBlockVoiceNote
}

// A page cover
type PageBlockCover struct {
	meta
	// Cover
	Cover PageBlock `json:"cover"`
}

func (entity *PageBlockCover) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockCover

	return json.Marshal((*stub)(entity))
}

func (*PageBlockCover) GetType() string {
	return TypePageBlock
}

func (*PageBlockCover) GetConstructor() string {
	return ConstructorPageBlockCover
}

func (*PageBlockCover) PageBlockConstructor() string {
	return ConstructorPageBlockCover
}

func (pageBlockCover *PageBlockCover) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Cover json.RawMessage `json:"cover"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldCover, _ := UnmarshalPageBlock(tmp.Cover)
	pageBlockCover.Cover = fieldCover

	return nil
}

// An embedded web page
type PageBlockEmbedded struct {
	meta
	// URL of the embedded page, if available
	Url string `json:"url"`
	// HTML-markup of the embedded page
	Html string `json:"html"`
	// Poster photo, if available; may be null
	PosterPhoto *Photo `json:"poster_photo"`
	// Block width; 0 if unknown
	Width int32 `json:"width"`
	// Block height; 0 if unknown
	Height int32 `json:"height"`
	// Block caption
	Caption *PageBlockCaption `json:"caption"`
	// True, if the block must be full width
	IsFullWidth bool `json:"is_full_width"`
	// True, if scrolling needs to be allowed
	AllowScrolling bool `json:"allow_scrolling"`
}

func (entity *PageBlockEmbedded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockEmbedded

	return json.Marshal((*stub)(entity))
}

func (*PageBlockEmbedded) GetType() string {
	return TypePageBlock
}

func (*PageBlockEmbedded) GetConstructor() string {
	return ConstructorPageBlockEmbedded
}

func (*PageBlockEmbedded) PageBlockConstructor() string {
	return ConstructorPageBlockEmbedded
}

// An embedded post
type PageBlockEmbeddedPost struct {
	meta
	// URL of the embedded post
	Url string `json:"url"`
	// Post author
	Author string `json:"author"`
	// Post author photo; may be null
	AuthorPhoto *Photo `json:"author_photo"`
	// Point in time (Unix timestamp) when the post was created; 0 if unknown
	Date int32 `json:"date"`
	// Post content
	PageBlocks []PageBlock `json:"page_blocks"`
	// Post caption
	Caption *PageBlockCaption `json:"caption"`
}

func (entity *PageBlockEmbeddedPost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockEmbeddedPost

	return json.Marshal((*stub)(entity))
}

func (*PageBlockEmbeddedPost) GetType() string {
	return TypePageBlock
}

func (*PageBlockEmbeddedPost) GetConstructor() string {
	return ConstructorPageBlockEmbeddedPost
}

func (*PageBlockEmbeddedPost) PageBlockConstructor() string {
	return ConstructorPageBlockEmbeddedPost
}

func (pageBlockEmbeddedPost *PageBlockEmbeddedPost) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Url         string            `json:"url"`
		Author      string            `json:"author"`
		AuthorPhoto *Photo            `json:"author_photo"`
		Date        int32             `json:"date"`
		PageBlocks  []json.RawMessage `json:"page_blocks"`
		Caption     *PageBlockCaption `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pageBlockEmbeddedPost.Url = tmp.Url
	pageBlockEmbeddedPost.Author = tmp.Author
	pageBlockEmbeddedPost.AuthorPhoto = tmp.AuthorPhoto
	pageBlockEmbeddedPost.Date = tmp.Date
	pageBlockEmbeddedPost.Caption = tmp.Caption

	fieldPageBlocks, _ := UnmarshalListOfPageBlock(tmp.PageBlocks)
	pageBlockEmbeddedPost.PageBlocks = fieldPageBlocks

	return nil
}

// A collage
type PageBlockCollage struct {
	meta
	// Collage item contents
	PageBlocks []PageBlock `json:"page_blocks"`
	// Block caption
	Caption *PageBlockCaption `json:"caption"`
}

func (entity *PageBlockCollage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockCollage

	return json.Marshal((*stub)(entity))
}

func (*PageBlockCollage) GetType() string {
	return TypePageBlock
}

func (*PageBlockCollage) GetConstructor() string {
	return ConstructorPageBlockCollage
}

func (*PageBlockCollage) PageBlockConstructor() string {
	return ConstructorPageBlockCollage
}

func (pageBlockCollage *PageBlockCollage) UnmarshalJSON(data []byte) error {
	var tmp struct {
		PageBlocks []json.RawMessage `json:"page_blocks"`
		Caption    *PageBlockCaption `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pageBlockCollage.Caption = tmp.Caption

	fieldPageBlocks, _ := UnmarshalListOfPageBlock(tmp.PageBlocks)
	pageBlockCollage.PageBlocks = fieldPageBlocks

	return nil
}

// A slideshow
type PageBlockSlideshow struct {
	meta
	// Slideshow item contents
	PageBlocks []PageBlock `json:"page_blocks"`
	// Block caption
	Caption *PageBlockCaption `json:"caption"`
}

func (entity *PageBlockSlideshow) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockSlideshow

	return json.Marshal((*stub)(entity))
}

func (*PageBlockSlideshow) GetType() string {
	return TypePageBlock
}

func (*PageBlockSlideshow) GetConstructor() string {
	return ConstructorPageBlockSlideshow
}

func (*PageBlockSlideshow) PageBlockConstructor() string {
	return ConstructorPageBlockSlideshow
}

func (pageBlockSlideshow *PageBlockSlideshow) UnmarshalJSON(data []byte) error {
	var tmp struct {
		PageBlocks []json.RawMessage `json:"page_blocks"`
		Caption    *PageBlockCaption `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pageBlockSlideshow.Caption = tmp.Caption

	fieldPageBlocks, _ := UnmarshalListOfPageBlock(tmp.PageBlocks)
	pageBlockSlideshow.PageBlocks = fieldPageBlocks

	return nil
}

// A link to a chat
type PageBlockChatLink struct {
	meta
	// Chat title
	Title string `json:"title"`
	// Chat photo; may be null
	Photo *ChatPhotoInfo `json:"photo"`
	// Identifier of the accent color for chat title and background of chat photo
	AccentColorId int32 `json:"accent_color_id"`
	// Chat username by which all other information about the chat can be resolved
	Username string `json:"username"`
}

func (entity *PageBlockChatLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockChatLink

	return json.Marshal((*stub)(entity))
}

func (*PageBlockChatLink) GetType() string {
	return TypePageBlock
}

func (*PageBlockChatLink) GetConstructor() string {
	return ConstructorPageBlockChatLink
}

func (*PageBlockChatLink) PageBlockConstructor() string {
	return ConstructorPageBlockChatLink
}

// A table
type PageBlockTable struct {
	meta
	// Table caption
	Caption RichText `json:"caption"`
	// Table cells
	Cells [][]*PageBlockTableCell `json:"cells"`
	// True, if the table is bordered
	IsBordered bool `json:"is_bordered"`
	// True, if the table is striped
	IsStriped bool `json:"is_striped"`
}

func (entity *PageBlockTable) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockTable

	return json.Marshal((*stub)(entity))
}

func (*PageBlockTable) GetType() string {
	return TypePageBlock
}

func (*PageBlockTable) GetConstructor() string {
	return ConstructorPageBlockTable
}

func (*PageBlockTable) PageBlockConstructor() string {
	return ConstructorPageBlockTable
}

func (pageBlockTable *PageBlockTable) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Caption    json.RawMessage         `json:"caption"`
		Cells      [][]*PageBlockTableCell `json:"cells"`
		IsBordered bool                    `json:"is_bordered"`
		IsStriped  bool                    `json:"is_striped"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pageBlockTable.Cells = tmp.Cells
	pageBlockTable.IsBordered = tmp.IsBordered
	pageBlockTable.IsStriped = tmp.IsStriped

	fieldCaption, _ := UnmarshalRichText(tmp.Caption)
	pageBlockTable.Caption = fieldCaption

	return nil
}

// A collapsible block
type PageBlockDetails struct {
	meta
	// Always visible heading for the block
	Header RichText `json:"header"`
	// Block contents
	PageBlocks []PageBlock `json:"page_blocks"`
	// True, if the block is open by default
	IsOpen bool `json:"is_open"`
}

func (entity *PageBlockDetails) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockDetails

	return json.Marshal((*stub)(entity))
}

func (*PageBlockDetails) GetType() string {
	return TypePageBlock
}

func (*PageBlockDetails) GetConstructor() string {
	return ConstructorPageBlockDetails
}

func (*PageBlockDetails) PageBlockConstructor() string {
	return ConstructorPageBlockDetails
}

func (pageBlockDetails *PageBlockDetails) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Header     json.RawMessage   `json:"header"`
		PageBlocks []json.RawMessage `json:"page_blocks"`
		IsOpen     bool              `json:"is_open"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pageBlockDetails.IsOpen = tmp.IsOpen

	fieldHeader, _ := UnmarshalRichText(tmp.Header)
	pageBlockDetails.Header = fieldHeader

	fieldPageBlocks, _ := UnmarshalListOfPageBlock(tmp.PageBlocks)
	pageBlockDetails.PageBlocks = fieldPageBlocks

	return nil
}

// Related articles
type PageBlockRelatedArticles struct {
	meta
	// Block header
	Header RichText `json:"header"`
	// List of related articles
	Articles []*PageBlockRelatedArticle `json:"articles"`
}

func (entity *PageBlockRelatedArticles) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockRelatedArticles

	return json.Marshal((*stub)(entity))
}

func (*PageBlockRelatedArticles) GetType() string {
	return TypePageBlock
}

func (*PageBlockRelatedArticles) GetConstructor() string {
	return ConstructorPageBlockRelatedArticles
}

func (*PageBlockRelatedArticles) PageBlockConstructor() string {
	return ConstructorPageBlockRelatedArticles
}

func (pageBlockRelatedArticles *PageBlockRelatedArticles) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Header   json.RawMessage            `json:"header"`
		Articles []*PageBlockRelatedArticle `json:"articles"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pageBlockRelatedArticles.Articles = tmp.Articles

	fieldHeader, _ := UnmarshalRichText(tmp.Header)
	pageBlockRelatedArticles.Header = fieldHeader

	return nil
}

// A map
type PageBlockMap struct {
	meta
	// Location of the map center
	Location *Location `json:"location"`
	// Map zoom level
	Zoom int32 `json:"zoom"`
	// Map width
	Width int32 `json:"width"`
	// Map height
	Height int32 `json:"height"`
	// Block caption
	Caption *PageBlockCaption `json:"caption"`
}

func (entity *PageBlockMap) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PageBlockMap

	return json.Marshal((*stub)(entity))
}

func (*PageBlockMap) GetType() string {
	return TypePageBlock
}

func (*PageBlockMap) GetConstructor() string {
	return ConstructorPageBlockMap
}

func (*PageBlockMap) PageBlockConstructor() string {
	return ConstructorPageBlockMap
}

// Describes an instant view page for a web page
type WebPageInstantView struct {
	meta
	// Content of the instant view page
	PageBlocks []PageBlock `json:"page_blocks"`
	// Number of the instant view views; 0 if unknown
	ViewCount int32 `json:"view_count"`
	// Version of the instant view; currently, can be 1 or 2
	Version int32 `json:"version"`
	// True, if the instant view must be shown from right to left
	IsRtl bool `json:"is_rtl"`
	// True, if the instant view contains the full page. A network request might be needed to get the full instant view
	IsFull bool `json:"is_full"`
	// An internal link to be opened to leave feedback about the instant view
	FeedbackLink InternalLinkType `json:"feedback_link"`
}

func (entity *WebPageInstantView) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub WebPageInstantView

	return json.Marshal((*stub)(entity))
}

func (*WebPageInstantView) GetType() string {
	return TypeWebPageInstantView
}

func (*WebPageInstantView) GetConstructor() string {
	return ConstructorWebPageInstantView
}

func (webPageInstantView *WebPageInstantView) UnmarshalJSON(data []byte) error {
	var tmp struct {
		PageBlocks   []json.RawMessage `json:"page_blocks"`
		ViewCount    int32             `json:"view_count"`
		Version      int32             `json:"version"`
		IsRtl        bool              `json:"is_rtl"`
		IsFull       bool              `json:"is_full"`
		FeedbackLink json.RawMessage   `json:"feedback_link"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	webPageInstantView.ViewCount = tmp.ViewCount
	webPageInstantView.Version = tmp.Version
	webPageInstantView.IsRtl = tmp.IsRtl
	webPageInstantView.IsFull = tmp.IsFull

	fieldPageBlocks, _ := UnmarshalListOfPageBlock(tmp.PageBlocks)
	webPageInstantView.PageBlocks = fieldPageBlocks

	fieldFeedbackLink, _ := UnmarshalInternalLinkType(tmp.FeedbackLink)
	webPageInstantView.FeedbackLink = fieldFeedbackLink

	return nil
}

// The media is a photo
type LinkPreviewAlbumMediaPhoto struct {
	meta
	// Photo description
	Photo *Photo `json:"photo"`
}

func (entity *LinkPreviewAlbumMediaPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewAlbumMediaPhoto

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewAlbumMediaPhoto) GetType() string {
	return TypeLinkPreviewAlbumMedia
}

func (*LinkPreviewAlbumMediaPhoto) GetConstructor() string {
	return ConstructorLinkPreviewAlbumMediaPhoto
}

func (*LinkPreviewAlbumMediaPhoto) LinkPreviewAlbumMediaConstructor() string {
	return ConstructorLinkPreviewAlbumMediaPhoto
}

// The media is a video
type LinkPreviewAlbumMediaVideo struct {
	meta
	// Video description
	Video *Video `json:"video"`
}

func (entity *LinkPreviewAlbumMediaVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewAlbumMediaVideo

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewAlbumMediaVideo) GetType() string {
	return TypeLinkPreviewAlbumMedia
}

func (*LinkPreviewAlbumMediaVideo) GetConstructor() string {
	return ConstructorLinkPreviewAlbumMediaVideo
}

func (*LinkPreviewAlbumMediaVideo) LinkPreviewAlbumMediaConstructor() string {
	return ConstructorLinkPreviewAlbumMediaVideo
}

// The link is a link to a media album consisting of photos and videos
type LinkPreviewTypeAlbum struct {
	meta
	// The list of album media
	Media []LinkPreviewAlbumMedia `json:"media"`
	// Album caption
	Caption string `json:"caption"`
}

func (entity *LinkPreviewTypeAlbum) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeAlbum

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeAlbum) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeAlbum) GetConstructor() string {
	return ConstructorLinkPreviewTypeAlbum
}

func (*LinkPreviewTypeAlbum) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeAlbum
}

func (linkPreviewTypeAlbum *LinkPreviewTypeAlbum) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Media   []json.RawMessage `json:"media"`
		Caption string            `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	linkPreviewTypeAlbum.Caption = tmp.Caption

	fieldMedia, _ := UnmarshalListOfLinkPreviewAlbumMedia(tmp.Media)
	linkPreviewTypeAlbum.Media = fieldMedia

	return nil
}

// The link is a link to an animation
type LinkPreviewTypeAnimation struct {
	meta
	// The animation
	Animation *Animation `json:"animation"`
}

func (entity *LinkPreviewTypeAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeAnimation

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeAnimation) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeAnimation) GetConstructor() string {
	return ConstructorLinkPreviewTypeAnimation
}

func (*LinkPreviewTypeAnimation) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeAnimation
}

// The link is a link to an app at App Store or Google Play
type LinkPreviewTypeApp struct {
	meta
	// Photo for the app
	Photo *Photo `json:"photo"`
}

func (entity *LinkPreviewTypeApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeApp

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeApp) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeApp) GetConstructor() string {
	return ConstructorLinkPreviewTypeApp
}

func (*LinkPreviewTypeApp) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeApp
}

// The link is a link to a web site
type LinkPreviewTypeArticle struct {
	meta
	// Article's main photo; may be null
	Photo *Photo `json:"photo"`
}

func (entity *LinkPreviewTypeArticle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeArticle

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeArticle) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeArticle) GetConstructor() string {
	return ConstructorLinkPreviewTypeArticle
}

func (*LinkPreviewTypeArticle) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeArticle
}

// The link is a link to an audio
type LinkPreviewTypeAudio struct {
	meta
	// The audio description
	Audio *Audio `json:"audio"`
}

func (entity *LinkPreviewTypeAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeAudio

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeAudio) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeAudio) GetConstructor() string {
	return ConstructorLinkPreviewTypeAudio
}

func (*LinkPreviewTypeAudio) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeAudio
}

// The link is a link to a background. Link preview title and description are available only for filled backgrounds
type LinkPreviewTypeBackground struct {
	meta
	// Document with the background; may be null for filled backgrounds
	Document *Document `json:"document"`
	// Type of the background; may be null if unknown
	BackgroundType BackgroundType `json:"background_type"`
}

func (entity *LinkPreviewTypeBackground) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeBackground

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeBackground) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeBackground) GetConstructor() string {
	return ConstructorLinkPreviewTypeBackground
}

func (*LinkPreviewTypeBackground) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeBackground
}

func (linkPreviewTypeBackground *LinkPreviewTypeBackground) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Document       *Document       `json:"document"`
		BackgroundType json.RawMessage `json:"background_type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	linkPreviewTypeBackground.Document = tmp.Document

	fieldBackgroundType, _ := UnmarshalBackgroundType(tmp.BackgroundType)
	linkPreviewTypeBackground.BackgroundType = fieldBackgroundType

	return nil
}

// The link is a link to boost a channel chat
type LinkPreviewTypeChannelBoost struct {
	meta
	// Photo of the chat; may be null
	Photo *ChatPhoto `json:"photo"`
}

func (entity *LinkPreviewTypeChannelBoost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeChannelBoost

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeChannelBoost) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeChannelBoost) GetConstructor() string {
	return ConstructorLinkPreviewTypeChannelBoost
}

func (*LinkPreviewTypeChannelBoost) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeChannelBoost
}

// The link is a link to a chat
type LinkPreviewTypeChat struct {
	meta
	// Type of the chat
	Type InviteLinkChatType `json:"type"`
	// Photo of the chat; may be null
	Photo *ChatPhoto `json:"photo"`
	// True, if the link only creates join request
	CreatesJoinRequest bool `json:"creates_join_request"`
}

func (entity *LinkPreviewTypeChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeChat

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeChat) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeChat) GetConstructor() string {
	return ConstructorLinkPreviewTypeChat
}

func (*LinkPreviewTypeChat) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeChat
}

func (linkPreviewTypeChat *LinkPreviewTypeChat) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type               json.RawMessage `json:"type"`
		Photo              *ChatPhoto      `json:"photo"`
		CreatesJoinRequest bool            `json:"creates_join_request"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	linkPreviewTypeChat.Photo = tmp.Photo
	linkPreviewTypeChat.CreatesJoinRequest = tmp.CreatesJoinRequest

	fieldType, _ := UnmarshalInviteLinkChatType(tmp.Type)
	linkPreviewTypeChat.Type = fieldType

	return nil
}

// The link is a link to a general file
type LinkPreviewTypeDocument struct {
	meta
	// The document description
	Document *Document `json:"document"`
}

func (entity *LinkPreviewTypeDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeDocument

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeDocument) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeDocument) GetConstructor() string {
	return ConstructorLinkPreviewTypeDocument
}

func (*LinkPreviewTypeDocument) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeDocument
}

// The link is a link to an animation player
type LinkPreviewTypeEmbeddedAnimationPlayer struct {
	meta
	// URL of the external animation player
	Url string `json:"url"`
	// Thumbnail of the animation; may be null if unknown
	Thumbnail *Photo `json:"thumbnail"`
	// Duration of the animation, in seconds
	Duration int32 `json:"duration"`
	// Expected width of the embedded player
	Width int32 `json:"width"`
	// Expected height of the embedded player
	Height int32 `json:"height"`
}

func (entity *LinkPreviewTypeEmbeddedAnimationPlayer) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeEmbeddedAnimationPlayer

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeEmbeddedAnimationPlayer) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeEmbeddedAnimationPlayer) GetConstructor() string {
	return ConstructorLinkPreviewTypeEmbeddedAnimationPlayer
}

func (*LinkPreviewTypeEmbeddedAnimationPlayer) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeEmbeddedAnimationPlayer
}

// The link is a link to an audio player
type LinkPreviewTypeEmbeddedAudioPlayer struct {
	meta
	// URL of the external audio player
	Url string `json:"url"`
	// Thumbnail of the audio; may be null if unknown
	Thumbnail *Photo `json:"thumbnail"`
	// Duration of the audio, in seconds
	Duration int32 `json:"duration"`
	// Expected width of the embedded player
	Width int32 `json:"width"`
	// Expected height of the embedded player
	Height int32 `json:"height"`
}

func (entity *LinkPreviewTypeEmbeddedAudioPlayer) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeEmbeddedAudioPlayer

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeEmbeddedAudioPlayer) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeEmbeddedAudioPlayer) GetConstructor() string {
	return ConstructorLinkPreviewTypeEmbeddedAudioPlayer
}

func (*LinkPreviewTypeEmbeddedAudioPlayer) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeEmbeddedAudioPlayer
}

// The link is a link to a video player
type LinkPreviewTypeEmbeddedVideoPlayer struct {
	meta
	// URL of the external video player
	Url string `json:"url"`
	// Thumbnail of the video; may be null if unknown
	Thumbnail *Photo `json:"thumbnail"`
	// Duration of the video, in seconds
	Duration int32 `json:"duration"`
	// Expected width of the embedded player
	Width int32 `json:"width"`
	// Expected height of the embedded player
	Height int32 `json:"height"`
}

func (entity *LinkPreviewTypeEmbeddedVideoPlayer) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeEmbeddedVideoPlayer

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeEmbeddedVideoPlayer) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeEmbeddedVideoPlayer) GetConstructor() string {
	return ConstructorLinkPreviewTypeEmbeddedVideoPlayer
}

func (*LinkPreviewTypeEmbeddedVideoPlayer) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeEmbeddedVideoPlayer
}

// The link is a link to an audio file
type LinkPreviewTypeExternalAudio struct {
	meta
	// URL of the audio file
	Url string `json:"url"`
	// MIME type of the audio file
	MimeType string `json:"mime_type"`
	// Duration of the audio, in seconds; 0 if unknown
	Duration int32 `json:"duration"`
}

func (entity *LinkPreviewTypeExternalAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeExternalAudio

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeExternalAudio) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeExternalAudio) GetConstructor() string {
	return ConstructorLinkPreviewTypeExternalAudio
}

func (*LinkPreviewTypeExternalAudio) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeExternalAudio
}

// The link is a link to a video file
type LinkPreviewTypeExternalVideo struct {
	meta
	// URL of the video file
	Url string `json:"url"`
	// MIME type of the video file
	MimeType string `json:"mime_type"`
	// Expected width of the video preview; 0 if unknown
	Width int32 `json:"width"`
	// Expected height of the video preview; 0 if unknown
	Height int32 `json:"height"`
	// Duration of the video, in seconds; 0 if unknown
	Duration int32 `json:"duration"`
}

func (entity *LinkPreviewTypeExternalVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeExternalVideo

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeExternalVideo) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeExternalVideo) GetConstructor() string {
	return ConstructorLinkPreviewTypeExternalVideo
}

func (*LinkPreviewTypeExternalVideo) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeExternalVideo
}

// The link is a link to an invoice
type LinkPreviewTypeInvoice struct {
	meta
}

func (entity *LinkPreviewTypeInvoice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeInvoice

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeInvoice) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeInvoice) GetConstructor() string {
	return ConstructorLinkPreviewTypeInvoice
}

func (*LinkPreviewTypeInvoice) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeInvoice
}

// The link is a link to a text or a poll Telegram message
type LinkPreviewTypeMessage struct {
	meta
}

func (entity *LinkPreviewTypeMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeMessage

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeMessage) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeMessage) GetConstructor() string {
	return ConstructorLinkPreviewTypeMessage
}

func (*LinkPreviewTypeMessage) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeMessage
}

// The link is a link to a photo
type LinkPreviewTypePhoto struct {
	meta
	// The photo
	Photo *Photo `json:"photo"`
}

func (entity *LinkPreviewTypePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypePhoto

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypePhoto) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypePhoto) GetConstructor() string {
	return ConstructorLinkPreviewTypePhoto
}

func (*LinkPreviewTypePhoto) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypePhoto
}

// The link is a link to a Telegram Premium gift code
type LinkPreviewTypePremiumGiftCode struct {
	meta
}

func (entity *LinkPreviewTypePremiumGiftCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypePremiumGiftCode

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypePremiumGiftCode) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypePremiumGiftCode) GetConstructor() string {
	return ConstructorLinkPreviewTypePremiumGiftCode
}

func (*LinkPreviewTypePremiumGiftCode) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypePremiumGiftCode
}

// The link is a link to a shareable chat folder
type LinkPreviewTypeShareableChatFolder struct {
	meta
}

func (entity *LinkPreviewTypeShareableChatFolder) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeShareableChatFolder

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeShareableChatFolder) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeShareableChatFolder) GetConstructor() string {
	return ConstructorLinkPreviewTypeShareableChatFolder
}

func (*LinkPreviewTypeShareableChatFolder) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeShareableChatFolder
}

// The link is a link to a sticker
type LinkPreviewTypeSticker struct {
	meta
	// The sticker. It can be an arbitrary WEBP image and can have dimensions bigger than 512
	Sticker *Sticker `json:"sticker"`
}

func (entity *LinkPreviewTypeSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeSticker

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeSticker) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeSticker) GetConstructor() string {
	return ConstructorLinkPreviewTypeSticker
}

func (*LinkPreviewTypeSticker) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeSticker
}

// The link is a link to a sticker set
type LinkPreviewTypeStickerSet struct {
	meta
	// Up to 4 stickers from the sticker set
	Stickers []*Sticker `json:"stickers"`
}

func (entity *LinkPreviewTypeStickerSet) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeStickerSet

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeStickerSet) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeStickerSet) GetConstructor() string {
	return ConstructorLinkPreviewTypeStickerSet
}

func (*LinkPreviewTypeStickerSet) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeStickerSet
}

// The link is a link to a story. Link preview description is unavailable
type LinkPreviewTypeStory struct {
	meta
	// The identifier of the chat that posted the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Story identifier
	StoryId int32 `json:"story_id"`
}

func (entity *LinkPreviewTypeStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeStory

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeStory) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeStory) GetConstructor() string {
	return ConstructorLinkPreviewTypeStory
}

func (*LinkPreviewTypeStory) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeStory
}

// The link is a link to boost a supergroup chat
type LinkPreviewTypeSupergroupBoost struct {
	meta
	// Photo of the chat; may be null
	Photo *ChatPhoto `json:"photo"`
}

func (entity *LinkPreviewTypeSupergroupBoost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeSupergroupBoost

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeSupergroupBoost) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeSupergroupBoost) GetConstructor() string {
	return ConstructorLinkPreviewTypeSupergroupBoost
}

func (*LinkPreviewTypeSupergroupBoost) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeSupergroupBoost
}

// The link is a link to a cloud theme. TDLib has no theme support yet
type LinkPreviewTypeTheme struct {
	meta
	// The list of files with theme description
	Documents []*Document `json:"documents"`
	// Settings for the cloud theme; may be null if unknown
	Settings *ThemeSettings `json:"settings"`
}

func (entity *LinkPreviewTypeTheme) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeTheme

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeTheme) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeTheme) GetConstructor() string {
	return ConstructorLinkPreviewTypeTheme
}

func (*LinkPreviewTypeTheme) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeTheme
}

// The link preview type is unsupported yet
type LinkPreviewTypeUnsupported struct {
	meta
}

func (entity *LinkPreviewTypeUnsupported) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeUnsupported

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeUnsupported) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeUnsupported) GetConstructor() string {
	return ConstructorLinkPreviewTypeUnsupported
}

func (*LinkPreviewTypeUnsupported) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeUnsupported
}

// The link is a link to a user
type LinkPreviewTypeUser struct {
	meta
	// Photo of the user; may be null if none
	Photo *ChatPhoto `json:"photo"`
	// True, if the user is a bot
	IsBot bool `json:"is_bot"`
}

func (entity *LinkPreviewTypeUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeUser

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeUser) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeUser) GetConstructor() string {
	return ConstructorLinkPreviewTypeUser
}

func (*LinkPreviewTypeUser) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeUser
}

// The link is a link to a video
type LinkPreviewTypeVideo struct {
	meta
	// The video description
	Video *Video `json:"video"`
}

func (entity *LinkPreviewTypeVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeVideo

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeVideo) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeVideo) GetConstructor() string {
	return ConstructorLinkPreviewTypeVideo
}

func (*LinkPreviewTypeVideo) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeVideo
}

// The link is a link to a video chat
type LinkPreviewTypeVideoChat struct {
	meta
	// Photo of the chat with the video chat; may be null if none
	Photo *ChatPhoto `json:"photo"`
	// True, if the video chat is expected to be a live stream in a channel or a broadcast group
	IsLiveStream bool `json:"is_live_stream"`
}

func (entity *LinkPreviewTypeVideoChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeVideoChat

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeVideoChat) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeVideoChat) GetConstructor() string {
	return ConstructorLinkPreviewTypeVideoChat
}

func (*LinkPreviewTypeVideoChat) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeVideoChat
}

// The link is a link to a video note message
type LinkPreviewTypeVideoNote struct {
	meta
	// The video note
	VideoNote *VideoNote `json:"video_note"`
}

func (entity *LinkPreviewTypeVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeVideoNote

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeVideoNote) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeVideoNote) GetConstructor() string {
	return ConstructorLinkPreviewTypeVideoNote
}

func (*LinkPreviewTypeVideoNote) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeVideoNote
}

// The link is a link to a voice note message
type LinkPreviewTypeVoiceNote struct {
	meta
	// The voice note
	VoiceNote *VoiceNote `json:"voice_note"`
}

func (entity *LinkPreviewTypeVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeVoiceNote) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeVoiceNote) GetConstructor() string {
	return ConstructorLinkPreviewTypeVoiceNote
}

func (*LinkPreviewTypeVoiceNote) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeVoiceNote
}

// The link is a link to a Web App
type LinkPreviewTypeWebApp struct {
	meta
	// Web App photo; may be null if none
	Photo *Photo `json:"photo"`
}

func (entity *LinkPreviewTypeWebApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreviewTypeWebApp

	return json.Marshal((*stub)(entity))
}

func (*LinkPreviewTypeWebApp) GetType() string {
	return TypeLinkPreviewType
}

func (*LinkPreviewTypeWebApp) GetConstructor() string {
	return ConstructorLinkPreviewTypeWebApp
}

func (*LinkPreviewTypeWebApp) LinkPreviewTypeConstructor() string {
	return ConstructorLinkPreviewTypeWebApp
}

// Describes a link preview
type LinkPreview struct {
	meta
	// Original URL of the link
	Url string `json:"url"`
	// URL to display
	DisplayUrl string `json:"display_url"`
	// Short name of the site (e.g., Google Docs, App Store)
	SiteName string `json:"site_name"`
	// Title of the content
	Title string `json:"title"`
	// Description of the content
	Description *FormattedText `json:"description"`
	// Author of the content
	Author string `json:"author"`
	// Type of the link preview
	Type LinkPreviewType `json:"type"`
	// True, if size of media in the preview can be changed
	HasLargeMedia bool `json:"has_large_media"`
	// True, if large media preview must be shown; otherwise, the media preview must be shown small and only the first frame must be shown for videos
	ShowLargeMedia bool `json:"show_large_media"`
	// True, if media must be shown above link preview description; otherwise, the media must be shown below the description
	ShowMediaAboveDescription bool `json:"show_media_above_description"`
	// True, if there is no need to show an ordinary open URL confirmation, when opening the URL from the preview, because the URL is shown in the message text in clear
	SkipConfirmation bool `json:"skip_confirmation"`
	// True, if the link preview must be shown above message text; otherwise, the link preview must be shown below the message text
	ShowAboveText bool `json:"show_above_text"`
	// Version of instant view (currently, can be 1 or 2) for the web page; 0 if none
	InstantViewVersion int32 `json:"instant_view_version"`
}

func (entity *LinkPreview) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LinkPreview

	return json.Marshal((*stub)(entity))
}

func (*LinkPreview) GetType() string {
	return TypeLinkPreview
}

func (*LinkPreview) GetConstructor() string {
	return ConstructorLinkPreview
}

func (linkPreview *LinkPreview) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Url                       string          `json:"url"`
		DisplayUrl                string          `json:"display_url"`
		SiteName                  string          `json:"site_name"`
		Title                     string          `json:"title"`
		Description               *FormattedText  `json:"description"`
		Author                    string          `json:"author"`
		Type                      json.RawMessage `json:"type"`
		HasLargeMedia             bool            `json:"has_large_media"`
		ShowLargeMedia            bool            `json:"show_large_media"`
		ShowMediaAboveDescription bool            `json:"show_media_above_description"`
		SkipConfirmation          bool            `json:"skip_confirmation"`
		ShowAboveText             bool            `json:"show_above_text"`
		InstantViewVersion        int32           `json:"instant_view_version"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	linkPreview.Url = tmp.Url
	linkPreview.DisplayUrl = tmp.DisplayUrl
	linkPreview.SiteName = tmp.SiteName
	linkPreview.Title = tmp.Title
	linkPreview.Description = tmp.Description
	linkPreview.Author = tmp.Author
	linkPreview.HasLargeMedia = tmp.HasLargeMedia
	linkPreview.ShowLargeMedia = tmp.ShowLargeMedia
	linkPreview.ShowMediaAboveDescription = tmp.ShowMediaAboveDescription
	linkPreview.SkipConfirmation = tmp.SkipConfirmation
	linkPreview.ShowAboveText = tmp.ShowAboveText
	linkPreview.InstantViewVersion = tmp.InstantViewVersion

	fieldType, _ := UnmarshalLinkPreviewType(tmp.Type)
	linkPreview.Type = fieldType

	return nil
}

// Contains information about a country
type CountryInfo struct {
	meta
	// A two-letter ISO 3166-1 alpha-2 country code
	CountryCode string `json:"country_code"`
	// Native name of the country
	Name string `json:"name"`
	// English name of the country
	EnglishName string `json:"english_name"`
	// True, if the country must be hidden from the list of all countries
	IsHidden bool `json:"is_hidden"`
	// List of country calling codes
	CallingCodes []string `json:"calling_codes"`
}

func (entity *CountryInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CountryInfo

	return json.Marshal((*stub)(entity))
}

func (*CountryInfo) GetType() string {
	return TypeCountryInfo
}

func (*CountryInfo) GetConstructor() string {
	return ConstructorCountryInfo
}

// Contains information about countries
type Countries struct {
	meta
	// The list of countries
	Countries []*CountryInfo `json:"countries"`
}

func (entity *Countries) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Countries

	return json.Marshal((*stub)(entity))
}

func (*Countries) GetType() string {
	return TypeCountries
}

func (*Countries) GetConstructor() string {
	return ConstructorCountries
}

// Contains information about a phone number
type PhoneNumberInfo struct {
	meta
	// Information about the country to which the phone number belongs; may be null
	Country *CountryInfo `json:"country"`
	// The part of the phone number denoting country calling code or its part
	CountryCallingCode string `json:"country_calling_code"`
	// The phone number without country calling code formatted accordingly to local rules. Expected digits are returned as '-', but even more digits might be entered by the user
	FormattedPhoneNumber string `json:"formatted_phone_number"`
	// True, if the phone number was bought at https://fragment.com and isn't tied to a SIM card. Information about the phone number can be received using getCollectibleItemInfo
	IsAnonymous bool `json:"is_anonymous"`
}

func (entity *PhoneNumberInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PhoneNumberInfo

	return json.Marshal((*stub)(entity))
}

func (*PhoneNumberInfo) GetType() string {
	return TypePhoneNumberInfo
}

func (*PhoneNumberInfo) GetConstructor() string {
	return ConstructorPhoneNumberInfo
}

// A username
type CollectibleItemTypeUsername struct {
	meta
	// The username
	Username string `json:"username"`
}

func (entity *CollectibleItemTypeUsername) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CollectibleItemTypeUsername

	return json.Marshal((*stub)(entity))
}

func (*CollectibleItemTypeUsername) GetType() string {
	return TypeCollectibleItemType
}

func (*CollectibleItemTypeUsername) GetConstructor() string {
	return ConstructorCollectibleItemTypeUsername
}

func (*CollectibleItemTypeUsername) CollectibleItemTypeConstructor() string {
	return ConstructorCollectibleItemTypeUsername
}

// A phone number
type CollectibleItemTypePhoneNumber struct {
	meta
	// The phone number
	PhoneNumber string `json:"phone_number"`
}

func (entity *CollectibleItemTypePhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CollectibleItemTypePhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*CollectibleItemTypePhoneNumber) GetType() string {
	return TypeCollectibleItemType
}

func (*CollectibleItemTypePhoneNumber) GetConstructor() string {
	return ConstructorCollectibleItemTypePhoneNumber
}

func (*CollectibleItemTypePhoneNumber) CollectibleItemTypeConstructor() string {
	return ConstructorCollectibleItemTypePhoneNumber
}

// Contains information about a collectible item and its last purchase
type CollectibleItemInfo struct {
	meta
	// Point in time (Unix timestamp) when the item was purchased
	PurchaseDate int32 `json:"purchase_date"`
	// Currency for the paid amount
	Currency string `json:"currency"`
	// The paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Cryptocurrency used to pay for the item
	Cryptocurrency string `json:"cryptocurrency"`
	// The paid amount, in the smallest units of the cryptocurrency
	CryptocurrencyAmount JsonInt64 `json:"cryptocurrency_amount"`
	// Individual URL for the item on https://fragment.com
	Url string `json:"url"`
}

func (entity *CollectibleItemInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CollectibleItemInfo

	return json.Marshal((*stub)(entity))
}

func (*CollectibleItemInfo) GetType() string {
	return TypeCollectibleItemInfo
}

func (*CollectibleItemInfo) GetConstructor() string {
	return ConstructorCollectibleItemInfo
}

// Describes an action associated with a bank card number
type BankCardActionOpenUrl struct {
	meta
	// Action text
	Text string `json:"text"`
	// The URL to be opened
	Url string `json:"url"`
}

func (entity *BankCardActionOpenUrl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BankCardActionOpenUrl

	return json.Marshal((*stub)(entity))
}

func (*BankCardActionOpenUrl) GetType() string {
	return TypeBankCardActionOpenUrl
}

func (*BankCardActionOpenUrl) GetConstructor() string {
	return ConstructorBankCardActionOpenUrl
}

// Information about a bank card
type BankCardInfo struct {
	meta
	// Title of the bank card description
	Title string `json:"title"`
	// Actions that can be done with the bank card number
	Actions []*BankCardActionOpenUrl `json:"actions"`
}

func (entity *BankCardInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BankCardInfo

	return json.Marshal((*stub)(entity))
}

func (*BankCardInfo) GetType() string {
	return TypeBankCardInfo
}

func (*BankCardInfo) GetConstructor() string {
	return ConstructorBankCardInfo
}

// Describes an address
type Address struct {
	meta
	// A two-letter ISO 3166-1 alpha-2 country code
	CountryCode string `json:"country_code"`
	// State, if applicable
	State string `json:"state"`
	// City
	City string `json:"city"`
	// First line of the address
	StreetLine1 string `json:"street_line1"`
	// Second line of the address
	StreetLine2 string `json:"street_line2"`
	// Address postal code
	PostalCode string `json:"postal_code"`
}

func (entity *Address) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Address

	return json.Marshal((*stub)(entity))
}

func (*Address) GetType() string {
	return TypeAddress
}

func (*Address) GetConstructor() string {
	return ConstructorAddress
}

// Describes an address of a location
type LocationAddress struct {
	meta
	// A two-letter ISO 3166-1 alpha-2 country code
	CountryCode string `json:"country_code"`
	// State, if applicable; empty if unknown
	State string `json:"state"`
	// City; empty if unknown
	City string `json:"city"`
	// The address; empty if unknown
	Street string `json:"street"`
}

func (entity *LocationAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LocationAddress

	return json.Marshal((*stub)(entity))
}

func (*LocationAddress) GetType() string {
	return TypeLocationAddress
}

func (*LocationAddress) GetConstructor() string {
	return ConstructorLocationAddress
}

// Portion of the price of a product (e.g., "delivery cost", "tax amount")
type LabeledPricePart struct {
	meta
	// Label for this portion of the product price
	Label string `json:"label"`
	// Currency amount in the smallest units of the currency
	Amount int64 `json:"amount"`
}

func (entity *LabeledPricePart) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LabeledPricePart

	return json.Marshal((*stub)(entity))
}

func (*LabeledPricePart) GetType() string {
	return TypeLabeledPricePart
}

func (*LabeledPricePart) GetConstructor() string {
	return ConstructorLabeledPricePart
}

// Product invoice
type Invoice struct {
	meta
	// ISO 4217 currency code
	Currency string `json:"currency"`
	// A list of objects used to calculate the total price of the product
	PriceParts []*LabeledPricePart `json:"price_parts"`
	// The number of seconds between consecutive Telegram Star debiting for subscription invoices; 0 if the invoice doesn't create subscription
	SubscriptionPeriod int32 `json:"subscription_period"`
	// The maximum allowed amount of tip in the smallest units of the currency
	MaxTipAmount int64 `json:"max_tip_amount"`
	// Suggested amounts of tip in the smallest units of the currency
	SuggestedTipAmounts []int64 `json:"suggested_tip_amounts"`
	// An HTTP URL with terms of service for recurring payments. If non-empty, the invoice payment will result in recurring payments and the user must accept the terms of service before allowed to pay
	RecurringPaymentTermsOfServiceUrl string `json:"recurring_payment_terms_of_service_url"`
	// An HTTP URL with terms of service for non-recurring payments. If non-empty, then the user must accept the terms of service before allowed to pay
	TermsOfServiceUrl string `json:"terms_of_service_url"`
	// True, if the payment is a test payment
	IsTest bool `json:"is_test"`
	// True, if the user's name is needed for payment
	NeedName bool `json:"need_name"`
	// True, if the user's phone number is needed for payment
	NeedPhoneNumber bool `json:"need_phone_number"`
	// True, if the user's email address is needed for payment
	NeedEmailAddress bool `json:"need_email_address"`
	// True, if the user's shipping address is needed for payment
	NeedShippingAddress bool `json:"need_shipping_address"`
	// True, if the user's phone number will be sent to the provider
	SendPhoneNumberToProvider bool `json:"send_phone_number_to_provider"`
	// True, if the user's email address will be sent to the provider
	SendEmailAddressToProvider bool `json:"send_email_address_to_provider"`
	// True, if the total price depends on the shipping method
	IsFlexible bool `json:"is_flexible"`
}

func (entity *Invoice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Invoice

	return json.Marshal((*stub)(entity))
}

func (*Invoice) GetType() string {
	return TypeInvoice
}

func (*Invoice) GetConstructor() string {
	return ConstructorInvoice
}

// Order information
type OrderInfo struct {
	meta
	// Name of the user
	Name string `json:"name"`
	// Phone number of the user
	PhoneNumber string `json:"phone_number"`
	// Email address of the user
	EmailAddress string `json:"email_address"`
	// Shipping address for this order; may be null
	ShippingAddress *Address `json:"shipping_address"`
}

func (entity *OrderInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub OrderInfo

	return json.Marshal((*stub)(entity))
}

func (*OrderInfo) GetType() string {
	return TypeOrderInfo
}

func (*OrderInfo) GetConstructor() string {
	return ConstructorOrderInfo
}

// One shipping option
type ShippingOption struct {
	meta
	// Shipping option identifier
	Id string `json:"id"`
	// Option title
	Title string `json:"title"`
	// A list of objects used to calculate the total shipping costs
	PriceParts []*LabeledPricePart `json:"price_parts"`
}

func (entity *ShippingOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ShippingOption

	return json.Marshal((*stub)(entity))
}

func (*ShippingOption) GetType() string {
	return TypeShippingOption
}

func (*ShippingOption) GetConstructor() string {
	return ConstructorShippingOption
}

// Contains information about saved payment credentials
type SavedCredentials struct {
	meta
	// Unique identifier of the saved credentials
	Id string `json:"id"`
	// Title of the saved credentials
	Title string `json:"title"`
}

func (entity *SavedCredentials) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SavedCredentials

	return json.Marshal((*stub)(entity))
}

func (*SavedCredentials) GetType() string {
	return TypeSavedCredentials
}

func (*SavedCredentials) GetConstructor() string {
	return ConstructorSavedCredentials
}

// Applies if a user chooses some previously saved payment credentials. To use their previously saved credentials, the user must have a valid temporary password
type InputCredentialsSaved struct {
	meta
	// Identifier of the saved credentials
	SavedCredentialsId string `json:"saved_credentials_id"`
}

func (entity *InputCredentialsSaved) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputCredentialsSaved

	return json.Marshal((*stub)(entity))
}

func (*InputCredentialsSaved) GetType() string {
	return TypeInputCredentials
}

func (*InputCredentialsSaved) GetConstructor() string {
	return ConstructorInputCredentialsSaved
}

func (*InputCredentialsSaved) InputCredentialsConstructor() string {
	return ConstructorInputCredentialsSaved
}

// Applies if a user enters new credentials on a payment provider website
type InputCredentialsNew struct {
	meta
	// JSON-encoded data with the credential identifier from the payment provider
	Data string `json:"data"`
	// True, if the credential identifier can be saved on the server side
	AllowSave bool `json:"allow_save"`
}

func (entity *InputCredentialsNew) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputCredentialsNew

	return json.Marshal((*stub)(entity))
}

func (*InputCredentialsNew) GetType() string {
	return TypeInputCredentials
}

func (*InputCredentialsNew) GetConstructor() string {
	return ConstructorInputCredentialsNew
}

func (*InputCredentialsNew) InputCredentialsConstructor() string {
	return ConstructorInputCredentialsNew
}

// Applies if a user enters new credentials using Apple Pay
type InputCredentialsApplePay struct {
	meta
	// JSON-encoded data with the credential identifier
	Data string `json:"data"`
}

func (entity *InputCredentialsApplePay) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputCredentialsApplePay

	return json.Marshal((*stub)(entity))
}

func (*InputCredentialsApplePay) GetType() string {
	return TypeInputCredentials
}

func (*InputCredentialsApplePay) GetConstructor() string {
	return ConstructorInputCredentialsApplePay
}

func (*InputCredentialsApplePay) InputCredentialsConstructor() string {
	return ConstructorInputCredentialsApplePay
}

// Applies if a user enters new credentials using Google Pay
type InputCredentialsGooglePay struct {
	meta
	// JSON-encoded data with the credential identifier
	Data string `json:"data"`
}

func (entity *InputCredentialsGooglePay) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputCredentialsGooglePay

	return json.Marshal((*stub)(entity))
}

func (*InputCredentialsGooglePay) GetType() string {
	return TypeInputCredentials
}

func (*InputCredentialsGooglePay) GetConstructor() string {
	return ConstructorInputCredentialsGooglePay
}

func (*InputCredentialsGooglePay) InputCredentialsConstructor() string {
	return ConstructorInputCredentialsGooglePay
}

// Smart Glocal payment provider
type PaymentProviderSmartGlocal struct {
	meta
	// Public payment token
	PublicToken string `json:"public_token"`
	// URL for sending card tokenization requests
	TokenizeUrl string `json:"tokenize_url"`
}

func (entity *PaymentProviderSmartGlocal) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentProviderSmartGlocal

	return json.Marshal((*stub)(entity))
}

func (*PaymentProviderSmartGlocal) GetType() string {
	return TypePaymentProvider
}

func (*PaymentProviderSmartGlocal) GetConstructor() string {
	return ConstructorPaymentProviderSmartGlocal
}

func (*PaymentProviderSmartGlocal) PaymentProviderConstructor() string {
	return ConstructorPaymentProviderSmartGlocal
}

// Stripe payment provider
type PaymentProviderStripe struct {
	meta
	// Stripe API publishable key
	PublishableKey string `json:"publishable_key"`
	// True, if the user country must be provided
	NeedCountry bool `json:"need_country"`
	// True, if the user ZIP/postal code must be provided
	NeedPostalCode bool `json:"need_postal_code"`
	// True, if the cardholder name must be provided
	NeedCardholderName bool `json:"need_cardholder_name"`
}

func (entity *PaymentProviderStripe) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentProviderStripe

	return json.Marshal((*stub)(entity))
}

func (*PaymentProviderStripe) GetType() string {
	return TypePaymentProvider
}

func (*PaymentProviderStripe) GetConstructor() string {
	return ConstructorPaymentProviderStripe
}

func (*PaymentProviderStripe) PaymentProviderConstructor() string {
	return ConstructorPaymentProviderStripe
}

// Some other payment provider, for which a web payment form must be shown
type PaymentProviderOther struct {
	meta
	// Payment form URL
	Url string `json:"url"`
}

func (entity *PaymentProviderOther) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentProviderOther

	return json.Marshal((*stub)(entity))
}

func (*PaymentProviderOther) GetType() string {
	return TypePaymentProvider
}

func (*PaymentProviderOther) GetConstructor() string {
	return ConstructorPaymentProviderOther
}

func (*PaymentProviderOther) PaymentProviderConstructor() string {
	return ConstructorPaymentProviderOther
}

// Describes an additional payment option
type PaymentOption struct {
	meta
	// Title for the payment option
	Title string `json:"title"`
	// Payment form URL to be opened in a web view
	Url string `json:"url"`
}

func (entity *PaymentOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentOption

	return json.Marshal((*stub)(entity))
}

func (*PaymentOption) GetType() string {
	return TypePaymentOption
}

func (*PaymentOption) GetConstructor() string {
	return ConstructorPaymentOption
}

// The payment form is for a regular payment
type PaymentFormTypeRegular struct {
	meta
	// Full information about the invoice
	Invoice *Invoice `json:"invoice"`
	// User identifier of the payment provider bot
	PaymentProviderUserId int64 `json:"payment_provider_user_id"`
	// Information about the payment provider
	PaymentProvider PaymentProvider `json:"payment_provider"`
	// The list of additional payment options
	AdditionalPaymentOptions []*PaymentOption `json:"additional_payment_options"`
	// Saved server-side order information; may be null
	SavedOrderInfo *OrderInfo `json:"saved_order_info"`
	// The list of saved payment credentials
	SavedCredentials []*SavedCredentials `json:"saved_credentials"`
	// True, if the user can choose to save credentials
	CanSaveCredentials bool `json:"can_save_credentials"`
	// True, if the user will be able to save credentials, if sets up a 2-step verification password
	NeedPassword bool `json:"need_password"`
}

func (entity *PaymentFormTypeRegular) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentFormTypeRegular

	return json.Marshal((*stub)(entity))
}

func (*PaymentFormTypeRegular) GetType() string {
	return TypePaymentFormType
}

func (*PaymentFormTypeRegular) GetConstructor() string {
	return ConstructorPaymentFormTypeRegular
}

func (*PaymentFormTypeRegular) PaymentFormTypeConstructor() string {
	return ConstructorPaymentFormTypeRegular
}

func (paymentFormTypeRegular *PaymentFormTypeRegular) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Invoice                  *Invoice            `json:"invoice"`
		PaymentProviderUserId    int64               `json:"payment_provider_user_id"`
		PaymentProvider          json.RawMessage     `json:"payment_provider"`
		AdditionalPaymentOptions []*PaymentOption    `json:"additional_payment_options"`
		SavedOrderInfo           *OrderInfo          `json:"saved_order_info"`
		SavedCredentials         []*SavedCredentials `json:"saved_credentials"`
		CanSaveCredentials       bool                `json:"can_save_credentials"`
		NeedPassword             bool                `json:"need_password"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	paymentFormTypeRegular.Invoice = tmp.Invoice
	paymentFormTypeRegular.PaymentProviderUserId = tmp.PaymentProviderUserId
	paymentFormTypeRegular.AdditionalPaymentOptions = tmp.AdditionalPaymentOptions
	paymentFormTypeRegular.SavedOrderInfo = tmp.SavedOrderInfo
	paymentFormTypeRegular.SavedCredentials = tmp.SavedCredentials
	paymentFormTypeRegular.CanSaveCredentials = tmp.CanSaveCredentials
	paymentFormTypeRegular.NeedPassword = tmp.NeedPassword

	fieldPaymentProvider, _ := UnmarshalPaymentProvider(tmp.PaymentProvider)
	paymentFormTypeRegular.PaymentProvider = fieldPaymentProvider

	return nil
}

// The payment form is for a payment in Telegram Stars
type PaymentFormTypeStars struct {
	meta
	// Number of Telegram Stars that will be paid
	StarCount int64 `json:"star_count"`
}

func (entity *PaymentFormTypeStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentFormTypeStars

	return json.Marshal((*stub)(entity))
}

func (*PaymentFormTypeStars) GetType() string {
	return TypePaymentFormType
}

func (*PaymentFormTypeStars) GetConstructor() string {
	return ConstructorPaymentFormTypeStars
}

func (*PaymentFormTypeStars) PaymentFormTypeConstructor() string {
	return ConstructorPaymentFormTypeStars
}

// The payment form is for a payment in Telegram Stars for subscription
type PaymentFormTypeStarSubscription struct {
	meta
	// Information about subscription plan
	Pricing *StarSubscriptionPricing `json:"pricing"`
}

func (entity *PaymentFormTypeStarSubscription) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentFormTypeStarSubscription

	return json.Marshal((*stub)(entity))
}

func (*PaymentFormTypeStarSubscription) GetType() string {
	return TypePaymentFormType
}

func (*PaymentFormTypeStarSubscription) GetConstructor() string {
	return ConstructorPaymentFormTypeStarSubscription
}

func (*PaymentFormTypeStarSubscription) PaymentFormTypeConstructor() string {
	return ConstructorPaymentFormTypeStarSubscription
}

// Contains information about an invoice payment form
type PaymentForm struct {
	meta
	// The payment form identifier
	Id JsonInt64 `json:"id"`
	// Type of the payment form
	Type PaymentFormType `json:"type"`
	// User identifier of the seller bot
	SellerBotUserId int64 `json:"seller_bot_user_id"`
	// Information about the product
	ProductInfo *ProductInfo `json:"product_info"`
}

func (entity *PaymentForm) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentForm

	return json.Marshal((*stub)(entity))
}

func (*PaymentForm) GetType() string {
	return TypePaymentForm
}

func (*PaymentForm) GetConstructor() string {
	return ConstructorPaymentForm
}

func (paymentForm *PaymentForm) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id              JsonInt64       `json:"id"`
		Type            json.RawMessage `json:"type"`
		SellerBotUserId int64           `json:"seller_bot_user_id"`
		ProductInfo     *ProductInfo    `json:"product_info"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	paymentForm.Id = tmp.Id
	paymentForm.SellerBotUserId = tmp.SellerBotUserId
	paymentForm.ProductInfo = tmp.ProductInfo

	fieldType, _ := UnmarshalPaymentFormType(tmp.Type)
	paymentForm.Type = fieldType

	return nil
}

// Contains a temporary identifier of validated order information, which is stored for one hour, and the available shipping options
type ValidatedOrderInfo struct {
	meta
	// Temporary identifier of the order information
	OrderInfoId string `json:"order_info_id"`
	// Available shipping options
	ShippingOptions []*ShippingOption `json:"shipping_options"`
}

func (entity *ValidatedOrderInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ValidatedOrderInfo

	return json.Marshal((*stub)(entity))
}

func (*ValidatedOrderInfo) GetType() string {
	return TypeValidatedOrderInfo
}

func (*ValidatedOrderInfo) GetConstructor() string {
	return ConstructorValidatedOrderInfo
}

// Contains the result of a payment request
type PaymentResult struct {
	meta
	// True, if the payment request was successful; otherwise, the verification_url will be non-empty
	Success bool `json:"success"`
	// URL for additional payment credentials verification
	VerificationUrl string `json:"verification_url"`
}

func (entity *PaymentResult) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentResult

	return json.Marshal((*stub)(entity))
}

func (*PaymentResult) GetType() string {
	return TypePaymentResult
}

func (*PaymentResult) GetConstructor() string {
	return ConstructorPaymentResult
}

// The payment was done using a third-party payment provider
type PaymentReceiptTypeRegular struct {
	meta
	// User identifier of the payment provider bot
	PaymentProviderUserId int64 `json:"payment_provider_user_id"`
	// Information about the invoice
	Invoice *Invoice `json:"invoice"`
	// Order information; may be null
	OrderInfo *OrderInfo `json:"order_info"`
	// Chosen shipping option; may be null
	ShippingOption *ShippingOption `json:"shipping_option"`
	// Title of the saved credentials chosen by the buyer
	CredentialsTitle string `json:"credentials_title"`
	// The amount of tip chosen by the buyer in the smallest units of the currency
	TipAmount int64 `json:"tip_amount"`
}

func (entity *PaymentReceiptTypeRegular) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentReceiptTypeRegular

	return json.Marshal((*stub)(entity))
}

func (*PaymentReceiptTypeRegular) GetType() string {
	return TypePaymentReceiptType
}

func (*PaymentReceiptTypeRegular) GetConstructor() string {
	return ConstructorPaymentReceiptTypeRegular
}

func (*PaymentReceiptTypeRegular) PaymentReceiptTypeConstructor() string {
	return ConstructorPaymentReceiptTypeRegular
}

// The payment was done using Telegram Stars
type PaymentReceiptTypeStars struct {
	meta
	// Number of Telegram Stars that were paid
	StarCount int64 `json:"star_count"`
	// Unique identifier of the transaction that can be used to dispute it
	TransactionId string `json:"transaction_id"`
}

func (entity *PaymentReceiptTypeStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentReceiptTypeStars

	return json.Marshal((*stub)(entity))
}

func (*PaymentReceiptTypeStars) GetType() string {
	return TypePaymentReceiptType
}

func (*PaymentReceiptTypeStars) GetConstructor() string {
	return ConstructorPaymentReceiptTypeStars
}

func (*PaymentReceiptTypeStars) PaymentReceiptTypeConstructor() string {
	return ConstructorPaymentReceiptTypeStars
}

// Contains information about a successful payment
type PaymentReceipt struct {
	meta
	// Information about the product
	ProductInfo *ProductInfo `json:"product_info"`
	// Point in time (Unix timestamp) when the payment was made
	Date int32 `json:"date"`
	// User identifier of the seller bot
	SellerBotUserId int64 `json:"seller_bot_user_id"`
	// Type of the payment receipt
	Type PaymentReceiptType `json:"type"`
}

func (entity *PaymentReceipt) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaymentReceipt

	return json.Marshal((*stub)(entity))
}

func (*PaymentReceipt) GetType() string {
	return TypePaymentReceipt
}

func (*PaymentReceipt) GetConstructor() string {
	return ConstructorPaymentReceipt
}

func (paymentReceipt *PaymentReceipt) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ProductInfo     *ProductInfo    `json:"product_info"`
		Date            int32           `json:"date"`
		SellerBotUserId int64           `json:"seller_bot_user_id"`
		Type            json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	paymentReceipt.ProductInfo = tmp.ProductInfo
	paymentReceipt.Date = tmp.Date
	paymentReceipt.SellerBotUserId = tmp.SellerBotUserId

	fieldType, _ := UnmarshalPaymentReceiptType(tmp.Type)
	paymentReceipt.Type = fieldType

	return nil
}

// An invoice from a message of the type messageInvoice or paid media purchase from messagePaidMedia
type InputInvoiceMessage struct {
	meta
	// Chat identifier of the message
	ChatId int64 `json:"chat_id"`
	// Message identifier. Use messageProperties.can_be_paid to check whether the message can be used in the method
	MessageId int64 `json:"message_id"`
}

func (entity *InputInvoiceMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInvoiceMessage

	return json.Marshal((*stub)(entity))
}

func (*InputInvoiceMessage) GetType() string {
	return TypeInputInvoice
}

func (*InputInvoiceMessage) GetConstructor() string {
	return ConstructorInputInvoiceMessage
}

func (*InputInvoiceMessage) InputInvoiceConstructor() string {
	return ConstructorInputInvoiceMessage
}

// An invoice from a link of the type internalLinkTypeInvoice
type InputInvoiceName struct {
	meta
	// Name of the invoice
	Name string `json:"name"`
}

func (entity *InputInvoiceName) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInvoiceName

	return json.Marshal((*stub)(entity))
}

func (*InputInvoiceName) GetType() string {
	return TypeInputInvoice
}

func (*InputInvoiceName) GetConstructor() string {
	return ConstructorInputInvoiceName
}

func (*InputInvoiceName) InputInvoiceConstructor() string {
	return ConstructorInputInvoiceName
}

// An invoice for a payment toward Telegram; must not be used in the in-store apps
type InputInvoiceTelegram struct {
	meta
	// Transaction purpose
	Purpose TelegramPaymentPurpose `json:"purpose"`
}

func (entity *InputInvoiceTelegram) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInvoiceTelegram

	return json.Marshal((*stub)(entity))
}

func (*InputInvoiceTelegram) GetType() string {
	return TypeInputInvoice
}

func (*InputInvoiceTelegram) GetConstructor() string {
	return ConstructorInputInvoiceTelegram
}

func (*InputInvoiceTelegram) InputInvoiceConstructor() string {
	return ConstructorInputInvoiceTelegram
}

func (inputInvoiceTelegram *InputInvoiceTelegram) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Purpose json.RawMessage `json:"purpose"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldPurpose, _ := UnmarshalTelegramPaymentPurpose(tmp.Purpose)
	inputInvoiceTelegram.Purpose = fieldPurpose

	return nil
}

// The media is hidden until the invoice is paid
type PaidMediaPreview struct {
	meta
	// Media width; 0 if unknown
	Width int32 `json:"width"`
	// Media height; 0 if unknown
	Height int32 `json:"height"`
	// Media duration, in seconds; 0 if unknown
	Duration int32 `json:"duration"`
	// Media minithumbnail; may be null
	Minithumbnail *Minithumbnail `json:"minithumbnail"`
}

func (entity *PaidMediaPreview) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaidMediaPreview

	return json.Marshal((*stub)(entity))
}

func (*PaidMediaPreview) GetType() string {
	return TypePaidMedia
}

func (*PaidMediaPreview) GetConstructor() string {
	return ConstructorPaidMediaPreview
}

func (*PaidMediaPreview) PaidMediaConstructor() string {
	return ConstructorPaidMediaPreview
}

// The media is a photo
type PaidMediaPhoto struct {
	meta
	// The photo
	Photo *Photo `json:"photo"`
}

func (entity *PaidMediaPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaidMediaPhoto

	return json.Marshal((*stub)(entity))
}

func (*PaidMediaPhoto) GetType() string {
	return TypePaidMedia
}

func (*PaidMediaPhoto) GetConstructor() string {
	return ConstructorPaidMediaPhoto
}

func (*PaidMediaPhoto) PaidMediaConstructor() string {
	return ConstructorPaidMediaPhoto
}

// The media is a video
type PaidMediaVideo struct {
	meta
	// The video
	Video *Video `json:"video"`
}

func (entity *PaidMediaVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaidMediaVideo

	return json.Marshal((*stub)(entity))
}

func (*PaidMediaVideo) GetType() string {
	return TypePaidMedia
}

func (*PaidMediaVideo) GetConstructor() string {
	return ConstructorPaidMediaVideo
}

func (*PaidMediaVideo) PaidMediaConstructor() string {
	return ConstructorPaidMediaVideo
}

// The media is unsupported
type PaidMediaUnsupported struct {
	meta
}

func (entity *PaidMediaUnsupported) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PaidMediaUnsupported

	return json.Marshal((*stub)(entity))
}

func (*PaidMediaUnsupported) GetType() string {
	return TypePaidMedia
}

func (*PaidMediaUnsupported) GetConstructor() string {
	return ConstructorPaidMediaUnsupported
}

func (*PaidMediaUnsupported) PaidMediaConstructor() string {
	return ConstructorPaidMediaUnsupported
}

// Describes parameters of a giveaway
type GiveawayParameters struct {
	meta
	// Identifier of the supergroup or channel chat, which will be automatically boosted by the winners of the giveaway for duration of the Telegram Premium subscription, or for the specified time. If the chat is a channel, then can_post_messages right is required in the channel, otherwise, the user must be an administrator in the supergroup
	BoostedChatId int64 `json:"boosted_chat_id"`
	// Identifiers of other supergroup or channel chats that must be subscribed by the users to be eligible for the giveaway. There can be up to getOption("giveaway_additional_chat_count_max") additional chats
	AdditionalChatIds []int64 `json:"additional_chat_ids"`
	// Point in time (Unix timestamp) when the giveaway is expected to be performed; must be 60-getOption("giveaway_duration_max") seconds in the future in scheduled giveaways
	WinnersSelectionDate int32 `json:"winners_selection_date"`
	// True, if only new members of the chats will be eligible for the giveaway
	OnlyNewMembers bool `json:"only_new_members"`
	// True, if the list of winners of the giveaway will be available to everyone
	HasPublicWinners bool `json:"has_public_winners"`
	// The list of two-letter ISO 3166-1 alpha-2 codes of countries, users from which will be eligible for the giveaway. If empty, then all users can participate in the giveaway. There can be up to getOption("giveaway_country_count_max") chosen countries. Users with phone number that was bought at https://fragment.com can participate in any giveaway and the country code "FT" must not be specified in the list
	CountryCodes []string `json:"country_codes"`
	// Additional description of the giveaway prize; 0-128 characters
	PrizeDescription string `json:"prize_description"`
}

func (entity *GiveawayParameters) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GiveawayParameters

	return json.Marshal((*stub)(entity))
}

func (*GiveawayParameters) GetType() string {
	return TypeGiveawayParameters
}

func (*GiveawayParameters) GetConstructor() string {
	return ConstructorGiveawayParameters
}

// File with the date it was uploaded
type DatedFile struct {
	meta
	// The file
	File *File `json:"file"`
	// Point in time (Unix timestamp) when the file was uploaded
	Date int32 `json:"date"`
}

func (entity *DatedFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DatedFile

	return json.Marshal((*stub)(entity))
}

func (*DatedFile) GetType() string {
	return TypeDatedFile
}

func (*DatedFile) GetConstructor() string {
	return ConstructorDatedFile
}

// A Telegram Passport element containing the user's personal details
type PassportElementTypePersonalDetails struct {
	meta
}

func (entity *PassportElementTypePersonalDetails) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypePersonalDetails

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypePersonalDetails) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypePersonalDetails) GetConstructor() string {
	return ConstructorPassportElementTypePersonalDetails
}

func (*PassportElementTypePersonalDetails) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypePersonalDetails
}

// A Telegram Passport element containing the user's passport
type PassportElementTypePassport struct {
	meta
}

func (entity *PassportElementTypePassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypePassport

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypePassport) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypePassport) GetConstructor() string {
	return ConstructorPassportElementTypePassport
}

func (*PassportElementTypePassport) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypePassport
}

// A Telegram Passport element containing the user's driver license
type PassportElementTypeDriverLicense struct {
	meta
}

func (entity *PassportElementTypeDriverLicense) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypeDriverLicense

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypeDriverLicense) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypeDriverLicense) GetConstructor() string {
	return ConstructorPassportElementTypeDriverLicense
}

func (*PassportElementTypeDriverLicense) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypeDriverLicense
}

// A Telegram Passport element containing the user's identity card
type PassportElementTypeIdentityCard struct {
	meta
}

func (entity *PassportElementTypeIdentityCard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypeIdentityCard

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypeIdentityCard) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypeIdentityCard) GetConstructor() string {
	return ConstructorPassportElementTypeIdentityCard
}

func (*PassportElementTypeIdentityCard) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypeIdentityCard
}

// A Telegram Passport element containing the user's internal passport
type PassportElementTypeInternalPassport struct {
	meta
}

func (entity *PassportElementTypeInternalPassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypeInternalPassport

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypeInternalPassport) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypeInternalPassport) GetConstructor() string {
	return ConstructorPassportElementTypeInternalPassport
}

func (*PassportElementTypeInternalPassport) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypeInternalPassport
}

// A Telegram Passport element containing the user's address
type PassportElementTypeAddress struct {
	meta
}

func (entity *PassportElementTypeAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypeAddress

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypeAddress) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypeAddress) GetConstructor() string {
	return ConstructorPassportElementTypeAddress
}

func (*PassportElementTypeAddress) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypeAddress
}

// A Telegram Passport element containing the user's utility bill
type PassportElementTypeUtilityBill struct {
	meta
}

func (entity *PassportElementTypeUtilityBill) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypeUtilityBill

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypeUtilityBill) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypeUtilityBill) GetConstructor() string {
	return ConstructorPassportElementTypeUtilityBill
}

func (*PassportElementTypeUtilityBill) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypeUtilityBill
}

// A Telegram Passport element containing the user's bank statement
type PassportElementTypeBankStatement struct {
	meta
}

func (entity *PassportElementTypeBankStatement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypeBankStatement

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypeBankStatement) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypeBankStatement) GetConstructor() string {
	return ConstructorPassportElementTypeBankStatement
}

func (*PassportElementTypeBankStatement) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypeBankStatement
}

// A Telegram Passport element containing the user's rental agreement
type PassportElementTypeRentalAgreement struct {
	meta
}

func (entity *PassportElementTypeRentalAgreement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypeRentalAgreement

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypeRentalAgreement) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypeRentalAgreement) GetConstructor() string {
	return ConstructorPassportElementTypeRentalAgreement
}

func (*PassportElementTypeRentalAgreement) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypeRentalAgreement
}

// A Telegram Passport element containing the registration page of the user's passport
type PassportElementTypePassportRegistration struct {
	meta
}

func (entity *PassportElementTypePassportRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypePassportRegistration

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypePassportRegistration) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypePassportRegistration) GetConstructor() string {
	return ConstructorPassportElementTypePassportRegistration
}

func (*PassportElementTypePassportRegistration) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypePassportRegistration
}

// A Telegram Passport element containing the user's temporary registration
type PassportElementTypeTemporaryRegistration struct {
	meta
}

func (entity *PassportElementTypeTemporaryRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypeTemporaryRegistration

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypeTemporaryRegistration) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypeTemporaryRegistration) GetConstructor() string {
	return ConstructorPassportElementTypeTemporaryRegistration
}

func (*PassportElementTypeTemporaryRegistration) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypeTemporaryRegistration
}

// A Telegram Passport element containing the user's phone number
type PassportElementTypePhoneNumber struct {
	meta
}

func (entity *PassportElementTypePhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypePhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypePhoneNumber) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypePhoneNumber) GetConstructor() string {
	return ConstructorPassportElementTypePhoneNumber
}

func (*PassportElementTypePhoneNumber) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypePhoneNumber
}

// A Telegram Passport element containing the user's email address
type PassportElementTypeEmailAddress struct {
	meta
}

func (entity *PassportElementTypeEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTypeEmailAddress

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTypeEmailAddress) GetType() string {
	return TypePassportElementType
}

func (*PassportElementTypeEmailAddress) GetConstructor() string {
	return ConstructorPassportElementTypeEmailAddress
}

func (*PassportElementTypeEmailAddress) PassportElementTypeConstructor() string {
	return ConstructorPassportElementTypeEmailAddress
}

// Represents a date according to the Gregorian calendar
type Date struct {
	meta
	// Day of the month; 1-31
	Day int32 `json:"day"`
	// Month; 1-12
	Month int32 `json:"month"`
	// Year; 1-9999
	Year int32 `json:"year"`
}

func (entity *Date) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Date

	return json.Marshal((*stub)(entity))
}

func (*Date) GetType() string {
	return TypeDate
}

func (*Date) GetConstructor() string {
	return ConstructorDate
}

// Contains the user's personal details
type PersonalDetails struct {
	meta
	// First name of the user written in English; 1-255 characters
	FirstName string `json:"first_name"`
	// Middle name of the user written in English; 0-255 characters
	MiddleName string `json:"middle_name"`
	// Last name of the user written in English; 1-255 characters
	LastName string `json:"last_name"`
	// Native first name of the user; 1-255 characters
	NativeFirstName string `json:"native_first_name"`
	// Native middle name of the user; 0-255 characters
	NativeMiddleName string `json:"native_middle_name"`
	// Native last name of the user; 1-255 characters
	NativeLastName string `json:"native_last_name"`
	// Birthdate of the user
	Birthdate *Date `json:"birthdate"`
	// Gender of the user, "male" or "female"
	Gender string `json:"gender"`
	// A two-letter ISO 3166-1 alpha-2 country code of the user's country
	CountryCode string `json:"country_code"`
	// A two-letter ISO 3166-1 alpha-2 country code of the user's residence country
	ResidenceCountryCode string `json:"residence_country_code"`
}

func (entity *PersonalDetails) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PersonalDetails

	return json.Marshal((*stub)(entity))
}

func (*PersonalDetails) GetType() string {
	return TypePersonalDetails
}

func (*PersonalDetails) GetConstructor() string {
	return ConstructorPersonalDetails
}

// An identity document
type IdentityDocument struct {
	meta
	// Document number; 1-24 characters
	Number string `json:"number"`
	// Document expiration date; may be null if not applicable
	ExpirationDate *Date `json:"expiration_date"`
	// Front side of the document
	FrontSide *DatedFile `json:"front_side"`
	// Reverse side of the document; only for driver license and identity card; may be null
	ReverseSide *DatedFile `json:"reverse_side"`
	// Selfie with the document; may be null
	Selfie *DatedFile `json:"selfie"`
	// List of files containing a certified English translation of the document
	Translation []*DatedFile `json:"translation"`
}

func (entity *IdentityDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub IdentityDocument

	return json.Marshal((*stub)(entity))
}

func (*IdentityDocument) GetType() string {
	return TypeIdentityDocument
}

func (*IdentityDocument) GetConstructor() string {
	return ConstructorIdentityDocument
}

// An identity document to be saved to Telegram Passport
type InputIdentityDocument struct {
	meta
	// Document number; 1-24 characters
	Number string `json:"number"`
	// Document expiration date; pass null if not applicable
	ExpirationDate *Date `json:"expiration_date"`
	// Front side of the document
	FrontSide InputFile `json:"front_side"`
	// Reverse side of the document; only for driver license and identity card; pass null otherwise
	ReverseSide InputFile `json:"reverse_side"`
	// Selfie with the document; pass null if unavailable
	Selfie InputFile `json:"selfie"`
	// List of files containing a certified English translation of the document
	Translation []InputFile `json:"translation"`
}

func (entity *InputIdentityDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputIdentityDocument

	return json.Marshal((*stub)(entity))
}

func (*InputIdentityDocument) GetType() string {
	return TypeInputIdentityDocument
}

func (*InputIdentityDocument) GetConstructor() string {
	return ConstructorInputIdentityDocument
}

func (inputIdentityDocument *InputIdentityDocument) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Number         string            `json:"number"`
		ExpirationDate *Date             `json:"expiration_date"`
		FrontSide      json.RawMessage   `json:"front_side"`
		ReverseSide    json.RawMessage   `json:"reverse_side"`
		Selfie         json.RawMessage   `json:"selfie"`
		Translation    []json.RawMessage `json:"translation"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputIdentityDocument.Number = tmp.Number
	inputIdentityDocument.ExpirationDate = tmp.ExpirationDate

	fieldFrontSide, _ := UnmarshalInputFile(tmp.FrontSide)
	inputIdentityDocument.FrontSide = fieldFrontSide

	fieldReverseSide, _ := UnmarshalInputFile(tmp.ReverseSide)
	inputIdentityDocument.ReverseSide = fieldReverseSide

	fieldSelfie, _ := UnmarshalInputFile(tmp.Selfie)
	inputIdentityDocument.Selfie = fieldSelfie

	fieldTranslation, _ := UnmarshalListOfInputFile(tmp.Translation)
	inputIdentityDocument.Translation = fieldTranslation

	return nil
}

// A personal document, containing some information about a user
type PersonalDocument struct {
	meta
	// List of files containing the pages of the document
	Files []*DatedFile `json:"files"`
	// List of files containing a certified English translation of the document
	Translation []*DatedFile `json:"translation"`
}

func (entity *PersonalDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PersonalDocument

	return json.Marshal((*stub)(entity))
}

func (*PersonalDocument) GetType() string {
	return TypePersonalDocument
}

func (*PersonalDocument) GetConstructor() string {
	return ConstructorPersonalDocument
}

// A personal document to be saved to Telegram Passport
type InputPersonalDocument struct {
	meta
	// List of files containing the pages of the document
	Files []InputFile `json:"files"`
	// List of files containing a certified English translation of the document
	Translation []InputFile `json:"translation"`
}

func (entity *InputPersonalDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPersonalDocument

	return json.Marshal((*stub)(entity))
}

func (*InputPersonalDocument) GetType() string {
	return TypeInputPersonalDocument
}

func (*InputPersonalDocument) GetConstructor() string {
	return ConstructorInputPersonalDocument
}

func (inputPersonalDocument *InputPersonalDocument) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Files       []json.RawMessage `json:"files"`
		Translation []json.RawMessage `json:"translation"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldFiles, _ := UnmarshalListOfInputFile(tmp.Files)
	inputPersonalDocument.Files = fieldFiles

	fieldTranslation, _ := UnmarshalListOfInputFile(tmp.Translation)
	inputPersonalDocument.Translation = fieldTranslation

	return nil
}

// A Telegram Passport element containing the user's personal details
type PassportElementPersonalDetails struct {
	meta
	// Personal details of the user
	PersonalDetails *PersonalDetails `json:"personal_details"`
}

func (entity *PassportElementPersonalDetails) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementPersonalDetails

	return json.Marshal((*stub)(entity))
}

func (*PassportElementPersonalDetails) GetType() string {
	return TypePassportElement
}

func (*PassportElementPersonalDetails) GetConstructor() string {
	return ConstructorPassportElementPersonalDetails
}

func (*PassportElementPersonalDetails) PassportElementConstructor() string {
	return ConstructorPassportElementPersonalDetails
}

// A Telegram Passport element containing the user's passport
type PassportElementPassport struct {
	meta
	// Passport
	Passport *IdentityDocument `json:"passport"`
}

func (entity *PassportElementPassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementPassport

	return json.Marshal((*stub)(entity))
}

func (*PassportElementPassport) GetType() string {
	return TypePassportElement
}

func (*PassportElementPassport) GetConstructor() string {
	return ConstructorPassportElementPassport
}

func (*PassportElementPassport) PassportElementConstructor() string {
	return ConstructorPassportElementPassport
}

// A Telegram Passport element containing the user's driver license
type PassportElementDriverLicense struct {
	meta
	// Driver license
	DriverLicense *IdentityDocument `json:"driver_license"`
}

func (entity *PassportElementDriverLicense) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementDriverLicense

	return json.Marshal((*stub)(entity))
}

func (*PassportElementDriverLicense) GetType() string {
	return TypePassportElement
}

func (*PassportElementDriverLicense) GetConstructor() string {
	return ConstructorPassportElementDriverLicense
}

func (*PassportElementDriverLicense) PassportElementConstructor() string {
	return ConstructorPassportElementDriverLicense
}

// A Telegram Passport element containing the user's identity card
type PassportElementIdentityCard struct {
	meta
	// Identity card
	IdentityCard *IdentityDocument `json:"identity_card"`
}

func (entity *PassportElementIdentityCard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementIdentityCard

	return json.Marshal((*stub)(entity))
}

func (*PassportElementIdentityCard) GetType() string {
	return TypePassportElement
}

func (*PassportElementIdentityCard) GetConstructor() string {
	return ConstructorPassportElementIdentityCard
}

func (*PassportElementIdentityCard) PassportElementConstructor() string {
	return ConstructorPassportElementIdentityCard
}

// A Telegram Passport element containing the user's internal passport
type PassportElementInternalPassport struct {
	meta
	// Internal passport
	InternalPassport *IdentityDocument `json:"internal_passport"`
}

func (entity *PassportElementInternalPassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementInternalPassport

	return json.Marshal((*stub)(entity))
}

func (*PassportElementInternalPassport) GetType() string {
	return TypePassportElement
}

func (*PassportElementInternalPassport) GetConstructor() string {
	return ConstructorPassportElementInternalPassport
}

func (*PassportElementInternalPassport) PassportElementConstructor() string {
	return ConstructorPassportElementInternalPassport
}

// A Telegram Passport element containing the user's address
type PassportElementAddress struct {
	meta
	// Address
	Address *Address `json:"address"`
}

func (entity *PassportElementAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementAddress

	return json.Marshal((*stub)(entity))
}

func (*PassportElementAddress) GetType() string {
	return TypePassportElement
}

func (*PassportElementAddress) GetConstructor() string {
	return ConstructorPassportElementAddress
}

func (*PassportElementAddress) PassportElementConstructor() string {
	return ConstructorPassportElementAddress
}

// A Telegram Passport element containing the user's utility bill
type PassportElementUtilityBill struct {
	meta
	// Utility bill
	UtilityBill *PersonalDocument `json:"utility_bill"`
}

func (entity *PassportElementUtilityBill) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementUtilityBill

	return json.Marshal((*stub)(entity))
}

func (*PassportElementUtilityBill) GetType() string {
	return TypePassportElement
}

func (*PassportElementUtilityBill) GetConstructor() string {
	return ConstructorPassportElementUtilityBill
}

func (*PassportElementUtilityBill) PassportElementConstructor() string {
	return ConstructorPassportElementUtilityBill
}

// A Telegram Passport element containing the user's bank statement
type PassportElementBankStatement struct {
	meta
	// Bank statement
	BankStatement *PersonalDocument `json:"bank_statement"`
}

func (entity *PassportElementBankStatement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementBankStatement

	return json.Marshal((*stub)(entity))
}

func (*PassportElementBankStatement) GetType() string {
	return TypePassportElement
}

func (*PassportElementBankStatement) GetConstructor() string {
	return ConstructorPassportElementBankStatement
}

func (*PassportElementBankStatement) PassportElementConstructor() string {
	return ConstructorPassportElementBankStatement
}

// A Telegram Passport element containing the user's rental agreement
type PassportElementRentalAgreement struct {
	meta
	// Rental agreement
	RentalAgreement *PersonalDocument `json:"rental_agreement"`
}

func (entity *PassportElementRentalAgreement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementRentalAgreement

	return json.Marshal((*stub)(entity))
}

func (*PassportElementRentalAgreement) GetType() string {
	return TypePassportElement
}

func (*PassportElementRentalAgreement) GetConstructor() string {
	return ConstructorPassportElementRentalAgreement
}

func (*PassportElementRentalAgreement) PassportElementConstructor() string {
	return ConstructorPassportElementRentalAgreement
}

// A Telegram Passport element containing the user's passport registration pages
type PassportElementPassportRegistration struct {
	meta
	// Passport registration pages
	PassportRegistration *PersonalDocument `json:"passport_registration"`
}

func (entity *PassportElementPassportRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementPassportRegistration

	return json.Marshal((*stub)(entity))
}

func (*PassportElementPassportRegistration) GetType() string {
	return TypePassportElement
}

func (*PassportElementPassportRegistration) GetConstructor() string {
	return ConstructorPassportElementPassportRegistration
}

func (*PassportElementPassportRegistration) PassportElementConstructor() string {
	return ConstructorPassportElementPassportRegistration
}

// A Telegram Passport element containing the user's temporary registration
type PassportElementTemporaryRegistration struct {
	meta
	// Temporary registration
	TemporaryRegistration *PersonalDocument `json:"temporary_registration"`
}

func (entity *PassportElementTemporaryRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementTemporaryRegistration

	return json.Marshal((*stub)(entity))
}

func (*PassportElementTemporaryRegistration) GetType() string {
	return TypePassportElement
}

func (*PassportElementTemporaryRegistration) GetConstructor() string {
	return ConstructorPassportElementTemporaryRegistration
}

func (*PassportElementTemporaryRegistration) PassportElementConstructor() string {
	return ConstructorPassportElementTemporaryRegistration
}

// A Telegram Passport element containing the user's phone number
type PassportElementPhoneNumber struct {
	meta
	// Phone number
	PhoneNumber string `json:"phone_number"`
}

func (entity *PassportElementPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementPhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*PassportElementPhoneNumber) GetType() string {
	return TypePassportElement
}

func (*PassportElementPhoneNumber) GetConstructor() string {
	return ConstructorPassportElementPhoneNumber
}

func (*PassportElementPhoneNumber) PassportElementConstructor() string {
	return ConstructorPassportElementPhoneNumber
}

// A Telegram Passport element containing the user's email address
type PassportElementEmailAddress struct {
	meta
	// Email address
	EmailAddress string `json:"email_address"`
}

func (entity *PassportElementEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementEmailAddress

	return json.Marshal((*stub)(entity))
}

func (*PassportElementEmailAddress) GetType() string {
	return TypePassportElement
}

func (*PassportElementEmailAddress) GetConstructor() string {
	return ConstructorPassportElementEmailAddress
}

func (*PassportElementEmailAddress) PassportElementConstructor() string {
	return ConstructorPassportElementEmailAddress
}

// A Telegram Passport element to be saved containing the user's personal details
type InputPassportElementPersonalDetails struct {
	meta
	// Personal details of the user
	PersonalDetails *PersonalDetails `json:"personal_details"`
}

func (entity *InputPassportElementPersonalDetails) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementPersonalDetails

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementPersonalDetails) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementPersonalDetails) GetConstructor() string {
	return ConstructorInputPassportElementPersonalDetails
}

func (*InputPassportElementPersonalDetails) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementPersonalDetails
}

// A Telegram Passport element to be saved containing the user's passport
type InputPassportElementPassport struct {
	meta
	// The passport to be saved
	Passport *InputIdentityDocument `json:"passport"`
}

func (entity *InputPassportElementPassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementPassport

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementPassport) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementPassport) GetConstructor() string {
	return ConstructorInputPassportElementPassport
}

func (*InputPassportElementPassport) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementPassport
}

// A Telegram Passport element to be saved containing the user's driver license
type InputPassportElementDriverLicense struct {
	meta
	// The driver license to be saved
	DriverLicense *InputIdentityDocument `json:"driver_license"`
}

func (entity *InputPassportElementDriverLicense) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementDriverLicense

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementDriverLicense) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementDriverLicense) GetConstructor() string {
	return ConstructorInputPassportElementDriverLicense
}

func (*InputPassportElementDriverLicense) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementDriverLicense
}

// A Telegram Passport element to be saved containing the user's identity card
type InputPassportElementIdentityCard struct {
	meta
	// The identity card to be saved
	IdentityCard *InputIdentityDocument `json:"identity_card"`
}

func (entity *InputPassportElementIdentityCard) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementIdentityCard

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementIdentityCard) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementIdentityCard) GetConstructor() string {
	return ConstructorInputPassportElementIdentityCard
}

func (*InputPassportElementIdentityCard) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementIdentityCard
}

// A Telegram Passport element to be saved containing the user's internal passport
type InputPassportElementInternalPassport struct {
	meta
	// The internal passport to be saved
	InternalPassport *InputIdentityDocument `json:"internal_passport"`
}

func (entity *InputPassportElementInternalPassport) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementInternalPassport

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementInternalPassport) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementInternalPassport) GetConstructor() string {
	return ConstructorInputPassportElementInternalPassport
}

func (*InputPassportElementInternalPassport) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementInternalPassport
}

// A Telegram Passport element to be saved containing the user's address
type InputPassportElementAddress struct {
	meta
	// The address to be saved
	Address *Address `json:"address"`
}

func (entity *InputPassportElementAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementAddress

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementAddress) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementAddress) GetConstructor() string {
	return ConstructorInputPassportElementAddress
}

func (*InputPassportElementAddress) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementAddress
}

// A Telegram Passport element to be saved containing the user's utility bill
type InputPassportElementUtilityBill struct {
	meta
	// The utility bill to be saved
	UtilityBill *InputPersonalDocument `json:"utility_bill"`
}

func (entity *InputPassportElementUtilityBill) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementUtilityBill

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementUtilityBill) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementUtilityBill) GetConstructor() string {
	return ConstructorInputPassportElementUtilityBill
}

func (*InputPassportElementUtilityBill) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementUtilityBill
}

// A Telegram Passport element to be saved containing the user's bank statement
type InputPassportElementBankStatement struct {
	meta
	// The bank statement to be saved
	BankStatement *InputPersonalDocument `json:"bank_statement"`
}

func (entity *InputPassportElementBankStatement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementBankStatement

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementBankStatement) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementBankStatement) GetConstructor() string {
	return ConstructorInputPassportElementBankStatement
}

func (*InputPassportElementBankStatement) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementBankStatement
}

// A Telegram Passport element to be saved containing the user's rental agreement
type InputPassportElementRentalAgreement struct {
	meta
	// The rental agreement to be saved
	RentalAgreement *InputPersonalDocument `json:"rental_agreement"`
}

func (entity *InputPassportElementRentalAgreement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementRentalAgreement

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementRentalAgreement) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementRentalAgreement) GetConstructor() string {
	return ConstructorInputPassportElementRentalAgreement
}

func (*InputPassportElementRentalAgreement) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementRentalAgreement
}

// A Telegram Passport element to be saved containing the user's passport registration
type InputPassportElementPassportRegistration struct {
	meta
	// The passport registration page to be saved
	PassportRegistration *InputPersonalDocument `json:"passport_registration"`
}

func (entity *InputPassportElementPassportRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementPassportRegistration

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementPassportRegistration) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementPassportRegistration) GetConstructor() string {
	return ConstructorInputPassportElementPassportRegistration
}

func (*InputPassportElementPassportRegistration) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementPassportRegistration
}

// A Telegram Passport element to be saved containing the user's temporary registration
type InputPassportElementTemporaryRegistration struct {
	meta
	// The temporary registration document to be saved
	TemporaryRegistration *InputPersonalDocument `json:"temporary_registration"`
}

func (entity *InputPassportElementTemporaryRegistration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementTemporaryRegistration

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementTemporaryRegistration) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementTemporaryRegistration) GetConstructor() string {
	return ConstructorInputPassportElementTemporaryRegistration
}

func (*InputPassportElementTemporaryRegistration) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementTemporaryRegistration
}

// A Telegram Passport element to be saved containing the user's phone number
type InputPassportElementPhoneNumber struct {
	meta
	// The phone number to be saved
	PhoneNumber string `json:"phone_number"`
}

func (entity *InputPassportElementPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementPhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementPhoneNumber) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementPhoneNumber) GetConstructor() string {
	return ConstructorInputPassportElementPhoneNumber
}

func (*InputPassportElementPhoneNumber) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementPhoneNumber
}

// A Telegram Passport element to be saved containing the user's email address
type InputPassportElementEmailAddress struct {
	meta
	// The email address to be saved
	EmailAddress string `json:"email_address"`
}

func (entity *InputPassportElementEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementEmailAddress

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementEmailAddress) GetType() string {
	return TypeInputPassportElement
}

func (*InputPassportElementEmailAddress) GetConstructor() string {
	return ConstructorInputPassportElementEmailAddress
}

func (*InputPassportElementEmailAddress) InputPassportElementConstructor() string {
	return ConstructorInputPassportElementEmailAddress
}

// Contains information about saved Telegram Passport elements
type PassportElements struct {
	meta
	// Telegram Passport elements
	Elements []PassportElement `json:"elements"`
}

func (entity *PassportElements) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElements

	return json.Marshal((*stub)(entity))
}

func (*PassportElements) GetType() string {
	return TypePassportElements
}

func (*PassportElements) GetConstructor() string {
	return ConstructorPassportElements
}

func (passportElements *PassportElements) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Elements []json.RawMessage `json:"elements"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldElements, _ := UnmarshalListOfPassportElement(tmp.Elements)
	passportElements.Elements = fieldElements

	return nil
}

// The element contains an error in an unspecified place. The error will be considered resolved when new data is added
type PassportElementErrorSourceUnspecified struct {
	meta
}

func (entity *PassportElementErrorSourceUnspecified) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementErrorSourceUnspecified

	return json.Marshal((*stub)(entity))
}

func (*PassportElementErrorSourceUnspecified) GetType() string {
	return TypePassportElementErrorSource
}

func (*PassportElementErrorSourceUnspecified) GetConstructor() string {
	return ConstructorPassportElementErrorSourceUnspecified
}

func (*PassportElementErrorSourceUnspecified) PassportElementErrorSourceConstructor() string {
	return ConstructorPassportElementErrorSourceUnspecified
}

// One of the data fields contains an error. The error will be considered resolved when the value of the field changes
type PassportElementErrorSourceDataField struct {
	meta
	// Field name
	FieldName string `json:"field_name"`
}

func (entity *PassportElementErrorSourceDataField) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementErrorSourceDataField

	return json.Marshal((*stub)(entity))
}

func (*PassportElementErrorSourceDataField) GetType() string {
	return TypePassportElementErrorSource
}

func (*PassportElementErrorSourceDataField) GetConstructor() string {
	return ConstructorPassportElementErrorSourceDataField
}

func (*PassportElementErrorSourceDataField) PassportElementErrorSourceConstructor() string {
	return ConstructorPassportElementErrorSourceDataField
}

// The front side of the document contains an error. The error will be considered resolved when the file with the front side changes
type PassportElementErrorSourceFrontSide struct {
	meta
}

func (entity *PassportElementErrorSourceFrontSide) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementErrorSourceFrontSide

	return json.Marshal((*stub)(entity))
}

func (*PassportElementErrorSourceFrontSide) GetType() string {
	return TypePassportElementErrorSource
}

func (*PassportElementErrorSourceFrontSide) GetConstructor() string {
	return ConstructorPassportElementErrorSourceFrontSide
}

func (*PassportElementErrorSourceFrontSide) PassportElementErrorSourceConstructor() string {
	return ConstructorPassportElementErrorSourceFrontSide
}

// The reverse side of the document contains an error. The error will be considered resolved when the file with the reverse side changes
type PassportElementErrorSourceReverseSide struct {
	meta
}

func (entity *PassportElementErrorSourceReverseSide) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementErrorSourceReverseSide

	return json.Marshal((*stub)(entity))
}

func (*PassportElementErrorSourceReverseSide) GetType() string {
	return TypePassportElementErrorSource
}

func (*PassportElementErrorSourceReverseSide) GetConstructor() string {
	return ConstructorPassportElementErrorSourceReverseSide
}

func (*PassportElementErrorSourceReverseSide) PassportElementErrorSourceConstructor() string {
	return ConstructorPassportElementErrorSourceReverseSide
}

// The selfie with the document contains an error. The error will be considered resolved when the file with the selfie changes
type PassportElementErrorSourceSelfie struct {
	meta
}

func (entity *PassportElementErrorSourceSelfie) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementErrorSourceSelfie

	return json.Marshal((*stub)(entity))
}

func (*PassportElementErrorSourceSelfie) GetType() string {
	return TypePassportElementErrorSource
}

func (*PassportElementErrorSourceSelfie) GetConstructor() string {
	return ConstructorPassportElementErrorSourceSelfie
}

func (*PassportElementErrorSourceSelfie) PassportElementErrorSourceConstructor() string {
	return ConstructorPassportElementErrorSourceSelfie
}

// One of files with the translation of the document contains an error. The error will be considered resolved when the file changes
type PassportElementErrorSourceTranslationFile struct {
	meta
	// Index of a file with the error
	FileIndex int32 `json:"file_index"`
}

func (entity *PassportElementErrorSourceTranslationFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementErrorSourceTranslationFile

	return json.Marshal((*stub)(entity))
}

func (*PassportElementErrorSourceTranslationFile) GetType() string {
	return TypePassportElementErrorSource
}

func (*PassportElementErrorSourceTranslationFile) GetConstructor() string {
	return ConstructorPassportElementErrorSourceTranslationFile
}

func (*PassportElementErrorSourceTranslationFile) PassportElementErrorSourceConstructor() string {
	return ConstructorPassportElementErrorSourceTranslationFile
}

// The translation of the document contains an error. The error will be considered resolved when the list of translation files changes
type PassportElementErrorSourceTranslationFiles struct {
	meta
}

func (entity *PassportElementErrorSourceTranslationFiles) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementErrorSourceTranslationFiles

	return json.Marshal((*stub)(entity))
}

func (*PassportElementErrorSourceTranslationFiles) GetType() string {
	return TypePassportElementErrorSource
}

func (*PassportElementErrorSourceTranslationFiles) GetConstructor() string {
	return ConstructorPassportElementErrorSourceTranslationFiles
}

func (*PassportElementErrorSourceTranslationFiles) PassportElementErrorSourceConstructor() string {
	return ConstructorPassportElementErrorSourceTranslationFiles
}

// The file contains an error. The error will be considered resolved when the file changes
type PassportElementErrorSourceFile struct {
	meta
	// Index of a file with the error
	FileIndex int32 `json:"file_index"`
}

func (entity *PassportElementErrorSourceFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementErrorSourceFile

	return json.Marshal((*stub)(entity))
}

func (*PassportElementErrorSourceFile) GetType() string {
	return TypePassportElementErrorSource
}

func (*PassportElementErrorSourceFile) GetConstructor() string {
	return ConstructorPassportElementErrorSourceFile
}

func (*PassportElementErrorSourceFile) PassportElementErrorSourceConstructor() string {
	return ConstructorPassportElementErrorSourceFile
}

// The list of attached files contains an error. The error will be considered resolved when the list of files changes
type PassportElementErrorSourceFiles struct {
	meta
}

func (entity *PassportElementErrorSourceFiles) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementErrorSourceFiles

	return json.Marshal((*stub)(entity))
}

func (*PassportElementErrorSourceFiles) GetType() string {
	return TypePassportElementErrorSource
}

func (*PassportElementErrorSourceFiles) GetConstructor() string {
	return ConstructorPassportElementErrorSourceFiles
}

func (*PassportElementErrorSourceFiles) PassportElementErrorSourceConstructor() string {
	return ConstructorPassportElementErrorSourceFiles
}

// Contains the description of an error in a Telegram Passport element
type PassportElementError struct {
	meta
	// Type of the Telegram Passport element which has the error
	Type PassportElementType `json:"type"`
	// Error message
	Message string `json:"message"`
	// Error source
	Source PassportElementErrorSource `json:"source"`
}

func (entity *PassportElementError) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementError

	return json.Marshal((*stub)(entity))
}

func (*PassportElementError) GetType() string {
	return TypePassportElementError
}

func (*PassportElementError) GetConstructor() string {
	return ConstructorPassportElementError
}

func (passportElementError *PassportElementError) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type    json.RawMessage `json:"type"`
		Message string          `json:"message"`
		Source  json.RawMessage `json:"source"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	passportElementError.Message = tmp.Message

	fieldType, _ := UnmarshalPassportElementType(tmp.Type)
	passportElementError.Type = fieldType

	fieldSource, _ := UnmarshalPassportElementErrorSource(tmp.Source)
	passportElementError.Source = fieldSource

	return nil
}

// Contains information about a Telegram Passport element that was requested by a service
type PassportSuitableElement struct {
	meta
	// Type of the element
	Type PassportElementType `json:"type"`
	// True, if a selfie is required with the identity document
	IsSelfieRequired bool `json:"is_selfie_required"`
	// True, if a certified English translation is required with the document
	IsTranslationRequired bool `json:"is_translation_required"`
	// True, if personal details must include the user's name in the language of their country of residence
	IsNativeNameRequired bool `json:"is_native_name_required"`
}

func (entity *PassportSuitableElement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportSuitableElement

	return json.Marshal((*stub)(entity))
}

func (*PassportSuitableElement) GetType() string {
	return TypePassportSuitableElement
}

func (*PassportSuitableElement) GetConstructor() string {
	return ConstructorPassportSuitableElement
}

func (passportSuitableElement *PassportSuitableElement) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type                  json.RawMessage `json:"type"`
		IsSelfieRequired      bool            `json:"is_selfie_required"`
		IsTranslationRequired bool            `json:"is_translation_required"`
		IsNativeNameRequired  bool            `json:"is_native_name_required"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	passportSuitableElement.IsSelfieRequired = tmp.IsSelfieRequired
	passportSuitableElement.IsTranslationRequired = tmp.IsTranslationRequired
	passportSuitableElement.IsNativeNameRequired = tmp.IsNativeNameRequired

	fieldType, _ := UnmarshalPassportElementType(tmp.Type)
	passportSuitableElement.Type = fieldType

	return nil
}

// Contains a description of the required Telegram Passport element that was requested by a service
type PassportRequiredElement struct {
	meta
	// List of Telegram Passport elements any of which is enough to provide
	SuitableElements []*PassportSuitableElement `json:"suitable_elements"`
}

func (entity *PassportRequiredElement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportRequiredElement

	return json.Marshal((*stub)(entity))
}

func (*PassportRequiredElement) GetType() string {
	return TypePassportRequiredElement
}

func (*PassportRequiredElement) GetConstructor() string {
	return ConstructorPassportRequiredElement
}

// Contains information about a Telegram Passport authorization form that was requested
type PassportAuthorizationForm struct {
	meta
	// Unique identifier of the authorization form
	Id int32 `json:"id"`
	// Telegram Passport elements that must be provided to complete the form
	RequiredElements []*PassportRequiredElement `json:"required_elements"`
	// URL for the privacy policy of the service; may be empty
	PrivacyPolicyUrl string `json:"privacy_policy_url"`
}

func (entity *PassportAuthorizationForm) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportAuthorizationForm

	return json.Marshal((*stub)(entity))
}

func (*PassportAuthorizationForm) GetType() string {
	return TypePassportAuthorizationForm
}

func (*PassportAuthorizationForm) GetConstructor() string {
	return ConstructorPassportAuthorizationForm
}

// Contains information about a Telegram Passport elements and corresponding errors
type PassportElementsWithErrors struct {
	meta
	// Telegram Passport elements
	Elements []PassportElement `json:"elements"`
	// Errors in the elements that are already available
	Errors []*PassportElementError `json:"errors"`
}

func (entity *PassportElementsWithErrors) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PassportElementsWithErrors

	return json.Marshal((*stub)(entity))
}

func (*PassportElementsWithErrors) GetType() string {
	return TypePassportElementsWithErrors
}

func (*PassportElementsWithErrors) GetConstructor() string {
	return ConstructorPassportElementsWithErrors
}

func (passportElementsWithErrors *PassportElementsWithErrors) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Elements []json.RawMessage       `json:"elements"`
		Errors   []*PassportElementError `json:"errors"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	passportElementsWithErrors.Errors = tmp.Errors

	fieldElements, _ := UnmarshalListOfPassportElement(tmp.Elements)
	passportElementsWithErrors.Elements = fieldElements

	return nil
}

// Contains encrypted Telegram Passport data credentials
type EncryptedCredentials struct {
	meta
	// The encrypted credentials
	Data []byte `json:"data"`
	// The decrypted data hash
	Hash []byte `json:"hash"`
	// Secret for data decryption, encrypted with the service's public key
	Secret []byte `json:"secret"`
}

func (entity *EncryptedCredentials) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EncryptedCredentials

	return json.Marshal((*stub)(entity))
}

func (*EncryptedCredentials) GetType() string {
	return TypeEncryptedCredentials
}

func (*EncryptedCredentials) GetConstructor() string {
	return ConstructorEncryptedCredentials
}

// Contains information about an encrypted Telegram Passport element; for bots only
type EncryptedPassportElement struct {
	meta
	// Type of Telegram Passport element
	Type PassportElementType `json:"type"`
	// Encrypted JSON-encoded data about the user
	Data []byte `json:"data"`
	// The front side of an identity document
	FrontSide *DatedFile `json:"front_side"`
	// The reverse side of an identity document; may be null
	ReverseSide *DatedFile `json:"reverse_side"`
	// Selfie with the document; may be null
	Selfie *DatedFile `json:"selfie"`
	// List of files containing a certified English translation of the document
	Translation []*DatedFile `json:"translation"`
	// List of attached files
	Files []*DatedFile `json:"files"`
	// Unencrypted data, phone number or email address
	Value string `json:"value"`
	// Hash of the entire element
	Hash string `json:"hash"`
}

func (entity *EncryptedPassportElement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EncryptedPassportElement

	return json.Marshal((*stub)(entity))
}

func (*EncryptedPassportElement) GetType() string {
	return TypeEncryptedPassportElement
}

func (*EncryptedPassportElement) GetConstructor() string {
	return ConstructorEncryptedPassportElement
}

func (encryptedPassportElement *EncryptedPassportElement) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type        json.RawMessage `json:"type"`
		Data        []byte          `json:"data"`
		FrontSide   *DatedFile      `json:"front_side"`
		ReverseSide *DatedFile      `json:"reverse_side"`
		Selfie      *DatedFile      `json:"selfie"`
		Translation []*DatedFile    `json:"translation"`
		Files       []*DatedFile    `json:"files"`
		Value       string          `json:"value"`
		Hash        string          `json:"hash"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	encryptedPassportElement.Data = tmp.Data
	encryptedPassportElement.FrontSide = tmp.FrontSide
	encryptedPassportElement.ReverseSide = tmp.ReverseSide
	encryptedPassportElement.Selfie = tmp.Selfie
	encryptedPassportElement.Translation = tmp.Translation
	encryptedPassportElement.Files = tmp.Files
	encryptedPassportElement.Value = tmp.Value
	encryptedPassportElement.Hash = tmp.Hash

	fieldType, _ := UnmarshalPassportElementType(tmp.Type)
	encryptedPassportElement.Type = fieldType

	return nil
}

// The element contains an error in an unspecified place. The error will be considered resolved when new data is added
type InputPassportElementErrorSourceUnspecified struct {
	meta
	// Current hash of the entire element
	ElementHash []byte `json:"element_hash"`
}

func (entity *InputPassportElementErrorSourceUnspecified) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementErrorSourceUnspecified

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementErrorSourceUnspecified) GetType() string {
	return TypeInputPassportElementErrorSource
}

func (*InputPassportElementErrorSourceUnspecified) GetConstructor() string {
	return ConstructorInputPassportElementErrorSourceUnspecified
}

func (*InputPassportElementErrorSourceUnspecified) InputPassportElementErrorSourceConstructor() string {
	return ConstructorInputPassportElementErrorSourceUnspecified
}

// A data field contains an error. The error is considered resolved when the field's value changes
type InputPassportElementErrorSourceDataField struct {
	meta
	// Field name
	FieldName string `json:"field_name"`
	// Current data hash
	DataHash []byte `json:"data_hash"`
}

func (entity *InputPassportElementErrorSourceDataField) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementErrorSourceDataField

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementErrorSourceDataField) GetType() string {
	return TypeInputPassportElementErrorSource
}

func (*InputPassportElementErrorSourceDataField) GetConstructor() string {
	return ConstructorInputPassportElementErrorSourceDataField
}

func (*InputPassportElementErrorSourceDataField) InputPassportElementErrorSourceConstructor() string {
	return ConstructorInputPassportElementErrorSourceDataField
}

// The front side of the document contains an error. The error is considered resolved when the file with the front side of the document changes
type InputPassportElementErrorSourceFrontSide struct {
	meta
	// Current hash of the file containing the front side
	FileHash []byte `json:"file_hash"`
}

func (entity *InputPassportElementErrorSourceFrontSide) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementErrorSourceFrontSide

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementErrorSourceFrontSide) GetType() string {
	return TypeInputPassportElementErrorSource
}

func (*InputPassportElementErrorSourceFrontSide) GetConstructor() string {
	return ConstructorInputPassportElementErrorSourceFrontSide
}

func (*InputPassportElementErrorSourceFrontSide) InputPassportElementErrorSourceConstructor() string {
	return ConstructorInputPassportElementErrorSourceFrontSide
}

// The reverse side of the document contains an error. The error is considered resolved when the file with the reverse side of the document changes
type InputPassportElementErrorSourceReverseSide struct {
	meta
	// Current hash of the file containing the reverse side
	FileHash []byte `json:"file_hash"`
}

func (entity *InputPassportElementErrorSourceReverseSide) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementErrorSourceReverseSide

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementErrorSourceReverseSide) GetType() string {
	return TypeInputPassportElementErrorSource
}

func (*InputPassportElementErrorSourceReverseSide) GetConstructor() string {
	return ConstructorInputPassportElementErrorSourceReverseSide
}

func (*InputPassportElementErrorSourceReverseSide) InputPassportElementErrorSourceConstructor() string {
	return ConstructorInputPassportElementErrorSourceReverseSide
}

// The selfie contains an error. The error is considered resolved when the file with the selfie changes
type InputPassportElementErrorSourceSelfie struct {
	meta
	// Current hash of the file containing the selfie
	FileHash []byte `json:"file_hash"`
}

func (entity *InputPassportElementErrorSourceSelfie) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementErrorSourceSelfie

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementErrorSourceSelfie) GetType() string {
	return TypeInputPassportElementErrorSource
}

func (*InputPassportElementErrorSourceSelfie) GetConstructor() string {
	return ConstructorInputPassportElementErrorSourceSelfie
}

func (*InputPassportElementErrorSourceSelfie) InputPassportElementErrorSourceConstructor() string {
	return ConstructorInputPassportElementErrorSourceSelfie
}

// One of the files containing the translation of the document contains an error. The error is considered resolved when the file with the translation changes
type InputPassportElementErrorSourceTranslationFile struct {
	meta
	// Current hash of the file containing the translation
	FileHash []byte `json:"file_hash"`
}

func (entity *InputPassportElementErrorSourceTranslationFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementErrorSourceTranslationFile

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementErrorSourceTranslationFile) GetType() string {
	return TypeInputPassportElementErrorSource
}

func (*InputPassportElementErrorSourceTranslationFile) GetConstructor() string {
	return ConstructorInputPassportElementErrorSourceTranslationFile
}

func (*InputPassportElementErrorSourceTranslationFile) InputPassportElementErrorSourceConstructor() string {
	return ConstructorInputPassportElementErrorSourceTranslationFile
}

// The translation of the document contains an error. The error is considered resolved when the list of files changes
type InputPassportElementErrorSourceTranslationFiles struct {
	meta
	// Current hashes of all files with the translation
	FileHashes [][]byte `json:"file_hashes"`
}

func (entity *InputPassportElementErrorSourceTranslationFiles) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementErrorSourceTranslationFiles

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementErrorSourceTranslationFiles) GetType() string {
	return TypeInputPassportElementErrorSource
}

func (*InputPassportElementErrorSourceTranslationFiles) GetConstructor() string {
	return ConstructorInputPassportElementErrorSourceTranslationFiles
}

func (*InputPassportElementErrorSourceTranslationFiles) InputPassportElementErrorSourceConstructor() string {
	return ConstructorInputPassportElementErrorSourceTranslationFiles
}

// The file contains an error. The error is considered resolved when the file changes
type InputPassportElementErrorSourceFile struct {
	meta
	// Current hash of the file which has the error
	FileHash []byte `json:"file_hash"`
}

func (entity *InputPassportElementErrorSourceFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementErrorSourceFile

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementErrorSourceFile) GetType() string {
	return TypeInputPassportElementErrorSource
}

func (*InputPassportElementErrorSourceFile) GetConstructor() string {
	return ConstructorInputPassportElementErrorSourceFile
}

func (*InputPassportElementErrorSourceFile) InputPassportElementErrorSourceConstructor() string {
	return ConstructorInputPassportElementErrorSourceFile
}

// The list of attached files contains an error. The error is considered resolved when the file list changes
type InputPassportElementErrorSourceFiles struct {
	meta
	// Current hashes of all attached files
	FileHashes [][]byte `json:"file_hashes"`
}

func (entity *InputPassportElementErrorSourceFiles) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementErrorSourceFiles

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementErrorSourceFiles) GetType() string {
	return TypeInputPassportElementErrorSource
}

func (*InputPassportElementErrorSourceFiles) GetConstructor() string {
	return ConstructorInputPassportElementErrorSourceFiles
}

func (*InputPassportElementErrorSourceFiles) InputPassportElementErrorSourceConstructor() string {
	return ConstructorInputPassportElementErrorSourceFiles
}

// Contains the description of an error in a Telegram Passport element; for bots only
type InputPassportElementError struct {
	meta
	// Type of Telegram Passport element that has the error
	Type PassportElementType `json:"type"`
	// Error message
	Message string `json:"message"`
	// Error source
	Source InputPassportElementErrorSource `json:"source"`
}

func (entity *InputPassportElementError) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPassportElementError

	return json.Marshal((*stub)(entity))
}

func (*InputPassportElementError) GetType() string {
	return TypeInputPassportElementError
}

func (*InputPassportElementError) GetConstructor() string {
	return ConstructorInputPassportElementError
}

func (inputPassportElementError *InputPassportElementError) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type    json.RawMessage `json:"type"`
		Message string          `json:"message"`
		Source  json.RawMessage `json:"source"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputPassportElementError.Message = tmp.Message

	fieldType, _ := UnmarshalPassportElementType(tmp.Type)
	inputPassportElementError.Type = fieldType

	fieldSource, _ := UnmarshalInputPassportElementErrorSource(tmp.Source)
	inputPassportElementError.Source = fieldSource

	return nil
}

// A text message
type MessageText struct {
	meta
	// Text of the message
	Text *FormattedText `json:"text"`
	// A link preview attached to the message; may be null
	LinkPreview *LinkPreview `json:"link_preview"`
	// Options which were used for generation of the link preview; may be null if default options were used
	LinkPreviewOptions *LinkPreviewOptions `json:"link_preview_options"`
}

func (entity *MessageText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageText

	return json.Marshal((*stub)(entity))
}

func (*MessageText) GetType() string {
	return TypeMessageContent
}

func (*MessageText) GetConstructor() string {
	return ConstructorMessageText
}

func (*MessageText) MessageContentConstructor() string {
	return ConstructorMessageText
}

// An animation message (GIF-style).
type MessageAnimation struct {
	meta
	// The animation description
	Animation *Animation `json:"animation"`
	// Animation caption
	Caption *FormattedText `json:"caption"`
	// True, if the caption must be shown above the animation; otherwise, the caption must be shown below the animation
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
	// True, if the animation preview must be covered by a spoiler animation
	HasSpoiler bool `json:"has_spoiler"`
	// True, if the animation thumbnail must be blurred and the animation must be shown only while tapped
	IsSecret bool `json:"is_secret"`
}

func (entity *MessageAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageAnimation

	return json.Marshal((*stub)(entity))
}

func (*MessageAnimation) GetType() string {
	return TypeMessageContent
}

func (*MessageAnimation) GetConstructor() string {
	return ConstructorMessageAnimation
}

func (*MessageAnimation) MessageContentConstructor() string {
	return ConstructorMessageAnimation
}

// An audio message
type MessageAudio struct {
	meta
	// The audio description
	Audio *Audio `json:"audio"`
	// Audio caption
	Caption *FormattedText `json:"caption"`
}

func (entity *MessageAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageAudio

	return json.Marshal((*stub)(entity))
}

func (*MessageAudio) GetType() string {
	return TypeMessageContent
}

func (*MessageAudio) GetConstructor() string {
	return ConstructorMessageAudio
}

func (*MessageAudio) MessageContentConstructor() string {
	return ConstructorMessageAudio
}

// A document message (general file)
type MessageDocument struct {
	meta
	// The document description
	Document *Document `json:"document"`
	// Document caption
	Caption *FormattedText `json:"caption"`
}

func (entity *MessageDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageDocument

	return json.Marshal((*stub)(entity))
}

func (*MessageDocument) GetType() string {
	return TypeMessageContent
}

func (*MessageDocument) GetConstructor() string {
	return ConstructorMessageDocument
}

func (*MessageDocument) MessageContentConstructor() string {
	return ConstructorMessageDocument
}

// A message with paid media
type MessagePaidMedia struct {
	meta
	// Number of Telegram Stars needed to buy access to the media in the message
	StarCount int64 `json:"star_count"`
	// Information about the media
	Media []PaidMedia `json:"media"`
	// Media caption
	Caption *FormattedText `json:"caption"`
	// True, if the caption must be shown above the media; otherwise, the caption must be shown below the media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
}

func (entity *MessagePaidMedia) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePaidMedia

	return json.Marshal((*stub)(entity))
}

func (*MessagePaidMedia) GetType() string {
	return TypeMessageContent
}

func (*MessagePaidMedia) GetConstructor() string {
	return ConstructorMessagePaidMedia
}

func (*MessagePaidMedia) MessageContentConstructor() string {
	return ConstructorMessagePaidMedia
}

func (messagePaidMedia *MessagePaidMedia) UnmarshalJSON(data []byte) error {
	var tmp struct {
		StarCount             int64             `json:"star_count"`
		Media                 []json.RawMessage `json:"media"`
		Caption               *FormattedText    `json:"caption"`
		ShowCaptionAboveMedia bool              `json:"show_caption_above_media"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messagePaidMedia.StarCount = tmp.StarCount
	messagePaidMedia.Caption = tmp.Caption
	messagePaidMedia.ShowCaptionAboveMedia = tmp.ShowCaptionAboveMedia

	fieldMedia, _ := UnmarshalListOfPaidMedia(tmp.Media)
	messagePaidMedia.Media = fieldMedia

	return nil
}

// A photo message
type MessagePhoto struct {
	meta
	// The photo
	Photo *Photo `json:"photo"`
	// Photo caption
	Caption *FormattedText `json:"caption"`
	// True, if the caption must be shown above the photo; otherwise, the caption must be shown below the photo
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
	// True, if the photo preview must be covered by a spoiler animation
	HasSpoiler bool `json:"has_spoiler"`
	// True, if the photo must be blurred and must be shown only while tapped
	IsSecret bool `json:"is_secret"`
}

func (entity *MessagePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePhoto

	return json.Marshal((*stub)(entity))
}

func (*MessagePhoto) GetType() string {
	return TypeMessageContent
}

func (*MessagePhoto) GetConstructor() string {
	return ConstructorMessagePhoto
}

func (*MessagePhoto) MessageContentConstructor() string {
	return ConstructorMessagePhoto
}

// A sticker message
type MessageSticker struct {
	meta
	// The sticker description
	Sticker *Sticker `json:"sticker"`
	// True, if premium animation of the sticker must be played
	IsPremium bool `json:"is_premium"`
}

func (entity *MessageSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSticker

	return json.Marshal((*stub)(entity))
}

func (*MessageSticker) GetType() string {
	return TypeMessageContent
}

func (*MessageSticker) GetConstructor() string {
	return ConstructorMessageSticker
}

func (*MessageSticker) MessageContentConstructor() string {
	return ConstructorMessageSticker
}

// A video message
type MessageVideo struct {
	meta
	// The video description
	Video *Video `json:"video"`
	// Alternative qualities of the video
	AlternativeVideos []*AlternativeVideo `json:"alternative_videos"`
	// Video caption
	Caption *FormattedText `json:"caption"`
	// True, if the caption must be shown above the video; otherwise, the caption must be shown below the video
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
	// True, if the video preview must be covered by a spoiler animation
	HasSpoiler bool `json:"has_spoiler"`
	// True, if the video thumbnail must be blurred and the video must be shown only while tapped
	IsSecret bool `json:"is_secret"`
}

func (entity *MessageVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageVideo

	return json.Marshal((*stub)(entity))
}

func (*MessageVideo) GetType() string {
	return TypeMessageContent
}

func (*MessageVideo) GetConstructor() string {
	return ConstructorMessageVideo
}

func (*MessageVideo) MessageContentConstructor() string {
	return ConstructorMessageVideo
}

// A video note message
type MessageVideoNote struct {
	meta
	// The video note description
	VideoNote *VideoNote `json:"video_note"`
	// True, if at least one of the recipients has viewed the video note
	IsViewed bool `json:"is_viewed"`
	// True, if the video note thumbnail must be blurred and the video note must be shown only while tapped
	IsSecret bool `json:"is_secret"`
}

func (entity *MessageVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageVideoNote

	return json.Marshal((*stub)(entity))
}

func (*MessageVideoNote) GetType() string {
	return TypeMessageContent
}

func (*MessageVideoNote) GetConstructor() string {
	return ConstructorMessageVideoNote
}

func (*MessageVideoNote) MessageContentConstructor() string {
	return ConstructorMessageVideoNote
}

// A voice note message
type MessageVoiceNote struct {
	meta
	// The voice note description
	VoiceNote *VoiceNote `json:"voice_note"`
	// Voice note caption
	Caption *FormattedText `json:"caption"`
	// True, if at least one of the recipients has listened to the voice note
	IsListened bool `json:"is_listened"`
}

func (entity *MessageVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*MessageVoiceNote) GetType() string {
	return TypeMessageContent
}

func (*MessageVoiceNote) GetConstructor() string {
	return ConstructorMessageVoiceNote
}

func (*MessageVoiceNote) MessageContentConstructor() string {
	return ConstructorMessageVoiceNote
}

// A self-destructed photo message
type MessageExpiredPhoto struct {
	meta
}

func (entity *MessageExpiredPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageExpiredPhoto

	return json.Marshal((*stub)(entity))
}

func (*MessageExpiredPhoto) GetType() string {
	return TypeMessageContent
}

func (*MessageExpiredPhoto) GetConstructor() string {
	return ConstructorMessageExpiredPhoto
}

func (*MessageExpiredPhoto) MessageContentConstructor() string {
	return ConstructorMessageExpiredPhoto
}

// A self-destructed video message
type MessageExpiredVideo struct {
	meta
}

func (entity *MessageExpiredVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageExpiredVideo

	return json.Marshal((*stub)(entity))
}

func (*MessageExpiredVideo) GetType() string {
	return TypeMessageContent
}

func (*MessageExpiredVideo) GetConstructor() string {
	return ConstructorMessageExpiredVideo
}

func (*MessageExpiredVideo) MessageContentConstructor() string {
	return ConstructorMessageExpiredVideo
}

// A self-destructed video note message
type MessageExpiredVideoNote struct {
	meta
}

func (entity *MessageExpiredVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageExpiredVideoNote

	return json.Marshal((*stub)(entity))
}

func (*MessageExpiredVideoNote) GetType() string {
	return TypeMessageContent
}

func (*MessageExpiredVideoNote) GetConstructor() string {
	return ConstructorMessageExpiredVideoNote
}

func (*MessageExpiredVideoNote) MessageContentConstructor() string {
	return ConstructorMessageExpiredVideoNote
}

// A self-destructed voice note message
type MessageExpiredVoiceNote struct {
	meta
}

func (entity *MessageExpiredVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageExpiredVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*MessageExpiredVoiceNote) GetType() string {
	return TypeMessageContent
}

func (*MessageExpiredVoiceNote) GetConstructor() string {
	return ConstructorMessageExpiredVoiceNote
}

func (*MessageExpiredVoiceNote) MessageContentConstructor() string {
	return ConstructorMessageExpiredVoiceNote
}

// A message with a location
type MessageLocation struct {
	meta
	// The location description
	Location *Location `json:"location"`
	// Time relative to the message send date, for which the location can be updated, in seconds; if 0x7FFFFFFF, then location can be updated forever
	LivePeriod int32 `json:"live_period"`
	// Left time for which the location can be updated, in seconds. If 0, then the location can't be updated anymore. The update updateMessageContent is not sent when this field changes
	ExpiresIn int32 `json:"expires_in"`
	// For live locations, a direction in which the location moves, in degrees; 1-360. If 0 the direction is unknown
	Heading int32 `json:"heading"`
	// For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000). 0 if the notification is disabled. Available only to the message sender
	ProximityAlertRadius int32 `json:"proximity_alert_radius"`
}

func (entity *MessageLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageLocation

	return json.Marshal((*stub)(entity))
}

func (*MessageLocation) GetType() string {
	return TypeMessageContent
}

func (*MessageLocation) GetConstructor() string {
	return ConstructorMessageLocation
}

func (*MessageLocation) MessageContentConstructor() string {
	return ConstructorMessageLocation
}

// A message with information about a venue
type MessageVenue struct {
	meta
	// The venue description
	Venue *Venue `json:"venue"`
}

func (entity *MessageVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageVenue

	return json.Marshal((*stub)(entity))
}

func (*MessageVenue) GetType() string {
	return TypeMessageContent
}

func (*MessageVenue) GetConstructor() string {
	return ConstructorMessageVenue
}

func (*MessageVenue) MessageContentConstructor() string {
	return ConstructorMessageVenue
}

// A message with a user contact
type MessageContact struct {
	meta
	// The contact description
	Contact *Contact `json:"contact"`
}

func (entity *MessageContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageContact

	return json.Marshal((*stub)(entity))
}

func (*MessageContact) GetType() string {
	return TypeMessageContent
}

func (*MessageContact) GetConstructor() string {
	return ConstructorMessageContact
}

func (*MessageContact) MessageContentConstructor() string {
	return ConstructorMessageContact
}

// A message with an animated emoji
type MessageAnimatedEmoji struct {
	meta
	// The animated emoji
	AnimatedEmoji *AnimatedEmoji `json:"animated_emoji"`
	// The corresponding emoji
	Emoji string `json:"emoji"`
}

func (entity *MessageAnimatedEmoji) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageAnimatedEmoji

	return json.Marshal((*stub)(entity))
}

func (*MessageAnimatedEmoji) GetType() string {
	return TypeMessageContent
}

func (*MessageAnimatedEmoji) GetConstructor() string {
	return ConstructorMessageAnimatedEmoji
}

func (*MessageAnimatedEmoji) MessageContentConstructor() string {
	return ConstructorMessageAnimatedEmoji
}

// A dice message. The dice value is randomly generated by the server
type MessageDice struct {
	meta
	// The animated stickers with the initial dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known
	InitialState DiceStickers `json:"initial_state"`
	// The animated stickers with the final dice animation; may be null if unknown. The update updateMessageContent will be sent when the sticker became known
	FinalState DiceStickers `json:"final_state"`
	// Emoji on which the dice throw animation is based
	Emoji string `json:"emoji"`
	// The dice value. If the value is 0, the dice don't have final state yet
	Value int32 `json:"value"`
	// Number of frame after which a success animation like a shower of confetti needs to be shown on updateMessageSendSucceeded
	SuccessAnimationFrameNumber int32 `json:"success_animation_frame_number"`
}

func (entity *MessageDice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageDice

	return json.Marshal((*stub)(entity))
}

func (*MessageDice) GetType() string {
	return TypeMessageContent
}

func (*MessageDice) GetConstructor() string {
	return ConstructorMessageDice
}

func (*MessageDice) MessageContentConstructor() string {
	return ConstructorMessageDice
}

func (messageDice *MessageDice) UnmarshalJSON(data []byte) error {
	var tmp struct {
		InitialState                json.RawMessage `json:"initial_state"`
		FinalState                  json.RawMessage `json:"final_state"`
		Emoji                       string          `json:"emoji"`
		Value                       int32           `json:"value"`
		SuccessAnimationFrameNumber int32           `json:"success_animation_frame_number"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageDice.Emoji = tmp.Emoji
	messageDice.Value = tmp.Value
	messageDice.SuccessAnimationFrameNumber = tmp.SuccessAnimationFrameNumber

	fieldInitialState, _ := UnmarshalDiceStickers(tmp.InitialState)
	messageDice.InitialState = fieldInitialState

	fieldFinalState, _ := UnmarshalDiceStickers(tmp.FinalState)
	messageDice.FinalState = fieldFinalState

	return nil
}

// A message with a game
type MessageGame struct {
	meta
	// The game description
	Game *Game `json:"game"`
}

func (entity *MessageGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageGame

	return json.Marshal((*stub)(entity))
}

func (*MessageGame) GetType() string {
	return TypeMessageContent
}

func (*MessageGame) GetConstructor() string {
	return ConstructorMessageGame
}

func (*MessageGame) MessageContentConstructor() string {
	return ConstructorMessageGame
}

// A message with a poll
type MessagePoll struct {
	meta
	// The poll description
	Poll *Poll `json:"poll"`
}

func (entity *MessagePoll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePoll

	return json.Marshal((*stub)(entity))
}

func (*MessagePoll) GetType() string {
	return TypeMessageContent
}

func (*MessagePoll) GetConstructor() string {
	return ConstructorMessagePoll
}

func (*MessagePoll) MessageContentConstructor() string {
	return ConstructorMessagePoll
}

// A message with a forwarded story
type MessageStory struct {
	meta
	// Identifier of the chat that posted the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Story identifier
	StoryId int32 `json:"story_id"`
	// True, if the story was automatically forwarded because of a mention of the user
	ViaMention bool `json:"via_mention"`
}

func (entity *MessageStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageStory

	return json.Marshal((*stub)(entity))
}

func (*MessageStory) GetType() string {
	return TypeMessageContent
}

func (*MessageStory) GetConstructor() string {
	return ConstructorMessageStory
}

func (*MessageStory) MessageContentConstructor() string {
	return ConstructorMessageStory
}

// A message with an invoice from a bot. Use getInternalLink with internalLinkTypeBotStart to share the invoice
type MessageInvoice struct {
	meta
	// Information about the product
	ProductInfo *ProductInfo `json:"product_info"`
	// Currency for the product price
	Currency string `json:"currency"`
	// Product total price in the smallest units of the currency
	TotalAmount int64 `json:"total_amount"`
	// Unique invoice bot start_parameter to be passed to getInternalLink
	StartParameter string `json:"start_parameter"`
	// True, if the invoice is a test invoice
	IsTest bool `json:"is_test"`
	// True, if the shipping address must be specified
	NeedShippingAddress bool `json:"need_shipping_address"`
	// The identifier of the message with the receipt, after the product has been purchased
	ReceiptMessageId int64 `json:"receipt_message_id"`
	// Extended media attached to the invoice; may be null if none
	PaidMedia PaidMedia `json:"paid_media"`
	// Extended media caption; may be null if none
	PaidMediaCaption *FormattedText `json:"paid_media_caption"`
}

func (entity *MessageInvoice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageInvoice

	return json.Marshal((*stub)(entity))
}

func (*MessageInvoice) GetType() string {
	return TypeMessageContent
}

func (*MessageInvoice) GetConstructor() string {
	return ConstructorMessageInvoice
}

func (*MessageInvoice) MessageContentConstructor() string {
	return ConstructorMessageInvoice
}

func (messageInvoice *MessageInvoice) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ProductInfo         *ProductInfo    `json:"product_info"`
		Currency            string          `json:"currency"`
		TotalAmount         int64           `json:"total_amount"`
		StartParameter      string          `json:"start_parameter"`
		IsTest              bool            `json:"is_test"`
		NeedShippingAddress bool            `json:"need_shipping_address"`
		ReceiptMessageId    int64           `json:"receipt_message_id"`
		PaidMedia           json.RawMessage `json:"paid_media"`
		PaidMediaCaption    *FormattedText  `json:"paid_media_caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageInvoice.ProductInfo = tmp.ProductInfo
	messageInvoice.Currency = tmp.Currency
	messageInvoice.TotalAmount = tmp.TotalAmount
	messageInvoice.StartParameter = tmp.StartParameter
	messageInvoice.IsTest = tmp.IsTest
	messageInvoice.NeedShippingAddress = tmp.NeedShippingAddress
	messageInvoice.ReceiptMessageId = tmp.ReceiptMessageId
	messageInvoice.PaidMediaCaption = tmp.PaidMediaCaption

	fieldPaidMedia, _ := UnmarshalPaidMedia(tmp.PaidMedia)
	messageInvoice.PaidMedia = fieldPaidMedia

	return nil
}

// A message with information about an ended call
type MessageCall struct {
	meta
	// True, if the call was a video call
	IsVideo bool `json:"is_video"`
	// Reason why the call was discarded
	DiscardReason CallDiscardReason `json:"discard_reason"`
	// Call duration, in seconds
	Duration int32 `json:"duration"`
}

func (entity *MessageCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageCall

	return json.Marshal((*stub)(entity))
}

func (*MessageCall) GetType() string {
	return TypeMessageContent
}

func (*MessageCall) GetConstructor() string {
	return ConstructorMessageCall
}

func (*MessageCall) MessageContentConstructor() string {
	return ConstructorMessageCall
}

func (messageCall *MessageCall) UnmarshalJSON(data []byte) error {
	var tmp struct {
		IsVideo       bool            `json:"is_video"`
		DiscardReason json.RawMessage `json:"discard_reason"`
		Duration      int32           `json:"duration"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageCall.IsVideo = tmp.IsVideo
	messageCall.Duration = tmp.Duration

	fieldDiscardReason, _ := UnmarshalCallDiscardReason(tmp.DiscardReason)
	messageCall.DiscardReason = fieldDiscardReason

	return nil
}

// A new video chat was scheduled
type MessageVideoChatScheduled struct {
	meta
	// Identifier of the video chat. The video chat can be received through the method getGroupCall
	GroupCallId int32 `json:"group_call_id"`
	// Point in time (Unix timestamp) when the group call is expected to be started by an administrator
	StartDate int32 `json:"start_date"`
}

func (entity *MessageVideoChatScheduled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageVideoChatScheduled

	return json.Marshal((*stub)(entity))
}

func (*MessageVideoChatScheduled) GetType() string {
	return TypeMessageContent
}

func (*MessageVideoChatScheduled) GetConstructor() string {
	return ConstructorMessageVideoChatScheduled
}

func (*MessageVideoChatScheduled) MessageContentConstructor() string {
	return ConstructorMessageVideoChatScheduled
}

// A newly created video chat
type MessageVideoChatStarted struct {
	meta
	// Identifier of the video chat. The video chat can be received through the method getGroupCall
	GroupCallId int32 `json:"group_call_id"`
}

func (entity *MessageVideoChatStarted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageVideoChatStarted

	return json.Marshal((*stub)(entity))
}

func (*MessageVideoChatStarted) GetType() string {
	return TypeMessageContent
}

func (*MessageVideoChatStarted) GetConstructor() string {
	return ConstructorMessageVideoChatStarted
}

func (*MessageVideoChatStarted) MessageContentConstructor() string {
	return ConstructorMessageVideoChatStarted
}

// A message with information about an ended video chat
type MessageVideoChatEnded struct {
	meta
	// Call duration, in seconds
	Duration int32 `json:"duration"`
}

func (entity *MessageVideoChatEnded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageVideoChatEnded

	return json.Marshal((*stub)(entity))
}

func (*MessageVideoChatEnded) GetType() string {
	return TypeMessageContent
}

func (*MessageVideoChatEnded) GetConstructor() string {
	return ConstructorMessageVideoChatEnded
}

func (*MessageVideoChatEnded) MessageContentConstructor() string {
	return ConstructorMessageVideoChatEnded
}

// A message with information about an invitation to a video chat
type MessageInviteVideoChatParticipants struct {
	meta
	// Identifier of the video chat. The video chat can be received through the method getGroupCall
	GroupCallId int32 `json:"group_call_id"`
	// Invited user identifiers
	UserIds []int64 `json:"user_ids"`
}

func (entity *MessageInviteVideoChatParticipants) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageInviteVideoChatParticipants

	return json.Marshal((*stub)(entity))
}

func (*MessageInviteVideoChatParticipants) GetType() string {
	return TypeMessageContent
}

func (*MessageInviteVideoChatParticipants) GetConstructor() string {
	return ConstructorMessageInviteVideoChatParticipants
}

func (*MessageInviteVideoChatParticipants) MessageContentConstructor() string {
	return ConstructorMessageInviteVideoChatParticipants
}

// A newly created basic group
type MessageBasicGroupChatCreate struct {
	meta
	// Title of the basic group
	Title string `json:"title"`
	// User identifiers of members in the basic group
	MemberUserIds []int64 `json:"member_user_ids"`
}

func (entity *MessageBasicGroupChatCreate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageBasicGroupChatCreate

	return json.Marshal((*stub)(entity))
}

func (*MessageBasicGroupChatCreate) GetType() string {
	return TypeMessageContent
}

func (*MessageBasicGroupChatCreate) GetConstructor() string {
	return ConstructorMessageBasicGroupChatCreate
}

func (*MessageBasicGroupChatCreate) MessageContentConstructor() string {
	return ConstructorMessageBasicGroupChatCreate
}

// A newly created supergroup or channel
type MessageSupergroupChatCreate struct {
	meta
	// Title of the supergroup or channel
	Title string `json:"title"`
}

func (entity *MessageSupergroupChatCreate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSupergroupChatCreate

	return json.Marshal((*stub)(entity))
}

func (*MessageSupergroupChatCreate) GetType() string {
	return TypeMessageContent
}

func (*MessageSupergroupChatCreate) GetConstructor() string {
	return ConstructorMessageSupergroupChatCreate
}

func (*MessageSupergroupChatCreate) MessageContentConstructor() string {
	return ConstructorMessageSupergroupChatCreate
}

// An updated chat title
type MessageChatChangeTitle struct {
	meta
	// New chat title
	Title string `json:"title"`
}

func (entity *MessageChatChangeTitle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatChangeTitle

	return json.Marshal((*stub)(entity))
}

func (*MessageChatChangeTitle) GetType() string {
	return TypeMessageContent
}

func (*MessageChatChangeTitle) GetConstructor() string {
	return ConstructorMessageChatChangeTitle
}

func (*MessageChatChangeTitle) MessageContentConstructor() string {
	return ConstructorMessageChatChangeTitle
}

// An updated chat photo
type MessageChatChangePhoto struct {
	meta
	// New chat photo
	Photo *ChatPhoto `json:"photo"`
}

func (entity *MessageChatChangePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatChangePhoto

	return json.Marshal((*stub)(entity))
}

func (*MessageChatChangePhoto) GetType() string {
	return TypeMessageContent
}

func (*MessageChatChangePhoto) GetConstructor() string {
	return ConstructorMessageChatChangePhoto
}

func (*MessageChatChangePhoto) MessageContentConstructor() string {
	return ConstructorMessageChatChangePhoto
}

// A deleted chat photo
type MessageChatDeletePhoto struct {
	meta
}

func (entity *MessageChatDeletePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatDeletePhoto

	return json.Marshal((*stub)(entity))
}

func (*MessageChatDeletePhoto) GetType() string {
	return TypeMessageContent
}

func (*MessageChatDeletePhoto) GetConstructor() string {
	return ConstructorMessageChatDeletePhoto
}

func (*MessageChatDeletePhoto) MessageContentConstructor() string {
	return ConstructorMessageChatDeletePhoto
}

// New chat members were added
type MessageChatAddMembers struct {
	meta
	// User identifiers of the new members
	MemberUserIds []int64 `json:"member_user_ids"`
}

func (entity *MessageChatAddMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatAddMembers

	return json.Marshal((*stub)(entity))
}

func (*MessageChatAddMembers) GetType() string {
	return TypeMessageContent
}

func (*MessageChatAddMembers) GetConstructor() string {
	return ConstructorMessageChatAddMembers
}

func (*MessageChatAddMembers) MessageContentConstructor() string {
	return ConstructorMessageChatAddMembers
}

// A new member joined the chat via an invite link
type MessageChatJoinByLink struct {
	meta
}

func (entity *MessageChatJoinByLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatJoinByLink

	return json.Marshal((*stub)(entity))
}

func (*MessageChatJoinByLink) GetType() string {
	return TypeMessageContent
}

func (*MessageChatJoinByLink) GetConstructor() string {
	return ConstructorMessageChatJoinByLink
}

func (*MessageChatJoinByLink) MessageContentConstructor() string {
	return ConstructorMessageChatJoinByLink
}

// A new member was accepted to the chat by an administrator
type MessageChatJoinByRequest struct {
	meta
}

func (entity *MessageChatJoinByRequest) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatJoinByRequest

	return json.Marshal((*stub)(entity))
}

func (*MessageChatJoinByRequest) GetType() string {
	return TypeMessageContent
}

func (*MessageChatJoinByRequest) GetConstructor() string {
	return ConstructorMessageChatJoinByRequest
}

func (*MessageChatJoinByRequest) MessageContentConstructor() string {
	return ConstructorMessageChatJoinByRequest
}

// A chat member was deleted
type MessageChatDeleteMember struct {
	meta
	// User identifier of the deleted chat member
	UserId int64 `json:"user_id"`
}

func (entity *MessageChatDeleteMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatDeleteMember

	return json.Marshal((*stub)(entity))
}

func (*MessageChatDeleteMember) GetType() string {
	return TypeMessageContent
}

func (*MessageChatDeleteMember) GetConstructor() string {
	return ConstructorMessageChatDeleteMember
}

func (*MessageChatDeleteMember) MessageContentConstructor() string {
	return ConstructorMessageChatDeleteMember
}

// A basic group was upgraded to a supergroup and was deactivated as the result
type MessageChatUpgradeTo struct {
	meta
	// Identifier of the supergroup to which the basic group was upgraded
	SupergroupId int64 `json:"supergroup_id"`
}

func (entity *MessageChatUpgradeTo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatUpgradeTo

	return json.Marshal((*stub)(entity))
}

func (*MessageChatUpgradeTo) GetType() string {
	return TypeMessageContent
}

func (*MessageChatUpgradeTo) GetConstructor() string {
	return ConstructorMessageChatUpgradeTo
}

func (*MessageChatUpgradeTo) MessageContentConstructor() string {
	return ConstructorMessageChatUpgradeTo
}

// A supergroup has been created from a basic group
type MessageChatUpgradeFrom struct {
	meta
	// Title of the newly created supergroup
	Title string `json:"title"`
	// The identifier of the original basic group
	BasicGroupId int64 `json:"basic_group_id"`
}

func (entity *MessageChatUpgradeFrom) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatUpgradeFrom

	return json.Marshal((*stub)(entity))
}

func (*MessageChatUpgradeFrom) GetType() string {
	return TypeMessageContent
}

func (*MessageChatUpgradeFrom) GetConstructor() string {
	return ConstructorMessageChatUpgradeFrom
}

func (*MessageChatUpgradeFrom) MessageContentConstructor() string {
	return ConstructorMessageChatUpgradeFrom
}

// A message has been pinned
type MessagePinMessage struct {
	meta
	// Identifier of the pinned message, can be an identifier of a deleted message or 0
	MessageId int64 `json:"message_id"`
}

func (entity *MessagePinMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePinMessage

	return json.Marshal((*stub)(entity))
}

func (*MessagePinMessage) GetType() string {
	return TypeMessageContent
}

func (*MessagePinMessage) GetConstructor() string {
	return ConstructorMessagePinMessage
}

func (*MessagePinMessage) MessageContentConstructor() string {
	return ConstructorMessagePinMessage
}

// A screenshot of a message in the chat has been taken
type MessageScreenshotTaken struct {
	meta
}

func (entity *MessageScreenshotTaken) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageScreenshotTaken

	return json.Marshal((*stub)(entity))
}

func (*MessageScreenshotTaken) GetType() string {
	return TypeMessageContent
}

func (*MessageScreenshotTaken) GetConstructor() string {
	return ConstructorMessageScreenshotTaken
}

func (*MessageScreenshotTaken) MessageContentConstructor() string {
	return ConstructorMessageScreenshotTaken
}

// A new background was set in the chat
type MessageChatSetBackground struct {
	meta
	// Identifier of the message with a previously set same background; 0 if none. Can be an identifier of a deleted message
	OldBackgroundMessageId int64 `json:"old_background_message_id"`
	// The new background
	Background *ChatBackground `json:"background"`
	// True, if the background was set only for self
	OnlyForSelf bool `json:"only_for_self"`
}

func (entity *MessageChatSetBackground) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatSetBackground

	return json.Marshal((*stub)(entity))
}

func (*MessageChatSetBackground) GetType() string {
	return TypeMessageContent
}

func (*MessageChatSetBackground) GetConstructor() string {
	return ConstructorMessageChatSetBackground
}

func (*MessageChatSetBackground) MessageContentConstructor() string {
	return ConstructorMessageChatSetBackground
}

// A theme in the chat has been changed
type MessageChatSetTheme struct {
	meta
	// If non-empty, name of a new theme, set for the chat. Otherwise, chat theme was reset to the default one
	ThemeName string `json:"theme_name"`
}

func (entity *MessageChatSetTheme) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatSetTheme

	return json.Marshal((*stub)(entity))
}

func (*MessageChatSetTheme) GetType() string {
	return TypeMessageContent
}

func (*MessageChatSetTheme) GetConstructor() string {
	return ConstructorMessageChatSetTheme
}

func (*MessageChatSetTheme) MessageContentConstructor() string {
	return ConstructorMessageChatSetTheme
}

// The auto-delete or self-destruct timer for messages in the chat has been changed
type MessageChatSetMessageAutoDeleteTime struct {
	meta
	// New value auto-delete or self-destruct time, in seconds; 0 if disabled
	MessageAutoDeleteTime int32 `json:"message_auto_delete_time"`
	// If not 0, a user identifier, which default setting was automatically applied
	FromUserId int64 `json:"from_user_id"`
}

func (entity *MessageChatSetMessageAutoDeleteTime) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatSetMessageAutoDeleteTime

	return json.Marshal((*stub)(entity))
}

func (*MessageChatSetMessageAutoDeleteTime) GetType() string {
	return TypeMessageContent
}

func (*MessageChatSetMessageAutoDeleteTime) GetConstructor() string {
	return ConstructorMessageChatSetMessageAutoDeleteTime
}

func (*MessageChatSetMessageAutoDeleteTime) MessageContentConstructor() string {
	return ConstructorMessageChatSetMessageAutoDeleteTime
}

// The chat was boosted by the sender of the message
type MessageChatBoost struct {
	meta
	// Number of times the chat was boosted
	BoostCount int32 `json:"boost_count"`
}

func (entity *MessageChatBoost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatBoost

	return json.Marshal((*stub)(entity))
}

func (*MessageChatBoost) GetType() string {
	return TypeMessageContent
}

func (*MessageChatBoost) GetConstructor() string {
	return ConstructorMessageChatBoost
}

func (*MessageChatBoost) MessageContentConstructor() string {
	return ConstructorMessageChatBoost
}

// A forum topic has been created
type MessageForumTopicCreated struct {
	meta
	// Name of the topic
	Name string `json:"name"`
	// Icon of the topic
	Icon *ForumTopicIcon `json:"icon"`
}

func (entity *MessageForumTopicCreated) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageForumTopicCreated

	return json.Marshal((*stub)(entity))
}

func (*MessageForumTopicCreated) GetType() string {
	return TypeMessageContent
}

func (*MessageForumTopicCreated) GetConstructor() string {
	return ConstructorMessageForumTopicCreated
}

func (*MessageForumTopicCreated) MessageContentConstructor() string {
	return ConstructorMessageForumTopicCreated
}

// A forum topic has been edited
type MessageForumTopicEdited struct {
	meta
	// If non-empty, the new name of the topic
	Name string `json:"name"`
	// True, if icon's custom_emoji_id is changed
	EditIconCustomEmojiId bool `json:"edit_icon_custom_emoji_id"`
	// New unique identifier of the custom emoji shown on the topic icon; 0 if none. Must be ignored if edit_icon_custom_emoji_id is false
	IconCustomEmojiId JsonInt64 `json:"icon_custom_emoji_id"`
}

func (entity *MessageForumTopicEdited) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageForumTopicEdited

	return json.Marshal((*stub)(entity))
}

func (*MessageForumTopicEdited) GetType() string {
	return TypeMessageContent
}

func (*MessageForumTopicEdited) GetConstructor() string {
	return ConstructorMessageForumTopicEdited
}

func (*MessageForumTopicEdited) MessageContentConstructor() string {
	return ConstructorMessageForumTopicEdited
}

// A forum topic has been closed or opened
type MessageForumTopicIsClosedToggled struct {
	meta
	// True, if the topic was closed; otherwise, the topic was reopened
	IsClosed bool `json:"is_closed"`
}

func (entity *MessageForumTopicIsClosedToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageForumTopicIsClosedToggled

	return json.Marshal((*stub)(entity))
}

func (*MessageForumTopicIsClosedToggled) GetType() string {
	return TypeMessageContent
}

func (*MessageForumTopicIsClosedToggled) GetConstructor() string {
	return ConstructorMessageForumTopicIsClosedToggled
}

func (*MessageForumTopicIsClosedToggled) MessageContentConstructor() string {
	return ConstructorMessageForumTopicIsClosedToggled
}

// A General forum topic has been hidden or unhidden
type MessageForumTopicIsHiddenToggled struct {
	meta
	// True, if the topic was hidden; otherwise, the topic was unhidden
	IsHidden bool `json:"is_hidden"`
}

func (entity *MessageForumTopicIsHiddenToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageForumTopicIsHiddenToggled

	return json.Marshal((*stub)(entity))
}

func (*MessageForumTopicIsHiddenToggled) GetType() string {
	return TypeMessageContent
}

func (*MessageForumTopicIsHiddenToggled) GetConstructor() string {
	return ConstructorMessageForumTopicIsHiddenToggled
}

func (*MessageForumTopicIsHiddenToggled) MessageContentConstructor() string {
	return ConstructorMessageForumTopicIsHiddenToggled
}

// A profile photo was suggested to a user in a private chat
type MessageSuggestProfilePhoto struct {
	meta
	// The suggested chat photo. Use the method setProfilePhoto with inputChatPhotoPrevious to apply the photo
	Photo *ChatPhoto `json:"photo"`
}

func (entity *MessageSuggestProfilePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSuggestProfilePhoto

	return json.Marshal((*stub)(entity))
}

func (*MessageSuggestProfilePhoto) GetType() string {
	return TypeMessageContent
}

func (*MessageSuggestProfilePhoto) GetConstructor() string {
	return ConstructorMessageSuggestProfilePhoto
}

func (*MessageSuggestProfilePhoto) MessageContentConstructor() string {
	return ConstructorMessageSuggestProfilePhoto
}

// A non-standard action has happened in the chat
type MessageCustomServiceAction struct {
	meta
	// Message text to be shown in the chat
	Text string `json:"text"`
}

func (entity *MessageCustomServiceAction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageCustomServiceAction

	return json.Marshal((*stub)(entity))
}

func (*MessageCustomServiceAction) GetType() string {
	return TypeMessageContent
}

func (*MessageCustomServiceAction) GetConstructor() string {
	return ConstructorMessageCustomServiceAction
}

func (*MessageCustomServiceAction) MessageContentConstructor() string {
	return ConstructorMessageCustomServiceAction
}

// A new high score was achieved in a game
type MessageGameScore struct {
	meta
	// Identifier of the message with the game, can be an identifier of a deleted message
	GameMessageId int64 `json:"game_message_id"`
	// Identifier of the game; may be different from the games presented in the message with the game
	GameId JsonInt64 `json:"game_id"`
	// New score
	Score int32 `json:"score"`
}

func (entity *MessageGameScore) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageGameScore

	return json.Marshal((*stub)(entity))
}

func (*MessageGameScore) GetType() string {
	return TypeMessageContent
}

func (*MessageGameScore) GetConstructor() string {
	return ConstructorMessageGameScore
}

func (*MessageGameScore) MessageContentConstructor() string {
	return ConstructorMessageGameScore
}

// A payment has been sent to a bot or a business account
type MessagePaymentSuccessful struct {
	meta
	// Identifier of the chat, containing the corresponding invoice message
	InvoiceChatId int64 `json:"invoice_chat_id"`
	// Identifier of the message with the corresponding invoice; can be 0 or an identifier of a deleted message
	InvoiceMessageId int64 `json:"invoice_message_id"`
	// Currency for the price of the product
	Currency string `json:"currency"`
	// Total price for the product, in the smallest units of the currency
	TotalAmount int64 `json:"total_amount"`
	// Point in time (Unix timestamp) when the subscription will expire; 0 if unknown or the payment isn't recurring
	SubscriptionUntilDate int32 `json:"subscription_until_date"`
	// True, if this is a recurring payment
	IsRecurring bool `json:"is_recurring"`
	// True, if this is the first recurring payment
	IsFirstRecurring bool `json:"is_first_recurring"`
	// Name of the invoice; may be empty if unknown
	InvoiceName string `json:"invoice_name"`
}

func (entity *MessagePaymentSuccessful) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePaymentSuccessful

	return json.Marshal((*stub)(entity))
}

func (*MessagePaymentSuccessful) GetType() string {
	return TypeMessageContent
}

func (*MessagePaymentSuccessful) GetConstructor() string {
	return ConstructorMessagePaymentSuccessful
}

func (*MessagePaymentSuccessful) MessageContentConstructor() string {
	return ConstructorMessagePaymentSuccessful
}

// A payment has been received by the bot or the business account
type MessagePaymentSuccessfulBot struct {
	meta
	// Currency for price of the product
	Currency string `json:"currency"`
	// Total price for the product, in the smallest units of the currency
	TotalAmount int64 `json:"total_amount"`
	// Point in time (Unix timestamp) when the subscription will expire; 0 if unknown or the payment isn't recurring
	SubscriptionUntilDate int32 `json:"subscription_until_date"`
	// True, if this is a recurring payment
	IsRecurring bool `json:"is_recurring"`
	// True, if this is the first recurring payment
	IsFirstRecurring bool `json:"is_first_recurring"`
	// Invoice payload
	InvoicePayload []byte `json:"invoice_payload"`
	// Identifier of the shipping option chosen by the user; may be empty if not applicable; for bots only
	ShippingOptionId string `json:"shipping_option_id"`
	// Information about the order; may be null; for bots only
	OrderInfo *OrderInfo `json:"order_info"`
	// Telegram payment identifier
	TelegramPaymentChargeId string `json:"telegram_payment_charge_id"`
	// Provider payment identifier
	ProviderPaymentChargeId string `json:"provider_payment_charge_id"`
}

func (entity *MessagePaymentSuccessfulBot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePaymentSuccessfulBot

	return json.Marshal((*stub)(entity))
}

func (*MessagePaymentSuccessfulBot) GetType() string {
	return TypeMessageContent
}

func (*MessagePaymentSuccessfulBot) GetConstructor() string {
	return ConstructorMessagePaymentSuccessfulBot
}

func (*MessagePaymentSuccessfulBot) MessageContentConstructor() string {
	return ConstructorMessagePaymentSuccessfulBot
}

// A payment has been refunded
type MessagePaymentRefunded struct {
	meta
	// Identifier of the previous owner of the Telegram Stars that refunds them
	OwnerId MessageSender `json:"owner_id"`
	// Currency for the price of the product
	Currency string `json:"currency"`
	// Total price for the product, in the smallest units of the currency
	TotalAmount int64 `json:"total_amount"`
	// Invoice payload; only for bots
	InvoicePayload []byte `json:"invoice_payload"`
	// Telegram payment identifier
	TelegramPaymentChargeId string `json:"telegram_payment_charge_id"`
	// Provider payment identifier
	ProviderPaymentChargeId string `json:"provider_payment_charge_id"`
}

func (entity *MessagePaymentRefunded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePaymentRefunded

	return json.Marshal((*stub)(entity))
}

func (*MessagePaymentRefunded) GetType() string {
	return TypeMessageContent
}

func (*MessagePaymentRefunded) GetConstructor() string {
	return ConstructorMessagePaymentRefunded
}

func (*MessagePaymentRefunded) MessageContentConstructor() string {
	return ConstructorMessagePaymentRefunded
}

func (messagePaymentRefunded *MessagePaymentRefunded) UnmarshalJSON(data []byte) error {
	var tmp struct {
		OwnerId                 json.RawMessage `json:"owner_id"`
		Currency                string          `json:"currency"`
		TotalAmount             int64           `json:"total_amount"`
		InvoicePayload          []byte          `json:"invoice_payload"`
		TelegramPaymentChargeId string          `json:"telegram_payment_charge_id"`
		ProviderPaymentChargeId string          `json:"provider_payment_charge_id"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messagePaymentRefunded.Currency = tmp.Currency
	messagePaymentRefunded.TotalAmount = tmp.TotalAmount
	messagePaymentRefunded.InvoicePayload = tmp.InvoicePayload
	messagePaymentRefunded.TelegramPaymentChargeId = tmp.TelegramPaymentChargeId
	messagePaymentRefunded.ProviderPaymentChargeId = tmp.ProviderPaymentChargeId

	fieldOwnerId, _ := UnmarshalMessageSender(tmp.OwnerId)
	messagePaymentRefunded.OwnerId = fieldOwnerId

	return nil
}

// Telegram Premium was gifted to a user
type MessageGiftedPremium struct {
	meta
	// The identifier of a user that gifted Telegram Premium; 0 if the gift was anonymous or is outgoing
	GifterUserId int64 `json:"gifter_user_id"`
	// The identifier of a user that received Telegram Premium; 0 if the gift is incoming
	ReceiverUserId int64 `json:"receiver_user_id"`
	// Message added to the gifted Telegram Premium by the sender
	Text *FormattedText `json:"text"`
	// Currency for the paid amount
	Currency string `json:"currency"`
	// The paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Cryptocurrency used to pay for the gift; may be empty if none
	Cryptocurrency string `json:"cryptocurrency"`
	// The paid amount, in the smallest units of the cryptocurrency; 0 if none
	CryptocurrencyAmount JsonInt64 `json:"cryptocurrency_amount"`
	// Number of months the Telegram Premium subscription will be active
	MonthCount int32 `json:"month_count"`
	// A sticker to be shown in the message; may be null if unknown
	Sticker *Sticker `json:"sticker"`
}

func (entity *MessageGiftedPremium) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageGiftedPremium

	return json.Marshal((*stub)(entity))
}

func (*MessageGiftedPremium) GetType() string {
	return TypeMessageContent
}

func (*MessageGiftedPremium) GetConstructor() string {
	return ConstructorMessageGiftedPremium
}

func (*MessageGiftedPremium) MessageContentConstructor() string {
	return ConstructorMessageGiftedPremium
}

// A Telegram Premium gift code was created for the user
type MessagePremiumGiftCode struct {
	meta
	// Identifier of a chat or a user that created the gift code; may be null if unknown
	CreatorId MessageSender `json:"creator_id"`
	// Message added to the gift
	Text *FormattedText `json:"text"`
	// True, if the gift code was created for a giveaway
	IsFromGiveaway bool `json:"is_from_giveaway"`
	// True, if the winner for the corresponding Telegram Premium subscription wasn't chosen
	IsUnclaimed bool `json:"is_unclaimed"`
	// Currency for the paid amount; empty if unknown
	Currency string `json:"currency"`
	// The paid amount, in the smallest units of the currency; 0 if unknown
	Amount int64 `json:"amount"`
	// Cryptocurrency used to pay for the gift; may be empty if none or unknown
	Cryptocurrency string `json:"cryptocurrency"`
	// The paid amount, in the smallest units of the cryptocurrency; 0 if unknown
	CryptocurrencyAmount JsonInt64 `json:"cryptocurrency_amount"`
	// Number of months the Telegram Premium subscription will be active after code activation
	MonthCount int32 `json:"month_count"`
	// A sticker to be shown in the message; may be null if unknown
	Sticker *Sticker `json:"sticker"`
	// The gift code
	Code string `json:"code"`
}

func (entity *MessagePremiumGiftCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePremiumGiftCode

	return json.Marshal((*stub)(entity))
}

func (*MessagePremiumGiftCode) GetType() string {
	return TypeMessageContent
}

func (*MessagePremiumGiftCode) GetConstructor() string {
	return ConstructorMessagePremiumGiftCode
}

func (*MessagePremiumGiftCode) MessageContentConstructor() string {
	return ConstructorMessagePremiumGiftCode
}

func (messagePremiumGiftCode *MessagePremiumGiftCode) UnmarshalJSON(data []byte) error {
	var tmp struct {
		CreatorId            json.RawMessage `json:"creator_id"`
		Text                 *FormattedText  `json:"text"`
		IsFromGiveaway       bool            `json:"is_from_giveaway"`
		IsUnclaimed          bool            `json:"is_unclaimed"`
		Currency             string          `json:"currency"`
		Amount               int64           `json:"amount"`
		Cryptocurrency       string          `json:"cryptocurrency"`
		CryptocurrencyAmount JsonInt64       `json:"cryptocurrency_amount"`
		MonthCount           int32           `json:"month_count"`
		Sticker              *Sticker        `json:"sticker"`
		Code                 string          `json:"code"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messagePremiumGiftCode.Text = tmp.Text
	messagePremiumGiftCode.IsFromGiveaway = tmp.IsFromGiveaway
	messagePremiumGiftCode.IsUnclaimed = tmp.IsUnclaimed
	messagePremiumGiftCode.Currency = tmp.Currency
	messagePremiumGiftCode.Amount = tmp.Amount
	messagePremiumGiftCode.Cryptocurrency = tmp.Cryptocurrency
	messagePremiumGiftCode.CryptocurrencyAmount = tmp.CryptocurrencyAmount
	messagePremiumGiftCode.MonthCount = tmp.MonthCount
	messagePremiumGiftCode.Sticker = tmp.Sticker
	messagePremiumGiftCode.Code = tmp.Code

	fieldCreatorId, _ := UnmarshalMessageSender(tmp.CreatorId)
	messagePremiumGiftCode.CreatorId = fieldCreatorId

	return nil
}

// A giveaway was created for the chat. Use telegramPaymentPurposePremiumGiveaway, storePaymentPurposePremiumGiveaway, telegramPaymentPurposeStarGiveaway, or storePaymentPurposeStarGiveaway to create a giveaway
type MessageGiveawayCreated struct {
	meta
	// Number of Telegram Stars that will be shared by winners of the giveaway; 0 for Telegram Premium giveaways
	StarCount int64 `json:"star_count"`
}

func (entity *MessageGiveawayCreated) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageGiveawayCreated

	return json.Marshal((*stub)(entity))
}

func (*MessageGiveawayCreated) GetType() string {
	return TypeMessageContent
}

func (*MessageGiveawayCreated) GetConstructor() string {
	return ConstructorMessageGiveawayCreated
}

func (*MessageGiveawayCreated) MessageContentConstructor() string {
	return ConstructorMessageGiveawayCreated
}

// A giveaway
type MessageGiveaway struct {
	meta
	// Giveaway parameters
	Parameters *GiveawayParameters `json:"parameters"`
	// Number of users which will receive Telegram Premium subscription gift codes
	WinnerCount int32 `json:"winner_count"`
	// Prize of the giveaway
	Prize GiveawayPrize `json:"prize"`
	// A sticker to be shown in the message; may be null if unknown
	Sticker *Sticker `json:"sticker"`
}

func (entity *MessageGiveaway) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageGiveaway

	return json.Marshal((*stub)(entity))
}

func (*MessageGiveaway) GetType() string {
	return TypeMessageContent
}

func (*MessageGiveaway) GetConstructor() string {
	return ConstructorMessageGiveaway
}

func (*MessageGiveaway) MessageContentConstructor() string {
	return ConstructorMessageGiveaway
}

func (messageGiveaway *MessageGiveaway) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Parameters  *GiveawayParameters `json:"parameters"`
		WinnerCount int32               `json:"winner_count"`
		Prize       json.RawMessage     `json:"prize"`
		Sticker     *Sticker            `json:"sticker"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageGiveaway.Parameters = tmp.Parameters
	messageGiveaway.WinnerCount = tmp.WinnerCount
	messageGiveaway.Sticker = tmp.Sticker

	fieldPrize, _ := UnmarshalGiveawayPrize(tmp.Prize)
	messageGiveaway.Prize = fieldPrize

	return nil
}

// A giveaway without public winners has been completed for the chat
type MessageGiveawayCompleted struct {
	meta
	// Identifier of the message with the giveaway; can be 0 if the message was deleted
	GiveawayMessageId int64 `json:"giveaway_message_id"`
	// Number of winners in the giveaway
	WinnerCount int32 `json:"winner_count"`
	// True, if the giveaway is a Telegram Star giveaway
	IsStarGiveaway bool `json:"is_star_giveaway"`
	// Number of undistributed prizes; for Telegram Premium giveaways only
	UnclaimedPrizeCount int32 `json:"unclaimed_prize_count"`
}

func (entity *MessageGiveawayCompleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageGiveawayCompleted

	return json.Marshal((*stub)(entity))
}

func (*MessageGiveawayCompleted) GetType() string {
	return TypeMessageContent
}

func (*MessageGiveawayCompleted) GetConstructor() string {
	return ConstructorMessageGiveawayCompleted
}

func (*MessageGiveawayCompleted) MessageContentConstructor() string {
	return ConstructorMessageGiveawayCompleted
}

// A giveaway with public winners has been completed for the chat
type MessageGiveawayWinners struct {
	meta
	// Identifier of the supergroup or channel chat, which was automatically boosted by the winners of the giveaway
	BoostedChatId int64 `json:"boosted_chat_id"`
	// Identifier of the message with the giveaway in the boosted chat
	GiveawayMessageId int64 `json:"giveaway_message_id"`
	// Number of other chats that participated in the giveaway
	AdditionalChatCount int32 `json:"additional_chat_count"`
	// Point in time (Unix timestamp) when the winners were selected. May be bigger than winners selection date specified in parameters of the giveaway
	ActualWinnersSelectionDate int32 `json:"actual_winners_selection_date"`
	// True, if only new members of the chats were eligible for the giveaway
	OnlyNewMembers bool `json:"only_new_members"`
	// True, if the giveaway was canceled and was fully refunded
	WasRefunded bool `json:"was_refunded"`
	// Prize of the giveaway
	Prize GiveawayPrize `json:"prize"`
	// Additional description of the giveaway prize
	PrizeDescription string `json:"prize_description"`
	// Total number of winners in the giveaway
	WinnerCount int32 `json:"winner_count"`
	// Up to 100 user identifiers of the winners of the giveaway
	WinnerUserIds []int64 `json:"winner_user_ids"`
	// Number of undistributed prizes; for Telegram Premium giveaways only
	UnclaimedPrizeCount int32 `json:"unclaimed_prize_count"`
}

func (entity *MessageGiveawayWinners) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageGiveawayWinners

	return json.Marshal((*stub)(entity))
}

func (*MessageGiveawayWinners) GetType() string {
	return TypeMessageContent
}

func (*MessageGiveawayWinners) GetConstructor() string {
	return ConstructorMessageGiveawayWinners
}

func (*MessageGiveawayWinners) MessageContentConstructor() string {
	return ConstructorMessageGiveawayWinners
}

func (messageGiveawayWinners *MessageGiveawayWinners) UnmarshalJSON(data []byte) error {
	var tmp struct {
		BoostedChatId              int64           `json:"boosted_chat_id"`
		GiveawayMessageId          int64           `json:"giveaway_message_id"`
		AdditionalChatCount        int32           `json:"additional_chat_count"`
		ActualWinnersSelectionDate int32           `json:"actual_winners_selection_date"`
		OnlyNewMembers             bool            `json:"only_new_members"`
		WasRefunded                bool            `json:"was_refunded"`
		Prize                      json.RawMessage `json:"prize"`
		PrizeDescription           string          `json:"prize_description"`
		WinnerCount                int32           `json:"winner_count"`
		WinnerUserIds              []int64         `json:"winner_user_ids"`
		UnclaimedPrizeCount        int32           `json:"unclaimed_prize_count"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageGiveawayWinners.BoostedChatId = tmp.BoostedChatId
	messageGiveawayWinners.GiveawayMessageId = tmp.GiveawayMessageId
	messageGiveawayWinners.AdditionalChatCount = tmp.AdditionalChatCount
	messageGiveawayWinners.ActualWinnersSelectionDate = tmp.ActualWinnersSelectionDate
	messageGiveawayWinners.OnlyNewMembers = tmp.OnlyNewMembers
	messageGiveawayWinners.WasRefunded = tmp.WasRefunded
	messageGiveawayWinners.PrizeDescription = tmp.PrizeDescription
	messageGiveawayWinners.WinnerCount = tmp.WinnerCount
	messageGiveawayWinners.WinnerUserIds = tmp.WinnerUserIds
	messageGiveawayWinners.UnclaimedPrizeCount = tmp.UnclaimedPrizeCount

	fieldPrize, _ := UnmarshalGiveawayPrize(tmp.Prize)
	messageGiveawayWinners.Prize = fieldPrize

	return nil
}

// Telegram Stars were gifted to a user
type MessageGiftedStars struct {
	meta
	// The identifier of a user that gifted Telegram Stars; 0 if the gift was anonymous or is outgoing
	GifterUserId int64 `json:"gifter_user_id"`
	// The identifier of a user that received Telegram Stars; 0 if the gift is incoming
	ReceiverUserId int64 `json:"receiver_user_id"`
	// Currency for the paid amount
	Currency string `json:"currency"`
	// The paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Cryptocurrency used to pay for the gift; may be empty if none
	Cryptocurrency string `json:"cryptocurrency"`
	// The paid amount, in the smallest units of the cryptocurrency; 0 if none
	CryptocurrencyAmount JsonInt64 `json:"cryptocurrency_amount"`
	// Number of Telegram Stars that were gifted
	StarCount int64 `json:"star_count"`
	// Identifier of the transaction for Telegram Stars purchase; for receiver only
	TransactionId string `json:"transaction_id"`
	// A sticker to be shown in the message; may be null if unknown
	Sticker *Sticker `json:"sticker"`
}

func (entity *MessageGiftedStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageGiftedStars

	return json.Marshal((*stub)(entity))
}

func (*MessageGiftedStars) GetType() string {
	return TypeMessageContent
}

func (*MessageGiftedStars) GetConstructor() string {
	return ConstructorMessageGiftedStars
}

func (*MessageGiftedStars) MessageContentConstructor() string {
	return ConstructorMessageGiftedStars
}

// A Telegram Stars were received by the current user from a giveaway
type MessageGiveawayPrizeStars struct {
	meta
	// Number of Telegram Stars that were received
	StarCount int64 `json:"star_count"`
	// Identifier of the transaction for Telegram Stars credit
	TransactionId string `json:"transaction_id"`
	// Identifier of the supergroup or channel chat, which was automatically boosted by the winners of the giveaway
	BoostedChatId int64 `json:"boosted_chat_id"`
	// Identifier of the message with the giveaway in the boosted chat; can be 0 if the message was deleted
	GiveawayMessageId int64 `json:"giveaway_message_id"`
	// True, if the corresponding winner wasn't chosen and the Telegram Stars were received by the owner of the boosted chat
	IsUnclaimed bool `json:"is_unclaimed"`
	// A sticker to be shown in the message; may be null if unknown
	Sticker *Sticker `json:"sticker"`
}

func (entity *MessageGiveawayPrizeStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageGiveawayPrizeStars

	return json.Marshal((*stub)(entity))
}

func (*MessageGiveawayPrizeStars) GetType() string {
	return TypeMessageContent
}

func (*MessageGiveawayPrizeStars) GetConstructor() string {
	return ConstructorMessageGiveawayPrizeStars
}

func (*MessageGiveawayPrizeStars) MessageContentConstructor() string {
	return ConstructorMessageGiveawayPrizeStars
}

// A gift was received or sent by the current user
type MessageGift struct {
	meta
	// The gift
	Gift *Gift `json:"gift"`
	// Message added to the gift
	Text *FormattedText `json:"text"`
	// Number of Telegram Stars that can be claimed by the receiver instead of the gift; 0 if the gift can't be sold by the receiver
	SellStarCount int64 `json:"sell_star_count"`
	// True, if the sender and gift text are shown only to the gift receiver; otherwise, everyone will be able to see them
	IsPrivate bool `json:"is_private"`
	// True, if the gift is displayed on the user's profile page; only for the receiver of the gift
	IsSaved bool `json:"is_saved"`
	// True, if the gift was converted to Telegram Stars; only for the receiver of the gift
	WasConverted bool `json:"was_converted"`
}

func (entity *MessageGift) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageGift

	return json.Marshal((*stub)(entity))
}

func (*MessageGift) GetType() string {
	return TypeMessageContent
}

func (*MessageGift) GetConstructor() string {
	return ConstructorMessageGift
}

func (*MessageGift) MessageContentConstructor() string {
	return ConstructorMessageGift
}

// A contact has registered with Telegram
type MessageContactRegistered struct {
	meta
}

func (entity *MessageContactRegistered) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageContactRegistered

	return json.Marshal((*stub)(entity))
}

func (*MessageContactRegistered) GetType() string {
	return TypeMessageContent
}

func (*MessageContactRegistered) GetConstructor() string {
	return ConstructorMessageContactRegistered
}

func (*MessageContactRegistered) MessageContentConstructor() string {
	return ConstructorMessageContactRegistered
}

// The current user shared users, which were requested by the bot
type MessageUsersShared struct {
	meta
	// The shared users
	Users []*SharedUser `json:"users"`
	// Identifier of the keyboard button with the request
	ButtonId int32 `json:"button_id"`
}

func (entity *MessageUsersShared) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageUsersShared

	return json.Marshal((*stub)(entity))
}

func (*MessageUsersShared) GetType() string {
	return TypeMessageContent
}

func (*MessageUsersShared) GetConstructor() string {
	return ConstructorMessageUsersShared
}

func (*MessageUsersShared) MessageContentConstructor() string {
	return ConstructorMessageUsersShared
}

// The current user shared a chat, which was requested by the bot
type MessageChatShared struct {
	meta
	// The shared chat
	Chat *SharedChat `json:"chat"`
	// Identifier of the keyboard button with the request
	ButtonId int32 `json:"button_id"`
}

func (entity *MessageChatShared) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageChatShared

	return json.Marshal((*stub)(entity))
}

func (*MessageChatShared) GetType() string {
	return TypeMessageContent
}

func (*MessageChatShared) GetConstructor() string {
	return ConstructorMessageChatShared
}

func (*MessageChatShared) MessageContentConstructor() string {
	return ConstructorMessageChatShared
}

// The user allowed the bot to send messages
type MessageBotWriteAccessAllowed struct {
	meta
	// The reason why the bot was allowed to write messages
	Reason BotWriteAccessAllowReason `json:"reason"`
}

func (entity *MessageBotWriteAccessAllowed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageBotWriteAccessAllowed

	return json.Marshal((*stub)(entity))
}

func (*MessageBotWriteAccessAllowed) GetType() string {
	return TypeMessageContent
}

func (*MessageBotWriteAccessAllowed) GetConstructor() string {
	return ConstructorMessageBotWriteAccessAllowed
}

func (*MessageBotWriteAccessAllowed) MessageContentConstructor() string {
	return ConstructorMessageBotWriteAccessAllowed
}

func (messageBotWriteAccessAllowed *MessageBotWriteAccessAllowed) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Reason json.RawMessage `json:"reason"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldReason, _ := UnmarshalBotWriteAccessAllowReason(tmp.Reason)
	messageBotWriteAccessAllowed.Reason = fieldReason

	return nil
}

// Data from a Web App has been sent to a bot
type MessageWebAppDataSent struct {
	meta
	// Text of the keyboardButtonTypeWebApp button, which opened the Web App
	ButtonText string `json:"button_text"`
}

func (entity *MessageWebAppDataSent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageWebAppDataSent

	return json.Marshal((*stub)(entity))
}

func (*MessageWebAppDataSent) GetType() string {
	return TypeMessageContent
}

func (*MessageWebAppDataSent) GetConstructor() string {
	return ConstructorMessageWebAppDataSent
}

func (*MessageWebAppDataSent) MessageContentConstructor() string {
	return ConstructorMessageWebAppDataSent
}

// Data from a Web App has been received; for bots only
type MessageWebAppDataReceived struct {
	meta
	// Text of the keyboardButtonTypeWebApp button, which opened the Web App
	ButtonText string `json:"button_text"`
	// The data
	Data string `json:"data"`
}

func (entity *MessageWebAppDataReceived) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageWebAppDataReceived

	return json.Marshal((*stub)(entity))
}

func (*MessageWebAppDataReceived) GetType() string {
	return TypeMessageContent
}

func (*MessageWebAppDataReceived) GetConstructor() string {
	return ConstructorMessageWebAppDataReceived
}

func (*MessageWebAppDataReceived) MessageContentConstructor() string {
	return ConstructorMessageWebAppDataReceived
}

// Telegram Passport data has been sent to a bot
type MessagePassportDataSent struct {
	meta
	// List of Telegram Passport element types sent
	Types []PassportElementType `json:"types"`
}

func (entity *MessagePassportDataSent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePassportDataSent

	return json.Marshal((*stub)(entity))
}

func (*MessagePassportDataSent) GetType() string {
	return TypeMessageContent
}

func (*MessagePassportDataSent) GetConstructor() string {
	return ConstructorMessagePassportDataSent
}

func (*MessagePassportDataSent) MessageContentConstructor() string {
	return ConstructorMessagePassportDataSent
}

func (messagePassportDataSent *MessagePassportDataSent) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Types []json.RawMessage `json:"types"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldTypes, _ := UnmarshalListOfPassportElementType(tmp.Types)
	messagePassportDataSent.Types = fieldTypes

	return nil
}

// Telegram Passport data has been received; for bots only
type MessagePassportDataReceived struct {
	meta
	// List of received Telegram Passport elements
	Elements []*EncryptedPassportElement `json:"elements"`
	// Encrypted data credentials
	Credentials *EncryptedCredentials `json:"credentials"`
}

func (entity *MessagePassportDataReceived) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessagePassportDataReceived

	return json.Marshal((*stub)(entity))
}

func (*MessagePassportDataReceived) GetType() string {
	return TypeMessageContent
}

func (*MessagePassportDataReceived) GetConstructor() string {
	return ConstructorMessagePassportDataReceived
}

func (*MessagePassportDataReceived) MessageContentConstructor() string {
	return ConstructorMessagePassportDataReceived
}

// A user in the chat came within proximity alert range
type MessageProximityAlertTriggered struct {
	meta
	// The identifier of a user or chat that triggered the proximity alert
	TravelerId MessageSender `json:"traveler_id"`
	// The identifier of a user or chat that subscribed for the proximity alert
	WatcherId MessageSender `json:"watcher_id"`
	// The distance between the users
	Distance int32 `json:"distance"`
}

func (entity *MessageProximityAlertTriggered) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageProximityAlertTriggered

	return json.Marshal((*stub)(entity))
}

func (*MessageProximityAlertTriggered) GetType() string {
	return TypeMessageContent
}

func (*MessageProximityAlertTriggered) GetConstructor() string {
	return ConstructorMessageProximityAlertTriggered
}

func (*MessageProximityAlertTriggered) MessageContentConstructor() string {
	return ConstructorMessageProximityAlertTriggered
}

func (messageProximityAlertTriggered *MessageProximityAlertTriggered) UnmarshalJSON(data []byte) error {
	var tmp struct {
		TravelerId json.RawMessage `json:"traveler_id"`
		WatcherId  json.RawMessage `json:"watcher_id"`
		Distance   int32           `json:"distance"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageProximityAlertTriggered.Distance = tmp.Distance

	fieldTravelerId, _ := UnmarshalMessageSender(tmp.TravelerId)
	messageProximityAlertTriggered.TravelerId = fieldTravelerId

	fieldWatcherId, _ := UnmarshalMessageSender(tmp.WatcherId)
	messageProximityAlertTriggered.WatcherId = fieldWatcherId

	return nil
}

// A message content that is not supported in the current TDLib version
type MessageUnsupported struct {
	meta
}

func (entity *MessageUnsupported) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageUnsupported

	return json.Marshal((*stub)(entity))
}

func (*MessageUnsupported) GetType() string {
	return TypeMessageContent
}

func (*MessageUnsupported) GetConstructor() string {
	return ConstructorMessageUnsupported
}

func (*MessageUnsupported) MessageContentConstructor() string {
	return ConstructorMessageUnsupported
}

// A mention of a user, a supergroup, or a channel by their username
type TextEntityTypeMention struct {
	meta
}

func (entity *TextEntityTypeMention) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeMention

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeMention) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeMention) GetConstructor() string {
	return ConstructorTextEntityTypeMention
}

func (*TextEntityTypeMention) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeMention
}

// A hashtag text, beginning with "#" and optionally containing a chat username at the end
type TextEntityTypeHashtag struct {
	meta
}

func (entity *TextEntityTypeHashtag) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeHashtag

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeHashtag) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeHashtag) GetConstructor() string {
	return ConstructorTextEntityTypeHashtag
}

func (*TextEntityTypeHashtag) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeHashtag
}

// A cashtag text, beginning with "$", consisting of capital English letters (e.g., "$USD"), and optionally containing a chat username at the end
type TextEntityTypeCashtag struct {
	meta
}

func (entity *TextEntityTypeCashtag) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeCashtag

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeCashtag) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeCashtag) GetConstructor() string {
	return ConstructorTextEntityTypeCashtag
}

func (*TextEntityTypeCashtag) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeCashtag
}

// A bot command, beginning with "/"
type TextEntityTypeBotCommand struct {
	meta
}

func (entity *TextEntityTypeBotCommand) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeBotCommand

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeBotCommand) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeBotCommand) GetConstructor() string {
	return ConstructorTextEntityTypeBotCommand
}

func (*TextEntityTypeBotCommand) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeBotCommand
}

// An HTTP URL
type TextEntityTypeUrl struct {
	meta
}

func (entity *TextEntityTypeUrl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeUrl

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeUrl) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeUrl) GetConstructor() string {
	return ConstructorTextEntityTypeUrl
}

func (*TextEntityTypeUrl) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeUrl
}

// An email address
type TextEntityTypeEmailAddress struct {
	meta
}

func (entity *TextEntityTypeEmailAddress) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeEmailAddress

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeEmailAddress) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeEmailAddress) GetConstructor() string {
	return ConstructorTextEntityTypeEmailAddress
}

func (*TextEntityTypeEmailAddress) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeEmailAddress
}

// A phone number
type TextEntityTypePhoneNumber struct {
	meta
}

func (entity *TextEntityTypePhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypePhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypePhoneNumber) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypePhoneNumber) GetConstructor() string {
	return ConstructorTextEntityTypePhoneNumber
}

func (*TextEntityTypePhoneNumber) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypePhoneNumber
}

// A bank card number. The getBankCardInfo method can be used to get information about the bank card
type TextEntityTypeBankCardNumber struct {
	meta
}

func (entity *TextEntityTypeBankCardNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeBankCardNumber

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeBankCardNumber) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeBankCardNumber) GetConstructor() string {
	return ConstructorTextEntityTypeBankCardNumber
}

func (*TextEntityTypeBankCardNumber) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeBankCardNumber
}

// A bold text
type TextEntityTypeBold struct {
	meta
}

func (entity *TextEntityTypeBold) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeBold

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeBold) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeBold) GetConstructor() string {
	return ConstructorTextEntityTypeBold
}

func (*TextEntityTypeBold) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeBold
}

// An italic text
type TextEntityTypeItalic struct {
	meta
}

func (entity *TextEntityTypeItalic) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeItalic

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeItalic) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeItalic) GetConstructor() string {
	return ConstructorTextEntityTypeItalic
}

func (*TextEntityTypeItalic) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeItalic
}

// An underlined text
type TextEntityTypeUnderline struct {
	meta
}

func (entity *TextEntityTypeUnderline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeUnderline

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeUnderline) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeUnderline) GetConstructor() string {
	return ConstructorTextEntityTypeUnderline
}

func (*TextEntityTypeUnderline) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeUnderline
}

// A strikethrough text
type TextEntityTypeStrikethrough struct {
	meta
}

func (entity *TextEntityTypeStrikethrough) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeStrikethrough

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeStrikethrough) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeStrikethrough) GetConstructor() string {
	return ConstructorTextEntityTypeStrikethrough
}

func (*TextEntityTypeStrikethrough) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeStrikethrough
}

// A spoiler text
type TextEntityTypeSpoiler struct {
	meta
}

func (entity *TextEntityTypeSpoiler) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeSpoiler

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeSpoiler) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeSpoiler) GetConstructor() string {
	return ConstructorTextEntityTypeSpoiler
}

func (*TextEntityTypeSpoiler) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeSpoiler
}

// Text that must be formatted as if inside a code HTML tag
type TextEntityTypeCode struct {
	meta
}

func (entity *TextEntityTypeCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeCode

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeCode) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeCode) GetConstructor() string {
	return ConstructorTextEntityTypeCode
}

func (*TextEntityTypeCode) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeCode
}

// Text that must be formatted as if inside a pre HTML tag
type TextEntityTypePre struct {
	meta
}

func (entity *TextEntityTypePre) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypePre

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypePre) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypePre) GetConstructor() string {
	return ConstructorTextEntityTypePre
}

func (*TextEntityTypePre) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypePre
}

// Text that must be formatted as if inside pre, and code HTML tags
type TextEntityTypePreCode struct {
	meta
	// Programming language of the code; as defined by the sender
	Language string `json:"language"`
}

func (entity *TextEntityTypePreCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypePreCode

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypePreCode) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypePreCode) GetConstructor() string {
	return ConstructorTextEntityTypePreCode
}

func (*TextEntityTypePreCode) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypePreCode
}

// Text that must be formatted as if inside a blockquote HTML tag; not supported in secret chats
type TextEntityTypeBlockQuote struct {
	meta
}

func (entity *TextEntityTypeBlockQuote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeBlockQuote

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeBlockQuote) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeBlockQuote) GetConstructor() string {
	return ConstructorTextEntityTypeBlockQuote
}

func (*TextEntityTypeBlockQuote) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeBlockQuote
}

// Text that must be formatted as if inside a blockquote HTML tag and collapsed by default to 3 lines with the ability to show full text; not supported in secret chats
type TextEntityTypeExpandableBlockQuote struct {
	meta
}

func (entity *TextEntityTypeExpandableBlockQuote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeExpandableBlockQuote

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeExpandableBlockQuote) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeExpandableBlockQuote) GetConstructor() string {
	return ConstructorTextEntityTypeExpandableBlockQuote
}

func (*TextEntityTypeExpandableBlockQuote) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeExpandableBlockQuote
}

// A text description shown instead of a raw URL
type TextEntityTypeTextUrl struct {
	meta
	// HTTP or tg:// URL to be opened when the link is clicked
	Url string `json:"url"`
}

func (entity *TextEntityTypeTextUrl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeTextUrl

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeTextUrl) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeTextUrl) GetConstructor() string {
	return ConstructorTextEntityTypeTextUrl
}

func (*TextEntityTypeTextUrl) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeTextUrl
}

// A text shows instead of a raw mention of the user (e.g., when the user has no username)
type TextEntityTypeMentionName struct {
	meta
	// Identifier of the mentioned user
	UserId int64 `json:"user_id"`
}

func (entity *TextEntityTypeMentionName) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeMentionName

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeMentionName) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeMentionName) GetConstructor() string {
	return ConstructorTextEntityTypeMentionName
}

func (*TextEntityTypeMentionName) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeMentionName
}

// A custom emoji. The text behind a custom emoji must be an emoji. Only premium users can use premium custom emoji
type TextEntityTypeCustomEmoji struct {
	meta
	// Unique identifier of the custom emoji
	CustomEmojiId JsonInt64 `json:"custom_emoji_id"`
}

func (entity *TextEntityTypeCustomEmoji) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeCustomEmoji

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeCustomEmoji) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeCustomEmoji) GetConstructor() string {
	return ConstructorTextEntityTypeCustomEmoji
}

func (*TextEntityTypeCustomEmoji) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeCustomEmoji
}

// A media timestamp
type TextEntityTypeMediaTimestamp struct {
	meta
	// Timestamp from which a video/audio/video note/voice note/story playing must start, in seconds. The media can be in the content or the link preview of the current message, or in the same places in the replied message
	MediaTimestamp int32 `json:"media_timestamp"`
}

func (entity *TextEntityTypeMediaTimestamp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextEntityTypeMediaTimestamp

	return json.Marshal((*stub)(entity))
}

func (*TextEntityTypeMediaTimestamp) GetType() string {
	return TypeTextEntityType
}

func (*TextEntityTypeMediaTimestamp) GetConstructor() string {
	return ConstructorTextEntityTypeMediaTimestamp
}

func (*TextEntityTypeMediaTimestamp) TextEntityTypeConstructor() string {
	return ConstructorTextEntityTypeMediaTimestamp
}

// A thumbnail to be sent along with a file; must be in JPEG or WEBP format for stickers, and less than 200 KB in size
type InputThumbnail struct {
	meta
	// Thumbnail file to send. Sending thumbnails by file_id is currently not supported
	Thumbnail InputFile `json:"thumbnail"`
	// Thumbnail width, usually shouldn't exceed 320. Use 0 if unknown
	Width int32 `json:"width"`
	// Thumbnail height, usually shouldn't exceed 320. Use 0 if unknown
	Height int32 `json:"height"`
}

func (entity *InputThumbnail) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputThumbnail

	return json.Marshal((*stub)(entity))
}

func (*InputThumbnail) GetType() string {
	return TypeInputThumbnail
}

func (*InputThumbnail) GetConstructor() string {
	return ConstructorInputThumbnail
}

func (inputThumbnail *InputThumbnail) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Thumbnail json.RawMessage `json:"thumbnail"`
		Width     int32           `json:"width"`
		Height    int32           `json:"height"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputThumbnail.Width = tmp.Width
	inputThumbnail.Height = tmp.Height

	fieldThumbnail, _ := UnmarshalInputFile(tmp.Thumbnail)
	inputThumbnail.Thumbnail = fieldThumbnail

	return nil
}

// The media is a photo. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20
type InputPaidMediaTypePhoto struct {
	meta
}

func (entity *InputPaidMediaTypePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPaidMediaTypePhoto

	return json.Marshal((*stub)(entity))
}

func (*InputPaidMediaTypePhoto) GetType() string {
	return TypeInputPaidMediaType
}

func (*InputPaidMediaTypePhoto) GetConstructor() string {
	return ConstructorInputPaidMediaTypePhoto
}

func (*InputPaidMediaTypePhoto) InputPaidMediaTypeConstructor() string {
	return ConstructorInputPaidMediaTypePhoto
}

// The media is a video
type InputPaidMediaTypeVideo struct {
	meta
	// Duration of the video, in seconds
	Duration int32 `json:"duration"`
	// True, if the video is expected to be streamed
	SupportsStreaming bool `json:"supports_streaming"`
}

func (entity *InputPaidMediaTypeVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPaidMediaTypeVideo

	return json.Marshal((*stub)(entity))
}

func (*InputPaidMediaTypeVideo) GetType() string {
	return TypeInputPaidMediaType
}

func (*InputPaidMediaTypeVideo) GetConstructor() string {
	return ConstructorInputPaidMediaTypeVideo
}

func (*InputPaidMediaTypeVideo) InputPaidMediaTypeConstructor() string {
	return ConstructorInputPaidMediaTypeVideo
}

// Describes a paid media to be sent
type InputPaidMedia struct {
	meta
	// Type of the media
	Type InputPaidMediaType `json:"type"`
	// Photo or video to be sent
	Media InputFile `json:"media"`
	// Media thumbnail; pass null to skip thumbnail uploading
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// File identifiers of the stickers added to the media, if applicable
	AddedStickerFileIds []int32 `json:"added_sticker_file_ids"`
	// Media width
	Width int32 `json:"width"`
	// Media height
	Height int32 `json:"height"`
}

func (entity *InputPaidMedia) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputPaidMedia

	return json.Marshal((*stub)(entity))
}

func (*InputPaidMedia) GetType() string {
	return TypeInputPaidMedia
}

func (*InputPaidMedia) GetConstructor() string {
	return ConstructorInputPaidMedia
}

func (inputPaidMedia *InputPaidMedia) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type                json.RawMessage `json:"type"`
		Media               json.RawMessage `json:"media"`
		Thumbnail           *InputThumbnail `json:"thumbnail"`
		AddedStickerFileIds []int32         `json:"added_sticker_file_ids"`
		Width               int32           `json:"width"`
		Height              int32           `json:"height"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputPaidMedia.Thumbnail = tmp.Thumbnail
	inputPaidMedia.AddedStickerFileIds = tmp.AddedStickerFileIds
	inputPaidMedia.Width = tmp.Width
	inputPaidMedia.Height = tmp.Height

	fieldType, _ := UnmarshalInputPaidMediaType(tmp.Type)
	inputPaidMedia.Type = fieldType

	fieldMedia, _ := UnmarshalInputFile(tmp.Media)
	inputPaidMedia.Media = fieldMedia

	return nil
}

// The message will be sent at the specified date
type MessageSchedulingStateSendAtDate struct {
	meta
	// Point in time (Unix timestamp) when the message will be sent. The date must be within 367 days in the future
	SendDate int32 `json:"send_date"`
}

func (entity *MessageSchedulingStateSendAtDate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSchedulingStateSendAtDate

	return json.Marshal((*stub)(entity))
}

func (*MessageSchedulingStateSendAtDate) GetType() string {
	return TypeMessageSchedulingState
}

func (*MessageSchedulingStateSendAtDate) GetConstructor() string {
	return ConstructorMessageSchedulingStateSendAtDate
}

func (*MessageSchedulingStateSendAtDate) MessageSchedulingStateConstructor() string {
	return ConstructorMessageSchedulingStateSendAtDate
}

// The message will be sent when the other user is online. Applicable to private chats only and when the exact online status of the other user is known
type MessageSchedulingStateSendWhenOnline struct {
	meta
}

func (entity *MessageSchedulingStateSendWhenOnline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSchedulingStateSendWhenOnline

	return json.Marshal((*stub)(entity))
}

func (*MessageSchedulingStateSendWhenOnline) GetType() string {
	return TypeMessageSchedulingState
}

func (*MessageSchedulingStateSendWhenOnline) GetConstructor() string {
	return ConstructorMessageSchedulingStateSendWhenOnline
}

func (*MessageSchedulingStateSendWhenOnline) MessageSchedulingStateConstructor() string {
	return ConstructorMessageSchedulingStateSendWhenOnline
}

// The message will be sent when the video in the message is converted and optimized; can be used only by the server
type MessageSchedulingStateSendWhenVideoProcessed struct {
	meta
	// Approximate point in time (Unix timestamp) when the message is expected to be sent
	SendDate int32 `json:"send_date"`
}

func (entity *MessageSchedulingStateSendWhenVideoProcessed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSchedulingStateSendWhenVideoProcessed

	return json.Marshal((*stub)(entity))
}

func (*MessageSchedulingStateSendWhenVideoProcessed) GetType() string {
	return TypeMessageSchedulingState
}

func (*MessageSchedulingStateSendWhenVideoProcessed) GetConstructor() string {
	return ConstructorMessageSchedulingStateSendWhenVideoProcessed
}

func (*MessageSchedulingStateSendWhenVideoProcessed) MessageSchedulingStateConstructor() string {
	return ConstructorMessageSchedulingStateSendWhenVideoProcessed
}

// The message will be self-destructed in the specified time after its content was opened
type MessageSelfDestructTypeTimer struct {
	meta
	// The message's self-destruct time, in seconds; must be between 0 and 60 in private chats
	SelfDestructTime int32 `json:"self_destruct_time"`
}

func (entity *MessageSelfDestructTypeTimer) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSelfDestructTypeTimer

	return json.Marshal((*stub)(entity))
}

func (*MessageSelfDestructTypeTimer) GetType() string {
	return TypeMessageSelfDestructType
}

func (*MessageSelfDestructTypeTimer) GetConstructor() string {
	return ConstructorMessageSelfDestructTypeTimer
}

func (*MessageSelfDestructTypeTimer) MessageSelfDestructTypeConstructor() string {
	return ConstructorMessageSelfDestructTypeTimer
}

// The message can be opened only once and will be self-destructed once closed
type MessageSelfDestructTypeImmediately struct {
	meta
}

func (entity *MessageSelfDestructTypeImmediately) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSelfDestructTypeImmediately

	return json.Marshal((*stub)(entity))
}

func (*MessageSelfDestructTypeImmediately) GetType() string {
	return TypeMessageSelfDestructType
}

func (*MessageSelfDestructTypeImmediately) GetConstructor() string {
	return ConstructorMessageSelfDestructTypeImmediately
}

func (*MessageSelfDestructTypeImmediately) MessageSelfDestructTypeConstructor() string {
	return ConstructorMessageSelfDestructTypeImmediately
}

// Options to be used when a message is sent
type MessageSendOptions struct {
	meta
	// Pass true to disable notification for the message
	DisableNotification bool `json:"disable_notification"`
	// Pass true if the message is sent from the background
	FromBackground bool `json:"from_background"`
	// Pass true if the content of the message must be protected from forwarding and saving; for bots only
	ProtectContent bool `json:"protect_content"`
	// Pass true to allow the message to ignore regular broadcast limits for a small fee; for bots only
	AllowPaidBroadcast bool `json:"allow_paid_broadcast"`
	// Pass true if the user explicitly chosen a sticker or a custom emoji from an installed sticker set; applicable only to sendMessage and sendMessageAlbum
	UpdateOrderOfInstalledStickerSets bool `json:"update_order_of_installed_sticker_sets"`
	// Message scheduling state; pass null to send message immediately. Messages sent to a secret chat, live location messages and self-destructing messages can't be scheduled
	SchedulingState MessageSchedulingState `json:"scheduling_state"`
	// Identifier of the effect to apply to the message; pass 0 if none; applicable only to sendMessage and sendMessageAlbum in private chats
	EffectId JsonInt64 `json:"effect_id"`
	// Non-persistent identifier, which will be returned back in messageSendingStatePending object and can be used to match sent messages and corresponding updateNewMessage updates
	SendingId int32 `json:"sending_id"`
	// Pass true to get a fake message instead of actually sending them
	OnlyPreview bool `json:"only_preview"`
}

func (entity *MessageSendOptions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageSendOptions

	return json.Marshal((*stub)(entity))
}

func (*MessageSendOptions) GetType() string {
	return TypeMessageSendOptions
}

func (*MessageSendOptions) GetConstructor() string {
	return ConstructorMessageSendOptions
}

func (messageSendOptions *MessageSendOptions) UnmarshalJSON(data []byte) error {
	var tmp struct {
		DisableNotification               bool            `json:"disable_notification"`
		FromBackground                    bool            `json:"from_background"`
		ProtectContent                    bool            `json:"protect_content"`
		AllowPaidBroadcast                bool            `json:"allow_paid_broadcast"`
		UpdateOrderOfInstalledStickerSets bool            `json:"update_order_of_installed_sticker_sets"`
		SchedulingState                   json.RawMessage `json:"scheduling_state"`
		EffectId                          JsonInt64       `json:"effect_id"`
		SendingId                         int32           `json:"sending_id"`
		OnlyPreview                       bool            `json:"only_preview"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	messageSendOptions.DisableNotification = tmp.DisableNotification
	messageSendOptions.FromBackground = tmp.FromBackground
	messageSendOptions.ProtectContent = tmp.ProtectContent
	messageSendOptions.AllowPaidBroadcast = tmp.AllowPaidBroadcast
	messageSendOptions.UpdateOrderOfInstalledStickerSets = tmp.UpdateOrderOfInstalledStickerSets
	messageSendOptions.EffectId = tmp.EffectId
	messageSendOptions.SendingId = tmp.SendingId
	messageSendOptions.OnlyPreview = tmp.OnlyPreview

	fieldSchedulingState, _ := UnmarshalMessageSchedulingState(tmp.SchedulingState)
	messageSendOptions.SchedulingState = fieldSchedulingState

	return nil
}

// Options to be used when a message content is copied without reference to the original sender. Service messages, messages with messageInvoice, messagePaidMedia, messageGiveaway, or messageGiveawayWinners content can't be copied
type MessageCopyOptions struct {
	meta
	// True, if content of the message needs to be copied without reference to the original sender. Always true if the message is forwarded to a secret chat or is local. Use messageProperties.can_be_saved and messageProperties.can_be_copied_to_secret_chat to check whether the message is suitable
	SendCopy bool `json:"send_copy"`
	// True, if media caption of the message copy needs to be replaced. Ignored if send_copy is false
	ReplaceCaption bool `json:"replace_caption"`
	// New message caption; pass null to copy message without caption. Ignored if replace_caption is false
	NewCaption *FormattedText `json:"new_caption"`
	// True, if new caption must be shown above the media; otherwise, new caption must be shown below the media; not supported in secret chats. Ignored if replace_caption is false
	NewShowCaptionAboveMedia bool `json:"new_show_caption_above_media"`
}

func (entity *MessageCopyOptions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageCopyOptions

	return json.Marshal((*stub)(entity))
}

func (*MessageCopyOptions) GetType() string {
	return TypeMessageCopyOptions
}

func (*MessageCopyOptions) GetConstructor() string {
	return ConstructorMessageCopyOptions
}

// A text message
type InputMessageText struct {
	meta
	// Formatted text to be sent; 0-getOption("message_text_length_max") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, CustomEmoji, BlockQuote, ExpandableBlockQuote, Code, Pre, PreCode, TextUrl and MentionName entities are allowed to be specified manually
	Text *FormattedText `json:"text"`
	// Options to be used for generation of a link preview; may be null if none; pass null to use default link preview options
	LinkPreviewOptions *LinkPreviewOptions `json:"link_preview_options"`
	// True, if a chat message draft must be deleted
	ClearDraft bool `json:"clear_draft"`
}

func (entity *InputMessageText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageText

	return json.Marshal((*stub)(entity))
}

func (*InputMessageText) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageText) GetConstructor() string {
	return ConstructorInputMessageText
}

func (*InputMessageText) InputMessageContentConstructor() string {
	return ConstructorInputMessageText
}

// An animation message (GIF-style).
type InputMessageAnimation struct {
	meta
	// Animation file to be sent
	Animation InputFile `json:"animation"`
	// Animation thumbnail; pass null to skip thumbnail uploading
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// File identifiers of the stickers added to the animation, if applicable
	AddedStickerFileIds []int32 `json:"added_sticker_file_ids"`
	// Duration of the animation, in seconds
	Duration int32 `json:"duration"`
	// Width of the animation; may be replaced by the server
	Width int32 `json:"width"`
	// Height of the animation; may be replaced by the server
	Height int32 `json:"height"`
	// Animation caption; pass null to use an empty caption; 0-getOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
	// True, if the caption must be shown above the animation; otherwise, the caption must be shown below the animation; not supported in secret chats
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
	// True, if the animation preview must be covered by a spoiler animation; not supported in secret chats
	HasSpoiler bool `json:"has_spoiler"`
}

func (entity *InputMessageAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageAnimation

	return json.Marshal((*stub)(entity))
}

func (*InputMessageAnimation) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageAnimation) GetConstructor() string {
	return ConstructorInputMessageAnimation
}

func (*InputMessageAnimation) InputMessageContentConstructor() string {
	return ConstructorInputMessageAnimation
}

func (inputMessageAnimation *InputMessageAnimation) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Animation             json.RawMessage `json:"animation"`
		Thumbnail             *InputThumbnail `json:"thumbnail"`
		AddedStickerFileIds   []int32         `json:"added_sticker_file_ids"`
		Duration              int32           `json:"duration"`
		Width                 int32           `json:"width"`
		Height                int32           `json:"height"`
		Caption               *FormattedText  `json:"caption"`
		ShowCaptionAboveMedia bool            `json:"show_caption_above_media"`
		HasSpoiler            bool            `json:"has_spoiler"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputMessageAnimation.Thumbnail = tmp.Thumbnail
	inputMessageAnimation.AddedStickerFileIds = tmp.AddedStickerFileIds
	inputMessageAnimation.Duration = tmp.Duration
	inputMessageAnimation.Width = tmp.Width
	inputMessageAnimation.Height = tmp.Height
	inputMessageAnimation.Caption = tmp.Caption
	inputMessageAnimation.ShowCaptionAboveMedia = tmp.ShowCaptionAboveMedia
	inputMessageAnimation.HasSpoiler = tmp.HasSpoiler

	fieldAnimation, _ := UnmarshalInputFile(tmp.Animation)
	inputMessageAnimation.Animation = fieldAnimation

	return nil
}

// An audio message
type InputMessageAudio struct {
	meta
	// Audio file to be sent
	Audio InputFile `json:"audio"`
	// Thumbnail of the cover for the album; pass null to skip thumbnail uploading
	AlbumCoverThumbnail *InputThumbnail `json:"album_cover_thumbnail"`
	// Duration of the audio, in seconds; may be replaced by the server
	Duration int32 `json:"duration"`
	// Title of the audio; 0-64 characters; may be replaced by the server
	Title string `json:"title"`
	// Performer of the audio; 0-64 characters, may be replaced by the server
	Performer string `json:"performer"`
	// Audio caption; pass null to use an empty caption; 0-getOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
}

func (entity *InputMessageAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageAudio

	return json.Marshal((*stub)(entity))
}

func (*InputMessageAudio) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageAudio) GetConstructor() string {
	return ConstructorInputMessageAudio
}

func (*InputMessageAudio) InputMessageContentConstructor() string {
	return ConstructorInputMessageAudio
}

func (inputMessageAudio *InputMessageAudio) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Audio               json.RawMessage `json:"audio"`
		AlbumCoverThumbnail *InputThumbnail `json:"album_cover_thumbnail"`
		Duration            int32           `json:"duration"`
		Title               string          `json:"title"`
		Performer           string          `json:"performer"`
		Caption             *FormattedText  `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputMessageAudio.AlbumCoverThumbnail = tmp.AlbumCoverThumbnail
	inputMessageAudio.Duration = tmp.Duration
	inputMessageAudio.Title = tmp.Title
	inputMessageAudio.Performer = tmp.Performer
	inputMessageAudio.Caption = tmp.Caption

	fieldAudio, _ := UnmarshalInputFile(tmp.Audio)
	inputMessageAudio.Audio = fieldAudio

	return nil
}

// A document message (general file)
type InputMessageDocument struct {
	meta
	// Document to be sent
	Document InputFile `json:"document"`
	// Document thumbnail; pass null to skip thumbnail uploading
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// Pass true to disable automatic file type detection and send the document as a file. Always true for files sent to secret chats
	DisableContentTypeDetection bool `json:"disable_content_type_detection"`
	// Document caption; pass null to use an empty caption; 0-getOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
}

func (entity *InputMessageDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageDocument

	return json.Marshal((*stub)(entity))
}

func (*InputMessageDocument) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageDocument) GetConstructor() string {
	return ConstructorInputMessageDocument
}

func (*InputMessageDocument) InputMessageContentConstructor() string {
	return ConstructorInputMessageDocument
}

func (inputMessageDocument *InputMessageDocument) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Document                    json.RawMessage `json:"document"`
		Thumbnail                   *InputThumbnail `json:"thumbnail"`
		DisableContentTypeDetection bool            `json:"disable_content_type_detection"`
		Caption                     *FormattedText  `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputMessageDocument.Thumbnail = tmp.Thumbnail
	inputMessageDocument.DisableContentTypeDetection = tmp.DisableContentTypeDetection
	inputMessageDocument.Caption = tmp.Caption

	fieldDocument, _ := UnmarshalInputFile(tmp.Document)
	inputMessageDocument.Document = fieldDocument

	return nil
}

// A message with paid media; can be used only in channel chats with supergroupFullInfo.has_paid_media_allowed
type InputMessagePaidMedia struct {
	meta
	// The number of Telegram Stars that must be paid to see the media; 1-getOption("paid_media_message_star_count_max")
	StarCount int64 `json:"star_count"`
	// The content of the paid media
	PaidMedia []*InputPaidMedia `json:"paid_media"`
	// Message caption; pass null to use an empty caption; 0-getOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
	// True, if the caption must be shown above the media; otherwise, the caption must be shown below the media; not supported in secret chats
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
	// Bot-provided data for the paid media; bots only
	Payload string `json:"payload"`
}

func (entity *InputMessagePaidMedia) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessagePaidMedia

	return json.Marshal((*stub)(entity))
}

func (*InputMessagePaidMedia) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessagePaidMedia) GetConstructor() string {
	return ConstructorInputMessagePaidMedia
}

func (*InputMessagePaidMedia) InputMessageContentConstructor() string {
	return ConstructorInputMessagePaidMedia
}

// A photo message
type InputMessagePhoto struct {
	meta
	// Photo to send. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20
	Photo InputFile `json:"photo"`
	// Photo thumbnail to be sent; pass null to skip thumbnail uploading. The thumbnail is sent to the other party only in secret chats
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// File identifiers of the stickers added to the photo, if applicable
	AddedStickerFileIds []int32 `json:"added_sticker_file_ids"`
	// Photo width
	Width int32 `json:"width"`
	// Photo height
	Height int32 `json:"height"`
	// Photo caption; pass null to use an empty caption; 0-getOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
	// True, if the caption must be shown above the photo; otherwise, the caption must be shown below the photo; not supported in secret chats
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
	// Photo self-destruct type; pass null if none; private chats only
	SelfDestructType MessageSelfDestructType `json:"self_destruct_type"`
	// True, if the photo preview must be covered by a spoiler animation; not supported in secret chats
	HasSpoiler bool `json:"has_spoiler"`
}

func (entity *InputMessagePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessagePhoto

	return json.Marshal((*stub)(entity))
}

func (*InputMessagePhoto) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessagePhoto) GetConstructor() string {
	return ConstructorInputMessagePhoto
}

func (*InputMessagePhoto) InputMessageContentConstructor() string {
	return ConstructorInputMessagePhoto
}

func (inputMessagePhoto *InputMessagePhoto) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Photo                 json.RawMessage `json:"photo"`
		Thumbnail             *InputThumbnail `json:"thumbnail"`
		AddedStickerFileIds   []int32         `json:"added_sticker_file_ids"`
		Width                 int32           `json:"width"`
		Height                int32           `json:"height"`
		Caption               *FormattedText  `json:"caption"`
		ShowCaptionAboveMedia bool            `json:"show_caption_above_media"`
		SelfDestructType      json.RawMessage `json:"self_destruct_type"`
		HasSpoiler            bool            `json:"has_spoiler"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputMessagePhoto.Thumbnail = tmp.Thumbnail
	inputMessagePhoto.AddedStickerFileIds = tmp.AddedStickerFileIds
	inputMessagePhoto.Width = tmp.Width
	inputMessagePhoto.Height = tmp.Height
	inputMessagePhoto.Caption = tmp.Caption
	inputMessagePhoto.ShowCaptionAboveMedia = tmp.ShowCaptionAboveMedia
	inputMessagePhoto.HasSpoiler = tmp.HasSpoiler

	fieldPhoto, _ := UnmarshalInputFile(tmp.Photo)
	inputMessagePhoto.Photo = fieldPhoto

	fieldSelfDestructType, _ := UnmarshalMessageSelfDestructType(tmp.SelfDestructType)
	inputMessagePhoto.SelfDestructType = fieldSelfDestructType

	return nil
}

// A sticker message
type InputMessageSticker struct {
	meta
	// Sticker to be sent
	Sticker InputFile `json:"sticker"`
	// Sticker thumbnail; pass null to skip thumbnail uploading
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// Sticker width
	Width int32 `json:"width"`
	// Sticker height
	Height int32 `json:"height"`
	// Emoji used to choose the sticker
	Emoji string `json:"emoji"`
}

func (entity *InputMessageSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageSticker

	return json.Marshal((*stub)(entity))
}

func (*InputMessageSticker) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageSticker) GetConstructor() string {
	return ConstructorInputMessageSticker
}

func (*InputMessageSticker) InputMessageContentConstructor() string {
	return ConstructorInputMessageSticker
}

func (inputMessageSticker *InputMessageSticker) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Sticker   json.RawMessage `json:"sticker"`
		Thumbnail *InputThumbnail `json:"thumbnail"`
		Width     int32           `json:"width"`
		Height    int32           `json:"height"`
		Emoji     string          `json:"emoji"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputMessageSticker.Thumbnail = tmp.Thumbnail
	inputMessageSticker.Width = tmp.Width
	inputMessageSticker.Height = tmp.Height
	inputMessageSticker.Emoji = tmp.Emoji

	fieldSticker, _ := UnmarshalInputFile(tmp.Sticker)
	inputMessageSticker.Sticker = fieldSticker

	return nil
}

// A video message
type InputMessageVideo struct {
	meta
	// Video to be sent. The video is expected to be re-encoded to MPEG4 format with H.264 codec by the sender
	Video InputFile `json:"video"`
	// Video thumbnail; pass null to skip thumbnail uploading
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// File identifiers of the stickers added to the video, if applicable
	AddedStickerFileIds []int32 `json:"added_sticker_file_ids"`
	// Duration of the video, in seconds
	Duration int32 `json:"duration"`
	// Video width
	Width int32 `json:"width"`
	// Video height
	Height int32 `json:"height"`
	// True, if the video is expected to be streamed
	SupportsStreaming bool `json:"supports_streaming"`
	// Video caption; pass null to use an empty caption; 0-getOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
	// True, if the caption must be shown above the video; otherwise, the caption must be shown below the video; not supported in secret chats
	ShowCaptionAboveMedia bool `json:"show_caption_above_media"`
	// Video self-destruct type; pass null if none; private chats only
	SelfDestructType MessageSelfDestructType `json:"self_destruct_type"`
	// True, if the video preview must be covered by a spoiler animation; not supported in secret chats
	HasSpoiler bool `json:"has_spoiler"`
}

func (entity *InputMessageVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageVideo

	return json.Marshal((*stub)(entity))
}

func (*InputMessageVideo) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageVideo) GetConstructor() string {
	return ConstructorInputMessageVideo
}

func (*InputMessageVideo) InputMessageContentConstructor() string {
	return ConstructorInputMessageVideo
}

func (inputMessageVideo *InputMessageVideo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Video                 json.RawMessage `json:"video"`
		Thumbnail             *InputThumbnail `json:"thumbnail"`
		AddedStickerFileIds   []int32         `json:"added_sticker_file_ids"`
		Duration              int32           `json:"duration"`
		Width                 int32           `json:"width"`
		Height                int32           `json:"height"`
		SupportsStreaming     bool            `json:"supports_streaming"`
		Caption               *FormattedText  `json:"caption"`
		ShowCaptionAboveMedia bool            `json:"show_caption_above_media"`
		SelfDestructType      json.RawMessage `json:"self_destruct_type"`
		HasSpoiler            bool            `json:"has_spoiler"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputMessageVideo.Thumbnail = tmp.Thumbnail
	inputMessageVideo.AddedStickerFileIds = tmp.AddedStickerFileIds
	inputMessageVideo.Duration = tmp.Duration
	inputMessageVideo.Width = tmp.Width
	inputMessageVideo.Height = tmp.Height
	inputMessageVideo.SupportsStreaming = tmp.SupportsStreaming
	inputMessageVideo.Caption = tmp.Caption
	inputMessageVideo.ShowCaptionAboveMedia = tmp.ShowCaptionAboveMedia
	inputMessageVideo.HasSpoiler = tmp.HasSpoiler

	fieldVideo, _ := UnmarshalInputFile(tmp.Video)
	inputMessageVideo.Video = fieldVideo

	fieldSelfDestructType, _ := UnmarshalMessageSelfDestructType(tmp.SelfDestructType)
	inputMessageVideo.SelfDestructType = fieldSelfDestructType

	return nil
}

// A video note message
type InputMessageVideoNote struct {
	meta
	// Video note to be sent. The video is expected to be encoded to MPEG4 format with H.264 codec and have no data outside of the visible circle
	VideoNote InputFile `json:"video_note"`
	// Video thumbnail; may be null if empty; pass null to skip thumbnail uploading
	Thumbnail *InputThumbnail `json:"thumbnail"`
	// Duration of the video, in seconds; 0-60
	Duration int32 `json:"duration"`
	// Video width and height; must be positive and not greater than 640
	Length int32 `json:"length"`
	// Video note self-destruct type; may be null if none; pass null if none; private chats only
	SelfDestructType MessageSelfDestructType `json:"self_destruct_type"`
}

func (entity *InputMessageVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageVideoNote

	return json.Marshal((*stub)(entity))
}

func (*InputMessageVideoNote) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageVideoNote) GetConstructor() string {
	return ConstructorInputMessageVideoNote
}

func (*InputMessageVideoNote) InputMessageContentConstructor() string {
	return ConstructorInputMessageVideoNote
}

func (inputMessageVideoNote *InputMessageVideoNote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		VideoNote        json.RawMessage `json:"video_note"`
		Thumbnail        *InputThumbnail `json:"thumbnail"`
		Duration         int32           `json:"duration"`
		Length           int32           `json:"length"`
		SelfDestructType json.RawMessage `json:"self_destruct_type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputMessageVideoNote.Thumbnail = tmp.Thumbnail
	inputMessageVideoNote.Duration = tmp.Duration
	inputMessageVideoNote.Length = tmp.Length

	fieldVideoNote, _ := UnmarshalInputFile(tmp.VideoNote)
	inputMessageVideoNote.VideoNote = fieldVideoNote

	fieldSelfDestructType, _ := UnmarshalMessageSelfDestructType(tmp.SelfDestructType)
	inputMessageVideoNote.SelfDestructType = fieldSelfDestructType

	return nil
}

// A voice note message
type InputMessageVoiceNote struct {
	meta
	// Voice note to be sent. The voice note must be encoded with the Opus codec and stored inside an OGG container with a single audio channel, or be in MP3 or M4A format as regular audio
	VoiceNote InputFile `json:"voice_note"`
	// Duration of the voice note, in seconds
	Duration int32 `json:"duration"`
	// Waveform representation of the voice note in 5-bit format
	Waveform []byte `json:"waveform"`
	// Voice note caption; may be null if empty; pass null to use an empty caption; 0-getOption("message_caption_length_max") characters
	Caption *FormattedText `json:"caption"`
	// Voice note self-destruct type; may be null if none; pass null if none; private chats only
	SelfDestructType MessageSelfDestructType `json:"self_destruct_type"`
}

func (entity *InputMessageVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*InputMessageVoiceNote) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageVoiceNote) GetConstructor() string {
	return ConstructorInputMessageVoiceNote
}

func (*InputMessageVoiceNote) InputMessageContentConstructor() string {
	return ConstructorInputMessageVoiceNote
}

func (inputMessageVoiceNote *InputMessageVoiceNote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		VoiceNote        json.RawMessage `json:"voice_note"`
		Duration         int32           `json:"duration"`
		Waveform         []byte          `json:"waveform"`
		Caption          *FormattedText  `json:"caption"`
		SelfDestructType json.RawMessage `json:"self_destruct_type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputMessageVoiceNote.Duration = tmp.Duration
	inputMessageVoiceNote.Waveform = tmp.Waveform
	inputMessageVoiceNote.Caption = tmp.Caption

	fieldVoiceNote, _ := UnmarshalInputFile(tmp.VoiceNote)
	inputMessageVoiceNote.VoiceNote = fieldVoiceNote

	fieldSelfDestructType, _ := UnmarshalMessageSelfDestructType(tmp.SelfDestructType)
	inputMessageVoiceNote.SelfDestructType = fieldSelfDestructType

	return nil
}

// A message with a location
type InputMessageLocation struct {
	meta
	// Location to be sent
	Location *Location `json:"location"`
	// Period for which the location can be updated, in seconds; must be between 60 and 86400 for a temporary live location, 0x7FFFFFFF for permanent live location, and 0 otherwise
	LivePeriod int32 `json:"live_period"`
	// For live locations, a direction in which the location moves, in degrees; 1-360. Pass 0 if unknown
	Heading int32 `json:"heading"`
	// For live locations, a maximum distance to another chat member for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled. Can't be enabled in channels and Saved Messages
	ProximityAlertRadius int32 `json:"proximity_alert_radius"`
}

func (entity *InputMessageLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageLocation

	return json.Marshal((*stub)(entity))
}

func (*InputMessageLocation) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageLocation) GetConstructor() string {
	return ConstructorInputMessageLocation
}

func (*InputMessageLocation) InputMessageContentConstructor() string {
	return ConstructorInputMessageLocation
}

// A message with information about a venue
type InputMessageVenue struct {
	meta
	// Venue to send
	Venue *Venue `json:"venue"`
}

func (entity *InputMessageVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageVenue

	return json.Marshal((*stub)(entity))
}

func (*InputMessageVenue) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageVenue) GetConstructor() string {
	return ConstructorInputMessageVenue
}

func (*InputMessageVenue) InputMessageContentConstructor() string {
	return ConstructorInputMessageVenue
}

// A message containing a user contact
type InputMessageContact struct {
	meta
	// Contact to send
	Contact *Contact `json:"contact"`
}

func (entity *InputMessageContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageContact

	return json.Marshal((*stub)(entity))
}

func (*InputMessageContact) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageContact) GetConstructor() string {
	return ConstructorInputMessageContact
}

func (*InputMessageContact) InputMessageContentConstructor() string {
	return ConstructorInputMessageContact
}

// A dice message
type InputMessageDice struct {
	meta
	// Emoji on which the dice throw animation is based
	Emoji string `json:"emoji"`
	// True, if the chat message draft must be deleted
	ClearDraft bool `json:"clear_draft"`
}

func (entity *InputMessageDice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageDice

	return json.Marshal((*stub)(entity))
}

func (*InputMessageDice) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageDice) GetConstructor() string {
	return ConstructorInputMessageDice
}

func (*InputMessageDice) InputMessageContentConstructor() string {
	return ConstructorInputMessageDice
}

// A message with a game; not supported for channels or secret chats
type InputMessageGame struct {
	meta
	// User identifier of the bot that owns the game
	BotUserId int64 `json:"bot_user_id"`
	// Short name of the game
	GameShortName string `json:"game_short_name"`
}

func (entity *InputMessageGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageGame

	return json.Marshal((*stub)(entity))
}

func (*InputMessageGame) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageGame) GetConstructor() string {
	return ConstructorInputMessageGame
}

func (*InputMessageGame) InputMessageContentConstructor() string {
	return ConstructorInputMessageGame
}

// A message with an invoice; can be used only by bots
type InputMessageInvoice struct {
	meta
	// Invoice
	Invoice *Invoice `json:"invoice"`
	// Product title; 1-32 characters
	Title string `json:"title"`
	// Product description; 0-255 characters
	Description string `json:"description"`
	// Product photo URL; optional
	PhotoUrl string `json:"photo_url"`
	// Product photo size
	PhotoSize int32 `json:"photo_size"`
	// Product photo width
	PhotoWidth int32 `json:"photo_width"`
	// Product photo height
	PhotoHeight int32 `json:"photo_height"`
	// The invoice payload
	Payload []byte `json:"payload"`
	// Payment provider token; may be empty for payments in Telegram Stars
	ProviderToken string `json:"provider_token"`
	// JSON-encoded data about the invoice, which will be shared with the payment provider
	ProviderData string `json:"provider_data"`
	// Unique invoice bot deep link parameter for the generation of this invoice. If empty, it would be possible to pay directly from forwards of the invoice message
	StartParameter string `json:"start_parameter"`
	// The content of paid media attached to the invoice; pass null if none
	PaidMedia *InputPaidMedia `json:"paid_media"`
	// Paid media caption; pass null to use an empty caption; 0-getOption("message_caption_length_max") characters
	PaidMediaCaption *FormattedText `json:"paid_media_caption"`
}

func (entity *InputMessageInvoice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageInvoice

	return json.Marshal((*stub)(entity))
}

func (*InputMessageInvoice) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageInvoice) GetConstructor() string {
	return ConstructorInputMessageInvoice
}

func (*InputMessageInvoice) InputMessageContentConstructor() string {
	return ConstructorInputMessageInvoice
}

// A message with a poll. Polls can't be sent to secret chats. Polls can be sent only to a private chat with a bot
type InputMessagePoll struct {
	meta
	// Poll question; 1-255 characters (up to 300 characters for bots). Only custom emoji entities are allowed to be added and only by Premium users
	Question *FormattedText `json:"question"`
	// List of poll answer options, 2-10 strings 1-100 characters each. Only custom emoji entities are allowed to be added and only by Premium users
	Options []*FormattedText `json:"options"`
	// True, if the poll voters are anonymous. Non-anonymous polls can't be sent or forwarded to channels
	IsAnonymous bool `json:"is_anonymous"`
	// Type of the poll
	Type PollType `json:"type"`
	// Amount of time the poll will be active after creation, in seconds; for bots only
	OpenPeriod int32 `json:"open_period"`
	// Point in time (Unix timestamp) when the poll will automatically be closed; for bots only
	CloseDate int32 `json:"close_date"`
	// True, if the poll needs to be sent already closed; for bots only
	IsClosed bool `json:"is_closed"`
}

func (entity *InputMessagePoll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessagePoll

	return json.Marshal((*stub)(entity))
}

func (*InputMessagePoll) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessagePoll) GetConstructor() string {
	return ConstructorInputMessagePoll
}

func (*InputMessagePoll) InputMessageContentConstructor() string {
	return ConstructorInputMessagePoll
}

func (inputMessagePoll *InputMessagePoll) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Question    *FormattedText   `json:"question"`
		Options     []*FormattedText `json:"options"`
		IsAnonymous bool             `json:"is_anonymous"`
		Type        json.RawMessage  `json:"type"`
		OpenPeriod  int32            `json:"open_period"`
		CloseDate   int32            `json:"close_date"`
		IsClosed    bool             `json:"is_closed"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputMessagePoll.Question = tmp.Question
	inputMessagePoll.Options = tmp.Options
	inputMessagePoll.IsAnonymous = tmp.IsAnonymous
	inputMessagePoll.OpenPeriod = tmp.OpenPeriod
	inputMessagePoll.CloseDate = tmp.CloseDate
	inputMessagePoll.IsClosed = tmp.IsClosed

	fieldType, _ := UnmarshalPollType(tmp.Type)
	inputMessagePoll.Type = fieldType

	return nil
}

// A message with a forwarded story. Stories can't be sent to secret chats. A story can be forwarded only if story.can_be_forwarded
type InputMessageStory struct {
	meta
	// Identifier of the chat that posted the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Story identifier
	StoryId int32 `json:"story_id"`
}

func (entity *InputMessageStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageStory

	return json.Marshal((*stub)(entity))
}

func (*InputMessageStory) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageStory) GetConstructor() string {
	return ConstructorInputMessageStory
}

func (*InputMessageStory) InputMessageContentConstructor() string {
	return ConstructorInputMessageStory
}

// A forwarded message
type InputMessageForwarded struct {
	meta
	// Identifier for the chat this forwarded message came from
	FromChatId int64 `json:"from_chat_id"`
	// Identifier of the message to forward. A message can be forwarded only if messageProperties.can_be_forwarded
	MessageId int64 `json:"message_id"`
	// True, if a game message is being shared from a launched game; applies only to game messages
	InGameShare bool `json:"in_game_share"`
	// Options to be used to copy content of the message without reference to the original sender; pass null to forward the message as usual
	CopyOptions *MessageCopyOptions `json:"copy_options"`
}

func (entity *InputMessageForwarded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputMessageForwarded

	return json.Marshal((*stub)(entity))
}

func (*InputMessageForwarded) GetType() string {
	return TypeInputMessageContent
}

func (*InputMessageForwarded) GetConstructor() string {
	return ConstructorInputMessageForwarded
}

func (*InputMessageForwarded) InputMessageContentConstructor() string {
	return ConstructorInputMessageForwarded
}

// Contains properties of a message and describes actions that can be done with the message right now
type MessageProperties struct {
	meta
	// True, if content of the message can be copied to a secret chat using inputMessageForwarded or forwardMessages with copy options
	CanBeCopiedToSecretChat bool `json:"can_be_copied_to_secret_chat"`
	// True, if the message can be deleted only for the current user while other users will continue to see it using the method deleteMessages with revoke == false
	CanBeDeletedOnlyForSelf bool `json:"can_be_deleted_only_for_self"`
	// True, if the message can be deleted for all users using the method deleteMessages with revoke == true
	CanBeDeletedForAllUsers bool `json:"can_be_deleted_for_all_users"`
	// True, if the message can be edited using the methods editMessageText, editMessageCaption, or editMessageReplyMarkup. For live location and poll messages this fields shows whether editMessageLiveLocation or stopPoll can be used with this message
	CanBeEdited bool `json:"can_be_edited"`
	// True, if the message can be forwarded using inputMessageForwarded or forwardMessages
	CanBeForwarded bool `json:"can_be_forwarded"`
	// True, if the message can be paid using inputInvoiceMessage
	CanBePaid bool `json:"can_be_paid"`
	// True, if the message can be pinned or unpinned in the chat using pinChatMessage or unpinChatMessage
	CanBePinned bool `json:"can_be_pinned"`
	// True, if the message can be replied in the same chat and forum topic using inputMessageReplyToMessage
	CanBeReplied bool `json:"can_be_replied"`
	// True, if the message can be replied in another chat or forum topic using inputMessageReplyToExternalMessage
	CanBeRepliedInAnotherChat bool `json:"can_be_replied_in_another_chat"`
	// True, if content of the message can be saved locally or copied using inputMessageForwarded or forwardMessages with copy options
	CanBeSaved bool `json:"can_be_saved"`
	// True, if the message can be shared in a story using inputStoryAreaTypeMessage
	CanBeSharedInStory bool `json:"can_be_shared_in_story"`
	// True, if the message can be edited using the method editMessageMedia
	CanEditMedia bool `json:"can_edit_media"`
	// True, if scheduling state of the message can be edited
	CanEditSchedulingState bool `json:"can_edit_scheduling_state"`
	// True, if code for message embedding can be received using getMessageEmbeddingCode
	CanGetEmbeddingCode bool `json:"can_get_embedding_code"`
	// True, if a link can be generated for the message using getMessageLink
	CanGetLink bool `json:"can_get_link"`
	// True, if media timestamp links can be generated for media timestamp entities in the message text, caption or link preview description using getMessageLink
	CanGetMediaTimestampLinks bool `json:"can_get_media_timestamp_links"`
	// True, if information about the message thread is available through getMessageThread and getMessageThreadHistory
	CanGetMessageThread bool `json:"can_get_message_thread"`
	// True, if read date of the message can be received through getMessageReadDate
	CanGetReadDate bool `json:"can_get_read_date"`
	// True, if message statistics are available through getMessageStatistics and message forwards can be received using getMessagePublicForwards
	CanGetStatistics bool `json:"can_get_statistics"`
	// True, if chat members already viewed the message can be received through getMessageViewers
	CanGetViewers bool `json:"can_get_viewers"`
	// True, if speech can be recognized for the message through recognizeSpeech
	CanRecognizeSpeech bool `json:"can_recognize_speech"`
	// True, if the message can be reported using reportChat
	CanReportChat bool `json:"can_report_chat"`
	// True, if reactions on the message can be reported through reportMessageReactions
	CanReportReactions bool `json:"can_report_reactions"`
	// True, if the message can be reported using reportSupergroupSpam
	CanReportSupergroupSpam bool `json:"can_report_supergroup_spam"`
	// True, if fact check for the message can be changed through setMessageFactCheck
	CanSetFactCheck bool `json:"can_set_fact_check"`
	// True, if message statistics must be available from context menu of the message
	NeedShowStatistics bool `json:"need_show_statistics"`
}

func (entity *MessageProperties) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageProperties

	return json.Marshal((*stub)(entity))
}

func (*MessageProperties) GetType() string {
	return TypeMessageProperties
}

func (*MessageProperties) GetConstructor() string {
	return ConstructorMessageProperties
}

// Returns all found messages, no filter is applied
type SearchMessagesFilterEmpty struct {
	meta
}

func (entity *SearchMessagesFilterEmpty) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterEmpty

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterEmpty) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterEmpty) GetConstructor() string {
	return ConstructorSearchMessagesFilterEmpty
}

func (*SearchMessagesFilterEmpty) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterEmpty
}

// Returns only animation messages
type SearchMessagesFilterAnimation struct {
	meta
}

func (entity *SearchMessagesFilterAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterAnimation

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterAnimation) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterAnimation) GetConstructor() string {
	return ConstructorSearchMessagesFilterAnimation
}

func (*SearchMessagesFilterAnimation) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterAnimation
}

// Returns only audio messages
type SearchMessagesFilterAudio struct {
	meta
}

func (entity *SearchMessagesFilterAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterAudio

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterAudio) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterAudio) GetConstructor() string {
	return ConstructorSearchMessagesFilterAudio
}

func (*SearchMessagesFilterAudio) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterAudio
}

// Returns only document messages
type SearchMessagesFilterDocument struct {
	meta
}

func (entity *SearchMessagesFilterDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterDocument

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterDocument) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterDocument) GetConstructor() string {
	return ConstructorSearchMessagesFilterDocument
}

func (*SearchMessagesFilterDocument) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterDocument
}

// Returns only photo messages
type SearchMessagesFilterPhoto struct {
	meta
}

func (entity *SearchMessagesFilterPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterPhoto

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterPhoto) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterPhoto) GetConstructor() string {
	return ConstructorSearchMessagesFilterPhoto
}

func (*SearchMessagesFilterPhoto) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterPhoto
}

// Returns only video messages
type SearchMessagesFilterVideo struct {
	meta
}

func (entity *SearchMessagesFilterVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterVideo

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterVideo) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterVideo) GetConstructor() string {
	return ConstructorSearchMessagesFilterVideo
}

func (*SearchMessagesFilterVideo) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterVideo
}

// Returns only voice note messages
type SearchMessagesFilterVoiceNote struct {
	meta
}

func (entity *SearchMessagesFilterVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterVoiceNote) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterVoiceNote) GetConstructor() string {
	return ConstructorSearchMessagesFilterVoiceNote
}

func (*SearchMessagesFilterVoiceNote) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterVoiceNote
}

// Returns only photo and video messages
type SearchMessagesFilterPhotoAndVideo struct {
	meta
}

func (entity *SearchMessagesFilterPhotoAndVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterPhotoAndVideo

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterPhotoAndVideo) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterPhotoAndVideo) GetConstructor() string {
	return ConstructorSearchMessagesFilterPhotoAndVideo
}

func (*SearchMessagesFilterPhotoAndVideo) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterPhotoAndVideo
}

// Returns only messages containing URLs
type SearchMessagesFilterUrl struct {
	meta
}

func (entity *SearchMessagesFilterUrl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterUrl

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterUrl) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterUrl) GetConstructor() string {
	return ConstructorSearchMessagesFilterUrl
}

func (*SearchMessagesFilterUrl) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterUrl
}

// Returns only messages containing chat photos
type SearchMessagesFilterChatPhoto struct {
	meta
}

func (entity *SearchMessagesFilterChatPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterChatPhoto

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterChatPhoto) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterChatPhoto) GetConstructor() string {
	return ConstructorSearchMessagesFilterChatPhoto
}

func (*SearchMessagesFilterChatPhoto) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterChatPhoto
}

// Returns only video note messages
type SearchMessagesFilterVideoNote struct {
	meta
}

func (entity *SearchMessagesFilterVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterVideoNote

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterVideoNote) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterVideoNote) GetConstructor() string {
	return ConstructorSearchMessagesFilterVideoNote
}

func (*SearchMessagesFilterVideoNote) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterVideoNote
}

// Returns only voice and video note messages
type SearchMessagesFilterVoiceAndVideoNote struct {
	meta
}

func (entity *SearchMessagesFilterVoiceAndVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterVoiceAndVideoNote

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterVoiceAndVideoNote) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterVoiceAndVideoNote) GetConstructor() string {
	return ConstructorSearchMessagesFilterVoiceAndVideoNote
}

func (*SearchMessagesFilterVoiceAndVideoNote) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterVoiceAndVideoNote
}

// Returns only messages with mentions of the current user, or messages that are replies to their messages
type SearchMessagesFilterMention struct {
	meta
}

func (entity *SearchMessagesFilterMention) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterMention

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterMention) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterMention) GetConstructor() string {
	return ConstructorSearchMessagesFilterMention
}

func (*SearchMessagesFilterMention) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterMention
}

// Returns only messages with unread mentions of the current user, or messages that are replies to their messages. When using this filter the results can't be additionally filtered by a query, a message thread or by the sending user
type SearchMessagesFilterUnreadMention struct {
	meta
}

func (entity *SearchMessagesFilterUnreadMention) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterUnreadMention

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterUnreadMention) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterUnreadMention) GetConstructor() string {
	return ConstructorSearchMessagesFilterUnreadMention
}

func (*SearchMessagesFilterUnreadMention) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterUnreadMention
}

// Returns only messages with unread reactions for the current user. When using this filter the results can't be additionally filtered by a query, a message thread or by the sending user
type SearchMessagesFilterUnreadReaction struct {
	meta
}

func (entity *SearchMessagesFilterUnreadReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterUnreadReaction

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterUnreadReaction) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterUnreadReaction) GetConstructor() string {
	return ConstructorSearchMessagesFilterUnreadReaction
}

func (*SearchMessagesFilterUnreadReaction) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterUnreadReaction
}

// Returns only failed to send messages. This filter can be used only if the message database is used
type SearchMessagesFilterFailedToSend struct {
	meta
}

func (entity *SearchMessagesFilterFailedToSend) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterFailedToSend

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterFailedToSend) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterFailedToSend) GetConstructor() string {
	return ConstructorSearchMessagesFilterFailedToSend
}

func (*SearchMessagesFilterFailedToSend) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterFailedToSend
}

// Returns only pinned messages
type SearchMessagesFilterPinned struct {
	meta
}

func (entity *SearchMessagesFilterPinned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SearchMessagesFilterPinned

	return json.Marshal((*stub)(entity))
}

func (*SearchMessagesFilterPinned) GetType() string {
	return TypeSearchMessagesFilter
}

func (*SearchMessagesFilterPinned) GetConstructor() string {
	return ConstructorSearchMessagesFilterPinned
}

func (*SearchMessagesFilterPinned) SearchMessagesFilterConstructor() string {
	return ConstructorSearchMessagesFilterPinned
}

// The user is typing a message
type ChatActionTyping struct {
	meta
}

func (entity *ChatActionTyping) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionTyping

	return json.Marshal((*stub)(entity))
}

func (*ChatActionTyping) GetType() string {
	return TypeChatAction
}

func (*ChatActionTyping) GetConstructor() string {
	return ConstructorChatActionTyping
}

func (*ChatActionTyping) ChatActionConstructor() string {
	return ConstructorChatActionTyping
}

// The user is recording a video
type ChatActionRecordingVideo struct {
	meta
}

func (entity *ChatActionRecordingVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionRecordingVideo

	return json.Marshal((*stub)(entity))
}

func (*ChatActionRecordingVideo) GetType() string {
	return TypeChatAction
}

func (*ChatActionRecordingVideo) GetConstructor() string {
	return ConstructorChatActionRecordingVideo
}

func (*ChatActionRecordingVideo) ChatActionConstructor() string {
	return ConstructorChatActionRecordingVideo
}

// The user is uploading a video
type ChatActionUploadingVideo struct {
	meta
	// Upload progress, as a percentage
	Progress int32 `json:"progress"`
}

func (entity *ChatActionUploadingVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionUploadingVideo

	return json.Marshal((*stub)(entity))
}

func (*ChatActionUploadingVideo) GetType() string {
	return TypeChatAction
}

func (*ChatActionUploadingVideo) GetConstructor() string {
	return ConstructorChatActionUploadingVideo
}

func (*ChatActionUploadingVideo) ChatActionConstructor() string {
	return ConstructorChatActionUploadingVideo
}

// The user is recording a voice note
type ChatActionRecordingVoiceNote struct {
	meta
}

func (entity *ChatActionRecordingVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionRecordingVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*ChatActionRecordingVoiceNote) GetType() string {
	return TypeChatAction
}

func (*ChatActionRecordingVoiceNote) GetConstructor() string {
	return ConstructorChatActionRecordingVoiceNote
}

func (*ChatActionRecordingVoiceNote) ChatActionConstructor() string {
	return ConstructorChatActionRecordingVoiceNote
}

// The user is uploading a voice note
type ChatActionUploadingVoiceNote struct {
	meta
	// Upload progress, as a percentage
	Progress int32 `json:"progress"`
}

func (entity *ChatActionUploadingVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionUploadingVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*ChatActionUploadingVoiceNote) GetType() string {
	return TypeChatAction
}

func (*ChatActionUploadingVoiceNote) GetConstructor() string {
	return ConstructorChatActionUploadingVoiceNote
}

func (*ChatActionUploadingVoiceNote) ChatActionConstructor() string {
	return ConstructorChatActionUploadingVoiceNote
}

// The user is uploading a photo
type ChatActionUploadingPhoto struct {
	meta
	// Upload progress, as a percentage
	Progress int32 `json:"progress"`
}

func (entity *ChatActionUploadingPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionUploadingPhoto

	return json.Marshal((*stub)(entity))
}

func (*ChatActionUploadingPhoto) GetType() string {
	return TypeChatAction
}

func (*ChatActionUploadingPhoto) GetConstructor() string {
	return ConstructorChatActionUploadingPhoto
}

func (*ChatActionUploadingPhoto) ChatActionConstructor() string {
	return ConstructorChatActionUploadingPhoto
}

// The user is uploading a document
type ChatActionUploadingDocument struct {
	meta
	// Upload progress, as a percentage
	Progress int32 `json:"progress"`
}

func (entity *ChatActionUploadingDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionUploadingDocument

	return json.Marshal((*stub)(entity))
}

func (*ChatActionUploadingDocument) GetType() string {
	return TypeChatAction
}

func (*ChatActionUploadingDocument) GetConstructor() string {
	return ConstructorChatActionUploadingDocument
}

func (*ChatActionUploadingDocument) ChatActionConstructor() string {
	return ConstructorChatActionUploadingDocument
}

// The user is picking a sticker to send
type ChatActionChoosingSticker struct {
	meta
}

func (entity *ChatActionChoosingSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionChoosingSticker

	return json.Marshal((*stub)(entity))
}

func (*ChatActionChoosingSticker) GetType() string {
	return TypeChatAction
}

func (*ChatActionChoosingSticker) GetConstructor() string {
	return ConstructorChatActionChoosingSticker
}

func (*ChatActionChoosingSticker) ChatActionConstructor() string {
	return ConstructorChatActionChoosingSticker
}

// The user is picking a location or venue to send
type ChatActionChoosingLocation struct {
	meta
}

func (entity *ChatActionChoosingLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionChoosingLocation

	return json.Marshal((*stub)(entity))
}

func (*ChatActionChoosingLocation) GetType() string {
	return TypeChatAction
}

func (*ChatActionChoosingLocation) GetConstructor() string {
	return ConstructorChatActionChoosingLocation
}

func (*ChatActionChoosingLocation) ChatActionConstructor() string {
	return ConstructorChatActionChoosingLocation
}

// The user is picking a contact to send
type ChatActionChoosingContact struct {
	meta
}

func (entity *ChatActionChoosingContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionChoosingContact

	return json.Marshal((*stub)(entity))
}

func (*ChatActionChoosingContact) GetType() string {
	return TypeChatAction
}

func (*ChatActionChoosingContact) GetConstructor() string {
	return ConstructorChatActionChoosingContact
}

func (*ChatActionChoosingContact) ChatActionConstructor() string {
	return ConstructorChatActionChoosingContact
}

// The user has started to play a game
type ChatActionStartPlayingGame struct {
	meta
}

func (entity *ChatActionStartPlayingGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionStartPlayingGame

	return json.Marshal((*stub)(entity))
}

func (*ChatActionStartPlayingGame) GetType() string {
	return TypeChatAction
}

func (*ChatActionStartPlayingGame) GetConstructor() string {
	return ConstructorChatActionStartPlayingGame
}

func (*ChatActionStartPlayingGame) ChatActionConstructor() string {
	return ConstructorChatActionStartPlayingGame
}

// The user is recording a video note
type ChatActionRecordingVideoNote struct {
	meta
}

func (entity *ChatActionRecordingVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionRecordingVideoNote

	return json.Marshal((*stub)(entity))
}

func (*ChatActionRecordingVideoNote) GetType() string {
	return TypeChatAction
}

func (*ChatActionRecordingVideoNote) GetConstructor() string {
	return ConstructorChatActionRecordingVideoNote
}

func (*ChatActionRecordingVideoNote) ChatActionConstructor() string {
	return ConstructorChatActionRecordingVideoNote
}

// The user is uploading a video note
type ChatActionUploadingVideoNote struct {
	meta
	// Upload progress, as a percentage
	Progress int32 `json:"progress"`
}

func (entity *ChatActionUploadingVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionUploadingVideoNote

	return json.Marshal((*stub)(entity))
}

func (*ChatActionUploadingVideoNote) GetType() string {
	return TypeChatAction
}

func (*ChatActionUploadingVideoNote) GetConstructor() string {
	return ConstructorChatActionUploadingVideoNote
}

func (*ChatActionUploadingVideoNote) ChatActionConstructor() string {
	return ConstructorChatActionUploadingVideoNote
}

// The user is watching animations sent by the other party by clicking on an animated emoji
type ChatActionWatchingAnimations struct {
	meta
	// The animated emoji
	Emoji string `json:"emoji"`
}

func (entity *ChatActionWatchingAnimations) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionWatchingAnimations

	return json.Marshal((*stub)(entity))
}

func (*ChatActionWatchingAnimations) GetType() string {
	return TypeChatAction
}

func (*ChatActionWatchingAnimations) GetConstructor() string {
	return ConstructorChatActionWatchingAnimations
}

func (*ChatActionWatchingAnimations) ChatActionConstructor() string {
	return ConstructorChatActionWatchingAnimations
}

// The user has canceled the previous action
type ChatActionCancel struct {
	meta
}

func (entity *ChatActionCancel) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActionCancel

	return json.Marshal((*stub)(entity))
}

func (*ChatActionCancel) GetType() string {
	return TypeChatAction
}

func (*ChatActionCancel) GetConstructor() string {
	return ConstructorChatActionCancel
}

func (*ChatActionCancel) ChatActionConstructor() string {
	return ConstructorChatActionCancel
}

// The user's status has never been changed
type UserStatusEmpty struct {
	meta
}

func (entity *UserStatusEmpty) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserStatusEmpty

	return json.Marshal((*stub)(entity))
}

func (*UserStatusEmpty) GetType() string {
	return TypeUserStatus
}

func (*UserStatusEmpty) GetConstructor() string {
	return ConstructorUserStatusEmpty
}

func (*UserStatusEmpty) UserStatusConstructor() string {
	return ConstructorUserStatusEmpty
}

// The user is online
type UserStatusOnline struct {
	meta
	// Point in time (Unix timestamp) when the user's online status will expire
	Expires int32 `json:"expires"`
}

func (entity *UserStatusOnline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserStatusOnline

	return json.Marshal((*stub)(entity))
}

func (*UserStatusOnline) GetType() string {
	return TypeUserStatus
}

func (*UserStatusOnline) GetConstructor() string {
	return ConstructorUserStatusOnline
}

func (*UserStatusOnline) UserStatusConstructor() string {
	return ConstructorUserStatusOnline
}

// The user is offline
type UserStatusOffline struct {
	meta
	// Point in time (Unix timestamp) when the user was last online
	WasOnline int32 `json:"was_online"`
}

func (entity *UserStatusOffline) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserStatusOffline

	return json.Marshal((*stub)(entity))
}

func (*UserStatusOffline) GetType() string {
	return TypeUserStatus
}

func (*UserStatusOffline) GetConstructor() string {
	return ConstructorUserStatusOffline
}

func (*UserStatusOffline) UserStatusConstructor() string {
	return ConstructorUserStatusOffline
}

// The user was online recently
type UserStatusRecently struct {
	meta
	// Exact user's status is hidden because the current user enabled userPrivacySettingShowStatus privacy setting for the user and has no Telegram Premium
	ByMyPrivacySettings bool `json:"by_my_privacy_settings"`
}

func (entity *UserStatusRecently) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserStatusRecently

	return json.Marshal((*stub)(entity))
}

func (*UserStatusRecently) GetType() string {
	return TypeUserStatus
}

func (*UserStatusRecently) GetConstructor() string {
	return ConstructorUserStatusRecently
}

func (*UserStatusRecently) UserStatusConstructor() string {
	return ConstructorUserStatusRecently
}

// The user is offline, but was online last week
type UserStatusLastWeek struct {
	meta
	// Exact user's status is hidden because the current user enabled userPrivacySettingShowStatus privacy setting for the user and has no Telegram Premium
	ByMyPrivacySettings bool `json:"by_my_privacy_settings"`
}

func (entity *UserStatusLastWeek) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserStatusLastWeek

	return json.Marshal((*stub)(entity))
}

func (*UserStatusLastWeek) GetType() string {
	return TypeUserStatus
}

func (*UserStatusLastWeek) GetConstructor() string {
	return ConstructorUserStatusLastWeek
}

func (*UserStatusLastWeek) UserStatusConstructor() string {
	return ConstructorUserStatusLastWeek
}

// The user is offline, but was online last month
type UserStatusLastMonth struct {
	meta
	// Exact user's status is hidden because the current user enabled userPrivacySettingShowStatus privacy setting for the user and has no Telegram Premium
	ByMyPrivacySettings bool `json:"by_my_privacy_settings"`
}

func (entity *UserStatusLastMonth) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserStatusLastMonth

	return json.Marshal((*stub)(entity))
}

func (*UserStatusLastMonth) GetType() string {
	return TypeUserStatus
}

func (*UserStatusLastMonth) GetConstructor() string {
	return ConstructorUserStatusLastMonth
}

func (*UserStatusLastMonth) UserStatusConstructor() string {
	return ConstructorUserStatusLastMonth
}

// Represents an emoji with its keyword
type EmojiKeyword struct {
	meta
	// The emoji
	Emoji string `json:"emoji"`
	// The keyword
	Keyword string `json:"keyword"`
}

func (entity *EmojiKeyword) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiKeyword

	return json.Marshal((*stub)(entity))
}

func (*EmojiKeyword) GetType() string {
	return TypeEmojiKeyword
}

func (*EmojiKeyword) GetConstructor() string {
	return ConstructorEmojiKeyword
}

// Represents a list of emojis with their keywords
type EmojiKeywords struct {
	meta
	// List of emojis with their keywords
	EmojiKeywords []*EmojiKeyword `json:"emoji_keywords"`
}

func (entity *EmojiKeywords) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiKeywords

	return json.Marshal((*stub)(entity))
}

func (*EmojiKeywords) GetType() string {
	return TypeEmojiKeywords
}

func (*EmojiKeywords) GetConstructor() string {
	return ConstructorEmojiKeywords
}

// Represents a list of stickers
type Stickers struct {
	meta
	// List of stickers
	Stickers []*Sticker `json:"stickers"`
}

func (entity *Stickers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Stickers

	return json.Marshal((*stub)(entity))
}

func (*Stickers) GetType() string {
	return TypeStickers
}

func (*Stickers) GetConstructor() string {
	return ConstructorStickers
}

// Represents a list of emojis
type Emojis struct {
	meta
	// List of emojis
	Emojis []string `json:"emojis"`
}

func (entity *Emojis) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Emojis

	return json.Marshal((*stub)(entity))
}

func (*Emojis) GetType() string {
	return TypeEmojis
}

func (*Emojis) GetConstructor() string {
	return ConstructorEmojis
}

// Represents a sticker set
type StickerSet struct {
	meta
	// Identifier of the sticker set
	Id JsonInt64 `json:"id"`
	// Title of the sticker set
	Title string `json:"title"`
	// Name of the sticker set
	Name string `json:"name"`
	// Sticker set thumbnail in WEBP, TGS, or WEBM format with width and height 100; may be null. The file can be downloaded only before the thumbnail is changed
	Thumbnail *Thumbnail `json:"thumbnail"`
	// Sticker set thumbnail's outline; may be null if unknown
	ThumbnailOutline *Outline `json:"thumbnail_outline"`
	// True, if the sticker set is owned by the current user
	IsOwned bool `json:"is_owned"`
	// True, if the sticker set has been installed by the current user
	IsInstalled bool `json:"is_installed"`
	// True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously
	IsArchived bool `json:"is_archived"`
	// True, if the sticker set is official
	IsOfficial bool `json:"is_official"`
	// Type of the stickers in the set
	StickerType StickerType `json:"sticker_type"`
	// True, if stickers in the sticker set are custom emoji that must be repainted; for custom emoji sticker sets only
	NeedsRepainting bool `json:"needs_repainting"`
	// True, if stickers in the sticker set are custom emoji that can be used as chat emoji status; for custom emoji sticker sets only
	IsAllowedAsChatEmojiStatus bool `json:"is_allowed_as_chat_emoji_status"`
	// True for already viewed trending sticker sets
	IsViewed bool `json:"is_viewed"`
	// List of stickers in this set
	Stickers []*Sticker `json:"stickers"`
	// A list of emojis corresponding to the stickers in the same order. The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the corresponding Sticker object
	Emojis []*Emojis `json:"emojis"`
}

func (entity *StickerSet) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerSet

	return json.Marshal((*stub)(entity))
}

func (*StickerSet) GetType() string {
	return TypeStickerSet
}

func (*StickerSet) GetConstructor() string {
	return ConstructorStickerSet
}

func (stickerSet *StickerSet) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                         JsonInt64       `json:"id"`
		Title                      string          `json:"title"`
		Name                       string          `json:"name"`
		Thumbnail                  *Thumbnail      `json:"thumbnail"`
		ThumbnailOutline           *Outline        `json:"thumbnail_outline"`
		IsOwned                    bool            `json:"is_owned"`
		IsInstalled                bool            `json:"is_installed"`
		IsArchived                 bool            `json:"is_archived"`
		IsOfficial                 bool            `json:"is_official"`
		StickerType                json.RawMessage `json:"sticker_type"`
		NeedsRepainting            bool            `json:"needs_repainting"`
		IsAllowedAsChatEmojiStatus bool            `json:"is_allowed_as_chat_emoji_status"`
		IsViewed                   bool            `json:"is_viewed"`
		Stickers                   []*Sticker      `json:"stickers"`
		Emojis                     []*Emojis       `json:"emojis"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	stickerSet.Id = tmp.Id
	stickerSet.Title = tmp.Title
	stickerSet.Name = tmp.Name
	stickerSet.Thumbnail = tmp.Thumbnail
	stickerSet.ThumbnailOutline = tmp.ThumbnailOutline
	stickerSet.IsOwned = tmp.IsOwned
	stickerSet.IsInstalled = tmp.IsInstalled
	stickerSet.IsArchived = tmp.IsArchived
	stickerSet.IsOfficial = tmp.IsOfficial
	stickerSet.NeedsRepainting = tmp.NeedsRepainting
	stickerSet.IsAllowedAsChatEmojiStatus = tmp.IsAllowedAsChatEmojiStatus
	stickerSet.IsViewed = tmp.IsViewed
	stickerSet.Stickers = tmp.Stickers
	stickerSet.Emojis = tmp.Emojis

	fieldStickerType, _ := UnmarshalStickerType(tmp.StickerType)
	stickerSet.StickerType = fieldStickerType

	return nil
}

// Represents short information about a sticker set
type StickerSetInfo struct {
	meta
	// Identifier of the sticker set
	Id JsonInt64 `json:"id"`
	// Title of the sticker set
	Title string `json:"title"`
	// Name of the sticker set
	Name string `json:"name"`
	// Sticker set thumbnail in WEBP, TGS, or WEBM format with width and height 100; may be null. The file can be downloaded only before the thumbnail is changed
	Thumbnail *Thumbnail `json:"thumbnail"`
	// Sticker set thumbnail's outline; may be null if unknown
	ThumbnailOutline *Outline `json:"thumbnail_outline"`
	// True, if the sticker set is owned by the current user
	IsOwned bool `json:"is_owned"`
	// True, if the sticker set has been installed by the current user
	IsInstalled bool `json:"is_installed"`
	// True, if the sticker set has been archived. A sticker set can't be installed and archived simultaneously
	IsArchived bool `json:"is_archived"`
	// True, if the sticker set is official
	IsOfficial bool `json:"is_official"`
	// Type of the stickers in the set
	StickerType StickerType `json:"sticker_type"`
	// True, if stickers in the sticker set are custom emoji that must be repainted; for custom emoji sticker sets only
	NeedsRepainting bool `json:"needs_repainting"`
	// True, if stickers in the sticker set are custom emoji that can be used as chat emoji status; for custom emoji sticker sets only
	IsAllowedAsChatEmojiStatus bool `json:"is_allowed_as_chat_emoji_status"`
	// True for already viewed trending sticker sets
	IsViewed bool `json:"is_viewed"`
	// Total number of stickers in the set
	Size int32 `json:"size"`
	// Up to the first 5 stickers from the set, depending on the context. If the application needs more stickers the full sticker set needs to be requested
	Covers []*Sticker `json:"covers"`
}

func (entity *StickerSetInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerSetInfo

	return json.Marshal((*stub)(entity))
}

func (*StickerSetInfo) GetType() string {
	return TypeStickerSetInfo
}

func (*StickerSetInfo) GetConstructor() string {
	return ConstructorStickerSetInfo
}

func (stickerSetInfo *StickerSetInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                         JsonInt64       `json:"id"`
		Title                      string          `json:"title"`
		Name                       string          `json:"name"`
		Thumbnail                  *Thumbnail      `json:"thumbnail"`
		ThumbnailOutline           *Outline        `json:"thumbnail_outline"`
		IsOwned                    bool            `json:"is_owned"`
		IsInstalled                bool            `json:"is_installed"`
		IsArchived                 bool            `json:"is_archived"`
		IsOfficial                 bool            `json:"is_official"`
		StickerType                json.RawMessage `json:"sticker_type"`
		NeedsRepainting            bool            `json:"needs_repainting"`
		IsAllowedAsChatEmojiStatus bool            `json:"is_allowed_as_chat_emoji_status"`
		IsViewed                   bool            `json:"is_viewed"`
		Size                       int32           `json:"size"`
		Covers                     []*Sticker      `json:"covers"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	stickerSetInfo.Id = tmp.Id
	stickerSetInfo.Title = tmp.Title
	stickerSetInfo.Name = tmp.Name
	stickerSetInfo.Thumbnail = tmp.Thumbnail
	stickerSetInfo.ThumbnailOutline = tmp.ThumbnailOutline
	stickerSetInfo.IsOwned = tmp.IsOwned
	stickerSetInfo.IsInstalled = tmp.IsInstalled
	stickerSetInfo.IsArchived = tmp.IsArchived
	stickerSetInfo.IsOfficial = tmp.IsOfficial
	stickerSetInfo.NeedsRepainting = tmp.NeedsRepainting
	stickerSetInfo.IsAllowedAsChatEmojiStatus = tmp.IsAllowedAsChatEmojiStatus
	stickerSetInfo.IsViewed = tmp.IsViewed
	stickerSetInfo.Size = tmp.Size
	stickerSetInfo.Covers = tmp.Covers

	fieldStickerType, _ := UnmarshalStickerType(tmp.StickerType)
	stickerSetInfo.StickerType = fieldStickerType

	return nil
}

// Represents a list of sticker sets
type StickerSets struct {
	meta
	// Approximate total number of sticker sets found
	TotalCount int32 `json:"total_count"`
	// List of sticker sets
	Sets []*StickerSetInfo `json:"sets"`
}

func (entity *StickerSets) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StickerSets

	return json.Marshal((*stub)(entity))
}

func (*StickerSets) GetType() string {
	return TypeStickerSets
}

func (*StickerSets) GetConstructor() string {
	return ConstructorStickerSets
}

// Represents a list of trending sticker sets
type TrendingStickerSets struct {
	meta
	// Approximate total number of trending sticker sets
	TotalCount int32 `json:"total_count"`
	// List of trending sticker sets
	Sets []*StickerSetInfo `json:"sets"`
	// True, if the list contains sticker sets with premium stickers
	IsPremium bool `json:"is_premium"`
}

func (entity *TrendingStickerSets) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TrendingStickerSets

	return json.Marshal((*stub)(entity))
}

func (*TrendingStickerSets) GetType() string {
	return TypeTrendingStickerSets
}

func (*TrendingStickerSets) GetConstructor() string {
	return ConstructorTrendingStickerSets
}

// The category contains a list of similar emoji to search for in getStickers and searchStickers for stickers, or getInlineQueryResults with the bot getOption("animation_search_bot_username") for animations
type EmojiCategorySourceSearch struct {
	meta
	// List of emojis to search for
	Emojis []string `json:"emojis"`
}

func (entity *EmojiCategorySourceSearch) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiCategorySourceSearch

	return json.Marshal((*stub)(entity))
}

func (*EmojiCategorySourceSearch) GetType() string {
	return TypeEmojiCategorySource
}

func (*EmojiCategorySourceSearch) GetConstructor() string {
	return ConstructorEmojiCategorySourceSearch
}

func (*EmojiCategorySourceSearch) EmojiCategorySourceConstructor() string {
	return ConstructorEmojiCategorySourceSearch
}

// The category contains premium stickers that must be found by getPremiumStickers
type EmojiCategorySourcePremium struct {
	meta
}

func (entity *EmojiCategorySourcePremium) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiCategorySourcePremium

	return json.Marshal((*stub)(entity))
}

func (*EmojiCategorySourcePremium) GetType() string {
	return TypeEmojiCategorySource
}

func (*EmojiCategorySourcePremium) GetConstructor() string {
	return ConstructorEmojiCategorySourcePremium
}

func (*EmojiCategorySourcePremium) EmojiCategorySourceConstructor() string {
	return ConstructorEmojiCategorySourcePremium
}

// Describes an emoji category
type EmojiCategory struct {
	meta
	// Name of the category
	Name string `json:"name"`
	// Custom emoji sticker, which represents icon of the category
	Icon *Sticker `json:"icon"`
	// Source of stickers for the emoji category
	Source EmojiCategorySource `json:"source"`
	// True, if the category must be shown first when choosing a sticker for the start page
	IsGreeting bool `json:"is_greeting"`
}

func (entity *EmojiCategory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiCategory

	return json.Marshal((*stub)(entity))
}

func (*EmojiCategory) GetType() string {
	return TypeEmojiCategory
}

func (*EmojiCategory) GetConstructor() string {
	return ConstructorEmojiCategory
}

func (emojiCategory *EmojiCategory) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Name       string          `json:"name"`
		Icon       *Sticker        `json:"icon"`
		Source     json.RawMessage `json:"source"`
		IsGreeting bool            `json:"is_greeting"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	emojiCategory.Name = tmp.Name
	emojiCategory.Icon = tmp.Icon
	emojiCategory.IsGreeting = tmp.IsGreeting

	fieldSource, _ := UnmarshalEmojiCategorySource(tmp.Source)
	emojiCategory.Source = fieldSource

	return nil
}

// Represents a list of emoji categories
type EmojiCategories struct {
	meta
	// List of categories
	Categories []*EmojiCategory `json:"categories"`
}

func (entity *EmojiCategories) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiCategories

	return json.Marshal((*stub)(entity))
}

func (*EmojiCategories) GetType() string {
	return TypeEmojiCategories
}

func (*EmojiCategories) GetConstructor() string {
	return ConstructorEmojiCategories
}

// The category must be used by default (e.g., for custom emoji or animation search)
type EmojiCategoryTypeDefault struct {
	meta
}

func (entity *EmojiCategoryTypeDefault) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiCategoryTypeDefault

	return json.Marshal((*stub)(entity))
}

func (*EmojiCategoryTypeDefault) GetType() string {
	return TypeEmojiCategoryType
}

func (*EmojiCategoryTypeDefault) GetConstructor() string {
	return ConstructorEmojiCategoryTypeDefault
}

func (*EmojiCategoryTypeDefault) EmojiCategoryTypeConstructor() string {
	return ConstructorEmojiCategoryTypeDefault
}

// The category must be used by default for regular sticker selection. It may contain greeting emoji category and premium stickers
type EmojiCategoryTypeRegularStickers struct {
	meta
}

func (entity *EmojiCategoryTypeRegularStickers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiCategoryTypeRegularStickers

	return json.Marshal((*stub)(entity))
}

func (*EmojiCategoryTypeRegularStickers) GetType() string {
	return TypeEmojiCategoryType
}

func (*EmojiCategoryTypeRegularStickers) GetConstructor() string {
	return ConstructorEmojiCategoryTypeRegularStickers
}

func (*EmojiCategoryTypeRegularStickers) EmojiCategoryTypeConstructor() string {
	return ConstructorEmojiCategoryTypeRegularStickers
}

// The category must be used for emoji status selection
type EmojiCategoryTypeEmojiStatus struct {
	meta
}

func (entity *EmojiCategoryTypeEmojiStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiCategoryTypeEmojiStatus

	return json.Marshal((*stub)(entity))
}

func (*EmojiCategoryTypeEmojiStatus) GetType() string {
	return TypeEmojiCategoryType
}

func (*EmojiCategoryTypeEmojiStatus) GetConstructor() string {
	return ConstructorEmojiCategoryTypeEmojiStatus
}

func (*EmojiCategoryTypeEmojiStatus) EmojiCategoryTypeConstructor() string {
	return ConstructorEmojiCategoryTypeEmojiStatus
}

// The category must be used for chat photo emoji selection
type EmojiCategoryTypeChatPhoto struct {
	meta
}

func (entity *EmojiCategoryTypeChatPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiCategoryTypeChatPhoto

	return json.Marshal((*stub)(entity))
}

func (*EmojiCategoryTypeChatPhoto) GetType() string {
	return TypeEmojiCategoryType
}

func (*EmojiCategoryTypeChatPhoto) GetConstructor() string {
	return ConstructorEmojiCategoryTypeChatPhoto
}

func (*EmojiCategoryTypeChatPhoto) EmojiCategoryTypeConstructor() string {
	return ConstructorEmojiCategoryTypeChatPhoto
}

// Describes the current weather
type CurrentWeather struct {
	meta
	// Temperature, in degree Celsius
	Temperature float64 `json:"temperature"`
	// Emoji representing the weather
	Emoji string `json:"emoji"`
}

func (entity *CurrentWeather) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CurrentWeather

	return json.Marshal((*stub)(entity))
}

func (*CurrentWeather) GetType() string {
	return TypeCurrentWeather
}

func (*CurrentWeather) GetConstructor() string {
	return ConstructorCurrentWeather
}

// Describes position of a clickable rectangle area on a story media
type StoryAreaPosition struct {
	meta
	// The abscissa of the rectangle's center, as a percentage of the media width
	XPercentage float64 `json:"x_percentage"`
	// The ordinate of the rectangle's center, as a percentage of the media height
	YPercentage float64 `json:"y_percentage"`
	// The width of the rectangle, as a percentage of the media width
	WidthPercentage float64 `json:"width_percentage"`
	// The height of the rectangle, as a percentage of the media height
	HeightPercentage float64 `json:"height_percentage"`
	// Clockwise rotation angle of the rectangle, in degrees; 0-360
	RotationAngle float64 `json:"rotation_angle"`
	// The radius of the rectangle corner rounding, as a percentage of the media width
	CornerRadiusPercentage float64 `json:"corner_radius_percentage"`
}

func (entity *StoryAreaPosition) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryAreaPosition

	return json.Marshal((*stub)(entity))
}

func (*StoryAreaPosition) GetType() string {
	return TypeStoryAreaPosition
}

func (*StoryAreaPosition) GetConstructor() string {
	return ConstructorStoryAreaPosition
}

// An area pointing to a location
type StoryAreaTypeLocation struct {
	meta
	// The location
	Location *Location `json:"location"`
	// Address of the location; may be null if unknown
	Address *LocationAddress `json:"address"`
}

func (entity *StoryAreaTypeLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryAreaTypeLocation

	return json.Marshal((*stub)(entity))
}

func (*StoryAreaTypeLocation) GetType() string {
	return TypeStoryAreaType
}

func (*StoryAreaTypeLocation) GetConstructor() string {
	return ConstructorStoryAreaTypeLocation
}

func (*StoryAreaTypeLocation) StoryAreaTypeConstructor() string {
	return ConstructorStoryAreaTypeLocation
}

// An area pointing to a venue
type StoryAreaTypeVenue struct {
	meta
	// Information about the venue
	Venue *Venue `json:"venue"`
}

func (entity *StoryAreaTypeVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryAreaTypeVenue

	return json.Marshal((*stub)(entity))
}

func (*StoryAreaTypeVenue) GetType() string {
	return TypeStoryAreaType
}

func (*StoryAreaTypeVenue) GetConstructor() string {
	return ConstructorStoryAreaTypeVenue
}

func (*StoryAreaTypeVenue) StoryAreaTypeConstructor() string {
	return ConstructorStoryAreaTypeVenue
}

// An area pointing to a suggested reaction. App needs to show a clickable reaction on the area and call setStoryReaction when the are is clicked
type StoryAreaTypeSuggestedReaction struct {
	meta
	// Type of the reaction
	ReactionType ReactionType `json:"reaction_type"`
	// Number of times the reaction was added
	TotalCount int32 `json:"total_count"`
	// True, if reaction has a dark background
	IsDark bool `json:"is_dark"`
	// True, if reaction corner is flipped
	IsFlipped bool `json:"is_flipped"`
}

func (entity *StoryAreaTypeSuggestedReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryAreaTypeSuggestedReaction

	return json.Marshal((*stub)(entity))
}

func (*StoryAreaTypeSuggestedReaction) GetType() string {
	return TypeStoryAreaType
}

func (*StoryAreaTypeSuggestedReaction) GetConstructor() string {
	return ConstructorStoryAreaTypeSuggestedReaction
}

func (*StoryAreaTypeSuggestedReaction) StoryAreaTypeConstructor() string {
	return ConstructorStoryAreaTypeSuggestedReaction
}

func (storyAreaTypeSuggestedReaction *StoryAreaTypeSuggestedReaction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ReactionType json.RawMessage `json:"reaction_type"`
		TotalCount   int32           `json:"total_count"`
		IsDark       bool            `json:"is_dark"`
		IsFlipped    bool            `json:"is_flipped"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	storyAreaTypeSuggestedReaction.TotalCount = tmp.TotalCount
	storyAreaTypeSuggestedReaction.IsDark = tmp.IsDark
	storyAreaTypeSuggestedReaction.IsFlipped = tmp.IsFlipped

	fieldReactionType, _ := UnmarshalReactionType(tmp.ReactionType)
	storyAreaTypeSuggestedReaction.ReactionType = fieldReactionType

	return nil
}

// An area pointing to a message
type StoryAreaTypeMessage struct {
	meta
	// Identifier of the chat with the message
	ChatId int64 `json:"chat_id"`
	// Identifier of the message
	MessageId int64 `json:"message_id"`
}

func (entity *StoryAreaTypeMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryAreaTypeMessage

	return json.Marshal((*stub)(entity))
}

func (*StoryAreaTypeMessage) GetType() string {
	return TypeStoryAreaType
}

func (*StoryAreaTypeMessage) GetConstructor() string {
	return ConstructorStoryAreaTypeMessage
}

func (*StoryAreaTypeMessage) StoryAreaTypeConstructor() string {
	return ConstructorStoryAreaTypeMessage
}

// An area pointing to a HTTP or tg:// link
type StoryAreaTypeLink struct {
	meta
	// HTTP or tg:// URL to be opened when the area is clicked
	Url string `json:"url"`
}

func (entity *StoryAreaTypeLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryAreaTypeLink

	return json.Marshal((*stub)(entity))
}

func (*StoryAreaTypeLink) GetType() string {
	return TypeStoryAreaType
}

func (*StoryAreaTypeLink) GetConstructor() string {
	return ConstructorStoryAreaTypeLink
}

func (*StoryAreaTypeLink) StoryAreaTypeConstructor() string {
	return ConstructorStoryAreaTypeLink
}

// An area with information about weather
type StoryAreaTypeWeather struct {
	meta
	// Temperature, in degree Celsius
	Temperature float64 `json:"temperature"`
	// Emoji representing the weather
	Emoji string `json:"emoji"`
	// A color of the area background in the ARGB format
	BackgroundColor int32 `json:"background_color"`
}

func (entity *StoryAreaTypeWeather) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryAreaTypeWeather

	return json.Marshal((*stub)(entity))
}

func (*StoryAreaTypeWeather) GetType() string {
	return TypeStoryAreaType
}

func (*StoryAreaTypeWeather) GetConstructor() string {
	return ConstructorStoryAreaTypeWeather
}

func (*StoryAreaTypeWeather) StoryAreaTypeConstructor() string {
	return ConstructorStoryAreaTypeWeather
}

// Describes a clickable rectangle area on a story media
type StoryArea struct {
	meta
	// Position of the area
	Position *StoryAreaPosition `json:"position"`
	// Type of the area
	Type StoryAreaType `json:"type"`
}

func (entity *StoryArea) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryArea

	return json.Marshal((*stub)(entity))
}

func (*StoryArea) GetType() string {
	return TypeStoryArea
}

func (*StoryArea) GetConstructor() string {
	return ConstructorStoryArea
}

func (storyArea *StoryArea) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Position *StoryAreaPosition `json:"position"`
		Type     json.RawMessage    `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	storyArea.Position = tmp.Position

	fieldType, _ := UnmarshalStoryAreaType(tmp.Type)
	storyArea.Type = fieldType

	return nil
}

// An area pointing to a location
type InputStoryAreaTypeLocation struct {
	meta
	// The location
	Location *Location `json:"location"`
	// Address of the location; pass null if unknown
	Address *LocationAddress `json:"address"`
}

func (entity *InputStoryAreaTypeLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryAreaTypeLocation

	return json.Marshal((*stub)(entity))
}

func (*InputStoryAreaTypeLocation) GetType() string {
	return TypeInputStoryAreaType
}

func (*InputStoryAreaTypeLocation) GetConstructor() string {
	return ConstructorInputStoryAreaTypeLocation
}

func (*InputStoryAreaTypeLocation) InputStoryAreaTypeConstructor() string {
	return ConstructorInputStoryAreaTypeLocation
}

// An area pointing to a venue found by the bot getOption("venue_search_bot_username")
type InputStoryAreaTypeFoundVenue struct {
	meta
	// Identifier of the inline query, used to found the venue
	QueryId JsonInt64 `json:"query_id"`
	// Identifier of the inline query result
	ResultId string `json:"result_id"`
}

func (entity *InputStoryAreaTypeFoundVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryAreaTypeFoundVenue

	return json.Marshal((*stub)(entity))
}

func (*InputStoryAreaTypeFoundVenue) GetType() string {
	return TypeInputStoryAreaType
}

func (*InputStoryAreaTypeFoundVenue) GetConstructor() string {
	return ConstructorInputStoryAreaTypeFoundVenue
}

func (*InputStoryAreaTypeFoundVenue) InputStoryAreaTypeConstructor() string {
	return ConstructorInputStoryAreaTypeFoundVenue
}

// An area pointing to a venue already added to the story
type InputStoryAreaTypePreviousVenue struct {
	meta
	// Provider of the venue
	VenueProvider string `json:"venue_provider"`
	// Identifier of the venue in the provider database
	VenueId string `json:"venue_id"`
}

func (entity *InputStoryAreaTypePreviousVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryAreaTypePreviousVenue

	return json.Marshal((*stub)(entity))
}

func (*InputStoryAreaTypePreviousVenue) GetType() string {
	return TypeInputStoryAreaType
}

func (*InputStoryAreaTypePreviousVenue) GetConstructor() string {
	return ConstructorInputStoryAreaTypePreviousVenue
}

func (*InputStoryAreaTypePreviousVenue) InputStoryAreaTypeConstructor() string {
	return ConstructorInputStoryAreaTypePreviousVenue
}

// An area pointing to a suggested reaction
type InputStoryAreaTypeSuggestedReaction struct {
	meta
	// Type of the reaction
	ReactionType ReactionType `json:"reaction_type"`
	// True, if reaction has a dark background
	IsDark bool `json:"is_dark"`
	// True, if reaction corner is flipped
	IsFlipped bool `json:"is_flipped"`
}

func (entity *InputStoryAreaTypeSuggestedReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryAreaTypeSuggestedReaction

	return json.Marshal((*stub)(entity))
}

func (*InputStoryAreaTypeSuggestedReaction) GetType() string {
	return TypeInputStoryAreaType
}

func (*InputStoryAreaTypeSuggestedReaction) GetConstructor() string {
	return ConstructorInputStoryAreaTypeSuggestedReaction
}

func (*InputStoryAreaTypeSuggestedReaction) InputStoryAreaTypeConstructor() string {
	return ConstructorInputStoryAreaTypeSuggestedReaction
}

func (inputStoryAreaTypeSuggestedReaction *InputStoryAreaTypeSuggestedReaction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ReactionType json.RawMessage `json:"reaction_type"`
		IsDark       bool            `json:"is_dark"`
		IsFlipped    bool            `json:"is_flipped"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputStoryAreaTypeSuggestedReaction.IsDark = tmp.IsDark
	inputStoryAreaTypeSuggestedReaction.IsFlipped = tmp.IsFlipped

	fieldReactionType, _ := UnmarshalReactionType(tmp.ReactionType)
	inputStoryAreaTypeSuggestedReaction.ReactionType = fieldReactionType

	return nil
}

// An area pointing to a message
type InputStoryAreaTypeMessage struct {
	meta
	// Identifier of the chat with the message. Currently, the chat must be a supergroup or a channel chat
	ChatId int64 `json:"chat_id"`
	// Identifier of the message. Use messageProperties.can_be_shared_in_story to check whether the message is suitable
	MessageId int64 `json:"message_id"`
}

func (entity *InputStoryAreaTypeMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryAreaTypeMessage

	return json.Marshal((*stub)(entity))
}

func (*InputStoryAreaTypeMessage) GetType() string {
	return TypeInputStoryAreaType
}

func (*InputStoryAreaTypeMessage) GetConstructor() string {
	return ConstructorInputStoryAreaTypeMessage
}

func (*InputStoryAreaTypeMessage) InputStoryAreaTypeConstructor() string {
	return ConstructorInputStoryAreaTypeMessage
}

// An area pointing to a HTTP or tg:// link
type InputStoryAreaTypeLink struct {
	meta
	// HTTP or tg:// URL to be opened when the area is clicked
	Url string `json:"url"`
}

func (entity *InputStoryAreaTypeLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryAreaTypeLink

	return json.Marshal((*stub)(entity))
}

func (*InputStoryAreaTypeLink) GetType() string {
	return TypeInputStoryAreaType
}

func (*InputStoryAreaTypeLink) GetConstructor() string {
	return ConstructorInputStoryAreaTypeLink
}

func (*InputStoryAreaTypeLink) InputStoryAreaTypeConstructor() string {
	return ConstructorInputStoryAreaTypeLink
}

// An area with information about weather
type InputStoryAreaTypeWeather struct {
	meta
	// Temperature, in degree Celsius
	Temperature float64 `json:"temperature"`
	// Emoji representing the weather
	Emoji string `json:"emoji"`
	// A color of the area background in the ARGB format
	BackgroundColor int32 `json:"background_color"`
}

func (entity *InputStoryAreaTypeWeather) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryAreaTypeWeather

	return json.Marshal((*stub)(entity))
}

func (*InputStoryAreaTypeWeather) GetType() string {
	return TypeInputStoryAreaType
}

func (*InputStoryAreaTypeWeather) GetConstructor() string {
	return ConstructorInputStoryAreaTypeWeather
}

func (*InputStoryAreaTypeWeather) InputStoryAreaTypeConstructor() string {
	return ConstructorInputStoryAreaTypeWeather
}

// Describes a clickable rectangle area on a story media to be added
type InputStoryArea struct {
	meta
	// Position of the area
	Position *StoryAreaPosition `json:"position"`
	// Type of the area
	Type InputStoryAreaType `json:"type"`
}

func (entity *InputStoryArea) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryArea

	return json.Marshal((*stub)(entity))
}

func (*InputStoryArea) GetType() string {
	return TypeInputStoryArea
}

func (*InputStoryArea) GetConstructor() string {
	return ConstructorInputStoryArea
}

func (inputStoryArea *InputStoryArea) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Position *StoryAreaPosition `json:"position"`
		Type     json.RawMessage    `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputStoryArea.Position = tmp.Position

	fieldType, _ := UnmarshalInputStoryAreaType(tmp.Type)
	inputStoryArea.Type = fieldType

	return nil
}

// Contains a list of story areas to be added
type InputStoryAreas struct {
	meta
	// List of input story areas. Currently, a story can have up to 10 inputStoryAreaTypeLocation, inputStoryAreaTypeFoundVenue, and inputStoryAreaTypePreviousVenue areas, up to getOption("story_suggested_reaction_area_count_max") inputStoryAreaTypeSuggestedReaction areas, up to 1 inputStoryAreaTypeMessage area, up to getOption("story_link_area_count_max") inputStoryAreaTypeLink areas if the current user is a Telegram Premium user, and up to 3 inputStoryAreaTypeWeather areas
	Areas []*InputStoryArea `json:"areas"`
}

func (entity *InputStoryAreas) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryAreas

	return json.Marshal((*stub)(entity))
}

func (*InputStoryAreas) GetType() string {
	return TypeInputStoryAreas
}

func (*InputStoryAreas) GetConstructor() string {
	return ConstructorInputStoryAreas
}

// Describes a video file sent in a story
type StoryVideo struct {
	meta
	// Duration of the video, in seconds
	Duration float64 `json:"duration"`
	// Video width
	Width int32 `json:"width"`
	// Video height
	Height int32 `json:"height"`
	// True, if stickers were added to the video. The list of corresponding sticker sets can be received using getAttachedStickerSets
	HasStickers bool `json:"has_stickers"`
	// True, if the video has no sound
	IsAnimation bool `json:"is_animation"`
	// Video minithumbnail; may be null
	Minithumbnail *Minithumbnail `json:"minithumbnail"`
	// Video thumbnail in JPEG or MPEG4 format; may be null
	Thumbnail *Thumbnail `json:"thumbnail"`
	// Size of file prefix, which is expected to be preloaded, in bytes
	PreloadPrefixSize int32 `json:"preload_prefix_size"`
	// Timestamp of the frame used as video thumbnail
	CoverFrameTimestamp float64 `json:"cover_frame_timestamp"`
	// File containing the video
	Video *File `json:"video"`
}

func (entity *StoryVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryVideo

	return json.Marshal((*stub)(entity))
}

func (*StoryVideo) GetType() string {
	return TypeStoryVideo
}

func (*StoryVideo) GetConstructor() string {
	return ConstructorStoryVideo
}

// A photo story
type StoryContentPhoto struct {
	meta
	// The photo
	Photo *Photo `json:"photo"`
}

func (entity *StoryContentPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryContentPhoto

	return json.Marshal((*stub)(entity))
}

func (*StoryContentPhoto) GetType() string {
	return TypeStoryContent
}

func (*StoryContentPhoto) GetConstructor() string {
	return ConstructorStoryContentPhoto
}

func (*StoryContentPhoto) StoryContentConstructor() string {
	return ConstructorStoryContentPhoto
}

// A video story
type StoryContentVideo struct {
	meta
	// The video in MPEG4 format
	Video *StoryVideo `json:"video"`
	// Alternative version of the video in MPEG4 format, encoded with H.264 codec; may be null
	AlternativeVideo *StoryVideo `json:"alternative_video"`
}

func (entity *StoryContentVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryContentVideo

	return json.Marshal((*stub)(entity))
}

func (*StoryContentVideo) GetType() string {
	return TypeStoryContent
}

func (*StoryContentVideo) GetConstructor() string {
	return ConstructorStoryContentVideo
}

func (*StoryContentVideo) StoryContentConstructor() string {
	return ConstructorStoryContentVideo
}

// A story content that is not supported in the current TDLib version
type StoryContentUnsupported struct {
	meta
}

func (entity *StoryContentUnsupported) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryContentUnsupported

	return json.Marshal((*stub)(entity))
}

func (*StoryContentUnsupported) GetType() string {
	return TypeStoryContent
}

func (*StoryContentUnsupported) GetConstructor() string {
	return ConstructorStoryContentUnsupported
}

func (*StoryContentUnsupported) StoryContentConstructor() string {
	return ConstructorStoryContentUnsupported
}

// A photo story
type InputStoryContentPhoto struct {
	meta
	// Photo to send. The photo must be at most 10 MB in size. The photo size must be 1080x1920
	Photo InputFile `json:"photo"`
	// File identifiers of the stickers added to the photo, if applicable
	AddedStickerFileIds []int32 `json:"added_sticker_file_ids"`
}

func (entity *InputStoryContentPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryContentPhoto

	return json.Marshal((*stub)(entity))
}

func (*InputStoryContentPhoto) GetType() string {
	return TypeInputStoryContent
}

func (*InputStoryContentPhoto) GetConstructor() string {
	return ConstructorInputStoryContentPhoto
}

func (*InputStoryContentPhoto) InputStoryContentConstructor() string {
	return ConstructorInputStoryContentPhoto
}

func (inputStoryContentPhoto *InputStoryContentPhoto) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Photo               json.RawMessage `json:"photo"`
		AddedStickerFileIds []int32         `json:"added_sticker_file_ids"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputStoryContentPhoto.AddedStickerFileIds = tmp.AddedStickerFileIds

	fieldPhoto, _ := UnmarshalInputFile(tmp.Photo)
	inputStoryContentPhoto.Photo = fieldPhoto

	return nil
}

// A video story
type InputStoryContentVideo struct {
	meta
	// Video to be sent. The video size must be 720x1280. The video must be streamable and stored in MPEG4 format, after encoding with H.265 codec and key frames added each second
	Video InputFile `json:"video"`
	// File identifiers of the stickers added to the video, if applicable
	AddedStickerFileIds []int32 `json:"added_sticker_file_ids"`
	// Precise duration of the video, in seconds; 0-60
	Duration float64 `json:"duration"`
	// Timestamp of the frame, which will be used as video thumbnail
	CoverFrameTimestamp float64 `json:"cover_frame_timestamp"`
	// True, if the video has no sound
	IsAnimation bool `json:"is_animation"`
}

func (entity *InputStoryContentVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputStoryContentVideo

	return json.Marshal((*stub)(entity))
}

func (*InputStoryContentVideo) GetType() string {
	return TypeInputStoryContent
}

func (*InputStoryContentVideo) GetConstructor() string {
	return ConstructorInputStoryContentVideo
}

func (*InputStoryContentVideo) InputStoryContentConstructor() string {
	return ConstructorInputStoryContentVideo
}

func (inputStoryContentVideo *InputStoryContentVideo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Video               json.RawMessage `json:"video"`
		AddedStickerFileIds []int32         `json:"added_sticker_file_ids"`
		Duration            float64         `json:"duration"`
		CoverFrameTimestamp float64         `json:"cover_frame_timestamp"`
		IsAnimation         bool            `json:"is_animation"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputStoryContentVideo.AddedStickerFileIds = tmp.AddedStickerFileIds
	inputStoryContentVideo.Duration = tmp.Duration
	inputStoryContentVideo.CoverFrameTimestamp = tmp.CoverFrameTimestamp
	inputStoryContentVideo.IsAnimation = tmp.IsAnimation

	fieldVideo, _ := UnmarshalInputFile(tmp.Video)
	inputStoryContentVideo.Video = fieldVideo

	return nil
}

// The list of stories, shown in the main chat list and folder chat lists
type StoryListMain struct {
	meta
}

func (entity *StoryListMain) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryListMain

	return json.Marshal((*stub)(entity))
}

func (*StoryListMain) GetType() string {
	return TypeStoryList
}

func (*StoryListMain) GetConstructor() string {
	return ConstructorStoryListMain
}

func (*StoryListMain) StoryListConstructor() string {
	return ConstructorStoryListMain
}

// The list of stories, shown in the Arvhive chat list
type StoryListArchive struct {
	meta
}

func (entity *StoryListArchive) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryListArchive

	return json.Marshal((*stub)(entity))
}

func (*StoryListArchive) GetType() string {
	return TypeStoryList
}

func (*StoryListArchive) GetConstructor() string {
	return ConstructorStoryListArchive
}

func (*StoryListArchive) StoryListConstructor() string {
	return ConstructorStoryListArchive
}

// The original story was a public story with known sender
type StoryOriginPublicStory struct {
	meta
	// Identifier of the chat that posted original story
	ChatId int64 `json:"chat_id"`
	// Story identifier of the original story
	StoryId int32 `json:"story_id"`
}

func (entity *StoryOriginPublicStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryOriginPublicStory

	return json.Marshal((*stub)(entity))
}

func (*StoryOriginPublicStory) GetType() string {
	return TypeStoryOrigin
}

func (*StoryOriginPublicStory) GetConstructor() string {
	return ConstructorStoryOriginPublicStory
}

func (*StoryOriginPublicStory) StoryOriginConstructor() string {
	return ConstructorStoryOriginPublicStory
}

// The original story was sent by an unknown user
type StoryOriginHiddenUser struct {
	meta
	// Name of the story sender
	SenderName string `json:"sender_name"`
}

func (entity *StoryOriginHiddenUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryOriginHiddenUser

	return json.Marshal((*stub)(entity))
}

func (*StoryOriginHiddenUser) GetType() string {
	return TypeStoryOrigin
}

func (*StoryOriginHiddenUser) GetConstructor() string {
	return ConstructorStoryOriginHiddenUser
}

func (*StoryOriginHiddenUser) StoryOriginConstructor() string {
	return ConstructorStoryOriginHiddenUser
}

// Contains information about original story that was reposted
type StoryRepostInfo struct {
	meta
	// Origin of the story that was reposted
	Origin StoryOrigin `json:"origin"`
	// True, if story content was modified during reposting; otherwise, story wasn't modified
	IsContentModified bool `json:"is_content_modified"`
}

func (entity *StoryRepostInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryRepostInfo

	return json.Marshal((*stub)(entity))
}

func (*StoryRepostInfo) GetType() string {
	return TypeStoryRepostInfo
}

func (*StoryRepostInfo) GetConstructor() string {
	return ConstructorStoryRepostInfo
}

func (storyRepostInfo *StoryRepostInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Origin            json.RawMessage `json:"origin"`
		IsContentModified bool            `json:"is_content_modified"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	storyRepostInfo.IsContentModified = tmp.IsContentModified

	fieldOrigin, _ := UnmarshalStoryOrigin(tmp.Origin)
	storyRepostInfo.Origin = fieldOrigin

	return nil
}

// Contains information about interactions with a story
type StoryInteractionInfo struct {
	meta
	// Number of times the story was viewed
	ViewCount int32 `json:"view_count"`
	// Number of times the story was forwarded; 0 if none or unknown
	ForwardCount int32 `json:"forward_count"`
	// Number of reactions added to the story; 0 if none or unknown
	ReactionCount int32 `json:"reaction_count"`
	// Identifiers of at most 3 recent viewers of the story
	RecentViewerUserIds []int64 `json:"recent_viewer_user_ids"`
}

func (entity *StoryInteractionInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryInteractionInfo

	return json.Marshal((*stub)(entity))
}

func (*StoryInteractionInfo) GetType() string {
	return TypeStoryInteractionInfo
}

func (*StoryInteractionInfo) GetConstructor() string {
	return ConstructorStoryInteractionInfo
}

// Represents a story
type Story struct {
	meta
	// Unique story identifier among stories of the given sender
	Id int32 `json:"id"`
	// Identifier of the chat that posted the story
	SenderChatId int64 `json:"sender_chat_id"`
	// Identifier of the sender of the story; may be null if the story is posted on behalf of the sender_chat_id
	SenderId MessageSender `json:"sender_id"`
	// Point in time (Unix timestamp) when the story was published
	Date int32 `json:"date"`
	// True, if the story is being sent by the current user
	IsBeingSent bool `json:"is_being_sent"`
	// True, if the story is being edited by the current user
	IsBeingEdited bool `json:"is_being_edited"`
	// True, if the story was edited
	IsEdited bool `json:"is_edited"`
	// True, if the story is saved in the sender's profile and will be available there after expiration
	IsPostedToChatPage bool `json:"is_posted_to_chat_page"`
	// True, if the story is visible only for the current user
	IsVisibleOnlyForSelf bool `json:"is_visible_only_for_self"`
	// True, if the story can be deleted
	CanBeDeleted bool `json:"can_be_deleted"`
	// True, if the story can be edited
	CanBeEdited bool `json:"can_be_edited"`
	// True, if the story can be forwarded as a message. Otherwise, screenshots and saving of the story content must be also forbidden
	CanBeForwarded bool `json:"can_be_forwarded"`
	// True, if the story can be replied in the chat with the story sender
	CanBeReplied bool `json:"can_be_replied"`
	// True, if the story's is_posted_to_chat_page value can be changed
	CanToggleIsPostedToChatPage bool `json:"can_toggle_is_posted_to_chat_page"`
	// True, if the story statistics are available through getStoryStatistics
	CanGetStatistics bool `json:"can_get_statistics"`
	// True, if interactions with the story can be received through getStoryInteractions
	CanGetInteractions bool `json:"can_get_interactions"`
	// True, if users viewed the story can't be received, because the story has expired more than getOption("story_viewers_expiration_delay") seconds ago
	HasExpiredViewers bool `json:"has_expired_viewers"`
	// Information about the original story; may be null if the story wasn't reposted
	RepostInfo *StoryRepostInfo `json:"repost_info"`
	// Information about interactions with the story; may be null if the story isn't owned or there were no interactions
	InteractionInfo *StoryInteractionInfo `json:"interaction_info"`
	// Type of the chosen reaction; may be null if none
	ChosenReactionType ReactionType `json:"chosen_reaction_type"`
	// Privacy rules affecting story visibility; may be approximate for non-owned stories
	PrivacySettings StoryPrivacySettings `json:"privacy_settings"`
	// Content of the story
	Content StoryContent `json:"content"`
	// Clickable areas to be shown on the story content
	Areas []*StoryArea `json:"areas"`
	// Caption of the story
	Caption *FormattedText `json:"caption"`
}

func (entity *Story) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Story

	return json.Marshal((*stub)(entity))
}

func (*Story) GetType() string {
	return TypeStory
}

func (*Story) GetConstructor() string {
	return ConstructorStory
}

func (story *Story) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                          int32                 `json:"id"`
		SenderChatId                int64                 `json:"sender_chat_id"`
		SenderId                    json.RawMessage       `json:"sender_id"`
		Date                        int32                 `json:"date"`
		IsBeingSent                 bool                  `json:"is_being_sent"`
		IsBeingEdited               bool                  `json:"is_being_edited"`
		IsEdited                    bool                  `json:"is_edited"`
		IsPostedToChatPage          bool                  `json:"is_posted_to_chat_page"`
		IsVisibleOnlyForSelf        bool                  `json:"is_visible_only_for_self"`
		CanBeDeleted                bool                  `json:"can_be_deleted"`
		CanBeEdited                 bool                  `json:"can_be_edited"`
		CanBeForwarded              bool                  `json:"can_be_forwarded"`
		CanBeReplied                bool                  `json:"can_be_replied"`
		CanToggleIsPostedToChatPage bool                  `json:"can_toggle_is_posted_to_chat_page"`
		CanGetStatistics            bool                  `json:"can_get_statistics"`
		CanGetInteractions          bool                  `json:"can_get_interactions"`
		HasExpiredViewers           bool                  `json:"has_expired_viewers"`
		RepostInfo                  *StoryRepostInfo      `json:"repost_info"`
		InteractionInfo             *StoryInteractionInfo `json:"interaction_info"`
		ChosenReactionType          json.RawMessage       `json:"chosen_reaction_type"`
		PrivacySettings             json.RawMessage       `json:"privacy_settings"`
		Content                     json.RawMessage       `json:"content"`
		Areas                       []*StoryArea          `json:"areas"`
		Caption                     *FormattedText        `json:"caption"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	story.Id = tmp.Id
	story.SenderChatId = tmp.SenderChatId
	story.Date = tmp.Date
	story.IsBeingSent = tmp.IsBeingSent
	story.IsBeingEdited = tmp.IsBeingEdited
	story.IsEdited = tmp.IsEdited
	story.IsPostedToChatPage = tmp.IsPostedToChatPage
	story.IsVisibleOnlyForSelf = tmp.IsVisibleOnlyForSelf
	story.CanBeDeleted = tmp.CanBeDeleted
	story.CanBeEdited = tmp.CanBeEdited
	story.CanBeForwarded = tmp.CanBeForwarded
	story.CanBeReplied = tmp.CanBeReplied
	story.CanToggleIsPostedToChatPage = tmp.CanToggleIsPostedToChatPage
	story.CanGetStatistics = tmp.CanGetStatistics
	story.CanGetInteractions = tmp.CanGetInteractions
	story.HasExpiredViewers = tmp.HasExpiredViewers
	story.RepostInfo = tmp.RepostInfo
	story.InteractionInfo = tmp.InteractionInfo
	story.Areas = tmp.Areas
	story.Caption = tmp.Caption

	fieldSenderId, _ := UnmarshalMessageSender(tmp.SenderId)
	story.SenderId = fieldSenderId

	fieldChosenReactionType, _ := UnmarshalReactionType(tmp.ChosenReactionType)
	story.ChosenReactionType = fieldChosenReactionType

	fieldPrivacySettings, _ := UnmarshalStoryPrivacySettings(tmp.PrivacySettings)
	story.PrivacySettings = fieldPrivacySettings

	fieldContent, _ := UnmarshalStoryContent(tmp.Content)
	story.Content = fieldContent

	return nil
}

// Represents a list of stories
type Stories struct {
	meta
	// Approximate total number of stories found
	TotalCount int32 `json:"total_count"`
	// The list of stories
	Stories []*Story `json:"stories"`
	// Identifiers of the pinned stories; returned only in getChatPostedToChatPageStories with from_story_id == 0
	PinnedStoryIds []int32 `json:"pinned_story_ids"`
}

func (entity *Stories) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Stories

	return json.Marshal((*stub)(entity))
}

func (*Stories) GetType() string {
	return TypeStories
}

func (*Stories) GetConstructor() string {
	return ConstructorStories
}

// Contains a list of stories found by a search
type FoundStories struct {
	meta
	// Approximate total number of stories found
	TotalCount int32 `json:"total_count"`
	// List of stories
	Stories []*Story `json:"stories"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *FoundStories) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FoundStories

	return json.Marshal((*stub)(entity))
}

func (*FoundStories) GetType() string {
	return TypeFoundStories
}

func (*FoundStories) GetConstructor() string {
	return ConstructorFoundStories
}

// Contains identifier of a story along with identifier of its sender
type StoryFullId struct {
	meta
	// Identifier of the chat that posted the story
	SenderChatId int64 `json:"sender_chat_id"`
	// Unique story identifier among stories of the given sender
	StoryId int32 `json:"story_id"`
}

func (entity *StoryFullId) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryFullId

	return json.Marshal((*stub)(entity))
}

func (*StoryFullId) GetType() string {
	return TypeStoryFullId
}

func (*StoryFullId) GetConstructor() string {
	return ConstructorStoryFullId
}

// Contains basic information about a story
type StoryInfo struct {
	meta
	// Unique story identifier among stories of the given sender
	StoryId int32 `json:"story_id"`
	// Point in time (Unix timestamp) when the story was published
	Date int32 `json:"date"`
	// True, if the story is available only to close friends
	IsForCloseFriends bool `json:"is_for_close_friends"`
}

func (entity *StoryInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryInfo

	return json.Marshal((*stub)(entity))
}

func (*StoryInfo) GetType() string {
	return TypeStoryInfo
}

func (*StoryInfo) GetConstructor() string {
	return ConstructorStoryInfo
}

// Describes active stories posted by a chat
type ChatActiveStories struct {
	meta
	// Identifier of the chat that posted the stories
	ChatId int64 `json:"chat_id"`
	// Identifier of the story list in which the stories are shown; may be null if the stories aren't shown in a story list
	List StoryList `json:"list"`
	// A parameter used to determine order of the stories in the story list; 0 if the stories doesn't need to be shown in the story list. Stories must be sorted by the pair (order, story_sender_chat_id) in descending order
	Order int64 `json:"order"`
	// Identifier of the last read active story
	MaxReadStoryId int32 `json:"max_read_story_id"`
	// Basic information about the stories; use getStory to get full information about the stories. The stories are in chronological order (i.e., in order of increasing story identifiers)
	Stories []*StoryInfo `json:"stories"`
}

func (entity *ChatActiveStories) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatActiveStories

	return json.Marshal((*stub)(entity))
}

func (*ChatActiveStories) GetType() string {
	return TypeChatActiveStories
}

func (*ChatActiveStories) GetConstructor() string {
	return ConstructorChatActiveStories
}

func (chatActiveStories *ChatActiveStories) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId         int64           `json:"chat_id"`
		List           json.RawMessage `json:"list"`
		Order          int64           `json:"order"`
		MaxReadStoryId int32           `json:"max_read_story_id"`
		Stories        []*StoryInfo    `json:"stories"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatActiveStories.ChatId = tmp.ChatId
	chatActiveStories.Order = tmp.Order
	chatActiveStories.MaxReadStoryId = tmp.MaxReadStoryId
	chatActiveStories.Stories = tmp.Stories

	fieldList, _ := UnmarshalStoryList(tmp.List)
	chatActiveStories.List = fieldList

	return nil
}

// A view of the story
type StoryInteractionTypeView struct {
	meta
	// Type of the reaction that was chosen by the viewer; may be null if none
	ChosenReactionType ReactionType `json:"chosen_reaction_type"`
}

func (entity *StoryInteractionTypeView) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryInteractionTypeView

	return json.Marshal((*stub)(entity))
}

func (*StoryInteractionTypeView) GetType() string {
	return TypeStoryInteractionType
}

func (*StoryInteractionTypeView) GetConstructor() string {
	return ConstructorStoryInteractionTypeView
}

func (*StoryInteractionTypeView) StoryInteractionTypeConstructor() string {
	return ConstructorStoryInteractionTypeView
}

func (storyInteractionTypeView *StoryInteractionTypeView) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChosenReactionType json.RawMessage `json:"chosen_reaction_type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldChosenReactionType, _ := UnmarshalReactionType(tmp.ChosenReactionType)
	storyInteractionTypeView.ChosenReactionType = fieldChosenReactionType

	return nil
}

// A forward of the story as a message
type StoryInteractionTypeForward struct {
	meta
	// The message with story forward
	Message *Message `json:"message"`
}

func (entity *StoryInteractionTypeForward) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryInteractionTypeForward

	return json.Marshal((*stub)(entity))
}

func (*StoryInteractionTypeForward) GetType() string {
	return TypeStoryInteractionType
}

func (*StoryInteractionTypeForward) GetConstructor() string {
	return ConstructorStoryInteractionTypeForward
}

func (*StoryInteractionTypeForward) StoryInteractionTypeConstructor() string {
	return ConstructorStoryInteractionTypeForward
}

// A repost of the story as a story
type StoryInteractionTypeRepost struct {
	meta
	// The reposted story
	Story *Story `json:"story"`
}

func (entity *StoryInteractionTypeRepost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryInteractionTypeRepost

	return json.Marshal((*stub)(entity))
}

func (*StoryInteractionTypeRepost) GetType() string {
	return TypeStoryInteractionType
}

func (*StoryInteractionTypeRepost) GetConstructor() string {
	return ConstructorStoryInteractionTypeRepost
}

func (*StoryInteractionTypeRepost) StoryInteractionTypeConstructor() string {
	return ConstructorStoryInteractionTypeRepost
}

// Represents interaction with a story
type StoryInteraction struct {
	meta
	// Identifier of the user or chat that made the interaction
	ActorId MessageSender `json:"actor_id"`
	// Approximate point in time (Unix timestamp) when the interaction happened
	InteractionDate int32 `json:"interaction_date"`
	// Block list to which the actor is added; may be null if none or for chat stories
	BlockList BlockList `json:"block_list"`
	// Type of the interaction
	Type StoryInteractionType `json:"type"`
}

func (entity *StoryInteraction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryInteraction

	return json.Marshal((*stub)(entity))
}

func (*StoryInteraction) GetType() string {
	return TypeStoryInteraction
}

func (*StoryInteraction) GetConstructor() string {
	return ConstructorStoryInteraction
}

func (storyInteraction *StoryInteraction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ActorId         json.RawMessage `json:"actor_id"`
		InteractionDate int32           `json:"interaction_date"`
		BlockList       json.RawMessage `json:"block_list"`
		Type            json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	storyInteraction.InteractionDate = tmp.InteractionDate

	fieldActorId, _ := UnmarshalMessageSender(tmp.ActorId)
	storyInteraction.ActorId = fieldActorId

	fieldBlockList, _ := UnmarshalBlockList(tmp.BlockList)
	storyInteraction.BlockList = fieldBlockList

	fieldType, _ := UnmarshalStoryInteractionType(tmp.Type)
	storyInteraction.Type = fieldType

	return nil
}

// Represents a list of interactions with a story
type StoryInteractions struct {
	meta
	// Approximate total number of interactions found
	TotalCount int32 `json:"total_count"`
	// Approximate total number of found forwards and reposts; always 0 for chat stories
	TotalForwardCount int32 `json:"total_forward_count"`
	// Approximate total number of found reactions; always 0 for chat stories
	TotalReactionCount int32 `json:"total_reaction_count"`
	// List of story interactions
	Interactions []*StoryInteraction `json:"interactions"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *StoryInteractions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryInteractions

	return json.Marshal((*stub)(entity))
}

func (*StoryInteractions) GetType() string {
	return TypeStoryInteractions
}

func (*StoryInteractions) GetConstructor() string {
	return ConstructorStoryInteractions
}

// Describes a message that can be used for quick reply
type QuickReplyMessage struct {
	meta
	// Unique message identifier among all quick replies
	Id int64 `json:"id"`
	// The sending state of the message; may be null if the message isn't being sent and didn't fail to be sent
	SendingState MessageSendingState `json:"sending_state"`
	// True, if the message can be edited
	CanBeEdited bool `json:"can_be_edited"`
	// The identifier of the quick reply message to which the message replies; 0 if none
	ReplyToMessageId int64 `json:"reply_to_message_id"`
	// If non-zero, the user identifier of the bot through which this message was sent
	ViaBotUserId int64 `json:"via_bot_user_id"`
	// Unique identifier of an album this message belongs to; 0 if none. Only audios, documents, photos and videos can be grouped together in albums
	MediaAlbumId JsonInt64 `json:"media_album_id"`
	// Content of the message
	Content MessageContent `json:"content"`
	// Inline keyboard reply markup for the message; may be null if none
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

func (entity *QuickReplyMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub QuickReplyMessage

	return json.Marshal((*stub)(entity))
}

func (*QuickReplyMessage) GetType() string {
	return TypeQuickReplyMessage
}

func (*QuickReplyMessage) GetConstructor() string {
	return ConstructorQuickReplyMessage
}

func (quickReplyMessage *QuickReplyMessage) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id               int64           `json:"id"`
		SendingState     json.RawMessage `json:"sending_state"`
		CanBeEdited      bool            `json:"can_be_edited"`
		ReplyToMessageId int64           `json:"reply_to_message_id"`
		ViaBotUserId     int64           `json:"via_bot_user_id"`
		MediaAlbumId     JsonInt64       `json:"media_album_id"`
		Content          json.RawMessage `json:"content"`
		ReplyMarkup      json.RawMessage `json:"reply_markup"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	quickReplyMessage.Id = tmp.Id
	quickReplyMessage.CanBeEdited = tmp.CanBeEdited
	quickReplyMessage.ReplyToMessageId = tmp.ReplyToMessageId
	quickReplyMessage.ViaBotUserId = tmp.ViaBotUserId
	quickReplyMessage.MediaAlbumId = tmp.MediaAlbumId

	fieldSendingState, _ := UnmarshalMessageSendingState(tmp.SendingState)
	quickReplyMessage.SendingState = fieldSendingState

	fieldContent, _ := UnmarshalMessageContent(tmp.Content)
	quickReplyMessage.Content = fieldContent

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	quickReplyMessage.ReplyMarkup = fieldReplyMarkup

	return nil
}

// Contains a list of quick reply messages
type QuickReplyMessages struct {
	meta
	// List of quick reply messages; messages may be null
	Messages []*QuickReplyMessage `json:"messages"`
}

func (entity *QuickReplyMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub QuickReplyMessages

	return json.Marshal((*stub)(entity))
}

func (*QuickReplyMessages) GetType() string {
	return TypeQuickReplyMessages
}

func (*QuickReplyMessages) GetConstructor() string {
	return ConstructorQuickReplyMessages
}

// Describes a shortcut that can be used for a quick reply
type QuickReplyShortcut struct {
	meta
	// Unique shortcut identifier
	Id int32 `json:"id"`
	// The name of the shortcut that can be used to use the shortcut
	Name string `json:"name"`
	// The first shortcut message
	FirstMessage *QuickReplyMessage `json:"first_message"`
	// The total number of messages in the shortcut
	MessageCount int32 `json:"message_count"`
}

func (entity *QuickReplyShortcut) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub QuickReplyShortcut

	return json.Marshal((*stub)(entity))
}

func (*QuickReplyShortcut) GetType() string {
	return TypeQuickReplyShortcut
}

func (*QuickReplyShortcut) GetConstructor() string {
	return ConstructorQuickReplyShortcut
}

// Contains a public forward as a message
type PublicForwardMessage struct {
	meta
	// Information about the message
	Message *Message `json:"message"`
}

func (entity *PublicForwardMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PublicForwardMessage

	return json.Marshal((*stub)(entity))
}

func (*PublicForwardMessage) GetType() string {
	return TypePublicForward
}

func (*PublicForwardMessage) GetConstructor() string {
	return ConstructorPublicForwardMessage
}

func (*PublicForwardMessage) PublicForwardConstructor() string {
	return ConstructorPublicForwardMessage
}

// Contains a public repost to a story
type PublicForwardStory struct {
	meta
	// Information about the story
	Story *Story `json:"story"`
}

func (entity *PublicForwardStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PublicForwardStory

	return json.Marshal((*stub)(entity))
}

func (*PublicForwardStory) GetType() string {
	return TypePublicForward
}

func (*PublicForwardStory) GetConstructor() string {
	return ConstructorPublicForwardStory
}

func (*PublicForwardStory) PublicForwardConstructor() string {
	return ConstructorPublicForwardStory
}

// Represents a list of public forwards and reposts as a story of a message or a story
type PublicForwards struct {
	meta
	// Approximate total number of messages and stories found
	TotalCount int32 `json:"total_count"`
	// List of found public forwards and reposts
	Forwards []PublicForward `json:"forwards"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *PublicForwards) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PublicForwards

	return json.Marshal((*stub)(entity))
}

func (*PublicForwards) GetType() string {
	return TypePublicForwards
}

func (*PublicForwards) GetConstructor() string {
	return ConstructorPublicForwards
}

func (publicForwards *PublicForwards) UnmarshalJSON(data []byte) error {
	var tmp struct {
		TotalCount int32             `json:"total_count"`
		Forwards   []json.RawMessage `json:"forwards"`
		NextOffset string            `json:"next_offset"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	publicForwards.TotalCount = tmp.TotalCount
	publicForwards.NextOffset = tmp.NextOffset

	fieldForwards, _ := UnmarshalListOfPublicForward(tmp.Forwards)
	publicForwards.Forwards = fieldForwards

	return nil
}

// Describes media previews of a bot
type BotMediaPreview struct {
	meta
	// Point in time (Unix timestamp) when the preview was added or changed last time
	Date int32 `json:"date"`
	// Content of the preview
	Content StoryContent `json:"content"`
}

func (entity *BotMediaPreview) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotMediaPreview

	return json.Marshal((*stub)(entity))
}

func (*BotMediaPreview) GetType() string {
	return TypeBotMediaPreview
}

func (*BotMediaPreview) GetConstructor() string {
	return ConstructorBotMediaPreview
}

func (botMediaPreview *BotMediaPreview) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Date    int32           `json:"date"`
		Content json.RawMessage `json:"content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	botMediaPreview.Date = tmp.Date

	fieldContent, _ := UnmarshalStoryContent(tmp.Content)
	botMediaPreview.Content = fieldContent

	return nil
}

// Contains a list of media previews of a bot
type BotMediaPreviews struct {
	meta
	// List of media previews
	Previews []*BotMediaPreview `json:"previews"`
}

func (entity *BotMediaPreviews) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotMediaPreviews

	return json.Marshal((*stub)(entity))
}

func (*BotMediaPreviews) GetType() string {
	return TypeBotMediaPreviews
}

func (*BotMediaPreviews) GetConstructor() string {
	return ConstructorBotMediaPreviews
}

// Contains a list of media previews of a bot for the given language and the list of languages for which the bot has dedicated previews
type BotMediaPreviewInfo struct {
	meta
	// List of media previews
	Previews []*BotMediaPreview `json:"previews"`
	// List of language codes for which the bot has dedicated previews
	LanguageCodes []string `json:"language_codes"`
}

func (entity *BotMediaPreviewInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotMediaPreviewInfo

	return json.Marshal((*stub)(entity))
}

func (*BotMediaPreviewInfo) GetType() string {
	return TypeBotMediaPreviewInfo
}

func (*BotMediaPreviewInfo) GetConstructor() string {
	return ConstructorBotMediaPreviewInfo
}

// Contains a list of features available on a specific chat boost level
type ChatBoostLevelFeatures struct {
	meta
	// Target chat boost level
	Level int32 `json:"level"`
	// Number of stories that the chat can publish daily
	StoryPerDayCount int32 `json:"story_per_day_count"`
	// Number of custom emoji reactions that can be added to the list of available reactions
	CustomEmojiReactionCount int32 `json:"custom_emoji_reaction_count"`
	// Number of custom colors for chat title
	TitleColorCount int32 `json:"title_color_count"`
	// Number of custom colors for profile photo background
	ProfileAccentColorCount int32 `json:"profile_accent_color_count"`
	// True, if custom emoji for profile background can be set
	CanSetProfileBackgroundCustomEmoji bool `json:"can_set_profile_background_custom_emoji"`
	// Number of custom colors for background of empty chat photo, replies to messages and link previews
	AccentColorCount int32 `json:"accent_color_count"`
	// True, if custom emoji for reply header and link preview background can be set
	CanSetBackgroundCustomEmoji bool `json:"can_set_background_custom_emoji"`
	// True, if emoji status can be set
	CanSetEmojiStatus bool `json:"can_set_emoji_status"`
	// Number of chat theme backgrounds that can be set as chat background
	ChatThemeBackgroundCount int32 `json:"chat_theme_background_count"`
	// True, if custom background can be set in the chat for all users
	CanSetCustomBackground bool `json:"can_set_custom_background"`
	// True, if custom emoji sticker set can be set for the chat
	CanSetCustomEmojiStickerSet bool `json:"can_set_custom_emoji_sticker_set"`
	// True, if speech recognition can be used for video note and voice note messages by all users
	CanRecognizeSpeech bool `json:"can_recognize_speech"`
	// True, if sponsored messages can be disabled in the chat
	CanDisableSponsoredMessages bool `json:"can_disable_sponsored_messages"`
}

func (entity *ChatBoostLevelFeatures) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoostLevelFeatures

	return json.Marshal((*stub)(entity))
}

func (*ChatBoostLevelFeatures) GetType() string {
	return TypeChatBoostLevelFeatures
}

func (*ChatBoostLevelFeatures) GetConstructor() string {
	return ConstructorChatBoostLevelFeatures
}

// Contains a list of features available on the first chat boost levels
type ChatBoostFeatures struct {
	meta
	// The list of features
	Features []*ChatBoostLevelFeatures `json:"features"`
	// The minimum boost level required to set custom emoji for profile background
	MinProfileBackgroundCustomEmojiBoostLevel int32 `json:"min_profile_background_custom_emoji_boost_level"`
	// The minimum boost level required to set custom emoji for reply header and link preview background; for channel chats only
	MinBackgroundCustomEmojiBoostLevel int32 `json:"min_background_custom_emoji_boost_level"`
	// The minimum boost level required to set emoji status
	MinEmojiStatusBoostLevel int32 `json:"min_emoji_status_boost_level"`
	// The minimum boost level required to set a chat theme background as chat background
	MinChatThemeBackgroundBoostLevel int32 `json:"min_chat_theme_background_boost_level"`
	// The minimum boost level required to set custom chat background
	MinCustomBackgroundBoostLevel int32 `json:"min_custom_background_boost_level"`
	// The minimum boost level required to set custom emoji sticker set for the chat; for supergroup chats only
	MinCustomEmojiStickerSetBoostLevel int32 `json:"min_custom_emoji_sticker_set_boost_level"`
	// The minimum boost level allowing to recognize speech in video note and voice note messages for non-Premium users; for supergroup chats only
	MinSpeechRecognitionBoostLevel int32 `json:"min_speech_recognition_boost_level"`
	// The minimum boost level allowing to disable sponsored messages in the chat; for channel chats only
	MinSponsoredMessageDisableBoostLevel int32 `json:"min_sponsored_message_disable_boost_level"`
}

func (entity *ChatBoostFeatures) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoostFeatures

	return json.Marshal((*stub)(entity))
}

func (*ChatBoostFeatures) GetType() string {
	return TypeChatBoostFeatures
}

func (*ChatBoostFeatures) GetConstructor() string {
	return ConstructorChatBoostFeatures
}

// The chat created a Telegram Premium gift code for a user
type ChatBoostSourceGiftCode struct {
	meta
	// Identifier of a user, for which the gift code was created
	UserId int64 `json:"user_id"`
	// The created Telegram Premium gift code, which is known only if this is a gift code for the current user, or it has already been claimed
	GiftCode string `json:"gift_code"`
}

func (entity *ChatBoostSourceGiftCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoostSourceGiftCode

	return json.Marshal((*stub)(entity))
}

func (*ChatBoostSourceGiftCode) GetType() string {
	return TypeChatBoostSource
}

func (*ChatBoostSourceGiftCode) GetConstructor() string {
	return ConstructorChatBoostSourceGiftCode
}

func (*ChatBoostSourceGiftCode) ChatBoostSourceConstructor() string {
	return ConstructorChatBoostSourceGiftCode
}

// The chat created a giveaway
type ChatBoostSourceGiveaway struct {
	meta
	// Identifier of a user that won in the giveaway; 0 if none
	UserId int64 `json:"user_id"`
	// The created Telegram Premium gift code if it was used by the user or can be claimed by the current user; an empty string otherwise; for Telegram Premium giveways only
	GiftCode string `json:"gift_code"`
	// Number of Telegram Stars distributed among winners of the giveaway
	StarCount int64 `json:"star_count"`
	// Identifier of the corresponding giveaway message; can be an identifier of a deleted message
	GiveawayMessageId int64 `json:"giveaway_message_id"`
	// True, if the winner for the corresponding giveaway prize wasn't chosen, because there were not enough participants
	IsUnclaimed bool `json:"is_unclaimed"`
}

func (entity *ChatBoostSourceGiveaway) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoostSourceGiveaway

	return json.Marshal((*stub)(entity))
}

func (*ChatBoostSourceGiveaway) GetType() string {
	return TypeChatBoostSource
}

func (*ChatBoostSourceGiveaway) GetConstructor() string {
	return ConstructorChatBoostSourceGiveaway
}

func (*ChatBoostSourceGiveaway) ChatBoostSourceConstructor() string {
	return ConstructorChatBoostSourceGiveaway
}

// A user with Telegram Premium subscription or gifted Telegram Premium boosted the chat
type ChatBoostSourcePremium struct {
	meta
	// Identifier of the user
	UserId int64 `json:"user_id"`
}

func (entity *ChatBoostSourcePremium) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoostSourcePremium

	return json.Marshal((*stub)(entity))
}

func (*ChatBoostSourcePremium) GetType() string {
	return TypeChatBoostSource
}

func (*ChatBoostSourcePremium) GetConstructor() string {
	return ConstructorChatBoostSourcePremium
}

func (*ChatBoostSourcePremium) ChatBoostSourceConstructor() string {
	return ConstructorChatBoostSourcePremium
}

// Describes a prepaid giveaway
type PrepaidGiveaway struct {
	meta
	// Unique identifier of the prepaid giveaway
	Id JsonInt64 `json:"id"`
	// Number of users which will receive giveaway prize
	WinnerCount int32 `json:"winner_count"`
	// Prize of the giveaway
	Prize GiveawayPrize `json:"prize"`
	// The number of boosts received by the chat from the giveaway; for Telegram Star giveaways only
	BoostCount int32 `json:"boost_count"`
	// Point in time (Unix timestamp) when the giveaway was paid
	PaymentDate int32 `json:"payment_date"`
}

func (entity *PrepaidGiveaway) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PrepaidGiveaway

	return json.Marshal((*stub)(entity))
}

func (*PrepaidGiveaway) GetType() string {
	return TypePrepaidGiveaway
}

func (*PrepaidGiveaway) GetConstructor() string {
	return ConstructorPrepaidGiveaway
}

func (prepaidGiveaway *PrepaidGiveaway) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id          JsonInt64       `json:"id"`
		WinnerCount int32           `json:"winner_count"`
		Prize       json.RawMessage `json:"prize"`
		BoostCount  int32           `json:"boost_count"`
		PaymentDate int32           `json:"payment_date"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	prepaidGiveaway.Id = tmp.Id
	prepaidGiveaway.WinnerCount = tmp.WinnerCount
	prepaidGiveaway.BoostCount = tmp.BoostCount
	prepaidGiveaway.PaymentDate = tmp.PaymentDate

	fieldPrize, _ := UnmarshalGiveawayPrize(tmp.Prize)
	prepaidGiveaway.Prize = fieldPrize

	return nil
}

// Describes current boost status of a chat
type ChatBoostStatus struct {
	meta
	// An HTTP URL, which can be used to boost the chat
	BoostUrl string `json:"boost_url"`
	// Identifiers of boost slots of the current user applied to the chat
	AppliedSlotIds []int32 `json:"applied_slot_ids"`
	// Current boost level of the chat
	Level int32 `json:"level"`
	// The number of boosts received by the chat from created Telegram Premium gift codes and giveaways; always 0 if the current user isn't an administrator in the chat
	GiftCodeBoostCount int32 `json:"gift_code_boost_count"`
	// The number of boosts received by the chat
	BoostCount int32 `json:"boost_count"`
	// The number of boosts added to reach the current level
	CurrentLevelBoostCount int32 `json:"current_level_boost_count"`
	// The number of boosts needed to reach the next level; 0 if the next level isn't available
	NextLevelBoostCount int32 `json:"next_level_boost_count"`
	// Approximate number of Telegram Premium subscribers joined the chat; always 0 if the current user isn't an administrator in the chat
	PremiumMemberCount int32 `json:"premium_member_count"`
	// A percentage of Telegram Premium subscribers joined the chat; always 0 if the current user isn't an administrator in the chat
	PremiumMemberPercentage float64 `json:"premium_member_percentage"`
	// The list of prepaid giveaways available for the chat; only for chat administrators
	PrepaidGiveaways []*PrepaidGiveaway `json:"prepaid_giveaways"`
}

func (entity *ChatBoostStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoostStatus

	return json.Marshal((*stub)(entity))
}

func (*ChatBoostStatus) GetType() string {
	return TypeChatBoostStatus
}

func (*ChatBoostStatus) GetConstructor() string {
	return ConstructorChatBoostStatus
}

// Describes a boost applied to a chat
type ChatBoost struct {
	meta
	// Unique identifier of the boost
	Id string `json:"id"`
	// The number of identical boosts applied
	Count int32 `json:"count"`
	// Source of the boost
	Source ChatBoostSource `json:"source"`
	// Point in time (Unix timestamp) when the chat was boosted
	StartDate int32 `json:"start_date"`
	// Point in time (Unix timestamp) when the boost will expire
	ExpirationDate int32 `json:"expiration_date"`
}

func (entity *ChatBoost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoost

	return json.Marshal((*stub)(entity))
}

func (*ChatBoost) GetType() string {
	return TypeChatBoost
}

func (*ChatBoost) GetConstructor() string {
	return ConstructorChatBoost
}

func (chatBoost *ChatBoost) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id             string          `json:"id"`
		Count          int32           `json:"count"`
		Source         json.RawMessage `json:"source"`
		StartDate      int32           `json:"start_date"`
		ExpirationDate int32           `json:"expiration_date"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatBoost.Id = tmp.Id
	chatBoost.Count = tmp.Count
	chatBoost.StartDate = tmp.StartDate
	chatBoost.ExpirationDate = tmp.ExpirationDate

	fieldSource, _ := UnmarshalChatBoostSource(tmp.Source)
	chatBoost.Source = fieldSource

	return nil
}

// Contains a list of boosts applied to a chat
type FoundChatBoosts struct {
	meta
	// Total number of boosts applied to the chat
	TotalCount int32 `json:"total_count"`
	// List of boosts
	Boosts []*ChatBoost `json:"boosts"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *FoundChatBoosts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FoundChatBoosts

	return json.Marshal((*stub)(entity))
}

func (*FoundChatBoosts) GetType() string {
	return TypeFoundChatBoosts
}

func (*FoundChatBoosts) GetConstructor() string {
	return ConstructorFoundChatBoosts
}

// Describes a slot for chat boost
type ChatBoostSlot struct {
	meta
	// Unique identifier of the slot
	SlotId int32 `json:"slot_id"`
	// Identifier of the currently boosted chat; 0 if none
	CurrentlyBoostedChatId int64 `json:"currently_boosted_chat_id"`
	// Point in time (Unix timestamp) when the chat was boosted; 0 if none
	StartDate int32 `json:"start_date"`
	// Point in time (Unix timestamp) when the boost will expire
	ExpirationDate int32 `json:"expiration_date"`
	// Point in time (Unix timestamp) after which the boost can be used for another chat
	CooldownUntilDate int32 `json:"cooldown_until_date"`
}

func (entity *ChatBoostSlot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoostSlot

	return json.Marshal((*stub)(entity))
}

func (*ChatBoostSlot) GetType() string {
	return TypeChatBoostSlot
}

func (*ChatBoostSlot) GetConstructor() string {
	return ConstructorChatBoostSlot
}

// Contains a list of chat boost slots
type ChatBoostSlots struct {
	meta
	// List of boost slots
	Slots []*ChatBoostSlot `json:"slots"`
}

func (entity *ChatBoostSlots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoostSlots

	return json.Marshal((*stub)(entity))
}

func (*ChatBoostSlots) GetType() string {
	return TypeChatBoostSlots
}

func (*ChatBoostSlots) GetConstructor() string {
	return ConstructorChatBoostSlots
}

// The user requested to resend the code
type ResendCodeReasonUserRequest struct {
	meta
}

func (entity *ResendCodeReasonUserRequest) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ResendCodeReasonUserRequest

	return json.Marshal((*stub)(entity))
}

func (*ResendCodeReasonUserRequest) GetType() string {
	return TypeResendCodeReason
}

func (*ResendCodeReasonUserRequest) GetConstructor() string {
	return ConstructorResendCodeReasonUserRequest
}

func (*ResendCodeReasonUserRequest) ResendCodeReasonConstructor() string {
	return ConstructorResendCodeReasonUserRequest
}

// The code is re-sent, because device verification has failed
type ResendCodeReasonVerificationFailed struct {
	meta
	// Cause of the verification failure, for example, PLAY_SERVICES_NOT_AVAILABLE, APNS_RECEIVE_TIMEOUT, or APNS_INIT_FAILED
	ErrorMessage string `json:"error_message"`
}

func (entity *ResendCodeReasonVerificationFailed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ResendCodeReasonVerificationFailed

	return json.Marshal((*stub)(entity))
}

func (*ResendCodeReasonVerificationFailed) GetType() string {
	return TypeResendCodeReason
}

func (*ResendCodeReasonVerificationFailed) GetConstructor() string {
	return ConstructorResendCodeReasonVerificationFailed
}

func (*ResendCodeReasonVerificationFailed) ResendCodeReasonConstructor() string {
	return ConstructorResendCodeReasonVerificationFailed
}

// The call wasn't discarded, or the reason is unknown
type CallDiscardReasonEmpty struct {
	meta
}

func (entity *CallDiscardReasonEmpty) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallDiscardReasonEmpty

	return json.Marshal((*stub)(entity))
}

func (*CallDiscardReasonEmpty) GetType() string {
	return TypeCallDiscardReason
}

func (*CallDiscardReasonEmpty) GetConstructor() string {
	return ConstructorCallDiscardReasonEmpty
}

func (*CallDiscardReasonEmpty) CallDiscardReasonConstructor() string {
	return ConstructorCallDiscardReasonEmpty
}

// The call was ended before the conversation started. It was canceled by the caller or missed by the other party
type CallDiscardReasonMissed struct {
	meta
}

func (entity *CallDiscardReasonMissed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallDiscardReasonMissed

	return json.Marshal((*stub)(entity))
}

func (*CallDiscardReasonMissed) GetType() string {
	return TypeCallDiscardReason
}

func (*CallDiscardReasonMissed) GetConstructor() string {
	return ConstructorCallDiscardReasonMissed
}

func (*CallDiscardReasonMissed) CallDiscardReasonConstructor() string {
	return ConstructorCallDiscardReasonMissed
}

// The call was ended before the conversation started. It was declined by the other party
type CallDiscardReasonDeclined struct {
	meta
}

func (entity *CallDiscardReasonDeclined) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallDiscardReasonDeclined

	return json.Marshal((*stub)(entity))
}

func (*CallDiscardReasonDeclined) GetType() string {
	return TypeCallDiscardReason
}

func (*CallDiscardReasonDeclined) GetConstructor() string {
	return ConstructorCallDiscardReasonDeclined
}

func (*CallDiscardReasonDeclined) CallDiscardReasonConstructor() string {
	return ConstructorCallDiscardReasonDeclined
}

// The call was ended during the conversation because the users were disconnected
type CallDiscardReasonDisconnected struct {
	meta
}

func (entity *CallDiscardReasonDisconnected) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallDiscardReasonDisconnected

	return json.Marshal((*stub)(entity))
}

func (*CallDiscardReasonDisconnected) GetType() string {
	return TypeCallDiscardReason
}

func (*CallDiscardReasonDisconnected) GetConstructor() string {
	return ConstructorCallDiscardReasonDisconnected
}

func (*CallDiscardReasonDisconnected) CallDiscardReasonConstructor() string {
	return ConstructorCallDiscardReasonDisconnected
}

// The call was ended because one of the parties hung up
type CallDiscardReasonHungUp struct {
	meta
}

func (entity *CallDiscardReasonHungUp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallDiscardReasonHungUp

	return json.Marshal((*stub)(entity))
}

func (*CallDiscardReasonHungUp) GetType() string {
	return TypeCallDiscardReason
}

func (*CallDiscardReasonHungUp) GetConstructor() string {
	return ConstructorCallDiscardReasonHungUp
}

func (*CallDiscardReasonHungUp) CallDiscardReasonConstructor() string {
	return ConstructorCallDiscardReasonHungUp
}

// Specifies the supported call protocols
type CallProtocol struct {
	meta
	// True, if UDP peer-to-peer connections are supported
	UdpP2p bool `json:"udp_p2p"`
	// True, if connection through UDP reflectors is supported
	UdpReflector bool `json:"udp_reflector"`
	// The minimum supported API layer; use 65
	MinLayer int32 `json:"min_layer"`
	// The maximum supported API layer; use 92
	MaxLayer int32 `json:"max_layer"`
	// List of supported tgcalls versions
	LibraryVersions []string `json:"library_versions"`
}

func (entity *CallProtocol) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallProtocol

	return json.Marshal((*stub)(entity))
}

func (*CallProtocol) GetType() string {
	return TypeCallProtocol
}

func (*CallProtocol) GetConstructor() string {
	return ConstructorCallProtocol
}

// A Telegram call reflector
type CallServerTypeTelegramReflector struct {
	meta
	// A peer tag to be used with the reflector
	PeerTag []byte `json:"peer_tag"`
	// True, if the server uses TCP instead of UDP
	IsTcp bool `json:"is_tcp"`
}

func (entity *CallServerTypeTelegramReflector) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallServerTypeTelegramReflector

	return json.Marshal((*stub)(entity))
}

func (*CallServerTypeTelegramReflector) GetType() string {
	return TypeCallServerType
}

func (*CallServerTypeTelegramReflector) GetConstructor() string {
	return ConstructorCallServerTypeTelegramReflector
}

func (*CallServerTypeTelegramReflector) CallServerTypeConstructor() string {
	return ConstructorCallServerTypeTelegramReflector
}

// A WebRTC server
type CallServerTypeWebrtc struct {
	meta
	// Username to be used for authentication
	Username string `json:"username"`
	// Authentication password
	Password string `json:"password"`
	// True, if the server supports TURN
	SupportsTurn bool `json:"supports_turn"`
	// True, if the server supports STUN
	SupportsStun bool `json:"supports_stun"`
}

func (entity *CallServerTypeWebrtc) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallServerTypeWebrtc

	return json.Marshal((*stub)(entity))
}

func (*CallServerTypeWebrtc) GetType() string {
	return TypeCallServerType
}

func (*CallServerTypeWebrtc) GetConstructor() string {
	return ConstructorCallServerTypeWebrtc
}

func (*CallServerTypeWebrtc) CallServerTypeConstructor() string {
	return ConstructorCallServerTypeWebrtc
}

// Describes a server for relaying call data
type CallServer struct {
	meta
	// Server identifier
	Id JsonInt64 `json:"id"`
	// Server IPv4 address
	IpAddress string `json:"ip_address"`
	// Server IPv6 address
	Ipv6Address string `json:"ipv6_address"`
	// Server port number
	Port int32 `json:"port"`
	// Server type
	Type CallServerType `json:"type"`
}

func (entity *CallServer) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallServer

	return json.Marshal((*stub)(entity))
}

func (*CallServer) GetType() string {
	return TypeCallServer
}

func (*CallServer) GetConstructor() string {
	return ConstructorCallServer
}

func (callServer *CallServer) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id          JsonInt64       `json:"id"`
		IpAddress   string          `json:"ip_address"`
		Ipv6Address string          `json:"ipv6_address"`
		Port        int32           `json:"port"`
		Type        json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	callServer.Id = tmp.Id
	callServer.IpAddress = tmp.IpAddress
	callServer.Ipv6Address = tmp.Ipv6Address
	callServer.Port = tmp.Port

	fieldType, _ := UnmarshalCallServerType(tmp.Type)
	callServer.Type = fieldType

	return nil
}

// Contains the call identifier
type CallId struct {
	meta
	// Call identifier
	Id int32 `json:"id"`
}

func (entity *CallId) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallId

	return json.Marshal((*stub)(entity))
}

func (*CallId) GetType() string {
	return TypeCallId
}

func (*CallId) GetConstructor() string {
	return ConstructorCallId
}

// Contains the group call identifier
type GroupCallId struct {
	meta
	// Group call identifier
	Id int32 `json:"id"`
}

func (entity *GroupCallId) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCallId

	return json.Marshal((*stub)(entity))
}

func (*GroupCallId) GetType() string {
	return TypeGroupCallId
}

func (*GroupCallId) GetConstructor() string {
	return ConstructorGroupCallId
}

// The call is pending, waiting to be accepted by a user
type CallStatePending struct {
	meta
	// True, if the call has already been created by the server
	IsCreated bool `json:"is_created"`
	// True, if the call has already been received by the other party
	IsReceived bool `json:"is_received"`
}

func (entity *CallStatePending) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallStatePending

	return json.Marshal((*stub)(entity))
}

func (*CallStatePending) GetType() string {
	return TypeCallState
}

func (*CallStatePending) GetConstructor() string {
	return ConstructorCallStatePending
}

func (*CallStatePending) CallStateConstructor() string {
	return ConstructorCallStatePending
}

// The call has been answered and encryption keys are being exchanged
type CallStateExchangingKeys struct {
	meta
}

func (entity *CallStateExchangingKeys) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallStateExchangingKeys

	return json.Marshal((*stub)(entity))
}

func (*CallStateExchangingKeys) GetType() string {
	return TypeCallState
}

func (*CallStateExchangingKeys) GetConstructor() string {
	return ConstructorCallStateExchangingKeys
}

func (*CallStateExchangingKeys) CallStateConstructor() string {
	return ConstructorCallStateExchangingKeys
}

// The call is ready to use
type CallStateReady struct {
	meta
	// Call protocols supported by the other call participant
	Protocol *CallProtocol `json:"protocol"`
	// List of available call servers
	Servers []*CallServer `json:"servers"`
	// A JSON-encoded call config
	Config string `json:"config"`
	// Call encryption key
	EncryptionKey []byte `json:"encryption_key"`
	// Encryption key fingerprint represented as 4 emoji
	Emojis []string `json:"emojis"`
	// True, if peer-to-peer connection is allowed by users privacy settings
	AllowP2p bool `json:"allow_p2p"`
	// Custom JSON-encoded call parameters to be passed to tgcalls
	CustomParameters string `json:"custom_parameters"`
}

func (entity *CallStateReady) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallStateReady

	return json.Marshal((*stub)(entity))
}

func (*CallStateReady) GetType() string {
	return TypeCallState
}

func (*CallStateReady) GetConstructor() string {
	return ConstructorCallStateReady
}

func (*CallStateReady) CallStateConstructor() string {
	return ConstructorCallStateReady
}

// The call is hanging up after discardCall has been called
type CallStateHangingUp struct {
	meta
}

func (entity *CallStateHangingUp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallStateHangingUp

	return json.Marshal((*stub)(entity))
}

func (*CallStateHangingUp) GetType() string {
	return TypeCallState
}

func (*CallStateHangingUp) GetConstructor() string {
	return ConstructorCallStateHangingUp
}

func (*CallStateHangingUp) CallStateConstructor() string {
	return ConstructorCallStateHangingUp
}

// The call has ended successfully
type CallStateDiscarded struct {
	meta
	// The reason why the call has ended
	Reason CallDiscardReason `json:"reason"`
	// True, if the call rating must be sent to the server
	NeedRating bool `json:"need_rating"`
	// True, if the call debug information must be sent to the server
	NeedDebugInformation bool `json:"need_debug_information"`
	// True, if the call log must be sent to the server
	NeedLog bool `json:"need_log"`
}

func (entity *CallStateDiscarded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallStateDiscarded

	return json.Marshal((*stub)(entity))
}

func (*CallStateDiscarded) GetType() string {
	return TypeCallState
}

func (*CallStateDiscarded) GetConstructor() string {
	return ConstructorCallStateDiscarded
}

func (*CallStateDiscarded) CallStateConstructor() string {
	return ConstructorCallStateDiscarded
}

func (callStateDiscarded *CallStateDiscarded) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Reason               json.RawMessage `json:"reason"`
		NeedRating           bool            `json:"need_rating"`
		NeedDebugInformation bool            `json:"need_debug_information"`
		NeedLog              bool            `json:"need_log"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	callStateDiscarded.NeedRating = tmp.NeedRating
	callStateDiscarded.NeedDebugInformation = tmp.NeedDebugInformation
	callStateDiscarded.NeedLog = tmp.NeedLog

	fieldReason, _ := UnmarshalCallDiscardReason(tmp.Reason)
	callStateDiscarded.Reason = fieldReason

	return nil
}

// The call has ended with an error
type CallStateError struct {
	meta
	// Error. An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout
	Error *Error `json:"error"`
}

func (entity *CallStateError) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallStateError

	return json.Marshal((*stub)(entity))
}

func (*CallStateError) GetType() string {
	return TypeCallState
}

func (*CallStateError) GetConstructor() string {
	return ConstructorCallStateError
}

func (*CallStateError) CallStateConstructor() string {
	return ConstructorCallStateError
}

// The worst available video quality
type GroupCallVideoQualityThumbnail struct {
	meta
}

func (entity *GroupCallVideoQualityThumbnail) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCallVideoQualityThumbnail

	return json.Marshal((*stub)(entity))
}

func (*GroupCallVideoQualityThumbnail) GetType() string {
	return TypeGroupCallVideoQuality
}

func (*GroupCallVideoQualityThumbnail) GetConstructor() string {
	return ConstructorGroupCallVideoQualityThumbnail
}

func (*GroupCallVideoQualityThumbnail) GroupCallVideoQualityConstructor() string {
	return ConstructorGroupCallVideoQualityThumbnail
}

// The medium video quality
type GroupCallVideoQualityMedium struct {
	meta
}

func (entity *GroupCallVideoQualityMedium) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCallVideoQualityMedium

	return json.Marshal((*stub)(entity))
}

func (*GroupCallVideoQualityMedium) GetType() string {
	return TypeGroupCallVideoQuality
}

func (*GroupCallVideoQualityMedium) GetConstructor() string {
	return ConstructorGroupCallVideoQualityMedium
}

func (*GroupCallVideoQualityMedium) GroupCallVideoQualityConstructor() string {
	return ConstructorGroupCallVideoQualityMedium
}

// The best available video quality
type GroupCallVideoQualityFull struct {
	meta
}

func (entity *GroupCallVideoQualityFull) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCallVideoQualityFull

	return json.Marshal((*stub)(entity))
}

func (*GroupCallVideoQualityFull) GetType() string {
	return TypeGroupCallVideoQuality
}

func (*GroupCallVideoQualityFull) GetConstructor() string {
	return ConstructorGroupCallVideoQualityFull
}

func (*GroupCallVideoQualityFull) GroupCallVideoQualityConstructor() string {
	return ConstructorGroupCallVideoQualityFull
}

// Describes an available stream in a group call
type GroupCallStream struct {
	meta
	// Identifier of an audio/video channel
	ChannelId int32 `json:"channel_id"`
	// Scale of segment durations in the stream. The duration is 1000/(2**scale) milliseconds
	Scale int32 `json:"scale"`
	// Point in time when the stream currently ends; Unix timestamp in milliseconds
	TimeOffset int64 `json:"time_offset"`
}

func (entity *GroupCallStream) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCallStream

	return json.Marshal((*stub)(entity))
}

func (*GroupCallStream) GetType() string {
	return TypeGroupCallStream
}

func (*GroupCallStream) GetConstructor() string {
	return ConstructorGroupCallStream
}

// Represents a list of group call streams
type GroupCallStreams struct {
	meta
	// A list of group call streams
	Streams []*GroupCallStream `json:"streams"`
}

func (entity *GroupCallStreams) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCallStreams

	return json.Marshal((*stub)(entity))
}

func (*GroupCallStreams) GetType() string {
	return TypeGroupCallStreams
}

func (*GroupCallStreams) GetConstructor() string {
	return ConstructorGroupCallStreams
}

// Represents an RTMP URL
type RtmpUrl struct {
	meta
	// The URL
	Url string `json:"url"`
	// Stream key
	StreamKey string `json:"stream_key"`
}

func (entity *RtmpUrl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RtmpUrl

	return json.Marshal((*stub)(entity))
}

func (*RtmpUrl) GetType() string {
	return TypeRtmpUrl
}

func (*RtmpUrl) GetConstructor() string {
	return ConstructorRtmpUrl
}

// Describes a recently speaking participant in a group call
type GroupCallRecentSpeaker struct {
	meta
	// Group call participant identifier
	ParticipantId MessageSender `json:"participant_id"`
	// True, is the user has spoken recently
	IsSpeaking bool `json:"is_speaking"`
}

func (entity *GroupCallRecentSpeaker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCallRecentSpeaker

	return json.Marshal((*stub)(entity))
}

func (*GroupCallRecentSpeaker) GetType() string {
	return TypeGroupCallRecentSpeaker
}

func (*GroupCallRecentSpeaker) GetConstructor() string {
	return ConstructorGroupCallRecentSpeaker
}

func (groupCallRecentSpeaker *GroupCallRecentSpeaker) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ParticipantId json.RawMessage `json:"participant_id"`
		IsSpeaking    bool            `json:"is_speaking"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	groupCallRecentSpeaker.IsSpeaking = tmp.IsSpeaking

	fieldParticipantId, _ := UnmarshalMessageSender(tmp.ParticipantId)
	groupCallRecentSpeaker.ParticipantId = fieldParticipantId

	return nil
}

// Describes a group call
type GroupCall struct {
	meta
	// Group call identifier
	Id int32 `json:"id"`
	// Group call title
	Title string `json:"title"`
	// Point in time (Unix timestamp) when the group call is expected to be started by an administrator; 0 if it is already active or was ended
	ScheduledStartDate int32 `json:"scheduled_start_date"`
	// True, if the group call is scheduled and the current user will receive a notification when the group call starts
	EnabledStartNotification bool `json:"enabled_start_notification"`
	// True, if the call is active
	IsActive bool `json:"is_active"`
	// True, if the chat is an RTMP stream instead of an ordinary video chat
	IsRtmpStream bool `json:"is_rtmp_stream"`
	// True, if the call is joined
	IsJoined bool `json:"is_joined"`
	// True, if user was kicked from the call because of network loss and the call needs to be rejoined
	NeedRejoin bool `json:"need_rejoin"`
	// True, if the current user can manage the group call
	CanBeManaged bool `json:"can_be_managed"`
	// Number of participants in the group call
	ParticipantCount int32 `json:"participant_count"`
	// True, if group call participants, which are muted, aren't returned in participant list
	HasHiddenListeners bool `json:"has_hidden_listeners"`
	// True, if all group call participants are loaded
	LoadedAllParticipants bool `json:"loaded_all_participants"`
	// At most 3 recently speaking users in the group call
	RecentSpeakers []*GroupCallRecentSpeaker `json:"recent_speakers"`
	// True, if the current user's video is enabled
	IsMyVideoEnabled bool `json:"is_my_video_enabled"`
	// True, if the current user's video is paused
	IsMyVideoPaused bool `json:"is_my_video_paused"`
	// True, if the current user can broadcast video or share screen
	CanEnableVideo bool `json:"can_enable_video"`
	// True, if only group call administrators can unmute new participants
	MuteNewParticipants bool `json:"mute_new_participants"`
	// True, if the current user can enable or disable mute_new_participants setting
	CanToggleMuteNewParticipants bool `json:"can_toggle_mute_new_participants"`
	// Duration of the ongoing group call recording, in seconds; 0 if none. An updateGroupCall update is not triggered when value of this field changes, but the same recording goes on
	RecordDuration int32 `json:"record_duration"`
	// True, if a video file is being recorded for the call
	IsVideoRecorded bool `json:"is_video_recorded"`
	// Call duration, in seconds; for ended calls only
	Duration int32 `json:"duration"`
}

func (entity *GroupCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCall

	return json.Marshal((*stub)(entity))
}

func (*GroupCall) GetType() string {
	return TypeGroupCall
}

func (*GroupCall) GetConstructor() string {
	return ConstructorGroupCall
}

// Describes a group of video synchronization source identifiers
type GroupCallVideoSourceGroup struct {
	meta
	// The semantics of sources, one of "SIM" or "FID"
	Semantics string `json:"semantics"`
	// The list of synchronization source identifiers
	SourceIds []int32 `json:"source_ids"`
}

func (entity *GroupCallVideoSourceGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCallVideoSourceGroup

	return json.Marshal((*stub)(entity))
}

func (*GroupCallVideoSourceGroup) GetType() string {
	return TypeGroupCallVideoSourceGroup
}

func (*GroupCallVideoSourceGroup) GetConstructor() string {
	return ConstructorGroupCallVideoSourceGroup
}

// Contains information about a group call participant's video channel
type GroupCallParticipantVideoInfo struct {
	meta
	// List of synchronization source groups of the video
	SourceGroups []*GroupCallVideoSourceGroup `json:"source_groups"`
	// Video channel endpoint identifier
	EndpointId string `json:"endpoint_id"`
	// True, if the video is paused. This flag needs to be ignored, if new video frames are received
	IsPaused bool `json:"is_paused"`
}

func (entity *GroupCallParticipantVideoInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCallParticipantVideoInfo

	return json.Marshal((*stub)(entity))
}

func (*GroupCallParticipantVideoInfo) GetType() string {
	return TypeGroupCallParticipantVideoInfo
}

func (*GroupCallParticipantVideoInfo) GetConstructor() string {
	return ConstructorGroupCallParticipantVideoInfo
}

// Represents a group call participant
type GroupCallParticipant struct {
	meta
	// Identifier of the group call participant
	ParticipantId MessageSender `json:"participant_id"`
	// User's audio channel synchronization source identifier
	AudioSourceId int32 `json:"audio_source_id"`
	// User's screen sharing audio channel synchronization source identifier
	ScreenSharingAudioSourceId int32 `json:"screen_sharing_audio_source_id"`
	// Information about user's video channel; may be null if there is no active video
	VideoInfo *GroupCallParticipantVideoInfo `json:"video_info"`
	// Information about user's screen sharing video channel; may be null if there is no active screen sharing video
	ScreenSharingVideoInfo *GroupCallParticipantVideoInfo `json:"screen_sharing_video_info"`
	// The participant user's bio or the participant chat's description
	Bio string `json:"bio"`
	// True, if the participant is the current user
	IsCurrentUser bool `json:"is_current_user"`
	// True, if the participant is speaking as set by setGroupCallParticipantIsSpeaking
	IsSpeaking bool `json:"is_speaking"`
	// True, if the participant hand is raised
	IsHandRaised bool `json:"is_hand_raised"`
	// True, if the current user can mute the participant for all other group call participants
	CanBeMutedForAllUsers bool `json:"can_be_muted_for_all_users"`
	// True, if the current user can allow the participant to unmute themselves or unmute the participant (if the participant is the current user)
	CanBeUnmutedForAllUsers bool `json:"can_be_unmuted_for_all_users"`
	// True, if the current user can mute the participant only for self
	CanBeMutedForCurrentUser bool `json:"can_be_muted_for_current_user"`
	// True, if the current user can unmute the participant for self
	CanBeUnmutedForCurrentUser bool `json:"can_be_unmuted_for_current_user"`
	// True, if the participant is muted for all users
	IsMutedForAllUsers bool `json:"is_muted_for_all_users"`
	// True, if the participant is muted for the current user
	IsMutedForCurrentUser bool `json:"is_muted_for_current_user"`
	// True, if the participant is muted for all users, but can unmute themselves
	CanUnmuteSelf bool `json:"can_unmute_self"`
	// Participant's volume level; 1-20000 in hundreds of percents
	VolumeLevel int32 `json:"volume_level"`
	// User's order in the group call participant list. Orders must be compared lexicographically. The bigger is order, the higher is user in the list. If order is empty, the user must be removed from the participant list
	Order string `json:"order"`
}

func (entity *GroupCallParticipant) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GroupCallParticipant

	return json.Marshal((*stub)(entity))
}

func (*GroupCallParticipant) GetType() string {
	return TypeGroupCallParticipant
}

func (*GroupCallParticipant) GetConstructor() string {
	return ConstructorGroupCallParticipant
}

func (groupCallParticipant *GroupCallParticipant) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ParticipantId              json.RawMessage                `json:"participant_id"`
		AudioSourceId              int32                          `json:"audio_source_id"`
		ScreenSharingAudioSourceId int32                          `json:"screen_sharing_audio_source_id"`
		VideoInfo                  *GroupCallParticipantVideoInfo `json:"video_info"`
		ScreenSharingVideoInfo     *GroupCallParticipantVideoInfo `json:"screen_sharing_video_info"`
		Bio                        string                         `json:"bio"`
		IsCurrentUser              bool                           `json:"is_current_user"`
		IsSpeaking                 bool                           `json:"is_speaking"`
		IsHandRaised               bool                           `json:"is_hand_raised"`
		CanBeMutedForAllUsers      bool                           `json:"can_be_muted_for_all_users"`
		CanBeUnmutedForAllUsers    bool                           `json:"can_be_unmuted_for_all_users"`
		CanBeMutedForCurrentUser   bool                           `json:"can_be_muted_for_current_user"`
		CanBeUnmutedForCurrentUser bool                           `json:"can_be_unmuted_for_current_user"`
		IsMutedForAllUsers         bool                           `json:"is_muted_for_all_users"`
		IsMutedForCurrentUser      bool                           `json:"is_muted_for_current_user"`
		CanUnmuteSelf              bool                           `json:"can_unmute_self"`
		VolumeLevel                int32                          `json:"volume_level"`
		Order                      string                         `json:"order"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	groupCallParticipant.AudioSourceId = tmp.AudioSourceId
	groupCallParticipant.ScreenSharingAudioSourceId = tmp.ScreenSharingAudioSourceId
	groupCallParticipant.VideoInfo = tmp.VideoInfo
	groupCallParticipant.ScreenSharingVideoInfo = tmp.ScreenSharingVideoInfo
	groupCallParticipant.Bio = tmp.Bio
	groupCallParticipant.IsCurrentUser = tmp.IsCurrentUser
	groupCallParticipant.IsSpeaking = tmp.IsSpeaking
	groupCallParticipant.IsHandRaised = tmp.IsHandRaised
	groupCallParticipant.CanBeMutedForAllUsers = tmp.CanBeMutedForAllUsers
	groupCallParticipant.CanBeUnmutedForAllUsers = tmp.CanBeUnmutedForAllUsers
	groupCallParticipant.CanBeMutedForCurrentUser = tmp.CanBeMutedForCurrentUser
	groupCallParticipant.CanBeUnmutedForCurrentUser = tmp.CanBeUnmutedForCurrentUser
	groupCallParticipant.IsMutedForAllUsers = tmp.IsMutedForAllUsers
	groupCallParticipant.IsMutedForCurrentUser = tmp.IsMutedForCurrentUser
	groupCallParticipant.CanUnmuteSelf = tmp.CanUnmuteSelf
	groupCallParticipant.VolumeLevel = tmp.VolumeLevel
	groupCallParticipant.Order = tmp.Order

	fieldParticipantId, _ := UnmarshalMessageSender(tmp.ParticipantId)
	groupCallParticipant.ParticipantId = fieldParticipantId

	return nil
}

// The user heard their own voice
type CallProblemEcho struct {
	meta
}

func (entity *CallProblemEcho) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallProblemEcho

	return json.Marshal((*stub)(entity))
}

func (*CallProblemEcho) GetType() string {
	return TypeCallProblem
}

func (*CallProblemEcho) GetConstructor() string {
	return ConstructorCallProblemEcho
}

func (*CallProblemEcho) CallProblemConstructor() string {
	return ConstructorCallProblemEcho
}

// The user heard background noise
type CallProblemNoise struct {
	meta
}

func (entity *CallProblemNoise) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallProblemNoise

	return json.Marshal((*stub)(entity))
}

func (*CallProblemNoise) GetType() string {
	return TypeCallProblem
}

func (*CallProblemNoise) GetConstructor() string {
	return ConstructorCallProblemNoise
}

func (*CallProblemNoise) CallProblemConstructor() string {
	return ConstructorCallProblemNoise
}

// The other side kept disappearing
type CallProblemInterruptions struct {
	meta
}

func (entity *CallProblemInterruptions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallProblemInterruptions

	return json.Marshal((*stub)(entity))
}

func (*CallProblemInterruptions) GetType() string {
	return TypeCallProblem
}

func (*CallProblemInterruptions) GetConstructor() string {
	return ConstructorCallProblemInterruptions
}

func (*CallProblemInterruptions) CallProblemConstructor() string {
	return ConstructorCallProblemInterruptions
}

// The speech was distorted
type CallProblemDistortedSpeech struct {
	meta
}

func (entity *CallProblemDistortedSpeech) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallProblemDistortedSpeech

	return json.Marshal((*stub)(entity))
}

func (*CallProblemDistortedSpeech) GetType() string {
	return TypeCallProblem
}

func (*CallProblemDistortedSpeech) GetConstructor() string {
	return ConstructorCallProblemDistortedSpeech
}

func (*CallProblemDistortedSpeech) CallProblemConstructor() string {
	return ConstructorCallProblemDistortedSpeech
}

// The user couldn't hear the other side
type CallProblemSilentLocal struct {
	meta
}

func (entity *CallProblemSilentLocal) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallProblemSilentLocal

	return json.Marshal((*stub)(entity))
}

func (*CallProblemSilentLocal) GetType() string {
	return TypeCallProblem
}

func (*CallProblemSilentLocal) GetConstructor() string {
	return ConstructorCallProblemSilentLocal
}

func (*CallProblemSilentLocal) CallProblemConstructor() string {
	return ConstructorCallProblemSilentLocal
}

// The other side couldn't hear the user
type CallProblemSilentRemote struct {
	meta
}

func (entity *CallProblemSilentRemote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallProblemSilentRemote

	return json.Marshal((*stub)(entity))
}

func (*CallProblemSilentRemote) GetType() string {
	return TypeCallProblem
}

func (*CallProblemSilentRemote) GetConstructor() string {
	return ConstructorCallProblemSilentRemote
}

func (*CallProblemSilentRemote) CallProblemConstructor() string {
	return ConstructorCallProblemSilentRemote
}

// The call ended unexpectedly
type CallProblemDropped struct {
	meta
}

func (entity *CallProblemDropped) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallProblemDropped

	return json.Marshal((*stub)(entity))
}

func (*CallProblemDropped) GetType() string {
	return TypeCallProblem
}

func (*CallProblemDropped) GetConstructor() string {
	return ConstructorCallProblemDropped
}

func (*CallProblemDropped) CallProblemConstructor() string {
	return ConstructorCallProblemDropped
}

// The video was distorted
type CallProblemDistortedVideo struct {
	meta
}

func (entity *CallProblemDistortedVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallProblemDistortedVideo

	return json.Marshal((*stub)(entity))
}

func (*CallProblemDistortedVideo) GetType() string {
	return TypeCallProblem
}

func (*CallProblemDistortedVideo) GetConstructor() string {
	return ConstructorCallProblemDistortedVideo
}

func (*CallProblemDistortedVideo) CallProblemConstructor() string {
	return ConstructorCallProblemDistortedVideo
}

// The video was pixelated
type CallProblemPixelatedVideo struct {
	meta
}

func (entity *CallProblemPixelatedVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallProblemPixelatedVideo

	return json.Marshal((*stub)(entity))
}

func (*CallProblemPixelatedVideo) GetType() string {
	return TypeCallProblem
}

func (*CallProblemPixelatedVideo) GetConstructor() string {
	return ConstructorCallProblemPixelatedVideo
}

func (*CallProblemPixelatedVideo) CallProblemConstructor() string {
	return ConstructorCallProblemPixelatedVideo
}

// Describes a call
type Call struct {
	meta
	// Call identifier, not persistent
	Id int32 `json:"id"`
	// User identifier of the other call participant
	UserId int64 `json:"user_id"`
	// True, if the call is outgoing
	IsOutgoing bool `json:"is_outgoing"`
	// True, if the call is a video call
	IsVideo bool `json:"is_video"`
	// Call state
	State CallState `json:"state"`
}

func (entity *Call) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Call

	return json.Marshal((*stub)(entity))
}

func (*Call) GetType() string {
	return TypeCall
}

func (*Call) GetConstructor() string {
	return ConstructorCall
}

func (call *Call) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id         int32           `json:"id"`
		UserId     int64           `json:"user_id"`
		IsOutgoing bool            `json:"is_outgoing"`
		IsVideo    bool            `json:"is_video"`
		State      json.RawMessage `json:"state"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	call.Id = tmp.Id
	call.UserId = tmp.UserId
	call.IsOutgoing = tmp.IsOutgoing
	call.IsVideo = tmp.IsVideo

	fieldState, _ := UnmarshalCallState(tmp.State)
	call.State = fieldState

	return nil
}

// Settings for Firebase Authentication in the official Android application
type FirebaseAuthenticationSettingsAndroid struct {
	meta
}

func (entity *FirebaseAuthenticationSettingsAndroid) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FirebaseAuthenticationSettingsAndroid

	return json.Marshal((*stub)(entity))
}

func (*FirebaseAuthenticationSettingsAndroid) GetType() string {
	return TypeFirebaseAuthenticationSettings
}

func (*FirebaseAuthenticationSettingsAndroid) GetConstructor() string {
	return ConstructorFirebaseAuthenticationSettingsAndroid
}

func (*FirebaseAuthenticationSettingsAndroid) FirebaseAuthenticationSettingsConstructor() string {
	return ConstructorFirebaseAuthenticationSettingsAndroid
}

// Settings for Firebase Authentication in the official iOS application
type FirebaseAuthenticationSettingsIos struct {
	meta
	// Device token from Apple Push Notification service
	DeviceToken string `json:"device_token"`
	// True, if App Sandbox is enabled
	IsAppSandbox bool `json:"is_app_sandbox"`
}

func (entity *FirebaseAuthenticationSettingsIos) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FirebaseAuthenticationSettingsIos

	return json.Marshal((*stub)(entity))
}

func (*FirebaseAuthenticationSettingsIos) GetType() string {
	return TypeFirebaseAuthenticationSettings
}

func (*FirebaseAuthenticationSettingsIos) GetConstructor() string {
	return ConstructorFirebaseAuthenticationSettingsIos
}

func (*FirebaseAuthenticationSettingsIos) FirebaseAuthenticationSettingsConstructor() string {
	return ConstructorFirebaseAuthenticationSettingsIos
}

// Contains settings for the authentication of the user's phone number
type PhoneNumberAuthenticationSettings struct {
	meta
	// Pass true if the authentication code may be sent via a flash call to the specified phone number
	AllowFlashCall bool `json:"allow_flash_call"`
	// Pass true if the authentication code may be sent via a missed call to the specified phone number
	AllowMissedCall bool `json:"allow_missed_call"`
	// Pass true if the authenticated phone number is used on the current device
	IsCurrentPhoneNumber bool `json:"is_current_phone_number"`
	// Pass true if there is a SIM card in the current device, but it is not possible to check whether phone number matches
	HasUnknownPhoneNumber bool `json:"has_unknown_phone_number"`
	// For official applications only. True, if the application can use Android SMS Retriever API (requires Google Play Services >= 10.2) to automatically receive the authentication code from the SMS. See https://developers.google.com/identity/sms-retriever/ for more details
	AllowSmsRetrieverApi bool `json:"allow_sms_retriever_api"`
	// For official Android and iOS applications only; pass null otherwise. Settings for Firebase Authentication
	FirebaseAuthenticationSettings FirebaseAuthenticationSettings `json:"firebase_authentication_settings"`
	// List of up to 20 authentication tokens, recently received in updateOption("authentication_token") in previously logged out sessions
	AuthenticationTokens []string `json:"authentication_tokens"`
}

func (entity *PhoneNumberAuthenticationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PhoneNumberAuthenticationSettings

	return json.Marshal((*stub)(entity))
}

func (*PhoneNumberAuthenticationSettings) GetType() string {
	return TypePhoneNumberAuthenticationSettings
}

func (*PhoneNumberAuthenticationSettings) GetConstructor() string {
	return ConstructorPhoneNumberAuthenticationSettings
}

func (phoneNumberAuthenticationSettings *PhoneNumberAuthenticationSettings) UnmarshalJSON(data []byte) error {
	var tmp struct {
		AllowFlashCall                 bool            `json:"allow_flash_call"`
		AllowMissedCall                bool            `json:"allow_missed_call"`
		IsCurrentPhoneNumber           bool            `json:"is_current_phone_number"`
		HasUnknownPhoneNumber          bool            `json:"has_unknown_phone_number"`
		AllowSmsRetrieverApi           bool            `json:"allow_sms_retriever_api"`
		FirebaseAuthenticationSettings json.RawMessage `json:"firebase_authentication_settings"`
		AuthenticationTokens           []string        `json:"authentication_tokens"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	phoneNumberAuthenticationSettings.AllowFlashCall = tmp.AllowFlashCall
	phoneNumberAuthenticationSettings.AllowMissedCall = tmp.AllowMissedCall
	phoneNumberAuthenticationSettings.IsCurrentPhoneNumber = tmp.IsCurrentPhoneNumber
	phoneNumberAuthenticationSettings.HasUnknownPhoneNumber = tmp.HasUnknownPhoneNumber
	phoneNumberAuthenticationSettings.AllowSmsRetrieverApi = tmp.AllowSmsRetrieverApi
	phoneNumberAuthenticationSettings.AuthenticationTokens = tmp.AuthenticationTokens

	fieldFirebaseAuthenticationSettings, _ := UnmarshalFirebaseAuthenticationSettings(tmp.FirebaseAuthenticationSettings)
	phoneNumberAuthenticationSettings.FirebaseAuthenticationSettings = fieldFirebaseAuthenticationSettings

	return nil
}

// Represents a reaction applied to a message
type AddedReaction struct {
	meta
	// Type of the reaction
	Type ReactionType `json:"type"`
	// Identifier of the chat member, applied the reaction
	SenderId MessageSender `json:"sender_id"`
	// True, if the reaction was added by the current user
	IsOutgoing bool `json:"is_outgoing"`
	// Point in time (Unix timestamp) when the reaction was added
	Date int32 `json:"date"`
}

func (entity *AddedReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AddedReaction

	return json.Marshal((*stub)(entity))
}

func (*AddedReaction) GetType() string {
	return TypeAddedReaction
}

func (*AddedReaction) GetConstructor() string {
	return ConstructorAddedReaction
}

func (addedReaction *AddedReaction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type       json.RawMessage `json:"type"`
		SenderId   json.RawMessage `json:"sender_id"`
		IsOutgoing bool            `json:"is_outgoing"`
		Date       int32           `json:"date"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	addedReaction.IsOutgoing = tmp.IsOutgoing
	addedReaction.Date = tmp.Date

	fieldType, _ := UnmarshalReactionType(tmp.Type)
	addedReaction.Type = fieldType

	fieldSenderId, _ := UnmarshalMessageSender(tmp.SenderId)
	addedReaction.SenderId = fieldSenderId

	return nil
}

// Represents a list of reactions added to a message
type AddedReactions struct {
	meta
	// The total number of found reactions
	TotalCount int32 `json:"total_count"`
	// The list of added reactions
	Reactions []*AddedReaction `json:"reactions"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *AddedReactions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AddedReactions

	return json.Marshal((*stub)(entity))
}

func (*AddedReactions) GetType() string {
	return TypeAddedReactions
}

func (*AddedReactions) GetConstructor() string {
	return ConstructorAddedReactions
}

// Represents an available reaction
type AvailableReaction struct {
	meta
	// Type of the reaction
	Type ReactionType `json:"type"`
	// True, if Telegram Premium is needed to send the reaction
	NeedsPremium bool `json:"needs_premium"`
}

func (entity *AvailableReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AvailableReaction

	return json.Marshal((*stub)(entity))
}

func (*AvailableReaction) GetType() string {
	return TypeAvailableReaction
}

func (*AvailableReaction) GetConstructor() string {
	return ConstructorAvailableReaction
}

func (availableReaction *AvailableReaction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type         json.RawMessage `json:"type"`
		NeedsPremium bool            `json:"needs_premium"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	availableReaction.NeedsPremium = tmp.NeedsPremium

	fieldType, _ := UnmarshalReactionType(tmp.Type)
	availableReaction.Type = fieldType

	return nil
}

// Represents a list of reactions that can be added to a message
type AvailableReactions struct {
	meta
	// List of reactions to be shown at the top
	TopReactions []*AvailableReaction `json:"top_reactions"`
	// List of recently used reactions
	RecentReactions []*AvailableReaction `json:"recent_reactions"`
	// List of popular reactions
	PopularReactions []*AvailableReaction `json:"popular_reactions"`
	// True, if any custom emoji reaction can be added by Telegram Premium subscribers
	AllowCustomEmoji bool `json:"allow_custom_emoji"`
	// True, if the reactions will be tags and the message can be found by them
	AreTags bool `json:"are_tags"`
	// The reason why the current user can't add reactions to the message, despite some other users can; may be null if none
	UnavailabilityReason ReactionUnavailabilityReason `json:"unavailability_reason"`
}

func (entity *AvailableReactions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AvailableReactions

	return json.Marshal((*stub)(entity))
}

func (*AvailableReactions) GetType() string {
	return TypeAvailableReactions
}

func (*AvailableReactions) GetConstructor() string {
	return ConstructorAvailableReactions
}

func (availableReactions *AvailableReactions) UnmarshalJSON(data []byte) error {
	var tmp struct {
		TopReactions         []*AvailableReaction `json:"top_reactions"`
		RecentReactions      []*AvailableReaction `json:"recent_reactions"`
		PopularReactions     []*AvailableReaction `json:"popular_reactions"`
		AllowCustomEmoji     bool                 `json:"allow_custom_emoji"`
		AreTags              bool                 `json:"are_tags"`
		UnavailabilityReason json.RawMessage      `json:"unavailability_reason"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	availableReactions.TopReactions = tmp.TopReactions
	availableReactions.RecentReactions = tmp.RecentReactions
	availableReactions.PopularReactions = tmp.PopularReactions
	availableReactions.AllowCustomEmoji = tmp.AllowCustomEmoji
	availableReactions.AreTags = tmp.AreTags

	fieldUnavailabilityReason, _ := UnmarshalReactionUnavailabilityReason(tmp.UnavailabilityReason)
	availableReactions.UnavailabilityReason = fieldUnavailabilityReason

	return nil
}

// Contains information about an emoji reaction
type EmojiReaction struct {
	meta
	// Text representation of the reaction
	Emoji string `json:"emoji"`
	// Reaction title
	Title string `json:"title"`
	// True, if the reaction can be added to new messages and enabled in chats
	IsActive bool `json:"is_active"`
	// Static icon for the reaction
	StaticIcon *Sticker `json:"static_icon"`
	// Appear animation for the reaction
	AppearAnimation *Sticker `json:"appear_animation"`
	// Select animation for the reaction
	SelectAnimation *Sticker `json:"select_animation"`
	// Activate animation for the reaction
	ActivateAnimation *Sticker `json:"activate_animation"`
	// Effect animation for the reaction
	EffectAnimation *Sticker `json:"effect_animation"`
	// Around animation for the reaction; may be null
	AroundAnimation *Sticker `json:"around_animation"`
	// Center animation for the reaction; may be null
	CenterAnimation *Sticker `json:"center_animation"`
}

func (entity *EmojiReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub EmojiReaction

	return json.Marshal((*stub)(entity))
}

func (*EmojiReaction) GetType() string {
	return TypeEmojiReaction
}

func (*EmojiReaction) GetConstructor() string {
	return ConstructorEmojiReaction
}

// The user is an anonymous administrator in the supergroup, but isn't a creator of it, so they can't vote on behalf of the supergroup
type ReactionUnavailabilityReasonAnonymousAdministrator struct {
	meta
}

func (entity *ReactionUnavailabilityReasonAnonymousAdministrator) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReactionUnavailabilityReasonAnonymousAdministrator

	return json.Marshal((*stub)(entity))
}

func (*ReactionUnavailabilityReasonAnonymousAdministrator) GetType() string {
	return TypeReactionUnavailabilityReason
}

func (*ReactionUnavailabilityReasonAnonymousAdministrator) GetConstructor() string {
	return ConstructorReactionUnavailabilityReasonAnonymousAdministrator
}

func (*ReactionUnavailabilityReasonAnonymousAdministrator) ReactionUnavailabilityReasonConstructor() string {
	return ConstructorReactionUnavailabilityReasonAnonymousAdministrator
}

// The user isn't a member of the supergroup and can't send messages and reactions there without joining
type ReactionUnavailabilityReasonGuest struct {
	meta
}

func (entity *ReactionUnavailabilityReasonGuest) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReactionUnavailabilityReasonGuest

	return json.Marshal((*stub)(entity))
}

func (*ReactionUnavailabilityReasonGuest) GetType() string {
	return TypeReactionUnavailabilityReason
}

func (*ReactionUnavailabilityReasonGuest) GetConstructor() string {
	return ConstructorReactionUnavailabilityReasonGuest
}

func (*ReactionUnavailabilityReasonGuest) ReactionUnavailabilityReasonConstructor() string {
	return ConstructorReactionUnavailabilityReasonGuest
}

// Represents a list of animations
type Animations struct {
	meta
	// List of animations
	Animations []*Animation `json:"animations"`
}

func (entity *Animations) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Animations

	return json.Marshal((*stub)(entity))
}

func (*Animations) GetType() string {
	return TypeAnimations
}

func (*Animations) GetConstructor() string {
	return ConstructorAnimations
}

// A regular animated sticker
type DiceStickersRegular struct {
	meta
	// The animated sticker with the dice animation
	Sticker *Sticker `json:"sticker"`
}

func (entity *DiceStickersRegular) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DiceStickersRegular

	return json.Marshal((*stub)(entity))
}

func (*DiceStickersRegular) GetType() string {
	return TypeDiceStickers
}

func (*DiceStickersRegular) GetConstructor() string {
	return ConstructorDiceStickersRegular
}

func (*DiceStickersRegular) DiceStickersConstructor() string {
	return ConstructorDiceStickersRegular
}

// Animated stickers to be combined into a slot machine
type DiceStickersSlotMachine struct {
	meta
	// The animated sticker with the slot machine background. The background animation must start playing after all reel animations finish
	Background *Sticker `json:"background"`
	// The animated sticker with the lever animation. The lever animation must play once in the initial dice state
	Lever *Sticker `json:"lever"`
	// The animated sticker with the left reel
	LeftReel *Sticker `json:"left_reel"`
	// The animated sticker with the center reel
	CenterReel *Sticker `json:"center_reel"`
	// The animated sticker with the right reel
	RightReel *Sticker `json:"right_reel"`
}

func (entity *DiceStickersSlotMachine) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DiceStickersSlotMachine

	return json.Marshal((*stub)(entity))
}

func (*DiceStickersSlotMachine) GetType() string {
	return TypeDiceStickers
}

func (*DiceStickersSlotMachine) GetConstructor() string {
	return ConstructorDiceStickersSlotMachine
}

func (*DiceStickersSlotMachine) DiceStickersConstructor() string {
	return ConstructorDiceStickersSlotMachine
}

// Represents the result of an importContacts request
type ImportedContacts struct {
	meta
	// User identifiers of the imported contacts in the same order as they were specified in the request; 0 if the contact is not yet a registered user
	UserIds []int64 `json:"user_ids"`
	// The number of users that imported the corresponding contact; 0 for already registered users or if unavailable
	ImporterCount []int32 `json:"importer_count"`
}

func (entity *ImportedContacts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ImportedContacts

	return json.Marshal((*stub)(entity))
}

func (*ImportedContacts) GetType() string {
	return TypeImportedContacts
}

func (*ImportedContacts) GetConstructor() string {
	return ConstructorImportedContacts
}

// The speech recognition is ongoing
type SpeechRecognitionResultPending struct {
	meta
	// Partially recognized text
	PartialText string `json:"partial_text"`
}

func (entity *SpeechRecognitionResultPending) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SpeechRecognitionResultPending

	return json.Marshal((*stub)(entity))
}

func (*SpeechRecognitionResultPending) GetType() string {
	return TypeSpeechRecognitionResult
}

func (*SpeechRecognitionResultPending) GetConstructor() string {
	return ConstructorSpeechRecognitionResultPending
}

func (*SpeechRecognitionResultPending) SpeechRecognitionResultConstructor() string {
	return ConstructorSpeechRecognitionResultPending
}

// The speech recognition successfully finished
type SpeechRecognitionResultText struct {
	meta
	// Recognized text
	Text string `json:"text"`
}

func (entity *SpeechRecognitionResultText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SpeechRecognitionResultText

	return json.Marshal((*stub)(entity))
}

func (*SpeechRecognitionResultText) GetType() string {
	return TypeSpeechRecognitionResult
}

func (*SpeechRecognitionResultText) GetConstructor() string {
	return ConstructorSpeechRecognitionResultText
}

func (*SpeechRecognitionResultText) SpeechRecognitionResultConstructor() string {
	return ConstructorSpeechRecognitionResultText
}

// The speech recognition failed
type SpeechRecognitionResultError struct {
	meta
	// Recognition error. An error with a message "MSG_VOICE_TOO_LONG" is returned when media duration is too big to be recognized
	Error *Error `json:"error"`
}

func (entity *SpeechRecognitionResultError) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SpeechRecognitionResultError

	return json.Marshal((*stub)(entity))
}

func (*SpeechRecognitionResultError) GetType() string {
	return TypeSpeechRecognitionResult
}

func (*SpeechRecognitionResultError) GetConstructor() string {
	return ConstructorSpeechRecognitionResultError
}

func (*SpeechRecognitionResultError) SpeechRecognitionResultConstructor() string {
	return ConstructorSpeechRecognitionResultError
}

// Describes a connection of the bot with a business account
type BusinessConnection struct {
	meta
	// Unique identifier of the connection
	Id string `json:"id"`
	// Identifier of the business user that created the connection
	UserId int64 `json:"user_id"`
	// Chat identifier of the private chat with the user
	UserChatId int64 `json:"user_chat_id"`
	// Point in time (Unix timestamp) when the connection was established
	Date int32 `json:"date"`
	// True, if the bot can send messages to the connected user; false otherwise
	CanReply bool `json:"can_reply"`
	// True, if the connection is enabled; false otherwise
	IsEnabled bool `json:"is_enabled"`
}

func (entity *BusinessConnection) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessConnection

	return json.Marshal((*stub)(entity))
}

func (*BusinessConnection) GetType() string {
	return TypeBusinessConnection
}

func (*BusinessConnection) GetConstructor() string {
	return ConstructorBusinessConnection
}

// Describes a color to highlight a bot added to attachment menu
type AttachmentMenuBotColor struct {
	meta
	// Color in the RGB format for light themes
	LightColor int32 `json:"light_color"`
	// Color in the RGB format for dark themes
	DarkColor int32 `json:"dark_color"`
}

func (entity *AttachmentMenuBotColor) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AttachmentMenuBotColor

	return json.Marshal((*stub)(entity))
}

func (*AttachmentMenuBotColor) GetType() string {
	return TypeAttachmentMenuBotColor
}

func (*AttachmentMenuBotColor) GetConstructor() string {
	return ConstructorAttachmentMenuBotColor
}

// Represents a bot, which can be added to attachment or side menu
type AttachmentMenuBot struct {
	meta
	// User identifier of the bot
	BotUserId int64 `json:"bot_user_id"`
	// True, if the bot supports opening from attachment menu in the chat with the bot
	SupportsSelfChat bool `json:"supports_self_chat"`
	// True, if the bot supports opening from attachment menu in private chats with ordinary users
	SupportsUserChats bool `json:"supports_user_chats"`
	// True, if the bot supports opening from attachment menu in private chats with other bots
	SupportsBotChats bool `json:"supports_bot_chats"`
	// True, if the bot supports opening from attachment menu in basic group and supergroup chats
	SupportsGroupChats bool `json:"supports_group_chats"`
	// True, if the bot supports opening from attachment menu in channel chats
	SupportsChannelChats bool `json:"supports_channel_chats"`
	// True, if the user must be asked for the permission to send messages to the bot
	RequestWriteAccess bool `json:"request_write_access"`
	// True, if the bot was explicitly added by the user. If the bot isn't added, then on the first bot launch toggleBotIsAddedToAttachmentMenu must be called and the bot must be added or removed
	IsAdded bool `json:"is_added"`
	// True, if the bot must be shown in the attachment menu
	ShowInAttachmentMenu bool `json:"show_in_attachment_menu"`
	// True, if the bot must be shown in the side menu
	ShowInSideMenu bool `json:"show_in_side_menu"`
	// True, if a disclaimer, why the bot is shown in the side menu, is needed
	ShowDisclaimerInSideMenu bool `json:"show_disclaimer_in_side_menu"`
	// Name for the bot in attachment menu
	Name string `json:"name"`
	// Color to highlight selected name of the bot if appropriate; may be null
	NameColor *AttachmentMenuBotColor `json:"name_color"`
	// Default icon for the bot in SVG format; may be null
	DefaultIcon *File `json:"default_icon"`
	// Icon for the bot in SVG format for the official iOS app; may be null
	IosStaticIcon *File `json:"ios_static_icon"`
	// Icon for the bot in TGS format for the official iOS app; may be null
	IosAnimatedIcon *File `json:"ios_animated_icon"`
	// Icon for the bot in PNG format for the official iOS app side menu; may be null
	IosSideMenuIcon *File `json:"ios_side_menu_icon"`
	// Icon for the bot in TGS format for the official Android app; may be null
	AndroidIcon *File `json:"android_icon"`
	// Icon for the bot in SVG format for the official Android app side menu; may be null
	AndroidSideMenuIcon *File `json:"android_side_menu_icon"`
	// Icon for the bot in TGS format for the official native macOS app; may be null
	MacosIcon *File `json:"macos_icon"`
	// Icon for the bot in PNG format for the official macOS app side menu; may be null
	MacosSideMenuIcon *File `json:"macos_side_menu_icon"`
	// Color to highlight selected icon of the bot if appropriate; may be null
	IconColor *AttachmentMenuBotColor `json:"icon_color"`
	// Default placeholder for opened Web Apps in SVG format; may be null
	WebAppPlaceholder *File `json:"web_app_placeholder"`
}

func (entity *AttachmentMenuBot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AttachmentMenuBot

	return json.Marshal((*stub)(entity))
}

func (*AttachmentMenuBot) GetType() string {
	return TypeAttachmentMenuBot
}

func (*AttachmentMenuBot) GetConstructor() string {
	return ConstructorAttachmentMenuBot
}

// Information about the message sent by answerWebAppQuery
type SentWebAppMessage struct {
	meta
	// Identifier of the sent inline message, if known
	InlineMessageId string `json:"inline_message_id"`
}

func (entity *SentWebAppMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SentWebAppMessage

	return json.Marshal((*stub)(entity))
}

func (*SentWebAppMessage) GetType() string {
	return TypeSentWebAppMessage
}

func (*SentWebAppMessage) GetConstructor() string {
	return ConstructorSentWebAppMessage
}

// The user connected a website by logging in using Telegram Login Widget on it
type BotWriteAccessAllowReasonConnectedWebsite struct {
	meta
	// Domain name of the connected website
	DomainName string `json:"domain_name"`
}

func (entity *BotWriteAccessAllowReasonConnectedWebsite) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotWriteAccessAllowReasonConnectedWebsite

	return json.Marshal((*stub)(entity))
}

func (*BotWriteAccessAllowReasonConnectedWebsite) GetType() string {
	return TypeBotWriteAccessAllowReason
}

func (*BotWriteAccessAllowReasonConnectedWebsite) GetConstructor() string {
	return ConstructorBotWriteAccessAllowReasonConnectedWebsite
}

func (*BotWriteAccessAllowReasonConnectedWebsite) BotWriteAccessAllowReasonConstructor() string {
	return ConstructorBotWriteAccessAllowReasonConnectedWebsite
}

// The user added the bot to attachment or side menu using toggleBotIsAddedToAttachmentMenu
type BotWriteAccessAllowReasonAddedToAttachmentMenu struct {
	meta
}

func (entity *BotWriteAccessAllowReasonAddedToAttachmentMenu) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotWriteAccessAllowReasonAddedToAttachmentMenu

	return json.Marshal((*stub)(entity))
}

func (*BotWriteAccessAllowReasonAddedToAttachmentMenu) GetType() string {
	return TypeBotWriteAccessAllowReason
}

func (*BotWriteAccessAllowReasonAddedToAttachmentMenu) GetConstructor() string {
	return ConstructorBotWriteAccessAllowReasonAddedToAttachmentMenu
}

func (*BotWriteAccessAllowReasonAddedToAttachmentMenu) BotWriteAccessAllowReasonConstructor() string {
	return ConstructorBotWriteAccessAllowReasonAddedToAttachmentMenu
}

// The user launched a Web App using getWebAppLinkUrl
type BotWriteAccessAllowReasonLaunchedWebApp struct {
	meta
	// Information about the Web App
	WebApp *WebApp `json:"web_app"`
}

func (entity *BotWriteAccessAllowReasonLaunchedWebApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotWriteAccessAllowReasonLaunchedWebApp

	return json.Marshal((*stub)(entity))
}

func (*BotWriteAccessAllowReasonLaunchedWebApp) GetType() string {
	return TypeBotWriteAccessAllowReason
}

func (*BotWriteAccessAllowReasonLaunchedWebApp) GetConstructor() string {
	return ConstructorBotWriteAccessAllowReasonLaunchedWebApp
}

func (*BotWriteAccessAllowReasonLaunchedWebApp) BotWriteAccessAllowReasonConstructor() string {
	return ConstructorBotWriteAccessAllowReasonLaunchedWebApp
}

// The user accepted bot's request to send messages with allowBotToSendMessages
type BotWriteAccessAllowReasonAcceptedRequest struct {
	meta
}

func (entity *BotWriteAccessAllowReasonAcceptedRequest) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotWriteAccessAllowReasonAcceptedRequest

	return json.Marshal((*stub)(entity))
}

func (*BotWriteAccessAllowReasonAcceptedRequest) GetType() string {
	return TypeBotWriteAccessAllowReason
}

func (*BotWriteAccessAllowReasonAcceptedRequest) GetConstructor() string {
	return ConstructorBotWriteAccessAllowReasonAcceptedRequest
}

func (*BotWriteAccessAllowReasonAcceptedRequest) BotWriteAccessAllowReasonConstructor() string {
	return ConstructorBotWriteAccessAllowReasonAcceptedRequest
}

// Contains an HTTP URL
type HttpUrl struct {
	meta
	// The URL
	Url string `json:"url"`
}

func (entity *HttpUrl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub HttpUrl

	return json.Marshal((*stub)(entity))
}

func (*HttpUrl) GetType() string {
	return TypeHttpUrl
}

func (*HttpUrl) GetConstructor() string {
	return ConstructorHttpUrl
}

// Contains an HTTPS URL, which can be used to get information about a user
type UserLink struct {
	meta
	// The URL
	Url string `json:"url"`
	// Left time for which the link is valid, in seconds; 0 if the link is a public username link
	ExpiresIn int32 `json:"expires_in"`
}

func (entity *UserLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserLink

	return json.Marshal((*stub)(entity))
}

func (*UserLink) GetType() string {
	return TypeUserLink
}

func (*UserLink) GetConstructor() string {
	return ConstructorUserLink
}

// Describes allowed types for the target chat
type TargetChatTypes struct {
	meta
	// True, if private chats with ordinary users are allowed
	AllowUserChats bool `json:"allow_user_chats"`
	// True, if private chats with other bots are allowed
	AllowBotChats bool `json:"allow_bot_chats"`
	// True, if basic group and supergroup chats are allowed
	AllowGroupChats bool `json:"allow_group_chats"`
	// True, if channel chats are allowed
	AllowChannelChats bool `json:"allow_channel_chats"`
}

func (entity *TargetChatTypes) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TargetChatTypes

	return json.Marshal((*stub)(entity))
}

func (*TargetChatTypes) GetType() string {
	return TypeTargetChatTypes
}

func (*TargetChatTypes) GetConstructor() string {
	return ConstructorTargetChatTypes
}

// The currently opened chat needs to be kept
type TargetChatCurrent struct {
	meta
}

func (entity *TargetChatCurrent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TargetChatCurrent

	return json.Marshal((*stub)(entity))
}

func (*TargetChatCurrent) GetType() string {
	return TypeTargetChat
}

func (*TargetChatCurrent) GetConstructor() string {
	return ConstructorTargetChatCurrent
}

func (*TargetChatCurrent) TargetChatConstructor() string {
	return ConstructorTargetChatCurrent
}

// The chat needs to be chosen by the user among chats of the specified types
type TargetChatChosen struct {
	meta
	// Allowed types for the chat
	Types *TargetChatTypes `json:"types"`
}

func (entity *TargetChatChosen) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TargetChatChosen

	return json.Marshal((*stub)(entity))
}

func (*TargetChatChosen) GetType() string {
	return TypeTargetChat
}

func (*TargetChatChosen) GetConstructor() string {
	return ConstructorTargetChatChosen
}

func (*TargetChatChosen) TargetChatConstructor() string {
	return ConstructorTargetChatChosen
}

// The chat needs to be open with the provided internal link
type TargetChatInternalLink struct {
	meta
	// An internal link pointing to the chat
	Link InternalLinkType `json:"link"`
}

func (entity *TargetChatInternalLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TargetChatInternalLink

	return json.Marshal((*stub)(entity))
}

func (*TargetChatInternalLink) GetType() string {
	return TypeTargetChat
}

func (*TargetChatInternalLink) GetConstructor() string {
	return ConstructorTargetChatInternalLink
}

func (*TargetChatInternalLink) TargetChatConstructor() string {
	return ConstructorTargetChatInternalLink
}

func (targetChatInternalLink *TargetChatInternalLink) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Link json.RawMessage `json:"link"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldLink, _ := UnmarshalInternalLinkType(tmp.Link)
	targetChatInternalLink.Link = fieldLink

	return nil
}

// Represents a link to an animated GIF or an animated (i.e., without sound) H.264/MPEG-4 AVC video
type InputInlineQueryResultAnimation struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Title of the query result
	Title string `json:"title"`
	// URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists
	ThumbnailUrl string `json:"thumbnail_url"`
	// MIME type of the video thumbnail. If non-empty, must be one of "image/jpeg", "image/gif" and "video/mp4"
	ThumbnailMimeType string `json:"thumbnail_mime_type"`
	// The URL of the video file (file size must not exceed 1MB)
	VideoUrl string `json:"video_url"`
	// MIME type of the video file. Must be one of "image/gif" and "video/mp4"
	VideoMimeType string `json:"video_mime_type"`
	// Duration of the video, in seconds
	VideoDuration int32 `json:"video_duration"`
	// Width of the video
	VideoWidth int32 `json:"video_width"`
	// Height of the video
	VideoHeight int32 `json:"video_height"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageAnimation, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultAnimation

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultAnimation) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultAnimation) GetConstructor() string {
	return ConstructorInputInlineQueryResultAnimation
}

func (*InputInlineQueryResultAnimation) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultAnimation
}

func (inputInlineQueryResultAnimation *InputInlineQueryResultAnimation) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		Title               string          `json:"title"`
		ThumbnailUrl        string          `json:"thumbnail_url"`
		ThumbnailMimeType   string          `json:"thumbnail_mime_type"`
		VideoUrl            string          `json:"video_url"`
		VideoMimeType       string          `json:"video_mime_type"`
		VideoDuration       int32           `json:"video_duration"`
		VideoWidth          int32           `json:"video_width"`
		VideoHeight         int32           `json:"video_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultAnimation.Id = tmp.Id
	inputInlineQueryResultAnimation.Title = tmp.Title
	inputInlineQueryResultAnimation.ThumbnailUrl = tmp.ThumbnailUrl
	inputInlineQueryResultAnimation.ThumbnailMimeType = tmp.ThumbnailMimeType
	inputInlineQueryResultAnimation.VideoUrl = tmp.VideoUrl
	inputInlineQueryResultAnimation.VideoMimeType = tmp.VideoMimeType
	inputInlineQueryResultAnimation.VideoDuration = tmp.VideoDuration
	inputInlineQueryResultAnimation.VideoWidth = tmp.VideoWidth
	inputInlineQueryResultAnimation.VideoHeight = tmp.VideoHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultAnimation.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultAnimation.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents a link to an article or web page
type InputInlineQueryResultArticle struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// URL of the result, if it exists
	Url string `json:"url"`
	// True, if the URL must be not shown
	HideUrl bool `json:"hide_url"`
	// Title of the result
	Title string `json:"title"`
	// A short description of the result
	Description string `json:"description"`
	// URL of the result thumbnail, if it exists
	ThumbnailUrl string `json:"thumbnail_url"`
	// Thumbnail width, if known
	ThumbnailWidth int32 `json:"thumbnail_width"`
	// Thumbnail height, if known
	ThumbnailHeight int32 `json:"thumbnail_height"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultArticle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultArticle

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultArticle) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultArticle) GetConstructor() string {
	return ConstructorInputInlineQueryResultArticle
}

func (*InputInlineQueryResultArticle) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultArticle
}

func (inputInlineQueryResultArticle *InputInlineQueryResultArticle) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		Url                 string          `json:"url"`
		HideUrl             bool            `json:"hide_url"`
		Title               string          `json:"title"`
		Description         string          `json:"description"`
		ThumbnailUrl        string          `json:"thumbnail_url"`
		ThumbnailWidth      int32           `json:"thumbnail_width"`
		ThumbnailHeight     int32           `json:"thumbnail_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultArticle.Id = tmp.Id
	inputInlineQueryResultArticle.Url = tmp.Url
	inputInlineQueryResultArticle.HideUrl = tmp.HideUrl
	inputInlineQueryResultArticle.Title = tmp.Title
	inputInlineQueryResultArticle.Description = tmp.Description
	inputInlineQueryResultArticle.ThumbnailUrl = tmp.ThumbnailUrl
	inputInlineQueryResultArticle.ThumbnailWidth = tmp.ThumbnailWidth
	inputInlineQueryResultArticle.ThumbnailHeight = tmp.ThumbnailHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultArticle.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultArticle.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents a link to an MP3 audio file
type InputInlineQueryResultAudio struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Title of the audio file
	Title string `json:"title"`
	// Performer of the audio file
	Performer string `json:"performer"`
	// The URL of the audio file
	AudioUrl string `json:"audio_url"`
	// Audio file duration, in seconds
	AudioDuration int32 `json:"audio_duration"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageAudio, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultAudio

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultAudio) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultAudio) GetConstructor() string {
	return ConstructorInputInlineQueryResultAudio
}

func (*InputInlineQueryResultAudio) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultAudio
}

func (inputInlineQueryResultAudio *InputInlineQueryResultAudio) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		Title               string          `json:"title"`
		Performer           string          `json:"performer"`
		AudioUrl            string          `json:"audio_url"`
		AudioDuration       int32           `json:"audio_duration"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultAudio.Id = tmp.Id
	inputInlineQueryResultAudio.Title = tmp.Title
	inputInlineQueryResultAudio.Performer = tmp.Performer
	inputInlineQueryResultAudio.AudioUrl = tmp.AudioUrl
	inputInlineQueryResultAudio.AudioDuration = tmp.AudioDuration

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultAudio.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultAudio.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents a user contact
type InputInlineQueryResultContact struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// User contact
	Contact *Contact `json:"contact"`
	// URL of the result thumbnail, if it exists
	ThumbnailUrl string `json:"thumbnail_url"`
	// Thumbnail width, if known
	ThumbnailWidth int32 `json:"thumbnail_width"`
	// Thumbnail height, if known
	ThumbnailHeight int32 `json:"thumbnail_height"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultContact

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultContact) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultContact) GetConstructor() string {
	return ConstructorInputInlineQueryResultContact
}

func (*InputInlineQueryResultContact) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultContact
}

func (inputInlineQueryResultContact *InputInlineQueryResultContact) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		Contact             *Contact        `json:"contact"`
		ThumbnailUrl        string          `json:"thumbnail_url"`
		ThumbnailWidth      int32           `json:"thumbnail_width"`
		ThumbnailHeight     int32           `json:"thumbnail_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultContact.Id = tmp.Id
	inputInlineQueryResultContact.Contact = tmp.Contact
	inputInlineQueryResultContact.ThumbnailUrl = tmp.ThumbnailUrl
	inputInlineQueryResultContact.ThumbnailWidth = tmp.ThumbnailWidth
	inputInlineQueryResultContact.ThumbnailHeight = tmp.ThumbnailHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultContact.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultContact.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents a link to a file
type InputInlineQueryResultDocument struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Title of the resulting file
	Title string `json:"title"`
	// Short description of the result, if known
	Description string `json:"description"`
	// URL of the file
	DocumentUrl string `json:"document_url"`
	// MIME type of the file content; only "application/pdf" and "application/zip" are currently allowed
	MimeType string `json:"mime_type"`
	// The URL of the file thumbnail, if it exists
	ThumbnailUrl string `json:"thumbnail_url"`
	// Width of the thumbnail
	ThumbnailWidth int32 `json:"thumbnail_width"`
	// Height of the thumbnail
	ThumbnailHeight int32 `json:"thumbnail_height"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageDocument, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultDocument

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultDocument) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultDocument) GetConstructor() string {
	return ConstructorInputInlineQueryResultDocument
}

func (*InputInlineQueryResultDocument) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultDocument
}

func (inputInlineQueryResultDocument *InputInlineQueryResultDocument) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		Title               string          `json:"title"`
		Description         string          `json:"description"`
		DocumentUrl         string          `json:"document_url"`
		MimeType            string          `json:"mime_type"`
		ThumbnailUrl        string          `json:"thumbnail_url"`
		ThumbnailWidth      int32           `json:"thumbnail_width"`
		ThumbnailHeight     int32           `json:"thumbnail_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultDocument.Id = tmp.Id
	inputInlineQueryResultDocument.Title = tmp.Title
	inputInlineQueryResultDocument.Description = tmp.Description
	inputInlineQueryResultDocument.DocumentUrl = tmp.DocumentUrl
	inputInlineQueryResultDocument.MimeType = tmp.MimeType
	inputInlineQueryResultDocument.ThumbnailUrl = tmp.ThumbnailUrl
	inputInlineQueryResultDocument.ThumbnailWidth = tmp.ThumbnailWidth
	inputInlineQueryResultDocument.ThumbnailHeight = tmp.ThumbnailHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultDocument.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultDocument.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents a game
type InputInlineQueryResultGame struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Short name of the game
	GameShortName string `json:"game_short_name"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

func (entity *InputInlineQueryResultGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultGame

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultGame) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultGame) GetConstructor() string {
	return ConstructorInputInlineQueryResultGame
}

func (*InputInlineQueryResultGame) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultGame
}

func (inputInlineQueryResultGame *InputInlineQueryResultGame) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id            string          `json:"id"`
		GameShortName string          `json:"game_short_name"`
		ReplyMarkup   json.RawMessage `json:"reply_markup"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultGame.Id = tmp.Id
	inputInlineQueryResultGame.GameShortName = tmp.GameShortName

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultGame.ReplyMarkup = fieldReplyMarkup

	return nil
}

// Represents a point on the map
type InputInlineQueryResultLocation struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Location result
	Location *Location `json:"location"`
	// Amount of time relative to the message sent time until the location can be updated, in seconds
	LivePeriod int32 `json:"live_period"`
	// Title of the result
	Title string `json:"title"`
	// URL of the result thumbnail, if it exists
	ThumbnailUrl string `json:"thumbnail_url"`
	// Thumbnail width, if known
	ThumbnailWidth int32 `json:"thumbnail_width"`
	// Thumbnail height, if known
	ThumbnailHeight int32 `json:"thumbnail_height"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultLocation

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultLocation) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultLocation) GetConstructor() string {
	return ConstructorInputInlineQueryResultLocation
}

func (*InputInlineQueryResultLocation) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultLocation
}

func (inputInlineQueryResultLocation *InputInlineQueryResultLocation) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		Location            *Location       `json:"location"`
		LivePeriod          int32           `json:"live_period"`
		Title               string          `json:"title"`
		ThumbnailUrl        string          `json:"thumbnail_url"`
		ThumbnailWidth      int32           `json:"thumbnail_width"`
		ThumbnailHeight     int32           `json:"thumbnail_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultLocation.Id = tmp.Id
	inputInlineQueryResultLocation.Location = tmp.Location
	inputInlineQueryResultLocation.LivePeriod = tmp.LivePeriod
	inputInlineQueryResultLocation.Title = tmp.Title
	inputInlineQueryResultLocation.ThumbnailUrl = tmp.ThumbnailUrl
	inputInlineQueryResultLocation.ThumbnailWidth = tmp.ThumbnailWidth
	inputInlineQueryResultLocation.ThumbnailHeight = tmp.ThumbnailHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultLocation.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultLocation.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents link to a JPEG image
type InputInlineQueryResultPhoto struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Title of the result, if known
	Title string `json:"title"`
	// A short description of the result, if known
	Description string `json:"description"`
	// URL of the photo thumbnail, if it exists
	ThumbnailUrl string `json:"thumbnail_url"`
	// The URL of the JPEG photo (photo size must not exceed 5MB)
	PhotoUrl string `json:"photo_url"`
	// Width of the photo
	PhotoWidth int32 `json:"photo_width"`
	// Height of the photo
	PhotoHeight int32 `json:"photo_height"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessagePhoto, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultPhoto

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultPhoto) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultPhoto) GetConstructor() string {
	return ConstructorInputInlineQueryResultPhoto
}

func (*InputInlineQueryResultPhoto) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultPhoto
}

func (inputInlineQueryResultPhoto *InputInlineQueryResultPhoto) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		Title               string          `json:"title"`
		Description         string          `json:"description"`
		ThumbnailUrl        string          `json:"thumbnail_url"`
		PhotoUrl            string          `json:"photo_url"`
		PhotoWidth          int32           `json:"photo_width"`
		PhotoHeight         int32           `json:"photo_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultPhoto.Id = tmp.Id
	inputInlineQueryResultPhoto.Title = tmp.Title
	inputInlineQueryResultPhoto.Description = tmp.Description
	inputInlineQueryResultPhoto.ThumbnailUrl = tmp.ThumbnailUrl
	inputInlineQueryResultPhoto.PhotoUrl = tmp.PhotoUrl
	inputInlineQueryResultPhoto.PhotoWidth = tmp.PhotoWidth
	inputInlineQueryResultPhoto.PhotoHeight = tmp.PhotoHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultPhoto.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultPhoto.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents a link to a WEBP, TGS, or WEBM sticker
type InputInlineQueryResultSticker struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// URL of the sticker thumbnail, if it exists
	ThumbnailUrl string `json:"thumbnail_url"`
	// The URL of the WEBP, TGS, or WEBM sticker (sticker file size must not exceed 5MB)
	StickerUrl string `json:"sticker_url"`
	// Width of the sticker
	StickerWidth int32 `json:"sticker_width"`
	// Height of the sticker
	StickerHeight int32 `json:"sticker_height"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageSticker, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultSticker

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultSticker) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultSticker) GetConstructor() string {
	return ConstructorInputInlineQueryResultSticker
}

func (*InputInlineQueryResultSticker) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultSticker
}

func (inputInlineQueryResultSticker *InputInlineQueryResultSticker) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		ThumbnailUrl        string          `json:"thumbnail_url"`
		StickerUrl          string          `json:"sticker_url"`
		StickerWidth        int32           `json:"sticker_width"`
		StickerHeight       int32           `json:"sticker_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultSticker.Id = tmp.Id
	inputInlineQueryResultSticker.ThumbnailUrl = tmp.ThumbnailUrl
	inputInlineQueryResultSticker.StickerUrl = tmp.StickerUrl
	inputInlineQueryResultSticker.StickerWidth = tmp.StickerWidth
	inputInlineQueryResultSticker.StickerHeight = tmp.StickerHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultSticker.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultSticker.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents information about a venue
type InputInlineQueryResultVenue struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Venue result
	Venue *Venue `json:"venue"`
	// URL of the result thumbnail, if it exists
	ThumbnailUrl string `json:"thumbnail_url"`
	// Thumbnail width, if known
	ThumbnailWidth int32 `json:"thumbnail_width"`
	// Thumbnail height, if known
	ThumbnailHeight int32 `json:"thumbnail_height"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultVenue

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultVenue) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultVenue) GetConstructor() string {
	return ConstructorInputInlineQueryResultVenue
}

func (*InputInlineQueryResultVenue) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultVenue
}

func (inputInlineQueryResultVenue *InputInlineQueryResultVenue) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		Venue               *Venue          `json:"venue"`
		ThumbnailUrl        string          `json:"thumbnail_url"`
		ThumbnailWidth      int32           `json:"thumbnail_width"`
		ThumbnailHeight     int32           `json:"thumbnail_height"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultVenue.Id = tmp.Id
	inputInlineQueryResultVenue.Venue = tmp.Venue
	inputInlineQueryResultVenue.ThumbnailUrl = tmp.ThumbnailUrl
	inputInlineQueryResultVenue.ThumbnailWidth = tmp.ThumbnailWidth
	inputInlineQueryResultVenue.ThumbnailHeight = tmp.ThumbnailHeight

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultVenue.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultVenue.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents a link to a page containing an embedded video player or a video file
type InputInlineQueryResultVideo struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Title of the result
	Title string `json:"title"`
	// A short description of the result, if known
	Description string `json:"description"`
	// The URL of the video thumbnail (JPEG), if it exists
	ThumbnailUrl string `json:"thumbnail_url"`
	// URL of the embedded video player or video file
	VideoUrl string `json:"video_url"`
	// MIME type of the content of the video URL, only "text/html" or "video/mp4" are currently supported
	MimeType string `json:"mime_type"`
	// Width of the video
	VideoWidth int32 `json:"video_width"`
	// Height of the video
	VideoHeight int32 `json:"video_height"`
	// Video duration, in seconds
	VideoDuration int32 `json:"video_duration"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageVideo, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultVideo

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultVideo) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultVideo) GetConstructor() string {
	return ConstructorInputInlineQueryResultVideo
}

func (*InputInlineQueryResultVideo) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultVideo
}

func (inputInlineQueryResultVideo *InputInlineQueryResultVideo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		Title               string          `json:"title"`
		Description         string          `json:"description"`
		ThumbnailUrl        string          `json:"thumbnail_url"`
		VideoUrl            string          `json:"video_url"`
		MimeType            string          `json:"mime_type"`
		VideoWidth          int32           `json:"video_width"`
		VideoHeight         int32           `json:"video_height"`
		VideoDuration       int32           `json:"video_duration"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultVideo.Id = tmp.Id
	inputInlineQueryResultVideo.Title = tmp.Title
	inputInlineQueryResultVideo.Description = tmp.Description
	inputInlineQueryResultVideo.ThumbnailUrl = tmp.ThumbnailUrl
	inputInlineQueryResultVideo.VideoUrl = tmp.VideoUrl
	inputInlineQueryResultVideo.MimeType = tmp.MimeType
	inputInlineQueryResultVideo.VideoWidth = tmp.VideoWidth
	inputInlineQueryResultVideo.VideoHeight = tmp.VideoHeight
	inputInlineQueryResultVideo.VideoDuration = tmp.VideoDuration

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultVideo.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultVideo.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents a link to an opus-encoded audio file within an OGG container, single channel audio
type InputInlineQueryResultVoiceNote struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Title of the voice note
	Title string `json:"title"`
	// The URL of the voice note file
	VoiceNoteUrl string `json:"voice_note_url"`
	// Duration of the voice note, in seconds
	VoiceNoteDuration int32 `json:"voice_note_duration"`
	// The message reply markup; pass null if none. Must be of type replyMarkupInlineKeyboard or null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
	// The content of the message to be sent. Must be one of the following types: inputMessageText, inputMessageVoiceNote, inputMessageInvoice, inputMessageLocation, inputMessageVenue or inputMessageContact
	InputMessageContent InputMessageContent `json:"input_message_content"`
}

func (entity *InputInlineQueryResultVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputInlineQueryResultVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*InputInlineQueryResultVoiceNote) GetType() string {
	return TypeInputInlineQueryResult
}

func (*InputInlineQueryResultVoiceNote) GetConstructor() string {
	return ConstructorInputInlineQueryResultVoiceNote
}

func (*InputInlineQueryResultVoiceNote) InputInlineQueryResultConstructor() string {
	return ConstructorInputInlineQueryResultVoiceNote
}

func (inputInlineQueryResultVoiceNote *InputInlineQueryResultVoiceNote) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                  string          `json:"id"`
		Title               string          `json:"title"`
		VoiceNoteUrl        string          `json:"voice_note_url"`
		VoiceNoteDuration   int32           `json:"voice_note_duration"`
		ReplyMarkup         json.RawMessage `json:"reply_markup"`
		InputMessageContent json.RawMessage `json:"input_message_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputInlineQueryResultVoiceNote.Id = tmp.Id
	inputInlineQueryResultVoiceNote.Title = tmp.Title
	inputInlineQueryResultVoiceNote.VoiceNoteUrl = tmp.VoiceNoteUrl
	inputInlineQueryResultVoiceNote.VoiceNoteDuration = tmp.VoiceNoteDuration

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	inputInlineQueryResultVoiceNote.ReplyMarkup = fieldReplyMarkup

	fieldInputMessageContent, _ := UnmarshalInputMessageContent(tmp.InputMessageContent)
	inputInlineQueryResultVoiceNote.InputMessageContent = fieldInputMessageContent

	return nil
}

// Represents a link to an article or web page
type InlineQueryResultArticle struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// URL of the result, if it exists
	Url string `json:"url"`
	// True, if the URL must be not shown
	HideUrl bool `json:"hide_url"`
	// Title of the result
	Title string `json:"title"`
	// A short description of the result
	Description string `json:"description"`
	// Result thumbnail in JPEG format; may be null
	Thumbnail *Thumbnail `json:"thumbnail"`
}

func (entity *InlineQueryResultArticle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultArticle

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultArticle) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultArticle) GetConstructor() string {
	return ConstructorInlineQueryResultArticle
}

func (*InlineQueryResultArticle) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultArticle
}

// Represents a user contact
type InlineQueryResultContact struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// A user contact
	Contact *Contact `json:"contact"`
	// Result thumbnail in JPEG format; may be null
	Thumbnail *Thumbnail `json:"thumbnail"`
}

func (entity *InlineQueryResultContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultContact

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultContact) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultContact) GetConstructor() string {
	return ConstructorInlineQueryResultContact
}

func (*InlineQueryResultContact) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultContact
}

// Represents a point on the map
type InlineQueryResultLocation struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Location result
	Location *Location `json:"location"`
	// Title of the result
	Title string `json:"title"`
	// Result thumbnail in JPEG format; may be null
	Thumbnail *Thumbnail `json:"thumbnail"`
}

func (entity *InlineQueryResultLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultLocation

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultLocation) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultLocation) GetConstructor() string {
	return ConstructorInlineQueryResultLocation
}

func (*InlineQueryResultLocation) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultLocation
}

// Represents information about a venue
type InlineQueryResultVenue struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Venue result
	Venue *Venue `json:"venue"`
	// Result thumbnail in JPEG format; may be null
	Thumbnail *Thumbnail `json:"thumbnail"`
}

func (entity *InlineQueryResultVenue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultVenue

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultVenue) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultVenue) GetConstructor() string {
	return ConstructorInlineQueryResultVenue
}

func (*InlineQueryResultVenue) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultVenue
}

// Represents information about a game
type InlineQueryResultGame struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Game result
	Game *Game `json:"game"`
}

func (entity *InlineQueryResultGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultGame

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultGame) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultGame) GetConstructor() string {
	return ConstructorInlineQueryResultGame
}

func (*InlineQueryResultGame) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultGame
}

// Represents an animation file
type InlineQueryResultAnimation struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Animation file
	Animation *Animation `json:"animation"`
	// Animation title
	Title string `json:"title"`
}

func (entity *InlineQueryResultAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultAnimation

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultAnimation) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultAnimation) GetConstructor() string {
	return ConstructorInlineQueryResultAnimation
}

func (*InlineQueryResultAnimation) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultAnimation
}

// Represents an audio file
type InlineQueryResultAudio struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Audio file
	Audio *Audio `json:"audio"`
}

func (entity *InlineQueryResultAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultAudio

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultAudio) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultAudio) GetConstructor() string {
	return ConstructorInlineQueryResultAudio
}

func (*InlineQueryResultAudio) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultAudio
}

// Represents a document
type InlineQueryResultDocument struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Document
	Document *Document `json:"document"`
	// Document title
	Title string `json:"title"`
	// Document description
	Description string `json:"description"`
}

func (entity *InlineQueryResultDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultDocument

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultDocument) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultDocument) GetConstructor() string {
	return ConstructorInlineQueryResultDocument
}

func (*InlineQueryResultDocument) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultDocument
}

// Represents a photo
type InlineQueryResultPhoto struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Photo
	Photo *Photo `json:"photo"`
	// Title of the result, if known
	Title string `json:"title"`
	// A short description of the result, if known
	Description string `json:"description"`
}

func (entity *InlineQueryResultPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultPhoto

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultPhoto) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultPhoto) GetConstructor() string {
	return ConstructorInlineQueryResultPhoto
}

func (*InlineQueryResultPhoto) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultPhoto
}

// Represents a sticker
type InlineQueryResultSticker struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Sticker
	Sticker *Sticker `json:"sticker"`
}

func (entity *InlineQueryResultSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultSticker

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultSticker) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultSticker) GetConstructor() string {
	return ConstructorInlineQueryResultSticker
}

func (*InlineQueryResultSticker) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultSticker
}

// Represents a video
type InlineQueryResultVideo struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Video
	Video *Video `json:"video"`
	// Title of the video
	Title string `json:"title"`
	// Description of the video
	Description string `json:"description"`
}

func (entity *InlineQueryResultVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultVideo

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultVideo) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultVideo) GetConstructor() string {
	return ConstructorInlineQueryResultVideo
}

func (*InlineQueryResultVideo) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultVideo
}

// Represents a voice note
type InlineQueryResultVoiceNote struct {
	meta
	// Unique identifier of the query result
	Id string `json:"id"`
	// Voice note
	VoiceNote *VoiceNote `json:"voice_note"`
	// Title of the voice note
	Title string `json:"title"`
}

func (entity *InlineQueryResultVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultVoiceNote) GetType() string {
	return TypeInlineQueryResult
}

func (*InlineQueryResultVoiceNote) GetConstructor() string {
	return ConstructorInlineQueryResultVoiceNote
}

func (*InlineQueryResultVoiceNote) InlineQueryResultConstructor() string {
	return ConstructorInlineQueryResultVoiceNote
}

// Describes the button that opens a private chat with the bot and sends a start message to the bot with the given parameter
type InlineQueryResultsButtonTypeStartBot struct {
	meta
	// The parameter for the bot start message
	Parameter string `json:"parameter"`
}

func (entity *InlineQueryResultsButtonTypeStartBot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultsButtonTypeStartBot

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultsButtonTypeStartBot) GetType() string {
	return TypeInlineQueryResultsButtonType
}

func (*InlineQueryResultsButtonTypeStartBot) GetConstructor() string {
	return ConstructorInlineQueryResultsButtonTypeStartBot
}

func (*InlineQueryResultsButtonTypeStartBot) InlineQueryResultsButtonTypeConstructor() string {
	return ConstructorInlineQueryResultsButtonTypeStartBot
}

// Describes the button that opens a Web App by calling getWebAppUrl
type InlineQueryResultsButtonTypeWebApp struct {
	meta
	// An HTTP URL to pass to getWebAppUrl
	Url string `json:"url"`
}

func (entity *InlineQueryResultsButtonTypeWebApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultsButtonTypeWebApp

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultsButtonTypeWebApp) GetType() string {
	return TypeInlineQueryResultsButtonType
}

func (*InlineQueryResultsButtonTypeWebApp) GetConstructor() string {
	return ConstructorInlineQueryResultsButtonTypeWebApp
}

func (*InlineQueryResultsButtonTypeWebApp) InlineQueryResultsButtonTypeConstructor() string {
	return ConstructorInlineQueryResultsButtonTypeWebApp
}

// Represents a button to be shown above inline query results
type InlineQueryResultsButton struct {
	meta
	// The text of the button
	Text string `json:"text"`
	// Type of the button
	Type InlineQueryResultsButtonType `json:"type"`
}

func (entity *InlineQueryResultsButton) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResultsButton

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResultsButton) GetType() string {
	return TypeInlineQueryResultsButton
}

func (*InlineQueryResultsButton) GetConstructor() string {
	return ConstructorInlineQueryResultsButton
}

func (inlineQueryResultsButton *InlineQueryResultsButton) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Text string          `json:"text"`
		Type json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inlineQueryResultsButton.Text = tmp.Text

	fieldType, _ := UnmarshalInlineQueryResultsButtonType(tmp.Type)
	inlineQueryResultsButton.Type = fieldType

	return nil
}

// Represents the results of the inline query. Use sendInlineQueryResultMessage to send the result of the query
type InlineQueryResults struct {
	meta
	// Unique identifier of the inline query
	InlineQueryId JsonInt64 `json:"inline_query_id"`
	// Button to be shown above inline query results; may be null
	Button *InlineQueryResultsButton `json:"button"`
	// Results of the query
	Results []InlineQueryResult `json:"results"`
	// The offset for the next request. If empty, then there are no more results
	NextOffset string `json:"next_offset"`
}

func (entity *InlineQueryResults) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InlineQueryResults

	return json.Marshal((*stub)(entity))
}

func (*InlineQueryResults) GetType() string {
	return TypeInlineQueryResults
}

func (*InlineQueryResults) GetConstructor() string {
	return ConstructorInlineQueryResults
}

func (inlineQueryResults *InlineQueryResults) UnmarshalJSON(data []byte) error {
	var tmp struct {
		InlineQueryId JsonInt64                 `json:"inline_query_id"`
		Button        *InlineQueryResultsButton `json:"button"`
		Results       []json.RawMessage         `json:"results"`
		NextOffset    string                    `json:"next_offset"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inlineQueryResults.InlineQueryId = tmp.InlineQueryId
	inlineQueryResults.Button = tmp.Button
	inlineQueryResults.NextOffset = tmp.NextOffset

	fieldResults, _ := UnmarshalListOfInlineQueryResult(tmp.Results)
	inlineQueryResults.Results = fieldResults

	return nil
}

// Represents an inline message that can be sent via the bot
type PreparedInlineMessageId struct {
	meta
	// Unique identifier for the message
	Id string `json:"id"`
	// Point in time (Unix timestamp) when the message can't be used anymore
	ExpirationDate int32 `json:"expiration_date"`
}

func (entity *PreparedInlineMessageId) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PreparedInlineMessageId

	return json.Marshal((*stub)(entity))
}

func (*PreparedInlineMessageId) GetType() string {
	return TypePreparedInlineMessageId
}

func (*PreparedInlineMessageId) GetConstructor() string {
	return ConstructorPreparedInlineMessageId
}

// Represents a ready to send inline message. Use sendInlineQueryResultMessage to send the message
type PreparedInlineMessage struct {
	meta
	// Unique identifier of the inline query to pass to sendInlineQueryResultMessage
	InlineQueryId JsonInt64 `json:"inline_query_id"`
	// Resulted inline message of the query
	Result InlineQueryResult `json:"result"`
	// Types of the chats to which the message can be sent
	ChatTypes *TargetChatTypes `json:"chat_types"`
}

func (entity *PreparedInlineMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PreparedInlineMessage

	return json.Marshal((*stub)(entity))
}

func (*PreparedInlineMessage) GetType() string {
	return TypePreparedInlineMessage
}

func (*PreparedInlineMessage) GetConstructor() string {
	return ConstructorPreparedInlineMessage
}

func (preparedInlineMessage *PreparedInlineMessage) UnmarshalJSON(data []byte) error {
	var tmp struct {
		InlineQueryId JsonInt64        `json:"inline_query_id"`
		Result        json.RawMessage  `json:"result"`
		ChatTypes     *TargetChatTypes `json:"chat_types"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	preparedInlineMessage.InlineQueryId = tmp.InlineQueryId
	preparedInlineMessage.ChatTypes = tmp.ChatTypes

	fieldResult, _ := UnmarshalInlineQueryResult(tmp.Result)
	preparedInlineMessage.Result = fieldResult

	return nil
}

// The payload for a general callback button
type CallbackQueryPayloadData struct {
	meta
	// Data that was attached to the callback button
	Data []byte `json:"data"`
}

func (entity *CallbackQueryPayloadData) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallbackQueryPayloadData

	return json.Marshal((*stub)(entity))
}

func (*CallbackQueryPayloadData) GetType() string {
	return TypeCallbackQueryPayload
}

func (*CallbackQueryPayloadData) GetConstructor() string {
	return ConstructorCallbackQueryPayloadData
}

func (*CallbackQueryPayloadData) CallbackQueryPayloadConstructor() string {
	return ConstructorCallbackQueryPayloadData
}

// The payload for a callback button requiring password
type CallbackQueryPayloadDataWithPassword struct {
	meta
	// The 2-step verification password for the current user
	Password string `json:"password"`
	// Data that was attached to the callback button
	Data []byte `json:"data"`
}

func (entity *CallbackQueryPayloadDataWithPassword) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallbackQueryPayloadDataWithPassword

	return json.Marshal((*stub)(entity))
}

func (*CallbackQueryPayloadDataWithPassword) GetType() string {
	return TypeCallbackQueryPayload
}

func (*CallbackQueryPayloadDataWithPassword) GetConstructor() string {
	return ConstructorCallbackQueryPayloadDataWithPassword
}

func (*CallbackQueryPayloadDataWithPassword) CallbackQueryPayloadConstructor() string {
	return ConstructorCallbackQueryPayloadDataWithPassword
}

// The payload for a game callback button
type CallbackQueryPayloadGame struct {
	meta
	// A short name of the game that was attached to the callback button
	GameShortName string `json:"game_short_name"`
}

func (entity *CallbackQueryPayloadGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallbackQueryPayloadGame

	return json.Marshal((*stub)(entity))
}

func (*CallbackQueryPayloadGame) GetType() string {
	return TypeCallbackQueryPayload
}

func (*CallbackQueryPayloadGame) GetConstructor() string {
	return ConstructorCallbackQueryPayloadGame
}

func (*CallbackQueryPayloadGame) CallbackQueryPayloadConstructor() string {
	return ConstructorCallbackQueryPayloadGame
}

// Contains a bot's answer to a callback query
type CallbackQueryAnswer struct {
	meta
	// Text of the answer
	Text string `json:"text"`
	// True, if an alert must be shown to the user instead of a toast notification
	ShowAlert bool `json:"show_alert"`
	// URL to be opened
	Url string `json:"url"`
}

func (entity *CallbackQueryAnswer) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CallbackQueryAnswer

	return json.Marshal((*stub)(entity))
}

func (*CallbackQueryAnswer) GetType() string {
	return TypeCallbackQueryAnswer
}

func (*CallbackQueryAnswer) GetConstructor() string {
	return ConstructorCallbackQueryAnswer
}

// Contains the result of a custom request
type CustomRequestResult struct {
	meta
	// A JSON-serialized result
	Result string `json:"result"`
}

func (entity *CustomRequestResult) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CustomRequestResult

	return json.Marshal((*stub)(entity))
}

func (*CustomRequestResult) GetType() string {
	return TypeCustomRequestResult
}

func (*CustomRequestResult) GetConstructor() string {
	return ConstructorCustomRequestResult
}

// Contains one row of the game high score table
type GameHighScore struct {
	meta
	// Position in the high score table
	Position int32 `json:"position"`
	// User identifier
	UserId int64 `json:"user_id"`
	// User score
	Score int32 `json:"score"`
}

func (entity *GameHighScore) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GameHighScore

	return json.Marshal((*stub)(entity))
}

func (*GameHighScore) GetType() string {
	return TypeGameHighScore
}

func (*GameHighScore) GetConstructor() string {
	return ConstructorGameHighScore
}

// Contains a list of game high scores
type GameHighScores struct {
	meta
	// A list of game high scores
	Scores []*GameHighScore `json:"scores"`
}

func (entity *GameHighScores) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub GameHighScores

	return json.Marshal((*stub)(entity))
}

func (*GameHighScores) GetType() string {
	return TypeGameHighScores
}

func (*GameHighScores) GetConstructor() string {
	return ConstructorGameHighScores
}

// A message was edited
type ChatEventMessageEdited struct {
	meta
	// The original message before the edit
	OldMessage *Message `json:"old_message"`
	// The message after it was edited
	NewMessage *Message `json:"new_message"`
}

func (entity *ChatEventMessageEdited) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMessageEdited

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMessageEdited) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMessageEdited) GetConstructor() string {
	return ConstructorChatEventMessageEdited
}

func (*ChatEventMessageEdited) ChatEventActionConstructor() string {
	return ConstructorChatEventMessageEdited
}

// A message was deleted
type ChatEventMessageDeleted struct {
	meta
	// Deleted message
	Message *Message `json:"message"`
	// True, if the message deletion can be reported via reportSupergroupAntiSpamFalsePositive
	CanReportAntiSpamFalsePositive bool `json:"can_report_anti_spam_false_positive"`
}

func (entity *ChatEventMessageDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMessageDeleted

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMessageDeleted) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMessageDeleted) GetConstructor() string {
	return ConstructorChatEventMessageDeleted
}

func (*ChatEventMessageDeleted) ChatEventActionConstructor() string {
	return ConstructorChatEventMessageDeleted
}

// A message was pinned
type ChatEventMessagePinned struct {
	meta
	// Pinned message
	Message *Message `json:"message"`
}

func (entity *ChatEventMessagePinned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMessagePinned

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMessagePinned) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMessagePinned) GetConstructor() string {
	return ConstructorChatEventMessagePinned
}

func (*ChatEventMessagePinned) ChatEventActionConstructor() string {
	return ConstructorChatEventMessagePinned
}

// A message was unpinned
type ChatEventMessageUnpinned struct {
	meta
	// Unpinned message
	Message *Message `json:"message"`
}

func (entity *ChatEventMessageUnpinned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMessageUnpinned

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMessageUnpinned) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMessageUnpinned) GetConstructor() string {
	return ConstructorChatEventMessageUnpinned
}

func (*ChatEventMessageUnpinned) ChatEventActionConstructor() string {
	return ConstructorChatEventMessageUnpinned
}

// A poll in a message was stopped
type ChatEventPollStopped struct {
	meta
	// The message with the poll
	Message *Message `json:"message"`
}

func (entity *ChatEventPollStopped) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventPollStopped

	return json.Marshal((*stub)(entity))
}

func (*ChatEventPollStopped) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventPollStopped) GetConstructor() string {
	return ConstructorChatEventPollStopped
}

func (*ChatEventPollStopped) ChatEventActionConstructor() string {
	return ConstructorChatEventPollStopped
}

// A new member joined the chat
type ChatEventMemberJoined struct {
	meta
}

func (entity *ChatEventMemberJoined) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMemberJoined

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMemberJoined) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMemberJoined) GetConstructor() string {
	return ConstructorChatEventMemberJoined
}

func (*ChatEventMemberJoined) ChatEventActionConstructor() string {
	return ConstructorChatEventMemberJoined
}

// A new member joined the chat via an invite link
type ChatEventMemberJoinedByInviteLink struct {
	meta
	// Invite link used to join the chat
	InviteLink *ChatInviteLink `json:"invite_link"`
	// True, if the user has joined the chat using an invite link for a chat folder
	ViaChatFolderInviteLink bool `json:"via_chat_folder_invite_link"`
}

func (entity *ChatEventMemberJoinedByInviteLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMemberJoinedByInviteLink

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMemberJoinedByInviteLink) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMemberJoinedByInviteLink) GetConstructor() string {
	return ConstructorChatEventMemberJoinedByInviteLink
}

func (*ChatEventMemberJoinedByInviteLink) ChatEventActionConstructor() string {
	return ConstructorChatEventMemberJoinedByInviteLink
}

// A new member was accepted to the chat by an administrator
type ChatEventMemberJoinedByRequest struct {
	meta
	// User identifier of the chat administrator, approved user join request
	ApproverUserId int64 `json:"approver_user_id"`
	// Invite link used to join the chat; may be null
	InviteLink *ChatInviteLink `json:"invite_link"`
}

func (entity *ChatEventMemberJoinedByRequest) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMemberJoinedByRequest

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMemberJoinedByRequest) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMemberJoinedByRequest) GetConstructor() string {
	return ConstructorChatEventMemberJoinedByRequest
}

func (*ChatEventMemberJoinedByRequest) ChatEventActionConstructor() string {
	return ConstructorChatEventMemberJoinedByRequest
}

// A new chat member was invited
type ChatEventMemberInvited struct {
	meta
	// New member user identifier
	UserId int64 `json:"user_id"`
	// New member status
	Status ChatMemberStatus `json:"status"`
}

func (entity *ChatEventMemberInvited) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMemberInvited

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMemberInvited) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMemberInvited) GetConstructor() string {
	return ConstructorChatEventMemberInvited
}

func (*ChatEventMemberInvited) ChatEventActionConstructor() string {
	return ConstructorChatEventMemberInvited
}

func (chatEventMemberInvited *ChatEventMemberInvited) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserId int64           `json:"user_id"`
		Status json.RawMessage `json:"status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatEventMemberInvited.UserId = tmp.UserId

	fieldStatus, _ := UnmarshalChatMemberStatus(tmp.Status)
	chatEventMemberInvited.Status = fieldStatus

	return nil
}

// A member left the chat
type ChatEventMemberLeft struct {
	meta
}

func (entity *ChatEventMemberLeft) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMemberLeft

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMemberLeft) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMemberLeft) GetConstructor() string {
	return ConstructorChatEventMemberLeft
}

func (*ChatEventMemberLeft) ChatEventActionConstructor() string {
	return ConstructorChatEventMemberLeft
}

// A chat member has gained/lost administrator status, or the list of their administrator privileges has changed
type ChatEventMemberPromoted struct {
	meta
	// Affected chat member user identifier
	UserId int64 `json:"user_id"`
	// Previous status of the chat member
	OldStatus ChatMemberStatus `json:"old_status"`
	// New status of the chat member
	NewStatus ChatMemberStatus `json:"new_status"`
}

func (entity *ChatEventMemberPromoted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMemberPromoted

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMemberPromoted) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMemberPromoted) GetConstructor() string {
	return ConstructorChatEventMemberPromoted
}

func (*ChatEventMemberPromoted) ChatEventActionConstructor() string {
	return ConstructorChatEventMemberPromoted
}

func (chatEventMemberPromoted *ChatEventMemberPromoted) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserId    int64           `json:"user_id"`
		OldStatus json.RawMessage `json:"old_status"`
		NewStatus json.RawMessage `json:"new_status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatEventMemberPromoted.UserId = tmp.UserId

	fieldOldStatus, _ := UnmarshalChatMemberStatus(tmp.OldStatus)
	chatEventMemberPromoted.OldStatus = fieldOldStatus

	fieldNewStatus, _ := UnmarshalChatMemberStatus(tmp.NewStatus)
	chatEventMemberPromoted.NewStatus = fieldNewStatus

	return nil
}

// A chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed
type ChatEventMemberRestricted struct {
	meta
	// Affected chat member identifier
	MemberId MessageSender `json:"member_id"`
	// Previous status of the chat member
	OldStatus ChatMemberStatus `json:"old_status"`
	// New status of the chat member
	NewStatus ChatMemberStatus `json:"new_status"`
}

func (entity *ChatEventMemberRestricted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMemberRestricted

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMemberRestricted) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMemberRestricted) GetConstructor() string {
	return ConstructorChatEventMemberRestricted
}

func (*ChatEventMemberRestricted) ChatEventActionConstructor() string {
	return ConstructorChatEventMemberRestricted
}

func (chatEventMemberRestricted *ChatEventMemberRestricted) UnmarshalJSON(data []byte) error {
	var tmp struct {
		MemberId  json.RawMessage `json:"member_id"`
		OldStatus json.RawMessage `json:"old_status"`
		NewStatus json.RawMessage `json:"new_status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldMemberId, _ := UnmarshalMessageSender(tmp.MemberId)
	chatEventMemberRestricted.MemberId = fieldMemberId

	fieldOldStatus, _ := UnmarshalChatMemberStatus(tmp.OldStatus)
	chatEventMemberRestricted.OldStatus = fieldOldStatus

	fieldNewStatus, _ := UnmarshalChatMemberStatus(tmp.NewStatus)
	chatEventMemberRestricted.NewStatus = fieldNewStatus

	return nil
}

// A chat member extended their subscription to the chat
type ChatEventMemberSubscriptionExtended struct {
	meta
	// Affected chat member user identifier
	UserId int64 `json:"user_id"`
	// Previous status of the chat member
	OldStatus ChatMemberStatus `json:"old_status"`
	// New status of the chat member
	NewStatus ChatMemberStatus `json:"new_status"`
}

func (entity *ChatEventMemberSubscriptionExtended) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMemberSubscriptionExtended

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMemberSubscriptionExtended) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMemberSubscriptionExtended) GetConstructor() string {
	return ConstructorChatEventMemberSubscriptionExtended
}

func (*ChatEventMemberSubscriptionExtended) ChatEventActionConstructor() string {
	return ConstructorChatEventMemberSubscriptionExtended
}

func (chatEventMemberSubscriptionExtended *ChatEventMemberSubscriptionExtended) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserId    int64           `json:"user_id"`
		OldStatus json.RawMessage `json:"old_status"`
		NewStatus json.RawMessage `json:"new_status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatEventMemberSubscriptionExtended.UserId = tmp.UserId

	fieldOldStatus, _ := UnmarshalChatMemberStatus(tmp.OldStatus)
	chatEventMemberSubscriptionExtended.OldStatus = fieldOldStatus

	fieldNewStatus, _ := UnmarshalChatMemberStatus(tmp.NewStatus)
	chatEventMemberSubscriptionExtended.NewStatus = fieldNewStatus

	return nil
}

// The chat available reactions were changed
type ChatEventAvailableReactionsChanged struct {
	meta
	// Previous chat available reactions
	OldAvailableReactions ChatAvailableReactions `json:"old_available_reactions"`
	// New chat available reactions
	NewAvailableReactions ChatAvailableReactions `json:"new_available_reactions"`
}

func (entity *ChatEventAvailableReactionsChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventAvailableReactionsChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventAvailableReactionsChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventAvailableReactionsChanged) GetConstructor() string {
	return ConstructorChatEventAvailableReactionsChanged
}

func (*ChatEventAvailableReactionsChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventAvailableReactionsChanged
}

func (chatEventAvailableReactionsChanged *ChatEventAvailableReactionsChanged) UnmarshalJSON(data []byte) error {
	var tmp struct {
		OldAvailableReactions json.RawMessage `json:"old_available_reactions"`
		NewAvailableReactions json.RawMessage `json:"new_available_reactions"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldOldAvailableReactions, _ := UnmarshalChatAvailableReactions(tmp.OldAvailableReactions)
	chatEventAvailableReactionsChanged.OldAvailableReactions = fieldOldAvailableReactions

	fieldNewAvailableReactions, _ := UnmarshalChatAvailableReactions(tmp.NewAvailableReactions)
	chatEventAvailableReactionsChanged.NewAvailableReactions = fieldNewAvailableReactions

	return nil
}

// The chat background was changed
type ChatEventBackgroundChanged struct {
	meta
	// Previous background; may be null if none
	OldBackground *ChatBackground `json:"old_background"`
	// New background; may be null if none
	NewBackground *ChatBackground `json:"new_background"`
}

func (entity *ChatEventBackgroundChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventBackgroundChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventBackgroundChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventBackgroundChanged) GetConstructor() string {
	return ConstructorChatEventBackgroundChanged
}

func (*ChatEventBackgroundChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventBackgroundChanged
}

// The chat description was changed
type ChatEventDescriptionChanged struct {
	meta
	// Previous chat description
	OldDescription string `json:"old_description"`
	// New chat description
	NewDescription string `json:"new_description"`
}

func (entity *ChatEventDescriptionChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventDescriptionChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventDescriptionChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventDescriptionChanged) GetConstructor() string {
	return ConstructorChatEventDescriptionChanged
}

func (*ChatEventDescriptionChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventDescriptionChanged
}

// The chat emoji status was changed
type ChatEventEmojiStatusChanged struct {
	meta
	// Previous emoji status; may be null if none
	OldEmojiStatus *EmojiStatus `json:"old_emoji_status"`
	// New emoji status; may be null if none
	NewEmojiStatus *EmojiStatus `json:"new_emoji_status"`
}

func (entity *ChatEventEmojiStatusChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventEmojiStatusChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventEmojiStatusChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventEmojiStatusChanged) GetConstructor() string {
	return ConstructorChatEventEmojiStatusChanged
}

func (*ChatEventEmojiStatusChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventEmojiStatusChanged
}

// The linked chat of a supergroup was changed
type ChatEventLinkedChatChanged struct {
	meta
	// Previous supergroup linked chat identifier
	OldLinkedChatId int64 `json:"old_linked_chat_id"`
	// New supergroup linked chat identifier
	NewLinkedChatId int64 `json:"new_linked_chat_id"`
}

func (entity *ChatEventLinkedChatChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventLinkedChatChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventLinkedChatChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventLinkedChatChanged) GetConstructor() string {
	return ConstructorChatEventLinkedChatChanged
}

func (*ChatEventLinkedChatChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventLinkedChatChanged
}

// The supergroup location was changed
type ChatEventLocationChanged struct {
	meta
	// Previous location; may be null
	OldLocation *ChatLocation `json:"old_location"`
	// New location; may be null
	NewLocation *ChatLocation `json:"new_location"`
}

func (entity *ChatEventLocationChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventLocationChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventLocationChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventLocationChanged) GetConstructor() string {
	return ConstructorChatEventLocationChanged
}

func (*ChatEventLocationChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventLocationChanged
}

// The message auto-delete timer was changed
type ChatEventMessageAutoDeleteTimeChanged struct {
	meta
	// Previous value of message_auto_delete_time
	OldMessageAutoDeleteTime int32 `json:"old_message_auto_delete_time"`
	// New value of message_auto_delete_time
	NewMessageAutoDeleteTime int32 `json:"new_message_auto_delete_time"`
}

func (entity *ChatEventMessageAutoDeleteTimeChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventMessageAutoDeleteTimeChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventMessageAutoDeleteTimeChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventMessageAutoDeleteTimeChanged) GetConstructor() string {
	return ConstructorChatEventMessageAutoDeleteTimeChanged
}

func (*ChatEventMessageAutoDeleteTimeChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventMessageAutoDeleteTimeChanged
}

// The chat permissions were changed
type ChatEventPermissionsChanged struct {
	meta
	// Previous chat permissions
	OldPermissions *ChatPermissions `json:"old_permissions"`
	// New chat permissions
	NewPermissions *ChatPermissions `json:"new_permissions"`
}

func (entity *ChatEventPermissionsChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventPermissionsChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventPermissionsChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventPermissionsChanged) GetConstructor() string {
	return ConstructorChatEventPermissionsChanged
}

func (*ChatEventPermissionsChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventPermissionsChanged
}

// The chat photo was changed
type ChatEventPhotoChanged struct {
	meta
	// Previous chat photo value; may be null
	OldPhoto *ChatPhoto `json:"old_photo"`
	// New chat photo value; may be null
	NewPhoto *ChatPhoto `json:"new_photo"`
}

func (entity *ChatEventPhotoChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventPhotoChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventPhotoChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventPhotoChanged) GetConstructor() string {
	return ConstructorChatEventPhotoChanged
}

func (*ChatEventPhotoChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventPhotoChanged
}

// The slow_mode_delay setting of a supergroup was changed
type ChatEventSlowModeDelayChanged struct {
	meta
	// Previous value of slow_mode_delay, in seconds
	OldSlowModeDelay int32 `json:"old_slow_mode_delay"`
	// New value of slow_mode_delay, in seconds
	NewSlowModeDelay int32 `json:"new_slow_mode_delay"`
}

func (entity *ChatEventSlowModeDelayChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventSlowModeDelayChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventSlowModeDelayChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventSlowModeDelayChanged) GetConstructor() string {
	return ConstructorChatEventSlowModeDelayChanged
}

func (*ChatEventSlowModeDelayChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventSlowModeDelayChanged
}

// The supergroup sticker set was changed
type ChatEventStickerSetChanged struct {
	meta
	// Previous identifier of the chat sticker set; 0 if none
	OldStickerSetId JsonInt64 `json:"old_sticker_set_id"`
	// New identifier of the chat sticker set; 0 if none
	NewStickerSetId JsonInt64 `json:"new_sticker_set_id"`
}

func (entity *ChatEventStickerSetChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventStickerSetChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventStickerSetChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventStickerSetChanged) GetConstructor() string {
	return ConstructorChatEventStickerSetChanged
}

func (*ChatEventStickerSetChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventStickerSetChanged
}

// The supergroup sticker set with allowed custom emoji was changed
type ChatEventCustomEmojiStickerSetChanged struct {
	meta
	// Previous identifier of the chat sticker set; 0 if none
	OldStickerSetId JsonInt64 `json:"old_sticker_set_id"`
	// New identifier of the chat sticker set; 0 if none
	NewStickerSetId JsonInt64 `json:"new_sticker_set_id"`
}

func (entity *ChatEventCustomEmojiStickerSetChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventCustomEmojiStickerSetChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventCustomEmojiStickerSetChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventCustomEmojiStickerSetChanged) GetConstructor() string {
	return ConstructorChatEventCustomEmojiStickerSetChanged
}

func (*ChatEventCustomEmojiStickerSetChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventCustomEmojiStickerSetChanged
}

// The chat title was changed
type ChatEventTitleChanged struct {
	meta
	// Previous chat title
	OldTitle string `json:"old_title"`
	// New chat title
	NewTitle string `json:"new_title"`
}

func (entity *ChatEventTitleChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventTitleChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventTitleChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventTitleChanged) GetConstructor() string {
	return ConstructorChatEventTitleChanged
}

func (*ChatEventTitleChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventTitleChanged
}

// The chat editable username was changed
type ChatEventUsernameChanged struct {
	meta
	// Previous chat username
	OldUsername string `json:"old_username"`
	// New chat username
	NewUsername string `json:"new_username"`
}

func (entity *ChatEventUsernameChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventUsernameChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventUsernameChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventUsernameChanged) GetConstructor() string {
	return ConstructorChatEventUsernameChanged
}

func (*ChatEventUsernameChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventUsernameChanged
}

// The chat active usernames were changed
type ChatEventActiveUsernamesChanged struct {
	meta
	// Previous list of active usernames
	OldUsernames []string `json:"old_usernames"`
	// New list of active usernames
	NewUsernames []string `json:"new_usernames"`
}

func (entity *ChatEventActiveUsernamesChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventActiveUsernamesChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventActiveUsernamesChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventActiveUsernamesChanged) GetConstructor() string {
	return ConstructorChatEventActiveUsernamesChanged
}

func (*ChatEventActiveUsernamesChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventActiveUsernamesChanged
}

// The chat accent color or background custom emoji were changed
type ChatEventAccentColorChanged struct {
	meta
	// Previous identifier of chat accent color
	OldAccentColorId int32 `json:"old_accent_color_id"`
	// Previous identifier of the custom emoji; 0 if none
	OldBackgroundCustomEmojiId JsonInt64 `json:"old_background_custom_emoji_id"`
	// New identifier of chat accent color
	NewAccentColorId int32 `json:"new_accent_color_id"`
	// New identifier of the custom emoji; 0 if none
	NewBackgroundCustomEmojiId JsonInt64 `json:"new_background_custom_emoji_id"`
}

func (entity *ChatEventAccentColorChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventAccentColorChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventAccentColorChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventAccentColorChanged) GetConstructor() string {
	return ConstructorChatEventAccentColorChanged
}

func (*ChatEventAccentColorChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventAccentColorChanged
}

// The chat's profile accent color or profile background custom emoji were changed
type ChatEventProfileAccentColorChanged struct {
	meta
	// Previous identifier of chat's profile accent color; -1 if none
	OldProfileAccentColorId int32 `json:"old_profile_accent_color_id"`
	// Previous identifier of the custom emoji; 0 if none
	OldProfileBackgroundCustomEmojiId JsonInt64 `json:"old_profile_background_custom_emoji_id"`
	// New identifier of chat's profile accent color; -1 if none
	NewProfileAccentColorId int32 `json:"new_profile_accent_color_id"`
	// New identifier of the custom emoji; 0 if none
	NewProfileBackgroundCustomEmojiId JsonInt64 `json:"new_profile_background_custom_emoji_id"`
}

func (entity *ChatEventProfileAccentColorChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventProfileAccentColorChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventProfileAccentColorChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventProfileAccentColorChanged) GetConstructor() string {
	return ConstructorChatEventProfileAccentColorChanged
}

func (*ChatEventProfileAccentColorChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventProfileAccentColorChanged
}

// The has_protected_content setting of a channel was toggled
type ChatEventHasProtectedContentToggled struct {
	meta
	// New value of has_protected_content
	HasProtectedContent bool `json:"has_protected_content"`
}

func (entity *ChatEventHasProtectedContentToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventHasProtectedContentToggled

	return json.Marshal((*stub)(entity))
}

func (*ChatEventHasProtectedContentToggled) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventHasProtectedContentToggled) GetConstructor() string {
	return ConstructorChatEventHasProtectedContentToggled
}

func (*ChatEventHasProtectedContentToggled) ChatEventActionConstructor() string {
	return ConstructorChatEventHasProtectedContentToggled
}

// The can_invite_users permission of a supergroup chat was toggled
type ChatEventInvitesToggled struct {
	meta
	// New value of can_invite_users permission
	CanInviteUsers bool `json:"can_invite_users"`
}

func (entity *ChatEventInvitesToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventInvitesToggled

	return json.Marshal((*stub)(entity))
}

func (*ChatEventInvitesToggled) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventInvitesToggled) GetConstructor() string {
	return ConstructorChatEventInvitesToggled
}

func (*ChatEventInvitesToggled) ChatEventActionConstructor() string {
	return ConstructorChatEventInvitesToggled
}

// The is_all_history_available setting of a supergroup was toggled
type ChatEventIsAllHistoryAvailableToggled struct {
	meta
	// New value of is_all_history_available
	IsAllHistoryAvailable bool `json:"is_all_history_available"`
}

func (entity *ChatEventIsAllHistoryAvailableToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventIsAllHistoryAvailableToggled

	return json.Marshal((*stub)(entity))
}

func (*ChatEventIsAllHistoryAvailableToggled) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventIsAllHistoryAvailableToggled) GetConstructor() string {
	return ConstructorChatEventIsAllHistoryAvailableToggled
}

func (*ChatEventIsAllHistoryAvailableToggled) ChatEventActionConstructor() string {
	return ConstructorChatEventIsAllHistoryAvailableToggled
}

// The has_aggressive_anti_spam_enabled setting of a supergroup was toggled
type ChatEventHasAggressiveAntiSpamEnabledToggled struct {
	meta
	// New value of has_aggressive_anti_spam_enabled
	HasAggressiveAntiSpamEnabled bool `json:"has_aggressive_anti_spam_enabled"`
}

func (entity *ChatEventHasAggressiveAntiSpamEnabledToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventHasAggressiveAntiSpamEnabledToggled

	return json.Marshal((*stub)(entity))
}

func (*ChatEventHasAggressiveAntiSpamEnabledToggled) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventHasAggressiveAntiSpamEnabledToggled) GetConstructor() string {
	return ConstructorChatEventHasAggressiveAntiSpamEnabledToggled
}

func (*ChatEventHasAggressiveAntiSpamEnabledToggled) ChatEventActionConstructor() string {
	return ConstructorChatEventHasAggressiveAntiSpamEnabledToggled
}

// The sign_messages setting of a channel was toggled
type ChatEventSignMessagesToggled struct {
	meta
	// New value of sign_messages
	SignMessages bool `json:"sign_messages"`
}

func (entity *ChatEventSignMessagesToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventSignMessagesToggled

	return json.Marshal((*stub)(entity))
}

func (*ChatEventSignMessagesToggled) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventSignMessagesToggled) GetConstructor() string {
	return ConstructorChatEventSignMessagesToggled
}

func (*ChatEventSignMessagesToggled) ChatEventActionConstructor() string {
	return ConstructorChatEventSignMessagesToggled
}

// The show_message_sender setting of a channel was toggled
type ChatEventShowMessageSenderToggled struct {
	meta
	// New value of show_message_sender
	ShowMessageSender bool `json:"show_message_sender"`
}

func (entity *ChatEventShowMessageSenderToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventShowMessageSenderToggled

	return json.Marshal((*stub)(entity))
}

func (*ChatEventShowMessageSenderToggled) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventShowMessageSenderToggled) GetConstructor() string {
	return ConstructorChatEventShowMessageSenderToggled
}

func (*ChatEventShowMessageSenderToggled) ChatEventActionConstructor() string {
	return ConstructorChatEventShowMessageSenderToggled
}

// A chat invite link was edited
type ChatEventInviteLinkEdited struct {
	meta
	// Previous information about the invite link
	OldInviteLink *ChatInviteLink `json:"old_invite_link"`
	// New information about the invite link
	NewInviteLink *ChatInviteLink `json:"new_invite_link"`
}

func (entity *ChatEventInviteLinkEdited) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventInviteLinkEdited

	return json.Marshal((*stub)(entity))
}

func (*ChatEventInviteLinkEdited) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventInviteLinkEdited) GetConstructor() string {
	return ConstructorChatEventInviteLinkEdited
}

func (*ChatEventInviteLinkEdited) ChatEventActionConstructor() string {
	return ConstructorChatEventInviteLinkEdited
}

// A chat invite link was revoked
type ChatEventInviteLinkRevoked struct {
	meta
	// The invite link
	InviteLink *ChatInviteLink `json:"invite_link"`
}

func (entity *ChatEventInviteLinkRevoked) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventInviteLinkRevoked

	return json.Marshal((*stub)(entity))
}

func (*ChatEventInviteLinkRevoked) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventInviteLinkRevoked) GetConstructor() string {
	return ConstructorChatEventInviteLinkRevoked
}

func (*ChatEventInviteLinkRevoked) ChatEventActionConstructor() string {
	return ConstructorChatEventInviteLinkRevoked
}

// A revoked chat invite link was deleted
type ChatEventInviteLinkDeleted struct {
	meta
	// The invite link
	InviteLink *ChatInviteLink `json:"invite_link"`
}

func (entity *ChatEventInviteLinkDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventInviteLinkDeleted

	return json.Marshal((*stub)(entity))
}

func (*ChatEventInviteLinkDeleted) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventInviteLinkDeleted) GetConstructor() string {
	return ConstructorChatEventInviteLinkDeleted
}

func (*ChatEventInviteLinkDeleted) ChatEventActionConstructor() string {
	return ConstructorChatEventInviteLinkDeleted
}

// A video chat was created
type ChatEventVideoChatCreated struct {
	meta
	// Identifier of the video chat. The video chat can be received through the method getGroupCall
	GroupCallId int32 `json:"group_call_id"`
}

func (entity *ChatEventVideoChatCreated) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventVideoChatCreated

	return json.Marshal((*stub)(entity))
}

func (*ChatEventVideoChatCreated) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventVideoChatCreated) GetConstructor() string {
	return ConstructorChatEventVideoChatCreated
}

func (*ChatEventVideoChatCreated) ChatEventActionConstructor() string {
	return ConstructorChatEventVideoChatCreated
}

// A video chat was ended
type ChatEventVideoChatEnded struct {
	meta
	// Identifier of the video chat. The video chat can be received through the method getGroupCall
	GroupCallId int32 `json:"group_call_id"`
}

func (entity *ChatEventVideoChatEnded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventVideoChatEnded

	return json.Marshal((*stub)(entity))
}

func (*ChatEventVideoChatEnded) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventVideoChatEnded) GetConstructor() string {
	return ConstructorChatEventVideoChatEnded
}

func (*ChatEventVideoChatEnded) ChatEventActionConstructor() string {
	return ConstructorChatEventVideoChatEnded
}

// The mute_new_participants setting of a video chat was toggled
type ChatEventVideoChatMuteNewParticipantsToggled struct {
	meta
	// New value of the mute_new_participants setting
	MuteNewParticipants bool `json:"mute_new_participants"`
}

func (entity *ChatEventVideoChatMuteNewParticipantsToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventVideoChatMuteNewParticipantsToggled

	return json.Marshal((*stub)(entity))
}

func (*ChatEventVideoChatMuteNewParticipantsToggled) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventVideoChatMuteNewParticipantsToggled) GetConstructor() string {
	return ConstructorChatEventVideoChatMuteNewParticipantsToggled
}

func (*ChatEventVideoChatMuteNewParticipantsToggled) ChatEventActionConstructor() string {
	return ConstructorChatEventVideoChatMuteNewParticipantsToggled
}

// A video chat participant was muted or unmuted
type ChatEventVideoChatParticipantIsMutedToggled struct {
	meta
	// Identifier of the affected group call participant
	ParticipantId MessageSender `json:"participant_id"`
	// New value of is_muted
	IsMuted bool `json:"is_muted"`
}

func (entity *ChatEventVideoChatParticipantIsMutedToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventVideoChatParticipantIsMutedToggled

	return json.Marshal((*stub)(entity))
}

func (*ChatEventVideoChatParticipantIsMutedToggled) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventVideoChatParticipantIsMutedToggled) GetConstructor() string {
	return ConstructorChatEventVideoChatParticipantIsMutedToggled
}

func (*ChatEventVideoChatParticipantIsMutedToggled) ChatEventActionConstructor() string {
	return ConstructorChatEventVideoChatParticipantIsMutedToggled
}

func (chatEventVideoChatParticipantIsMutedToggled *ChatEventVideoChatParticipantIsMutedToggled) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ParticipantId json.RawMessage `json:"participant_id"`
		IsMuted       bool            `json:"is_muted"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatEventVideoChatParticipantIsMutedToggled.IsMuted = tmp.IsMuted

	fieldParticipantId, _ := UnmarshalMessageSender(tmp.ParticipantId)
	chatEventVideoChatParticipantIsMutedToggled.ParticipantId = fieldParticipantId

	return nil
}

// A video chat participant volume level was changed
type ChatEventVideoChatParticipantVolumeLevelChanged struct {
	meta
	// Identifier of the affected group call participant
	ParticipantId MessageSender `json:"participant_id"`
	// New value of volume_level; 1-20000 in hundreds of percents
	VolumeLevel int32 `json:"volume_level"`
}

func (entity *ChatEventVideoChatParticipantVolumeLevelChanged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventVideoChatParticipantVolumeLevelChanged

	return json.Marshal((*stub)(entity))
}

func (*ChatEventVideoChatParticipantVolumeLevelChanged) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventVideoChatParticipantVolumeLevelChanged) GetConstructor() string {
	return ConstructorChatEventVideoChatParticipantVolumeLevelChanged
}

func (*ChatEventVideoChatParticipantVolumeLevelChanged) ChatEventActionConstructor() string {
	return ConstructorChatEventVideoChatParticipantVolumeLevelChanged
}

func (chatEventVideoChatParticipantVolumeLevelChanged *ChatEventVideoChatParticipantVolumeLevelChanged) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ParticipantId json.RawMessage `json:"participant_id"`
		VolumeLevel   int32           `json:"volume_level"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatEventVideoChatParticipantVolumeLevelChanged.VolumeLevel = tmp.VolumeLevel

	fieldParticipantId, _ := UnmarshalMessageSender(tmp.ParticipantId)
	chatEventVideoChatParticipantVolumeLevelChanged.ParticipantId = fieldParticipantId

	return nil
}

// The is_forum setting of a channel was toggled
type ChatEventIsForumToggled struct {
	meta
	// New value of is_forum
	IsForum bool `json:"is_forum"`
}

func (entity *ChatEventIsForumToggled) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventIsForumToggled

	return json.Marshal((*stub)(entity))
}

func (*ChatEventIsForumToggled) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventIsForumToggled) GetConstructor() string {
	return ConstructorChatEventIsForumToggled
}

func (*ChatEventIsForumToggled) ChatEventActionConstructor() string {
	return ConstructorChatEventIsForumToggled
}

// A new forum topic was created
type ChatEventForumTopicCreated struct {
	meta
	// Information about the topic
	TopicInfo *ForumTopicInfo `json:"topic_info"`
}

func (entity *ChatEventForumTopicCreated) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventForumTopicCreated

	return json.Marshal((*stub)(entity))
}

func (*ChatEventForumTopicCreated) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventForumTopicCreated) GetConstructor() string {
	return ConstructorChatEventForumTopicCreated
}

func (*ChatEventForumTopicCreated) ChatEventActionConstructor() string {
	return ConstructorChatEventForumTopicCreated
}

// A forum topic was edited
type ChatEventForumTopicEdited struct {
	meta
	// Old information about the topic
	OldTopicInfo *ForumTopicInfo `json:"old_topic_info"`
	// New information about the topic
	NewTopicInfo *ForumTopicInfo `json:"new_topic_info"`
}

func (entity *ChatEventForumTopicEdited) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventForumTopicEdited

	return json.Marshal((*stub)(entity))
}

func (*ChatEventForumTopicEdited) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventForumTopicEdited) GetConstructor() string {
	return ConstructorChatEventForumTopicEdited
}

func (*ChatEventForumTopicEdited) ChatEventActionConstructor() string {
	return ConstructorChatEventForumTopicEdited
}

// A forum topic was closed or reopened
type ChatEventForumTopicToggleIsClosed struct {
	meta
	// New information about the topic
	TopicInfo *ForumTopicInfo `json:"topic_info"`
}

func (entity *ChatEventForumTopicToggleIsClosed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventForumTopicToggleIsClosed

	return json.Marshal((*stub)(entity))
}

func (*ChatEventForumTopicToggleIsClosed) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventForumTopicToggleIsClosed) GetConstructor() string {
	return ConstructorChatEventForumTopicToggleIsClosed
}

func (*ChatEventForumTopicToggleIsClosed) ChatEventActionConstructor() string {
	return ConstructorChatEventForumTopicToggleIsClosed
}

// The General forum topic was hidden or unhidden
type ChatEventForumTopicToggleIsHidden struct {
	meta
	// New information about the topic
	TopicInfo *ForumTopicInfo `json:"topic_info"`
}

func (entity *ChatEventForumTopicToggleIsHidden) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventForumTopicToggleIsHidden

	return json.Marshal((*stub)(entity))
}

func (*ChatEventForumTopicToggleIsHidden) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventForumTopicToggleIsHidden) GetConstructor() string {
	return ConstructorChatEventForumTopicToggleIsHidden
}

func (*ChatEventForumTopicToggleIsHidden) ChatEventActionConstructor() string {
	return ConstructorChatEventForumTopicToggleIsHidden
}

// A forum topic was deleted
type ChatEventForumTopicDeleted struct {
	meta
	// Information about the topic
	TopicInfo *ForumTopicInfo `json:"topic_info"`
}

func (entity *ChatEventForumTopicDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventForumTopicDeleted

	return json.Marshal((*stub)(entity))
}

func (*ChatEventForumTopicDeleted) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventForumTopicDeleted) GetConstructor() string {
	return ConstructorChatEventForumTopicDeleted
}

func (*ChatEventForumTopicDeleted) ChatEventActionConstructor() string {
	return ConstructorChatEventForumTopicDeleted
}

// A pinned forum topic was changed
type ChatEventForumTopicPinned struct {
	meta
	// Information about the old pinned topic; may be null
	OldTopicInfo *ForumTopicInfo `json:"old_topic_info"`
	// Information about the new pinned topic; may be null
	NewTopicInfo *ForumTopicInfo `json:"new_topic_info"`
}

func (entity *ChatEventForumTopicPinned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventForumTopicPinned

	return json.Marshal((*stub)(entity))
}

func (*ChatEventForumTopicPinned) GetType() string {
	return TypeChatEventAction
}

func (*ChatEventForumTopicPinned) GetConstructor() string {
	return ConstructorChatEventForumTopicPinned
}

func (*ChatEventForumTopicPinned) ChatEventActionConstructor() string {
	return ConstructorChatEventForumTopicPinned
}

// Represents a chat event
type ChatEvent struct {
	meta
	// Chat event identifier
	Id JsonInt64 `json:"id"`
	// Point in time (Unix timestamp) when the event happened
	Date int32 `json:"date"`
	// Identifier of the user or chat who performed the action
	MemberId MessageSender `json:"member_id"`
	// The action
	Action ChatEventAction `json:"action"`
}

func (entity *ChatEvent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEvent

	return json.Marshal((*stub)(entity))
}

func (*ChatEvent) GetType() string {
	return TypeChatEvent
}

func (*ChatEvent) GetConstructor() string {
	return ConstructorChatEvent
}

func (chatEvent *ChatEvent) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id       JsonInt64       `json:"id"`
		Date     int32           `json:"date"`
		MemberId json.RawMessage `json:"member_id"`
		Action   json.RawMessage `json:"action"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatEvent.Id = tmp.Id
	chatEvent.Date = tmp.Date

	fieldMemberId, _ := UnmarshalMessageSender(tmp.MemberId)
	chatEvent.MemberId = fieldMemberId

	fieldAction, _ := UnmarshalChatEventAction(tmp.Action)
	chatEvent.Action = fieldAction

	return nil
}

// Contains a list of chat events
type ChatEvents struct {
	meta
	// List of events
	Events []*ChatEvent `json:"events"`
}

func (entity *ChatEvents) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEvents

	return json.Marshal((*stub)(entity))
}

func (*ChatEvents) GetType() string {
	return TypeChatEvents
}

func (*ChatEvents) GetConstructor() string {
	return ConstructorChatEvents
}

// Represents a set of filters used to obtain a chat event log
type ChatEventLogFilters struct {
	meta
	// True, if message edits need to be returned
	MessageEdits bool `json:"message_edits"`
	// True, if message deletions need to be returned
	MessageDeletions bool `json:"message_deletions"`
	// True, if pin/unpin events need to be returned
	MessagePins bool `json:"message_pins"`
	// True, if members joining events need to be returned
	MemberJoins bool `json:"member_joins"`
	// True, if members leaving events need to be returned
	MemberLeaves bool `json:"member_leaves"`
	// True, if invited member events need to be returned
	MemberInvites bool `json:"member_invites"`
	// True, if member promotion/demotion events need to be returned
	MemberPromotions bool `json:"member_promotions"`
	// True, if member restricted/unrestricted/banned/unbanned events need to be returned
	MemberRestrictions bool `json:"member_restrictions"`
	// True, if changes in chat information need to be returned
	InfoChanges bool `json:"info_changes"`
	// True, if changes in chat settings need to be returned
	SettingChanges bool `json:"setting_changes"`
	// True, if changes to invite links need to be returned
	InviteLinkChanges bool `json:"invite_link_changes"`
	// True, if video chat actions need to be returned
	VideoChatChanges bool `json:"video_chat_changes"`
	// True, if forum-related actions need to be returned
	ForumChanges bool `json:"forum_changes"`
	// True, if subscription extensions need to be returned
	SubscriptionExtensions bool `json:"subscription_extensions"`
}

func (entity *ChatEventLogFilters) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatEventLogFilters

	return json.Marshal((*stub)(entity))
}

func (*ChatEventLogFilters) GetType() string {
	return TypeChatEventLogFilters
}

func (*ChatEventLogFilters) GetConstructor() string {
	return ConstructorChatEventLogFilters
}

// An ordinary language pack string
type LanguagePackStringValueOrdinary struct {
	meta
	// String value
	Value string `json:"value"`
}

func (entity *LanguagePackStringValueOrdinary) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LanguagePackStringValueOrdinary

	return json.Marshal((*stub)(entity))
}

func (*LanguagePackStringValueOrdinary) GetType() string {
	return TypeLanguagePackStringValue
}

func (*LanguagePackStringValueOrdinary) GetConstructor() string {
	return ConstructorLanguagePackStringValueOrdinary
}

func (*LanguagePackStringValueOrdinary) LanguagePackStringValueConstructor() string {
	return ConstructorLanguagePackStringValueOrdinary
}

// A language pack string which has different forms based on the number of some object it mentions. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more information
type LanguagePackStringValuePluralized struct {
	meta
	// Value for zero objects
	ZeroValue string `json:"zero_value"`
	// Value for one object
	OneValue string `json:"one_value"`
	// Value for two objects
	TwoValue string `json:"two_value"`
	// Value for few objects
	FewValue string `json:"few_value"`
	// Value for many objects
	ManyValue string `json:"many_value"`
	// Default value
	OtherValue string `json:"other_value"`
}

func (entity *LanguagePackStringValuePluralized) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LanguagePackStringValuePluralized

	return json.Marshal((*stub)(entity))
}

func (*LanguagePackStringValuePluralized) GetType() string {
	return TypeLanguagePackStringValue
}

func (*LanguagePackStringValuePluralized) GetConstructor() string {
	return ConstructorLanguagePackStringValuePluralized
}

func (*LanguagePackStringValuePluralized) LanguagePackStringValueConstructor() string {
	return ConstructorLanguagePackStringValuePluralized
}

// A deleted language pack string, the value must be taken from the built-in English language pack
type LanguagePackStringValueDeleted struct {
	meta
}

func (entity *LanguagePackStringValueDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LanguagePackStringValueDeleted

	return json.Marshal((*stub)(entity))
}

func (*LanguagePackStringValueDeleted) GetType() string {
	return TypeLanguagePackStringValue
}

func (*LanguagePackStringValueDeleted) GetConstructor() string {
	return ConstructorLanguagePackStringValueDeleted
}

func (*LanguagePackStringValueDeleted) LanguagePackStringValueConstructor() string {
	return ConstructorLanguagePackStringValueDeleted
}

// Represents one language pack string
type LanguagePackString struct {
	meta
	// String key
	Key string `json:"key"`
	// String value; pass null if the string needs to be taken from the built-in English language pack
	Value LanguagePackStringValue `json:"value"`
}

func (entity *LanguagePackString) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LanguagePackString

	return json.Marshal((*stub)(entity))
}

func (*LanguagePackString) GetType() string {
	return TypeLanguagePackString
}

func (*LanguagePackString) GetConstructor() string {
	return ConstructorLanguagePackString
}

func (languagePackString *LanguagePackString) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Key   string          `json:"key"`
		Value json.RawMessage `json:"value"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	languagePackString.Key = tmp.Key

	fieldValue, _ := UnmarshalLanguagePackStringValue(tmp.Value)
	languagePackString.Value = fieldValue

	return nil
}

// Contains a list of language pack strings
type LanguagePackStrings struct {
	meta
	// A list of language pack strings
	Strings []*LanguagePackString `json:"strings"`
}

func (entity *LanguagePackStrings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LanguagePackStrings

	return json.Marshal((*stub)(entity))
}

func (*LanguagePackStrings) GetType() string {
	return TypeLanguagePackStrings
}

func (*LanguagePackStrings) GetConstructor() string {
	return ConstructorLanguagePackStrings
}

// Contains information about a language pack
type LanguagePackInfo struct {
	meta
	// Unique language pack identifier
	Id string `json:"id"`
	// Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it must be fetched from base language pack. Unsupported in custom language packs
	BaseLanguagePackId string `json:"base_language_pack_id"`
	// Language name
	Name string `json:"name"`
	// Name of the language in that language
	NativeName string `json:"native_name"`
	// A language code to be used to apply plural forms. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more information
	PluralCode string `json:"plural_code"`
	// True, if the language pack is official
	IsOfficial bool `json:"is_official"`
	// True, if the language pack strings are RTL
	IsRtl bool `json:"is_rtl"`
	// True, if the language pack is a beta language pack
	IsBeta bool `json:"is_beta"`
	// True, if the language pack is installed by the current user
	IsInstalled bool `json:"is_installed"`
	// Total number of non-deleted strings from the language pack
	TotalStringCount int32 `json:"total_string_count"`
	// Total number of translated strings from the language pack
	TranslatedStringCount int32 `json:"translated_string_count"`
	// Total number of non-deleted strings from the language pack available locally
	LocalStringCount int32 `json:"local_string_count"`
	// Link to language translation interface; empty for custom local language packs
	TranslationUrl string `json:"translation_url"`
}

func (entity *LanguagePackInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LanguagePackInfo

	return json.Marshal((*stub)(entity))
}

func (*LanguagePackInfo) GetType() string {
	return TypeLanguagePackInfo
}

func (*LanguagePackInfo) GetConstructor() string {
	return ConstructorLanguagePackInfo
}

// Contains information about the current localization target
type LocalizationTargetInfo struct {
	meta
	// List of available language packs for this application
	LanguagePacks []*LanguagePackInfo `json:"language_packs"`
}

func (entity *LocalizationTargetInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LocalizationTargetInfo

	return json.Marshal((*stub)(entity))
}

func (*LocalizationTargetInfo) GetType() string {
	return TypeLocalizationTargetInfo
}

func (*LocalizationTargetInfo) GetConstructor() string {
	return ConstructorLocalizationTargetInfo
}

// The maximum number of joined supergroups and channels
type PremiumLimitTypeSupergroupCount struct {
	meta
}

func (entity *PremiumLimitTypeSupergroupCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeSupergroupCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeSupergroupCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeSupergroupCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeSupergroupCount
}

func (*PremiumLimitTypeSupergroupCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeSupergroupCount
}

// The maximum number of pinned chats in the main chat list
type PremiumLimitTypePinnedChatCount struct {
	meta
}

func (entity *PremiumLimitTypePinnedChatCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypePinnedChatCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypePinnedChatCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypePinnedChatCount) GetConstructor() string {
	return ConstructorPremiumLimitTypePinnedChatCount
}

func (*PremiumLimitTypePinnedChatCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypePinnedChatCount
}

// The maximum number of created public chats
type PremiumLimitTypeCreatedPublicChatCount struct {
	meta
}

func (entity *PremiumLimitTypeCreatedPublicChatCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeCreatedPublicChatCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeCreatedPublicChatCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeCreatedPublicChatCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeCreatedPublicChatCount
}

func (*PremiumLimitTypeCreatedPublicChatCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeCreatedPublicChatCount
}

// The maximum number of saved animations
type PremiumLimitTypeSavedAnimationCount struct {
	meta
}

func (entity *PremiumLimitTypeSavedAnimationCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeSavedAnimationCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeSavedAnimationCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeSavedAnimationCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeSavedAnimationCount
}

func (*PremiumLimitTypeSavedAnimationCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeSavedAnimationCount
}

// The maximum number of favorite stickers
type PremiumLimitTypeFavoriteStickerCount struct {
	meta
}

func (entity *PremiumLimitTypeFavoriteStickerCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeFavoriteStickerCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeFavoriteStickerCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeFavoriteStickerCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeFavoriteStickerCount
}

func (*PremiumLimitTypeFavoriteStickerCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeFavoriteStickerCount
}

// The maximum number of chat folders
type PremiumLimitTypeChatFolderCount struct {
	meta
}

func (entity *PremiumLimitTypeChatFolderCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeChatFolderCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeChatFolderCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeChatFolderCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeChatFolderCount
}

func (*PremiumLimitTypeChatFolderCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeChatFolderCount
}

// The maximum number of pinned and always included, or always excluded chats in a chat folder
type PremiumLimitTypeChatFolderChosenChatCount struct {
	meta
}

func (entity *PremiumLimitTypeChatFolderChosenChatCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeChatFolderChosenChatCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeChatFolderChosenChatCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeChatFolderChosenChatCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeChatFolderChosenChatCount
}

func (*PremiumLimitTypeChatFolderChosenChatCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeChatFolderChosenChatCount
}

// The maximum number of pinned chats in the archive chat list
type PremiumLimitTypePinnedArchivedChatCount struct {
	meta
}

func (entity *PremiumLimitTypePinnedArchivedChatCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypePinnedArchivedChatCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypePinnedArchivedChatCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypePinnedArchivedChatCount) GetConstructor() string {
	return ConstructorPremiumLimitTypePinnedArchivedChatCount
}

func (*PremiumLimitTypePinnedArchivedChatCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypePinnedArchivedChatCount
}

// The maximum number of pinned Saved Messages topics
type PremiumLimitTypePinnedSavedMessagesTopicCount struct {
	meta
}

func (entity *PremiumLimitTypePinnedSavedMessagesTopicCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypePinnedSavedMessagesTopicCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypePinnedSavedMessagesTopicCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypePinnedSavedMessagesTopicCount) GetConstructor() string {
	return ConstructorPremiumLimitTypePinnedSavedMessagesTopicCount
}

func (*PremiumLimitTypePinnedSavedMessagesTopicCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypePinnedSavedMessagesTopicCount
}

// The maximum length of sent media caption
type PremiumLimitTypeCaptionLength struct {
	meta
}

func (entity *PremiumLimitTypeCaptionLength) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeCaptionLength

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeCaptionLength) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeCaptionLength) GetConstructor() string {
	return ConstructorPremiumLimitTypeCaptionLength
}

func (*PremiumLimitTypeCaptionLength) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeCaptionLength
}

// The maximum length of the user's bio
type PremiumLimitTypeBioLength struct {
	meta
}

func (entity *PremiumLimitTypeBioLength) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeBioLength

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeBioLength) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeBioLength) GetConstructor() string {
	return ConstructorPremiumLimitTypeBioLength
}

func (*PremiumLimitTypeBioLength) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeBioLength
}

// The maximum number of invite links for a chat folder
type PremiumLimitTypeChatFolderInviteLinkCount struct {
	meta
}

func (entity *PremiumLimitTypeChatFolderInviteLinkCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeChatFolderInviteLinkCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeChatFolderInviteLinkCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeChatFolderInviteLinkCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeChatFolderInviteLinkCount
}

func (*PremiumLimitTypeChatFolderInviteLinkCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeChatFolderInviteLinkCount
}

// The maximum number of added shareable chat folders
type PremiumLimitTypeShareableChatFolderCount struct {
	meta
}

func (entity *PremiumLimitTypeShareableChatFolderCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeShareableChatFolderCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeShareableChatFolderCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeShareableChatFolderCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeShareableChatFolderCount
}

func (*PremiumLimitTypeShareableChatFolderCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeShareableChatFolderCount
}

// The maximum number of active stories
type PremiumLimitTypeActiveStoryCount struct {
	meta
}

func (entity *PremiumLimitTypeActiveStoryCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeActiveStoryCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeActiveStoryCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeActiveStoryCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeActiveStoryCount
}

func (*PremiumLimitTypeActiveStoryCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeActiveStoryCount
}

// The maximum number of stories sent per week
type PremiumLimitTypeWeeklySentStoryCount struct {
	meta
}

func (entity *PremiumLimitTypeWeeklySentStoryCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeWeeklySentStoryCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeWeeklySentStoryCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeWeeklySentStoryCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeWeeklySentStoryCount
}

func (*PremiumLimitTypeWeeklySentStoryCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeWeeklySentStoryCount
}

// The maximum number of stories sent per month
type PremiumLimitTypeMonthlySentStoryCount struct {
	meta
}

func (entity *PremiumLimitTypeMonthlySentStoryCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeMonthlySentStoryCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeMonthlySentStoryCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeMonthlySentStoryCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeMonthlySentStoryCount
}

func (*PremiumLimitTypeMonthlySentStoryCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeMonthlySentStoryCount
}

// The maximum length of captions of sent stories
type PremiumLimitTypeStoryCaptionLength struct {
	meta
}

func (entity *PremiumLimitTypeStoryCaptionLength) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeStoryCaptionLength

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeStoryCaptionLength) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeStoryCaptionLength) GetConstructor() string {
	return ConstructorPremiumLimitTypeStoryCaptionLength
}

func (*PremiumLimitTypeStoryCaptionLength) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeStoryCaptionLength
}

// The maximum number of suggested reaction areas on a story
type PremiumLimitTypeStorySuggestedReactionAreaCount struct {
	meta
}

func (entity *PremiumLimitTypeStorySuggestedReactionAreaCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeStorySuggestedReactionAreaCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeStorySuggestedReactionAreaCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeStorySuggestedReactionAreaCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeStorySuggestedReactionAreaCount
}

func (*PremiumLimitTypeStorySuggestedReactionAreaCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeStorySuggestedReactionAreaCount
}

// The maximum number of received similar chats
type PremiumLimitTypeSimilarChatCount struct {
	meta
}

func (entity *PremiumLimitTypeSimilarChatCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimitTypeSimilarChatCount

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimitTypeSimilarChatCount) GetType() string {
	return TypePremiumLimitType
}

func (*PremiumLimitTypeSimilarChatCount) GetConstructor() string {
	return ConstructorPremiumLimitTypeSimilarChatCount
}

func (*PremiumLimitTypeSimilarChatCount) PremiumLimitTypeConstructor() string {
	return ConstructorPremiumLimitTypeSimilarChatCount
}

// Increased limits
type PremiumFeatureIncreasedLimits struct {
	meta
}

func (entity *PremiumFeatureIncreasedLimits) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureIncreasedLimits

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureIncreasedLimits) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureIncreasedLimits) GetConstructor() string {
	return ConstructorPremiumFeatureIncreasedLimits
}

func (*PremiumFeatureIncreasedLimits) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureIncreasedLimits
}

// Increased maximum upload file size
type PremiumFeatureIncreasedUploadFileSize struct {
	meta
}

func (entity *PremiumFeatureIncreasedUploadFileSize) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureIncreasedUploadFileSize

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureIncreasedUploadFileSize) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureIncreasedUploadFileSize) GetConstructor() string {
	return ConstructorPremiumFeatureIncreasedUploadFileSize
}

func (*PremiumFeatureIncreasedUploadFileSize) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureIncreasedUploadFileSize
}

// Improved download speed
type PremiumFeatureImprovedDownloadSpeed struct {
	meta
}

func (entity *PremiumFeatureImprovedDownloadSpeed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureImprovedDownloadSpeed

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureImprovedDownloadSpeed) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureImprovedDownloadSpeed) GetConstructor() string {
	return ConstructorPremiumFeatureImprovedDownloadSpeed
}

func (*PremiumFeatureImprovedDownloadSpeed) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureImprovedDownloadSpeed
}

// The ability to convert voice notes to text
type PremiumFeatureVoiceRecognition struct {
	meta
}

func (entity *PremiumFeatureVoiceRecognition) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureVoiceRecognition

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureVoiceRecognition) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureVoiceRecognition) GetConstructor() string {
	return ConstructorPremiumFeatureVoiceRecognition
}

func (*PremiumFeatureVoiceRecognition) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureVoiceRecognition
}

// Disabled ads
type PremiumFeatureDisabledAds struct {
	meta
}

func (entity *PremiumFeatureDisabledAds) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureDisabledAds

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureDisabledAds) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureDisabledAds) GetConstructor() string {
	return ConstructorPremiumFeatureDisabledAds
}

func (*PremiumFeatureDisabledAds) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureDisabledAds
}

// Allowed to use more reactions
type PremiumFeatureUniqueReactions struct {
	meta
}

func (entity *PremiumFeatureUniqueReactions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureUniqueReactions

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureUniqueReactions) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureUniqueReactions) GetConstructor() string {
	return ConstructorPremiumFeatureUniqueReactions
}

func (*PremiumFeatureUniqueReactions) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureUniqueReactions
}

// Allowed to use premium stickers with unique effects
type PremiumFeatureUniqueStickers struct {
	meta
}

func (entity *PremiumFeatureUniqueStickers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureUniqueStickers

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureUniqueStickers) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureUniqueStickers) GetConstructor() string {
	return ConstructorPremiumFeatureUniqueStickers
}

func (*PremiumFeatureUniqueStickers) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureUniqueStickers
}

// Allowed to use custom emoji stickers in message texts and captions
type PremiumFeatureCustomEmoji struct {
	meta
}

func (entity *PremiumFeatureCustomEmoji) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureCustomEmoji

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureCustomEmoji) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureCustomEmoji) GetConstructor() string {
	return ConstructorPremiumFeatureCustomEmoji
}

func (*PremiumFeatureCustomEmoji) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureCustomEmoji
}

// Ability to change position of the main chat list, archive and mute all new chats from non-contacts, and completely disable notifications about the user's contacts joined Telegram
type PremiumFeatureAdvancedChatManagement struct {
	meta
}

func (entity *PremiumFeatureAdvancedChatManagement) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureAdvancedChatManagement

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureAdvancedChatManagement) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureAdvancedChatManagement) GetConstructor() string {
	return ConstructorPremiumFeatureAdvancedChatManagement
}

func (*PremiumFeatureAdvancedChatManagement) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureAdvancedChatManagement
}

// A badge in the user's profile
type PremiumFeatureProfileBadge struct {
	meta
}

func (entity *PremiumFeatureProfileBadge) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureProfileBadge

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureProfileBadge) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureProfileBadge) GetConstructor() string {
	return ConstructorPremiumFeatureProfileBadge
}

func (*PremiumFeatureProfileBadge) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureProfileBadge
}

// The ability to show an emoji status along with the user's name
type PremiumFeatureEmojiStatus struct {
	meta
}

func (entity *PremiumFeatureEmojiStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureEmojiStatus

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureEmojiStatus) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureEmojiStatus) GetConstructor() string {
	return ConstructorPremiumFeatureEmojiStatus
}

func (*PremiumFeatureEmojiStatus) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureEmojiStatus
}

// Profile photo animation on message and chat screens
type PremiumFeatureAnimatedProfilePhoto struct {
	meta
}

func (entity *PremiumFeatureAnimatedProfilePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureAnimatedProfilePhoto

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureAnimatedProfilePhoto) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureAnimatedProfilePhoto) GetConstructor() string {
	return ConstructorPremiumFeatureAnimatedProfilePhoto
}

func (*PremiumFeatureAnimatedProfilePhoto) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureAnimatedProfilePhoto
}

// The ability to set a custom emoji as a forum topic icon
type PremiumFeatureForumTopicIcon struct {
	meta
}

func (entity *PremiumFeatureForumTopicIcon) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureForumTopicIcon

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureForumTopicIcon) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureForumTopicIcon) GetConstructor() string {
	return ConstructorPremiumFeatureForumTopicIcon
}

func (*PremiumFeatureForumTopicIcon) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureForumTopicIcon
}

// Allowed to set a premium application icons
type PremiumFeatureAppIcons struct {
	meta
}

func (entity *PremiumFeatureAppIcons) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureAppIcons

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureAppIcons) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureAppIcons) GetConstructor() string {
	return ConstructorPremiumFeatureAppIcons
}

func (*PremiumFeatureAppIcons) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureAppIcons
}

// Allowed to translate chat messages real-time
type PremiumFeatureRealTimeChatTranslation struct {
	meta
}

func (entity *PremiumFeatureRealTimeChatTranslation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureRealTimeChatTranslation

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureRealTimeChatTranslation) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureRealTimeChatTranslation) GetConstructor() string {
	return ConstructorPremiumFeatureRealTimeChatTranslation
}

func (*PremiumFeatureRealTimeChatTranslation) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureRealTimeChatTranslation
}

// Allowed to use many additional features for stories
type PremiumFeatureUpgradedStories struct {
	meta
}

func (entity *PremiumFeatureUpgradedStories) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureUpgradedStories

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureUpgradedStories) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureUpgradedStories) GetConstructor() string {
	return ConstructorPremiumFeatureUpgradedStories
}

func (*PremiumFeatureUpgradedStories) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureUpgradedStories
}

// The ability to boost chats
type PremiumFeatureChatBoost struct {
	meta
}

func (entity *PremiumFeatureChatBoost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureChatBoost

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureChatBoost) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureChatBoost) GetConstructor() string {
	return ConstructorPremiumFeatureChatBoost
}

func (*PremiumFeatureChatBoost) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureChatBoost
}

// The ability to choose accent color for replies and user profile
type PremiumFeatureAccentColor struct {
	meta
}

func (entity *PremiumFeatureAccentColor) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureAccentColor

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureAccentColor) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureAccentColor) GetConstructor() string {
	return ConstructorPremiumFeatureAccentColor
}

func (*PremiumFeatureAccentColor) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureAccentColor
}

// The ability to set private chat background for both users
type PremiumFeatureBackgroundForBoth struct {
	meta
}

func (entity *PremiumFeatureBackgroundForBoth) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureBackgroundForBoth

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureBackgroundForBoth) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureBackgroundForBoth) GetConstructor() string {
	return ConstructorPremiumFeatureBackgroundForBoth
}

func (*PremiumFeatureBackgroundForBoth) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureBackgroundForBoth
}

// The ability to use tags in Saved Messages
type PremiumFeatureSavedMessagesTags struct {
	meta
}

func (entity *PremiumFeatureSavedMessagesTags) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureSavedMessagesTags

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureSavedMessagesTags) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureSavedMessagesTags) GetConstructor() string {
	return ConstructorPremiumFeatureSavedMessagesTags
}

func (*PremiumFeatureSavedMessagesTags) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureSavedMessagesTags
}

// The ability to disallow incoming voice and video note messages in private chats using setUserPrivacySettingRules with userPrivacySettingAllowPrivateVoiceAndVideoNoteMessages and to restrict incoming messages from non-contacts using setNewChatPrivacySettings
type PremiumFeatureMessagePrivacy struct {
	meta
}

func (entity *PremiumFeatureMessagePrivacy) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureMessagePrivacy

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureMessagePrivacy) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureMessagePrivacy) GetConstructor() string {
	return ConstructorPremiumFeatureMessagePrivacy
}

func (*PremiumFeatureMessagePrivacy) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureMessagePrivacy
}

// The ability to view last seen and read times of other users even they can't view last seen or read time for the current user
type PremiumFeatureLastSeenTimes struct {
	meta
}

func (entity *PremiumFeatureLastSeenTimes) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureLastSeenTimes

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureLastSeenTimes) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureLastSeenTimes) GetConstructor() string {
	return ConstructorPremiumFeatureLastSeenTimes
}

func (*PremiumFeatureLastSeenTimes) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureLastSeenTimes
}

// The ability to use Business features
type PremiumFeatureBusiness struct {
	meta
}

func (entity *PremiumFeatureBusiness) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureBusiness

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureBusiness) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureBusiness) GetConstructor() string {
	return ConstructorPremiumFeatureBusiness
}

func (*PremiumFeatureBusiness) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureBusiness
}

// The ability to use all available message effects
type PremiumFeatureMessageEffects struct {
	meta
}

func (entity *PremiumFeatureMessageEffects) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatureMessageEffects

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatureMessageEffects) GetType() string {
	return TypePremiumFeature
}

func (*PremiumFeatureMessageEffects) GetConstructor() string {
	return ConstructorPremiumFeatureMessageEffects
}

func (*PremiumFeatureMessageEffects) PremiumFeatureConstructor() string {
	return ConstructorPremiumFeatureMessageEffects
}

// The ability to set location
type BusinessFeatureLocation struct {
	meta
}

func (entity *BusinessFeatureLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureLocation

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureLocation) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureLocation) GetConstructor() string {
	return ConstructorBusinessFeatureLocation
}

func (*BusinessFeatureLocation) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureLocation
}

// The ability to set opening hours
type BusinessFeatureOpeningHours struct {
	meta
}

func (entity *BusinessFeatureOpeningHours) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureOpeningHours

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureOpeningHours) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureOpeningHours) GetConstructor() string {
	return ConstructorBusinessFeatureOpeningHours
}

func (*BusinessFeatureOpeningHours) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureOpeningHours
}

// The ability to use quick replies
type BusinessFeatureQuickReplies struct {
	meta
}

func (entity *BusinessFeatureQuickReplies) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureQuickReplies

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureQuickReplies) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureQuickReplies) GetConstructor() string {
	return ConstructorBusinessFeatureQuickReplies
}

func (*BusinessFeatureQuickReplies) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureQuickReplies
}

// The ability to set up a greeting message
type BusinessFeatureGreetingMessage struct {
	meta
}

func (entity *BusinessFeatureGreetingMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureGreetingMessage

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureGreetingMessage) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureGreetingMessage) GetConstructor() string {
	return ConstructorBusinessFeatureGreetingMessage
}

func (*BusinessFeatureGreetingMessage) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureGreetingMessage
}

// The ability to set up an away message
type BusinessFeatureAwayMessage struct {
	meta
}

func (entity *BusinessFeatureAwayMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureAwayMessage

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureAwayMessage) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureAwayMessage) GetConstructor() string {
	return ConstructorBusinessFeatureAwayMessage
}

func (*BusinessFeatureAwayMessage) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureAwayMessage
}

// The ability to create links to the business account with predefined message text
type BusinessFeatureAccountLinks struct {
	meta
}

func (entity *BusinessFeatureAccountLinks) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureAccountLinks

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureAccountLinks) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureAccountLinks) GetConstructor() string {
	return ConstructorBusinessFeatureAccountLinks
}

func (*BusinessFeatureAccountLinks) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureAccountLinks
}

// The ability to customize start page
type BusinessFeatureStartPage struct {
	meta
}

func (entity *BusinessFeatureStartPage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureStartPage

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureStartPage) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureStartPage) GetConstructor() string {
	return ConstructorBusinessFeatureStartPage
}

func (*BusinessFeatureStartPage) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureStartPage
}

// The ability to connect a bot to the account
type BusinessFeatureBots struct {
	meta
}

func (entity *BusinessFeatureBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureBots

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureBots) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureBots) GetConstructor() string {
	return ConstructorBusinessFeatureBots
}

func (*BusinessFeatureBots) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureBots
}

// The ability to show an emoji status along with the business name
type BusinessFeatureEmojiStatus struct {
	meta
}

func (entity *BusinessFeatureEmojiStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureEmojiStatus

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureEmojiStatus) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureEmojiStatus) GetConstructor() string {
	return ConstructorBusinessFeatureEmojiStatus
}

func (*BusinessFeatureEmojiStatus) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureEmojiStatus
}

// The ability to display folder names for each chat in the chat list
type BusinessFeatureChatFolderTags struct {
	meta
}

func (entity *BusinessFeatureChatFolderTags) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureChatFolderTags

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureChatFolderTags) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureChatFolderTags) GetConstructor() string {
	return ConstructorBusinessFeatureChatFolderTags
}

func (*BusinessFeatureChatFolderTags) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureChatFolderTags
}

// Allowed to use many additional features for stories
type BusinessFeatureUpgradedStories struct {
	meta
}

func (entity *BusinessFeatureUpgradedStories) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatureUpgradedStories

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatureUpgradedStories) GetType() string {
	return TypeBusinessFeature
}

func (*BusinessFeatureUpgradedStories) GetConstructor() string {
	return ConstructorBusinessFeatureUpgradedStories
}

func (*BusinessFeatureUpgradedStories) BusinessFeatureConstructor() string {
	return ConstructorBusinessFeatureUpgradedStories
}

// Stories of the current user are displayed before stories of non-Premium contacts, supergroups, and channels
type PremiumStoryFeaturePriorityOrder struct {
	meta
}

func (entity *PremiumStoryFeaturePriorityOrder) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumStoryFeaturePriorityOrder

	return json.Marshal((*stub)(entity))
}

func (*PremiumStoryFeaturePriorityOrder) GetType() string {
	return TypePremiumStoryFeature
}

func (*PremiumStoryFeaturePriorityOrder) GetConstructor() string {
	return ConstructorPremiumStoryFeaturePriorityOrder
}

func (*PremiumStoryFeaturePriorityOrder) PremiumStoryFeatureConstructor() string {
	return ConstructorPremiumStoryFeaturePriorityOrder
}

// The ability to hide the fact that the user viewed other's stories
type PremiumStoryFeatureStealthMode struct {
	meta
}

func (entity *PremiumStoryFeatureStealthMode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumStoryFeatureStealthMode

	return json.Marshal((*stub)(entity))
}

func (*PremiumStoryFeatureStealthMode) GetType() string {
	return TypePremiumStoryFeature
}

func (*PremiumStoryFeatureStealthMode) GetConstructor() string {
	return ConstructorPremiumStoryFeatureStealthMode
}

func (*PremiumStoryFeatureStealthMode) PremiumStoryFeatureConstructor() string {
	return ConstructorPremiumStoryFeatureStealthMode
}

// The ability to check who opened the current user's stories after they expire
type PremiumStoryFeaturePermanentViewsHistory struct {
	meta
}

func (entity *PremiumStoryFeaturePermanentViewsHistory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumStoryFeaturePermanentViewsHistory

	return json.Marshal((*stub)(entity))
}

func (*PremiumStoryFeaturePermanentViewsHistory) GetType() string {
	return TypePremiumStoryFeature
}

func (*PremiumStoryFeaturePermanentViewsHistory) GetConstructor() string {
	return ConstructorPremiumStoryFeaturePermanentViewsHistory
}

func (*PremiumStoryFeaturePermanentViewsHistory) PremiumStoryFeatureConstructor() string {
	return ConstructorPremiumStoryFeaturePermanentViewsHistory
}

// The ability to set custom expiration duration for stories
type PremiumStoryFeatureCustomExpirationDuration struct {
	meta
}

func (entity *PremiumStoryFeatureCustomExpirationDuration) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumStoryFeatureCustomExpirationDuration

	return json.Marshal((*stub)(entity))
}

func (*PremiumStoryFeatureCustomExpirationDuration) GetType() string {
	return TypePremiumStoryFeature
}

func (*PremiumStoryFeatureCustomExpirationDuration) GetConstructor() string {
	return ConstructorPremiumStoryFeatureCustomExpirationDuration
}

func (*PremiumStoryFeatureCustomExpirationDuration) PremiumStoryFeatureConstructor() string {
	return ConstructorPremiumStoryFeatureCustomExpirationDuration
}

// The ability to save other's unprotected stories
type PremiumStoryFeatureSaveStories struct {
	meta
}

func (entity *PremiumStoryFeatureSaveStories) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumStoryFeatureSaveStories

	return json.Marshal((*stub)(entity))
}

func (*PremiumStoryFeatureSaveStories) GetType() string {
	return TypePremiumStoryFeature
}

func (*PremiumStoryFeatureSaveStories) GetConstructor() string {
	return ConstructorPremiumStoryFeatureSaveStories
}

func (*PremiumStoryFeatureSaveStories) PremiumStoryFeatureConstructor() string {
	return ConstructorPremiumStoryFeatureSaveStories
}

// The ability to use links and formatting in story caption, and use inputStoryAreaTypeLink areas
type PremiumStoryFeatureLinksAndFormatting struct {
	meta
}

func (entity *PremiumStoryFeatureLinksAndFormatting) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumStoryFeatureLinksAndFormatting

	return json.Marshal((*stub)(entity))
}

func (*PremiumStoryFeatureLinksAndFormatting) GetType() string {
	return TypePremiumStoryFeature
}

func (*PremiumStoryFeatureLinksAndFormatting) GetConstructor() string {
	return ConstructorPremiumStoryFeatureLinksAndFormatting
}

func (*PremiumStoryFeatureLinksAndFormatting) PremiumStoryFeatureConstructor() string {
	return ConstructorPremiumStoryFeatureLinksAndFormatting
}

// The ability to choose better quality for viewed stories
type PremiumStoryFeatureVideoQuality struct {
	meta
}

func (entity *PremiumStoryFeatureVideoQuality) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumStoryFeatureVideoQuality

	return json.Marshal((*stub)(entity))
}

func (*PremiumStoryFeatureVideoQuality) GetType() string {
	return TypePremiumStoryFeature
}

func (*PremiumStoryFeatureVideoQuality) GetConstructor() string {
	return ConstructorPremiumStoryFeatureVideoQuality
}

func (*PremiumStoryFeatureVideoQuality) PremiumStoryFeatureConstructor() string {
	return ConstructorPremiumStoryFeatureVideoQuality
}

// Contains information about a limit, increased for Premium users
type PremiumLimit struct {
	meta
	// The type of the limit
	Type PremiumLimitType `json:"type"`
	// Default value of the limit
	DefaultValue int32 `json:"default_value"`
	// Value of the limit for Premium users
	PremiumValue int32 `json:"premium_value"`
}

func (entity *PremiumLimit) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumLimit

	return json.Marshal((*stub)(entity))
}

func (*PremiumLimit) GetType() string {
	return TypePremiumLimit
}

func (*PremiumLimit) GetConstructor() string {
	return ConstructorPremiumLimit
}

func (premiumLimit *PremiumLimit) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type         json.RawMessage `json:"type"`
		DefaultValue int32           `json:"default_value"`
		PremiumValue int32           `json:"premium_value"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	premiumLimit.DefaultValue = tmp.DefaultValue
	premiumLimit.PremiumValue = tmp.PremiumValue

	fieldType, _ := UnmarshalPremiumLimitType(tmp.Type)
	premiumLimit.Type = fieldType

	return nil
}

// Contains information about features, available to Premium users
type PremiumFeatures struct {
	meta
	// The list of available features
	Features []PremiumFeature `json:"features"`
	// The list of limits, increased for Premium users
	Limits []*PremiumLimit `json:"limits"`
	// An internal link to be opened to pay for Telegram Premium if store payment isn't possible; may be null if direct payment isn't available
	PaymentLink InternalLinkType `json:"payment_link"`
}

func (entity *PremiumFeatures) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeatures

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeatures) GetType() string {
	return TypePremiumFeatures
}

func (*PremiumFeatures) GetConstructor() string {
	return ConstructorPremiumFeatures
}

func (premiumFeatures *PremiumFeatures) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Features    []json.RawMessage `json:"features"`
		Limits      []*PremiumLimit   `json:"limits"`
		PaymentLink json.RawMessage   `json:"payment_link"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	premiumFeatures.Limits = tmp.Limits

	fieldFeatures, _ := UnmarshalListOfPremiumFeature(tmp.Features)
	premiumFeatures.Features = fieldFeatures

	fieldPaymentLink, _ := UnmarshalInternalLinkType(tmp.PaymentLink)
	premiumFeatures.PaymentLink = fieldPaymentLink

	return nil
}

// Contains information about features, available to Business user accounts
type BusinessFeatures struct {
	meta
	// The list of available business features
	Features []BusinessFeature `json:"features"`
}

func (entity *BusinessFeatures) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeatures

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeatures) GetType() string {
	return TypeBusinessFeatures
}

func (*BusinessFeatures) GetConstructor() string {
	return ConstructorBusinessFeatures
}

func (businessFeatures *BusinessFeatures) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Features []json.RawMessage `json:"features"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldFeatures, _ := UnmarshalListOfBusinessFeature(tmp.Features)
	businessFeatures.Features = fieldFeatures

	return nil
}

// A limit was exceeded
type PremiumSourceLimitExceeded struct {
	meta
	// Type of the exceeded limit
	LimitType PremiumLimitType `json:"limit_type"`
}

func (entity *PremiumSourceLimitExceeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumSourceLimitExceeded

	return json.Marshal((*stub)(entity))
}

func (*PremiumSourceLimitExceeded) GetType() string {
	return TypePremiumSource
}

func (*PremiumSourceLimitExceeded) GetConstructor() string {
	return ConstructorPremiumSourceLimitExceeded
}

func (*PremiumSourceLimitExceeded) PremiumSourceConstructor() string {
	return ConstructorPremiumSourceLimitExceeded
}

func (premiumSourceLimitExceeded *PremiumSourceLimitExceeded) UnmarshalJSON(data []byte) error {
	var tmp struct {
		LimitType json.RawMessage `json:"limit_type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldLimitType, _ := UnmarshalPremiumLimitType(tmp.LimitType)
	premiumSourceLimitExceeded.LimitType = fieldLimitType

	return nil
}

// A user tried to use a Premium feature
type PremiumSourceFeature struct {
	meta
	// The used feature
	Feature PremiumFeature `json:"feature"`
}

func (entity *PremiumSourceFeature) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumSourceFeature

	return json.Marshal((*stub)(entity))
}

func (*PremiumSourceFeature) GetType() string {
	return TypePremiumSource
}

func (*PremiumSourceFeature) GetConstructor() string {
	return ConstructorPremiumSourceFeature
}

func (*PremiumSourceFeature) PremiumSourceConstructor() string {
	return ConstructorPremiumSourceFeature
}

func (premiumSourceFeature *PremiumSourceFeature) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Feature json.RawMessage `json:"feature"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldFeature, _ := UnmarshalPremiumFeature(tmp.Feature)
	premiumSourceFeature.Feature = fieldFeature

	return nil
}

// A user tried to use a Business feature
type PremiumSourceBusinessFeature struct {
	meta
	// The used feature; pass null if none specific feature was used
	Feature BusinessFeature `json:"feature"`
}

func (entity *PremiumSourceBusinessFeature) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumSourceBusinessFeature

	return json.Marshal((*stub)(entity))
}

func (*PremiumSourceBusinessFeature) GetType() string {
	return TypePremiumSource
}

func (*PremiumSourceBusinessFeature) GetConstructor() string {
	return ConstructorPremiumSourceBusinessFeature
}

func (*PremiumSourceBusinessFeature) PremiumSourceConstructor() string {
	return ConstructorPremiumSourceBusinessFeature
}

func (premiumSourceBusinessFeature *PremiumSourceBusinessFeature) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Feature json.RawMessage `json:"feature"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldFeature, _ := UnmarshalBusinessFeature(tmp.Feature)
	premiumSourceBusinessFeature.Feature = fieldFeature

	return nil
}

// A user tried to use a Premium story feature
type PremiumSourceStoryFeature struct {
	meta
	// The used feature
	Feature PremiumStoryFeature `json:"feature"`
}

func (entity *PremiumSourceStoryFeature) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumSourceStoryFeature

	return json.Marshal((*stub)(entity))
}

func (*PremiumSourceStoryFeature) GetType() string {
	return TypePremiumSource
}

func (*PremiumSourceStoryFeature) GetConstructor() string {
	return ConstructorPremiumSourceStoryFeature
}

func (*PremiumSourceStoryFeature) PremiumSourceConstructor() string {
	return ConstructorPremiumSourceStoryFeature
}

func (premiumSourceStoryFeature *PremiumSourceStoryFeature) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Feature json.RawMessage `json:"feature"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldFeature, _ := UnmarshalPremiumStoryFeature(tmp.Feature)
	premiumSourceStoryFeature.Feature = fieldFeature

	return nil
}

// A user opened an internal link of the type internalLinkTypePremiumFeatures
type PremiumSourceLink struct {
	meta
	// The referrer from the link
	Referrer string `json:"referrer"`
}

func (entity *PremiumSourceLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumSourceLink

	return json.Marshal((*stub)(entity))
}

func (*PremiumSourceLink) GetType() string {
	return TypePremiumSource
}

func (*PremiumSourceLink) GetConstructor() string {
	return ConstructorPremiumSourceLink
}

func (*PremiumSourceLink) PremiumSourceConstructor() string {
	return ConstructorPremiumSourceLink
}

// A user opened the Premium features screen from settings
type PremiumSourceSettings struct {
	meta
}

func (entity *PremiumSourceSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumSourceSettings

	return json.Marshal((*stub)(entity))
}

func (*PremiumSourceSettings) GetType() string {
	return TypePremiumSource
}

func (*PremiumSourceSettings) GetConstructor() string {
	return ConstructorPremiumSourceSettings
}

func (*PremiumSourceSettings) PremiumSourceConstructor() string {
	return ConstructorPremiumSourceSettings
}

// Describes a promotion animation for a Premium feature
type PremiumFeaturePromotionAnimation struct {
	meta
	// Premium feature
	Feature PremiumFeature `json:"feature"`
	// Promotion animation for the feature
	Animation *Animation `json:"animation"`
}

func (entity *PremiumFeaturePromotionAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumFeaturePromotionAnimation

	return json.Marshal((*stub)(entity))
}

func (*PremiumFeaturePromotionAnimation) GetType() string {
	return TypePremiumFeaturePromotionAnimation
}

func (*PremiumFeaturePromotionAnimation) GetConstructor() string {
	return ConstructorPremiumFeaturePromotionAnimation
}

func (premiumFeaturePromotionAnimation *PremiumFeaturePromotionAnimation) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Feature   json.RawMessage `json:"feature"`
		Animation *Animation      `json:"animation"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	premiumFeaturePromotionAnimation.Animation = tmp.Animation

	fieldFeature, _ := UnmarshalPremiumFeature(tmp.Feature)
	premiumFeaturePromotionAnimation.Feature = fieldFeature

	return nil
}

// Describes a promotion animation for a Business feature
type BusinessFeaturePromotionAnimation struct {
	meta
	// Business feature
	Feature BusinessFeature `json:"feature"`
	// Promotion animation for the feature
	Animation *Animation `json:"animation"`
}

func (entity *BusinessFeaturePromotionAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BusinessFeaturePromotionAnimation

	return json.Marshal((*stub)(entity))
}

func (*BusinessFeaturePromotionAnimation) GetType() string {
	return TypeBusinessFeaturePromotionAnimation
}

func (*BusinessFeaturePromotionAnimation) GetConstructor() string {
	return ConstructorBusinessFeaturePromotionAnimation
}

func (businessFeaturePromotionAnimation *BusinessFeaturePromotionAnimation) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Feature   json.RawMessage `json:"feature"`
		Animation *Animation      `json:"animation"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	businessFeaturePromotionAnimation.Animation = tmp.Animation

	fieldFeature, _ := UnmarshalBusinessFeature(tmp.Feature)
	businessFeaturePromotionAnimation.Feature = fieldFeature

	return nil
}

// Contains state of Telegram Premium subscription and promotion videos for Premium features
type PremiumState struct {
	meta
	// Text description of the state of the current Premium subscription; may be empty if the current user has no Telegram Premium subscription
	State *FormattedText `json:"state"`
	// The list of available options for buying Telegram Premium
	PaymentOptions []*PremiumStatePaymentOption `json:"payment_options"`
	// The list of available promotion animations for Premium features
	Animations []*PremiumFeaturePromotionAnimation `json:"animations"`
	// The list of available promotion animations for Business features
	BusinessAnimations []*BusinessFeaturePromotionAnimation `json:"business_animations"`
}

func (entity *PremiumState) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PremiumState

	return json.Marshal((*stub)(entity))
}

func (*PremiumState) GetType() string {
	return TypePremiumState
}

func (*PremiumState) GetConstructor() string {
	return ConstructorPremiumState
}

// The user subscribing to Telegram Premium
type StorePaymentPurposePremiumSubscription struct {
	meta
	// Pass true if this is a restore of a Telegram Premium purchase; only for App Store
	IsRestore bool `json:"is_restore"`
	// Pass true if this is an upgrade from a monthly subscription to early subscription; only for App Store
	IsUpgrade bool `json:"is_upgrade"`
}

func (entity *StorePaymentPurposePremiumSubscription) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StorePaymentPurposePremiumSubscription

	return json.Marshal((*stub)(entity))
}

func (*StorePaymentPurposePremiumSubscription) GetType() string {
	return TypeStorePaymentPurpose
}

func (*StorePaymentPurposePremiumSubscription) GetConstructor() string {
	return ConstructorStorePaymentPurposePremiumSubscription
}

func (*StorePaymentPurposePremiumSubscription) StorePaymentPurposeConstructor() string {
	return ConstructorStorePaymentPurposePremiumSubscription
}

// The user creating Telegram Premium gift codes for other users
type StorePaymentPurposePremiumGiftCodes struct {
	meta
	// Identifier of the supergroup or channel chat, which will be automatically boosted by the users for duration of the Premium subscription and which is administered by the user; 0 if none
	BoostedChatId int64 `json:"boosted_chat_id"`
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Identifiers of the users which can activate the gift codes
	UserIds []int64 `json:"user_ids"`
	// Text to show along with the gift codes; 0-getOption("gift_text_length_max") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed
	Text *FormattedText `json:"text"`
}

func (entity *StorePaymentPurposePremiumGiftCodes) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StorePaymentPurposePremiumGiftCodes

	return json.Marshal((*stub)(entity))
}

func (*StorePaymentPurposePremiumGiftCodes) GetType() string {
	return TypeStorePaymentPurpose
}

func (*StorePaymentPurposePremiumGiftCodes) GetConstructor() string {
	return ConstructorStorePaymentPurposePremiumGiftCodes
}

func (*StorePaymentPurposePremiumGiftCodes) StorePaymentPurposeConstructor() string {
	return ConstructorStorePaymentPurposePremiumGiftCodes
}

// The user creating a Telegram Premium giveaway
type StorePaymentPurposePremiumGiveaway struct {
	meta
	// Giveaway parameters
	Parameters *GiveawayParameters `json:"parameters"`
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
}

func (entity *StorePaymentPurposePremiumGiveaway) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StorePaymentPurposePremiumGiveaway

	return json.Marshal((*stub)(entity))
}

func (*StorePaymentPurposePremiumGiveaway) GetType() string {
	return TypeStorePaymentPurpose
}

func (*StorePaymentPurposePremiumGiveaway) GetConstructor() string {
	return ConstructorStorePaymentPurposePremiumGiveaway
}

func (*StorePaymentPurposePremiumGiveaway) StorePaymentPurposeConstructor() string {
	return ConstructorStorePaymentPurposePremiumGiveaway
}

// The user creating a Telegram Star giveaway
type StorePaymentPurposeStarGiveaway struct {
	meta
	// Giveaway parameters
	Parameters *GiveawayParameters `json:"parameters"`
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// The number of users to receive Telegram Stars
	WinnerCount int32 `json:"winner_count"`
	// The number of Telegram Stars to be distributed through the giveaway
	StarCount int64 `json:"star_count"`
}

func (entity *StorePaymentPurposeStarGiveaway) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StorePaymentPurposeStarGiveaway

	return json.Marshal((*stub)(entity))
}

func (*StorePaymentPurposeStarGiveaway) GetType() string {
	return TypeStorePaymentPurpose
}

func (*StorePaymentPurposeStarGiveaway) GetConstructor() string {
	return ConstructorStorePaymentPurposeStarGiveaway
}

func (*StorePaymentPurposeStarGiveaway) StorePaymentPurposeConstructor() string {
	return ConstructorStorePaymentPurposeStarGiveaway
}

// The user buying Telegram Stars
type StorePaymentPurposeStars struct {
	meta
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Number of bought Telegram Stars
	StarCount int64 `json:"star_count"`
}

func (entity *StorePaymentPurposeStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StorePaymentPurposeStars

	return json.Marshal((*stub)(entity))
}

func (*StorePaymentPurposeStars) GetType() string {
	return TypeStorePaymentPurpose
}

func (*StorePaymentPurposeStars) GetConstructor() string {
	return ConstructorStorePaymentPurposeStars
}

func (*StorePaymentPurposeStars) StorePaymentPurposeConstructor() string {
	return ConstructorStorePaymentPurposeStars
}

// The user buying Telegram Stars for other users
type StorePaymentPurposeGiftedStars struct {
	meta
	// Identifier of the user to which Telegram Stars are gifted
	UserId int64 `json:"user_id"`
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Number of bought Telegram Stars
	StarCount int64 `json:"star_count"`
}

func (entity *StorePaymentPurposeGiftedStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StorePaymentPurposeGiftedStars

	return json.Marshal((*stub)(entity))
}

func (*StorePaymentPurposeGiftedStars) GetType() string {
	return TypeStorePaymentPurpose
}

func (*StorePaymentPurposeGiftedStars) GetConstructor() string {
	return ConstructorStorePaymentPurposeGiftedStars
}

func (*StorePaymentPurposeGiftedStars) StorePaymentPurposeConstructor() string {
	return ConstructorStorePaymentPurposeGiftedStars
}

// The user creating Telegram Premium gift codes for other users
type TelegramPaymentPurposePremiumGiftCodes struct {
	meta
	// Identifier of the supergroup or channel chat, which will be automatically boosted by the users for duration of the Premium subscription and which is administered by the user; 0 if none
	BoostedChatId int64 `json:"boosted_chat_id"`
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Identifiers of the users which can activate the gift codes
	UserIds []int64 `json:"user_ids"`
	// Number of months the Telegram Premium subscription will be active for the users
	MonthCount int32 `json:"month_count"`
	// Text to show along with the gift codes; 0-getOption("gift_text_length_max") characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are allowed
	Text *FormattedText `json:"text"`
}

func (entity *TelegramPaymentPurposePremiumGiftCodes) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TelegramPaymentPurposePremiumGiftCodes

	return json.Marshal((*stub)(entity))
}

func (*TelegramPaymentPurposePremiumGiftCodes) GetType() string {
	return TypeTelegramPaymentPurpose
}

func (*TelegramPaymentPurposePremiumGiftCodes) GetConstructor() string {
	return ConstructorTelegramPaymentPurposePremiumGiftCodes
}

func (*TelegramPaymentPurposePremiumGiftCodes) TelegramPaymentPurposeConstructor() string {
	return ConstructorTelegramPaymentPurposePremiumGiftCodes
}

// The user creating a Telegram Premium giveaway
type TelegramPaymentPurposePremiumGiveaway struct {
	meta
	// Giveaway parameters
	Parameters *GiveawayParameters `json:"parameters"`
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Number of users which will be able to activate the gift codes
	WinnerCount int32 `json:"winner_count"`
	// Number of months the Telegram Premium subscription will be active for the users
	MonthCount int32 `json:"month_count"`
}

func (entity *TelegramPaymentPurposePremiumGiveaway) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TelegramPaymentPurposePremiumGiveaway

	return json.Marshal((*stub)(entity))
}

func (*TelegramPaymentPurposePremiumGiveaway) GetType() string {
	return TypeTelegramPaymentPurpose
}

func (*TelegramPaymentPurposePremiumGiveaway) GetConstructor() string {
	return ConstructorTelegramPaymentPurposePremiumGiveaway
}

func (*TelegramPaymentPurposePremiumGiveaway) TelegramPaymentPurposeConstructor() string {
	return ConstructorTelegramPaymentPurposePremiumGiveaway
}

// The user buying Telegram Stars
type TelegramPaymentPurposeStars struct {
	meta
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Number of bought Telegram Stars
	StarCount int64 `json:"star_count"`
}

func (entity *TelegramPaymentPurposeStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TelegramPaymentPurposeStars

	return json.Marshal((*stub)(entity))
}

func (*TelegramPaymentPurposeStars) GetType() string {
	return TypeTelegramPaymentPurpose
}

func (*TelegramPaymentPurposeStars) GetConstructor() string {
	return ConstructorTelegramPaymentPurposeStars
}

func (*TelegramPaymentPurposeStars) TelegramPaymentPurposeConstructor() string {
	return ConstructorTelegramPaymentPurposeStars
}

// The user buying Telegram Stars for other users
type TelegramPaymentPurposeGiftedStars struct {
	meta
	// Identifier of the user to which Telegram Stars are gifted
	UserId int64 `json:"user_id"`
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// Number of bought Telegram Stars
	StarCount int64 `json:"star_count"`
}

func (entity *TelegramPaymentPurposeGiftedStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TelegramPaymentPurposeGiftedStars

	return json.Marshal((*stub)(entity))
}

func (*TelegramPaymentPurposeGiftedStars) GetType() string {
	return TypeTelegramPaymentPurpose
}

func (*TelegramPaymentPurposeGiftedStars) GetConstructor() string {
	return ConstructorTelegramPaymentPurposeGiftedStars
}

func (*TelegramPaymentPurposeGiftedStars) TelegramPaymentPurposeConstructor() string {
	return ConstructorTelegramPaymentPurposeGiftedStars
}

// The user creating a Telegram Star giveaway
type TelegramPaymentPurposeStarGiveaway struct {
	meta
	// Giveaway parameters
	Parameters *GiveawayParameters `json:"parameters"`
	// ISO 4217 currency code of the payment currency
	Currency string `json:"currency"`
	// Paid amount, in the smallest units of the currency
	Amount int64 `json:"amount"`
	// The number of users to receive Telegram Stars
	WinnerCount int32 `json:"winner_count"`
	// The number of Telegram Stars to be distributed through the giveaway
	StarCount int64 `json:"star_count"`
}

func (entity *TelegramPaymentPurposeStarGiveaway) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TelegramPaymentPurposeStarGiveaway

	return json.Marshal((*stub)(entity))
}

func (*TelegramPaymentPurposeStarGiveaway) GetType() string {
	return TypeTelegramPaymentPurpose
}

func (*TelegramPaymentPurposeStarGiveaway) GetConstructor() string {
	return ConstructorTelegramPaymentPurposeStarGiveaway
}

func (*TelegramPaymentPurposeStarGiveaway) TelegramPaymentPurposeConstructor() string {
	return ConstructorTelegramPaymentPurposeStarGiveaway
}

// The user joins a chat and subscribes to regular payments in Telegram Stars
type TelegramPaymentPurposeJoinChat struct {
	meta
	// Invite link to use
	InviteLink string `json:"invite_link"`
}

func (entity *TelegramPaymentPurposeJoinChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TelegramPaymentPurposeJoinChat

	return json.Marshal((*stub)(entity))
}

func (*TelegramPaymentPurposeJoinChat) GetType() string {
	return TypeTelegramPaymentPurpose
}

func (*TelegramPaymentPurposeJoinChat) GetConstructor() string {
	return ConstructorTelegramPaymentPurposeJoinChat
}

func (*TelegramPaymentPurposeJoinChat) TelegramPaymentPurposeConstructor() string {
	return ConstructorTelegramPaymentPurposeJoinChat
}

// A token for Firebase Cloud Messaging
type DeviceTokenFirebaseCloudMessaging struct {
	meta
	// Device registration token; may be empty to deregister a device
	Token string `json:"token"`
	// True, if push notifications must be additionally encrypted
	Encrypt bool `json:"encrypt"`
}

func (entity *DeviceTokenFirebaseCloudMessaging) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenFirebaseCloudMessaging

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenFirebaseCloudMessaging) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenFirebaseCloudMessaging) GetConstructor() string {
	return ConstructorDeviceTokenFirebaseCloudMessaging
}

func (*DeviceTokenFirebaseCloudMessaging) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenFirebaseCloudMessaging
}

// A token for Apple Push Notification service
type DeviceTokenApplePush struct {
	meta
	// Device token; may be empty to deregister a device
	DeviceToken string `json:"device_token"`
	// True, if App Sandbox is enabled
	IsAppSandbox bool `json:"is_app_sandbox"`
}

func (entity *DeviceTokenApplePush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenApplePush

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenApplePush) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenApplePush) GetConstructor() string {
	return ConstructorDeviceTokenApplePush
}

func (*DeviceTokenApplePush) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenApplePush
}

// A token for Apple Push Notification service VoIP notifications
type DeviceTokenApplePushVoIP struct {
	meta
	// Device token; may be empty to deregister a device
	DeviceToken string `json:"device_token"`
	// True, if App Sandbox is enabled
	IsAppSandbox bool `json:"is_app_sandbox"`
	// True, if push notifications must be additionally encrypted
	Encrypt bool `json:"encrypt"`
}

func (entity *DeviceTokenApplePushVoIP) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenApplePushVoIP

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenApplePushVoIP) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenApplePushVoIP) GetConstructor() string {
	return ConstructorDeviceTokenApplePushVoIP
}

func (*DeviceTokenApplePushVoIP) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenApplePushVoIP
}

// A token for Windows Push Notification Services
type DeviceTokenWindowsPush struct {
	meta
	// The access token that will be used to send notifications; may be empty to deregister a device
	AccessToken string `json:"access_token"`
}

func (entity *DeviceTokenWindowsPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenWindowsPush

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenWindowsPush) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenWindowsPush) GetConstructor() string {
	return ConstructorDeviceTokenWindowsPush
}

func (*DeviceTokenWindowsPush) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenWindowsPush
}

// A token for Microsoft Push Notification Service
type DeviceTokenMicrosoftPush struct {
	meta
	// Push notification channel URI; may be empty to deregister a device
	ChannelUri string `json:"channel_uri"`
}

func (entity *DeviceTokenMicrosoftPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenMicrosoftPush

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenMicrosoftPush) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenMicrosoftPush) GetConstructor() string {
	return ConstructorDeviceTokenMicrosoftPush
}

func (*DeviceTokenMicrosoftPush) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenMicrosoftPush
}

// A token for Microsoft Push Notification Service VoIP channel
type DeviceTokenMicrosoftPushVoIP struct {
	meta
	// Push notification channel URI; may be empty to deregister a device
	ChannelUri string `json:"channel_uri"`
}

func (entity *DeviceTokenMicrosoftPushVoIP) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenMicrosoftPushVoIP

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenMicrosoftPushVoIP) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenMicrosoftPushVoIP) GetConstructor() string {
	return ConstructorDeviceTokenMicrosoftPushVoIP
}

func (*DeviceTokenMicrosoftPushVoIP) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenMicrosoftPushVoIP
}

// A token for web Push API
type DeviceTokenWebPush struct {
	meta
	// Absolute URL exposed by the push service where the application server can send push messages; may be empty to deregister a device
	Endpoint string `json:"endpoint"`
	// Base64url-encoded P-256 elliptic curve Diffie-Hellman public key
	P256dhBase64url string `json:"p256dh_base64url"`
	// Base64url-encoded authentication secret
	AuthBase64url string `json:"auth_base64url"`
}

func (entity *DeviceTokenWebPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenWebPush

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenWebPush) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenWebPush) GetConstructor() string {
	return ConstructorDeviceTokenWebPush
}

func (*DeviceTokenWebPush) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenWebPush
}

// A token for Simple Push API for Firefox OS
type DeviceTokenSimplePush struct {
	meta
	// Absolute URL exposed by the push service where the application server can send push messages; may be empty to deregister a device
	Endpoint string `json:"endpoint"`
}

func (entity *DeviceTokenSimplePush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenSimplePush

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenSimplePush) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenSimplePush) GetConstructor() string {
	return ConstructorDeviceTokenSimplePush
}

func (*DeviceTokenSimplePush) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenSimplePush
}

// A token for Ubuntu Push Client service
type DeviceTokenUbuntuPush struct {
	meta
	// Token; may be empty to deregister a device
	Token string `json:"token"`
}

func (entity *DeviceTokenUbuntuPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenUbuntuPush

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenUbuntuPush) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenUbuntuPush) GetConstructor() string {
	return ConstructorDeviceTokenUbuntuPush
}

func (*DeviceTokenUbuntuPush) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenUbuntuPush
}

// A token for BlackBerry Push Service
type DeviceTokenBlackBerryPush struct {
	meta
	// Token; may be empty to deregister a device
	Token string `json:"token"`
}

func (entity *DeviceTokenBlackBerryPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenBlackBerryPush

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenBlackBerryPush) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenBlackBerryPush) GetConstructor() string {
	return ConstructorDeviceTokenBlackBerryPush
}

func (*DeviceTokenBlackBerryPush) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenBlackBerryPush
}

// A token for Tizen Push Service
type DeviceTokenTizenPush struct {
	meta
	// Push service registration identifier; may be empty to deregister a device
	RegId string `json:"reg_id"`
}

func (entity *DeviceTokenTizenPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenTizenPush

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenTizenPush) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenTizenPush) GetConstructor() string {
	return ConstructorDeviceTokenTizenPush
}

func (*DeviceTokenTizenPush) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenTizenPush
}

// A token for HUAWEI Push Service
type DeviceTokenHuaweiPush struct {
	meta
	// Device registration token; may be empty to deregister a device
	Token string `json:"token"`
	// True, if push notifications must be additionally encrypted
	Encrypt bool `json:"encrypt"`
}

func (entity *DeviceTokenHuaweiPush) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeviceTokenHuaweiPush

	return json.Marshal((*stub)(entity))
}

func (*DeviceTokenHuaweiPush) GetType() string {
	return TypeDeviceToken
}

func (*DeviceTokenHuaweiPush) GetConstructor() string {
	return ConstructorDeviceTokenHuaweiPush
}

func (*DeviceTokenHuaweiPush) DeviceTokenConstructor() string {
	return ConstructorDeviceTokenHuaweiPush
}

// Contains a globally unique push receiver identifier, which can be used to identify which account has received a push notification
type PushReceiverId struct {
	meta
	// The globally unique identifier of push notification subscription
	Id JsonInt64 `json:"id"`
}

func (entity *PushReceiverId) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushReceiverId

	return json.Marshal((*stub)(entity))
}

func (*PushReceiverId) GetType() string {
	return TypePushReceiverId
}

func (*PushReceiverId) GetConstructor() string {
	return ConstructorPushReceiverId
}

// Describes a solid fill of a background
type BackgroundFillSolid struct {
	meta
	// A color of the background in the RGB format
	Color int32 `json:"color"`
}

func (entity *BackgroundFillSolid) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BackgroundFillSolid

	return json.Marshal((*stub)(entity))
}

func (*BackgroundFillSolid) GetType() string {
	return TypeBackgroundFill
}

func (*BackgroundFillSolid) GetConstructor() string {
	return ConstructorBackgroundFillSolid
}

func (*BackgroundFillSolid) BackgroundFillConstructor() string {
	return ConstructorBackgroundFillSolid
}

// Describes a gradient fill of a background
type BackgroundFillGradient struct {
	meta
	// A top color of the background in the RGB format
	TopColor int32 `json:"top_color"`
	// A bottom color of the background in the RGB format
	BottomColor int32 `json:"bottom_color"`
	// Clockwise rotation angle of the gradient, in degrees; 0-359. Must always be divisible by 45
	RotationAngle int32 `json:"rotation_angle"`
}

func (entity *BackgroundFillGradient) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BackgroundFillGradient

	return json.Marshal((*stub)(entity))
}

func (*BackgroundFillGradient) GetType() string {
	return TypeBackgroundFill
}

func (*BackgroundFillGradient) GetConstructor() string {
	return ConstructorBackgroundFillGradient
}

func (*BackgroundFillGradient) BackgroundFillConstructor() string {
	return ConstructorBackgroundFillGradient
}

// Describes a freeform gradient fill of a background
type BackgroundFillFreeformGradient struct {
	meta
	// A list of 3 or 4 colors of the freeform gradient in the RGB format
	Colors []int32 `json:"colors"`
}

func (entity *BackgroundFillFreeformGradient) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BackgroundFillFreeformGradient

	return json.Marshal((*stub)(entity))
}

func (*BackgroundFillFreeformGradient) GetType() string {
	return TypeBackgroundFill
}

func (*BackgroundFillFreeformGradient) GetConstructor() string {
	return ConstructorBackgroundFillFreeformGradient
}

func (*BackgroundFillFreeformGradient) BackgroundFillConstructor() string {
	return ConstructorBackgroundFillFreeformGradient
}

// A wallpaper in JPEG format
type BackgroundTypeWallpaper struct {
	meta
	// True, if the wallpaper must be downscaled to fit in 450x450 square and then box-blurred with radius 12
	IsBlurred bool `json:"is_blurred"`
	// True, if the background needs to be slightly moved when device is tilted
	IsMoving bool `json:"is_moving"`
}

func (entity *BackgroundTypeWallpaper) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BackgroundTypeWallpaper

	return json.Marshal((*stub)(entity))
}

func (*BackgroundTypeWallpaper) GetType() string {
	return TypeBackgroundType
}

func (*BackgroundTypeWallpaper) GetConstructor() string {
	return ConstructorBackgroundTypeWallpaper
}

func (*BackgroundTypeWallpaper) BackgroundTypeConstructor() string {
	return ConstructorBackgroundTypeWallpaper
}

// A PNG or TGV (gzipped subset of SVG with MIME type "application/x-tgwallpattern") pattern to be combined with the background fill chosen by the user
type BackgroundTypePattern struct {
	meta
	// Fill of the background
	Fill BackgroundFill `json:"fill"`
	// Intensity of the pattern when it is shown above the filled background; 0-100
	Intensity int32 `json:"intensity"`
	// True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only
	IsInverted bool `json:"is_inverted"`
	// True, if the background needs to be slightly moved when device is tilted
	IsMoving bool `json:"is_moving"`
}

func (entity *BackgroundTypePattern) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BackgroundTypePattern

	return json.Marshal((*stub)(entity))
}

func (*BackgroundTypePattern) GetType() string {
	return TypeBackgroundType
}

func (*BackgroundTypePattern) GetConstructor() string {
	return ConstructorBackgroundTypePattern
}

func (*BackgroundTypePattern) BackgroundTypeConstructor() string {
	return ConstructorBackgroundTypePattern
}

func (backgroundTypePattern *BackgroundTypePattern) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Fill       json.RawMessage `json:"fill"`
		Intensity  int32           `json:"intensity"`
		IsInverted bool            `json:"is_inverted"`
		IsMoving   bool            `json:"is_moving"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	backgroundTypePattern.Intensity = tmp.Intensity
	backgroundTypePattern.IsInverted = tmp.IsInverted
	backgroundTypePattern.IsMoving = tmp.IsMoving

	fieldFill, _ := UnmarshalBackgroundFill(tmp.Fill)
	backgroundTypePattern.Fill = fieldFill

	return nil
}

// A filled background
type BackgroundTypeFill struct {
	meta
	// The background fill
	Fill BackgroundFill `json:"fill"`
}

func (entity *BackgroundTypeFill) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BackgroundTypeFill

	return json.Marshal((*stub)(entity))
}

func (*BackgroundTypeFill) GetType() string {
	return TypeBackgroundType
}

func (*BackgroundTypeFill) GetConstructor() string {
	return ConstructorBackgroundTypeFill
}

func (*BackgroundTypeFill) BackgroundTypeConstructor() string {
	return ConstructorBackgroundTypeFill
}

func (backgroundTypeFill *BackgroundTypeFill) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Fill json.RawMessage `json:"fill"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldFill, _ := UnmarshalBackgroundFill(tmp.Fill)
	backgroundTypeFill.Fill = fieldFill

	return nil
}

// A background from a chat theme; can be used only as a chat background in channels
type BackgroundTypeChatTheme struct {
	meta
	// Name of the chat theme
	ThemeName string `json:"theme_name"`
}

func (entity *BackgroundTypeChatTheme) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BackgroundTypeChatTheme

	return json.Marshal((*stub)(entity))
}

func (*BackgroundTypeChatTheme) GetType() string {
	return TypeBackgroundType
}

func (*BackgroundTypeChatTheme) GetConstructor() string {
	return ConstructorBackgroundTypeChatTheme
}

func (*BackgroundTypeChatTheme) BackgroundTypeConstructor() string {
	return ConstructorBackgroundTypeChatTheme
}

// A background from a local file
type InputBackgroundLocal struct {
	meta
	// Background file to use. Only inputFileLocal and inputFileGenerated are supported. The file must be in JPEG format for wallpapers and in PNG format for patterns
	Background InputFile `json:"background"`
}

func (entity *InputBackgroundLocal) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputBackgroundLocal

	return json.Marshal((*stub)(entity))
}

func (*InputBackgroundLocal) GetType() string {
	return TypeInputBackground
}

func (*InputBackgroundLocal) GetConstructor() string {
	return ConstructorInputBackgroundLocal
}

func (*InputBackgroundLocal) InputBackgroundConstructor() string {
	return ConstructorInputBackgroundLocal
}

func (inputBackgroundLocal *InputBackgroundLocal) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Background json.RawMessage `json:"background"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldBackground, _ := UnmarshalInputFile(tmp.Background)
	inputBackgroundLocal.Background = fieldBackground

	return nil
}

// A background from the server
type InputBackgroundRemote struct {
	meta
	// The background identifier
	BackgroundId JsonInt64 `json:"background_id"`
}

func (entity *InputBackgroundRemote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputBackgroundRemote

	return json.Marshal((*stub)(entity))
}

func (*InputBackgroundRemote) GetType() string {
	return TypeInputBackground
}

func (*InputBackgroundRemote) GetConstructor() string {
	return ConstructorInputBackgroundRemote
}

func (*InputBackgroundRemote) InputBackgroundConstructor() string {
	return ConstructorInputBackgroundRemote
}

// A background previously set in the chat; for chat backgrounds only
type InputBackgroundPrevious struct {
	meta
	// Identifier of the message with the background
	MessageId int64 `json:"message_id"`
}

func (entity *InputBackgroundPrevious) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputBackgroundPrevious

	return json.Marshal((*stub)(entity))
}

func (*InputBackgroundPrevious) GetType() string {
	return TypeInputBackground
}

func (*InputBackgroundPrevious) GetConstructor() string {
	return ConstructorInputBackgroundPrevious
}

func (*InputBackgroundPrevious) InputBackgroundConstructor() string {
	return ConstructorInputBackgroundPrevious
}

// Describes a chat theme
type ChatTheme struct {
	meta
	// Theme name
	Name string `json:"name"`
	// Theme settings for a light chat theme
	LightSettings *ThemeSettings `json:"light_settings"`
	// Theme settings for a dark chat theme
	DarkSettings *ThemeSettings `json:"dark_settings"`
}

func (entity *ChatTheme) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatTheme

	return json.Marshal((*stub)(entity))
}

func (*ChatTheme) GetType() string {
	return TypeChatTheme
}

func (*ChatTheme) GetConstructor() string {
	return ConstructorChatTheme
}

// Describes a time zone
type TimeZone struct {
	meta
	// Unique time zone identifier
	Id string `json:"id"`
	// Time zone name
	Name string `json:"name"`
	// Current UTC time offset for the time zone
	UtcTimeOffset int32 `json:"utc_time_offset"`
}

func (entity *TimeZone) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TimeZone

	return json.Marshal((*stub)(entity))
}

func (*TimeZone) GetType() string {
	return TypeTimeZone
}

func (*TimeZone) GetConstructor() string {
	return ConstructorTimeZone
}

// Contains a list of time zones
type TimeZones struct {
	meta
	// A list of time zones
	TimeZones []*TimeZone `json:"time_zones"`
}

func (entity *TimeZones) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TimeZones

	return json.Marshal((*stub)(entity))
}

func (*TimeZones) GetType() string {
	return TypeTimeZones
}

func (*TimeZones) GetConstructor() string {
	return ConstructorTimeZones
}

// Contains a list of hashtags
type Hashtags struct {
	meta
	// A list of hashtags
	Hashtags []string `json:"hashtags"`
}

func (entity *Hashtags) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Hashtags

	return json.Marshal((*stub)(entity))
}

func (*Hashtags) GetType() string {
	return TypeHashtags
}

func (*Hashtags) GetConstructor() string {
	return ConstructorHashtags
}

// A story can be sent
type CanSendStoryResultOk struct {
	meta
}

func (entity *CanSendStoryResultOk) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanSendStoryResultOk

	return json.Marshal((*stub)(entity))
}

func (*CanSendStoryResultOk) GetType() string {
	return TypeCanSendStoryResult
}

func (*CanSendStoryResultOk) GetConstructor() string {
	return ConstructorCanSendStoryResultOk
}

func (*CanSendStoryResultOk) CanSendStoryResultConstructor() string {
	return ConstructorCanSendStoryResultOk
}

// The user must subscribe to Telegram Premium to be able to post stories
type CanSendStoryResultPremiumNeeded struct {
	meta
}

func (entity *CanSendStoryResultPremiumNeeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanSendStoryResultPremiumNeeded

	return json.Marshal((*stub)(entity))
}

func (*CanSendStoryResultPremiumNeeded) GetType() string {
	return TypeCanSendStoryResult
}

func (*CanSendStoryResultPremiumNeeded) GetConstructor() string {
	return ConstructorCanSendStoryResultPremiumNeeded
}

func (*CanSendStoryResultPremiumNeeded) CanSendStoryResultConstructor() string {
	return ConstructorCanSendStoryResultPremiumNeeded
}

// The chat must be boosted first by Telegram Premium subscribers to post more stories. Call getChatBoostStatus to get current boost status of the chat
type CanSendStoryResultBoostNeeded struct {
	meta
}

func (entity *CanSendStoryResultBoostNeeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanSendStoryResultBoostNeeded

	return json.Marshal((*stub)(entity))
}

func (*CanSendStoryResultBoostNeeded) GetType() string {
	return TypeCanSendStoryResult
}

func (*CanSendStoryResultBoostNeeded) GetConstructor() string {
	return ConstructorCanSendStoryResultBoostNeeded
}

func (*CanSendStoryResultBoostNeeded) CanSendStoryResultConstructor() string {
	return ConstructorCanSendStoryResultBoostNeeded
}

// The limit for the number of active stories exceeded. The user can buy Telegram Premium, delete an active story, or wait for the oldest story to expire
type CanSendStoryResultActiveStoryLimitExceeded struct {
	meta
}

func (entity *CanSendStoryResultActiveStoryLimitExceeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanSendStoryResultActiveStoryLimitExceeded

	return json.Marshal((*stub)(entity))
}

func (*CanSendStoryResultActiveStoryLimitExceeded) GetType() string {
	return TypeCanSendStoryResult
}

func (*CanSendStoryResultActiveStoryLimitExceeded) GetConstructor() string {
	return ConstructorCanSendStoryResultActiveStoryLimitExceeded
}

func (*CanSendStoryResultActiveStoryLimitExceeded) CanSendStoryResultConstructor() string {
	return ConstructorCanSendStoryResultActiveStoryLimitExceeded
}

// The weekly limit for the number of posted stories exceeded. The user needs to buy Telegram Premium or wait specified time
type CanSendStoryResultWeeklyLimitExceeded struct {
	meta
	// Time left before the user can send the next story
	RetryAfter int32 `json:"retry_after"`
}

func (entity *CanSendStoryResultWeeklyLimitExceeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanSendStoryResultWeeklyLimitExceeded

	return json.Marshal((*stub)(entity))
}

func (*CanSendStoryResultWeeklyLimitExceeded) GetType() string {
	return TypeCanSendStoryResult
}

func (*CanSendStoryResultWeeklyLimitExceeded) GetConstructor() string {
	return ConstructorCanSendStoryResultWeeklyLimitExceeded
}

func (*CanSendStoryResultWeeklyLimitExceeded) CanSendStoryResultConstructor() string {
	return ConstructorCanSendStoryResultWeeklyLimitExceeded
}

// The monthly limit for the number of posted stories exceeded. The user needs to buy Telegram Premium or wait specified time
type CanSendStoryResultMonthlyLimitExceeded struct {
	meta
	// Time left before the user can send the next story
	RetryAfter int32 `json:"retry_after"`
}

func (entity *CanSendStoryResultMonthlyLimitExceeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanSendStoryResultMonthlyLimitExceeded

	return json.Marshal((*stub)(entity))
}

func (*CanSendStoryResultMonthlyLimitExceeded) GetType() string {
	return TypeCanSendStoryResult
}

func (*CanSendStoryResultMonthlyLimitExceeded) GetConstructor() string {
	return ConstructorCanSendStoryResultMonthlyLimitExceeded
}

func (*CanSendStoryResultMonthlyLimitExceeded) CanSendStoryResultConstructor() string {
	return ConstructorCanSendStoryResultMonthlyLimitExceeded
}

// The session can be used
type CanTransferOwnershipResultOk struct {
	meta
}

func (entity *CanTransferOwnershipResultOk) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanTransferOwnershipResultOk

	return json.Marshal((*stub)(entity))
}

func (*CanTransferOwnershipResultOk) GetType() string {
	return TypeCanTransferOwnershipResult
}

func (*CanTransferOwnershipResultOk) GetConstructor() string {
	return ConstructorCanTransferOwnershipResultOk
}

func (*CanTransferOwnershipResultOk) CanTransferOwnershipResultConstructor() string {
	return ConstructorCanTransferOwnershipResultOk
}

// The 2-step verification needs to be enabled first
type CanTransferOwnershipResultPasswordNeeded struct {
	meta
}

func (entity *CanTransferOwnershipResultPasswordNeeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanTransferOwnershipResultPasswordNeeded

	return json.Marshal((*stub)(entity))
}

func (*CanTransferOwnershipResultPasswordNeeded) GetType() string {
	return TypeCanTransferOwnershipResult
}

func (*CanTransferOwnershipResultPasswordNeeded) GetConstructor() string {
	return ConstructorCanTransferOwnershipResultPasswordNeeded
}

func (*CanTransferOwnershipResultPasswordNeeded) CanTransferOwnershipResultConstructor() string {
	return ConstructorCanTransferOwnershipResultPasswordNeeded
}

// The 2-step verification was enabled recently, user needs to wait
type CanTransferOwnershipResultPasswordTooFresh struct {
	meta
	// Time left before the session can be used to transfer ownership of a chat, in seconds
	RetryAfter int32 `json:"retry_after"`
}

func (entity *CanTransferOwnershipResultPasswordTooFresh) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanTransferOwnershipResultPasswordTooFresh

	return json.Marshal((*stub)(entity))
}

func (*CanTransferOwnershipResultPasswordTooFresh) GetType() string {
	return TypeCanTransferOwnershipResult
}

func (*CanTransferOwnershipResultPasswordTooFresh) GetConstructor() string {
	return ConstructorCanTransferOwnershipResultPasswordTooFresh
}

func (*CanTransferOwnershipResultPasswordTooFresh) CanTransferOwnershipResultConstructor() string {
	return ConstructorCanTransferOwnershipResultPasswordTooFresh
}

// The session was created recently, user needs to wait
type CanTransferOwnershipResultSessionTooFresh struct {
	meta
	// Time left before the session can be used to transfer ownership of a chat, in seconds
	RetryAfter int32 `json:"retry_after"`
}

func (entity *CanTransferOwnershipResultSessionTooFresh) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanTransferOwnershipResultSessionTooFresh

	return json.Marshal((*stub)(entity))
}

func (*CanTransferOwnershipResultSessionTooFresh) GetType() string {
	return TypeCanTransferOwnershipResult
}

func (*CanTransferOwnershipResultSessionTooFresh) GetConstructor() string {
	return ConstructorCanTransferOwnershipResultSessionTooFresh
}

func (*CanTransferOwnershipResultSessionTooFresh) CanTransferOwnershipResultConstructor() string {
	return ConstructorCanTransferOwnershipResultSessionTooFresh
}

// The username can be set
type CheckChatUsernameResultOk struct {
	meta
}

func (entity *CheckChatUsernameResultOk) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CheckChatUsernameResultOk

	return json.Marshal((*stub)(entity))
}

func (*CheckChatUsernameResultOk) GetType() string {
	return TypeCheckChatUsernameResult
}

func (*CheckChatUsernameResultOk) GetConstructor() string {
	return ConstructorCheckChatUsernameResultOk
}

func (*CheckChatUsernameResultOk) CheckChatUsernameResultConstructor() string {
	return ConstructorCheckChatUsernameResultOk
}

// The username is invalid
type CheckChatUsernameResultUsernameInvalid struct {
	meta
}

func (entity *CheckChatUsernameResultUsernameInvalid) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CheckChatUsernameResultUsernameInvalid

	return json.Marshal((*stub)(entity))
}

func (*CheckChatUsernameResultUsernameInvalid) GetType() string {
	return TypeCheckChatUsernameResult
}

func (*CheckChatUsernameResultUsernameInvalid) GetConstructor() string {
	return ConstructorCheckChatUsernameResultUsernameInvalid
}

func (*CheckChatUsernameResultUsernameInvalid) CheckChatUsernameResultConstructor() string {
	return ConstructorCheckChatUsernameResultUsernameInvalid
}

// The username is occupied
type CheckChatUsernameResultUsernameOccupied struct {
	meta
}

func (entity *CheckChatUsernameResultUsernameOccupied) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CheckChatUsernameResultUsernameOccupied

	return json.Marshal((*stub)(entity))
}

func (*CheckChatUsernameResultUsernameOccupied) GetType() string {
	return TypeCheckChatUsernameResult
}

func (*CheckChatUsernameResultUsernameOccupied) GetConstructor() string {
	return ConstructorCheckChatUsernameResultUsernameOccupied
}

func (*CheckChatUsernameResultUsernameOccupied) CheckChatUsernameResultConstructor() string {
	return ConstructorCheckChatUsernameResultUsernameOccupied
}

// The username can be purchased at https://fragment.com. Information about the username can be received using getCollectibleItemInfo
type CheckChatUsernameResultUsernamePurchasable struct {
	meta
}

func (entity *CheckChatUsernameResultUsernamePurchasable) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CheckChatUsernameResultUsernamePurchasable

	return json.Marshal((*stub)(entity))
}

func (*CheckChatUsernameResultUsernamePurchasable) GetType() string {
	return TypeCheckChatUsernameResult
}

func (*CheckChatUsernameResultUsernamePurchasable) GetConstructor() string {
	return ConstructorCheckChatUsernameResultUsernamePurchasable
}

func (*CheckChatUsernameResultUsernamePurchasable) CheckChatUsernameResultConstructor() string {
	return ConstructorCheckChatUsernameResultUsernamePurchasable
}

// The user has too many chats with username, one of them must be made private first
type CheckChatUsernameResultPublicChatsTooMany struct {
	meta
}

func (entity *CheckChatUsernameResultPublicChatsTooMany) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CheckChatUsernameResultPublicChatsTooMany

	return json.Marshal((*stub)(entity))
}

func (*CheckChatUsernameResultPublicChatsTooMany) GetType() string {
	return TypeCheckChatUsernameResult
}

func (*CheckChatUsernameResultPublicChatsTooMany) GetConstructor() string {
	return ConstructorCheckChatUsernameResultPublicChatsTooMany
}

func (*CheckChatUsernameResultPublicChatsTooMany) CheckChatUsernameResultConstructor() string {
	return ConstructorCheckChatUsernameResultPublicChatsTooMany
}

// The user can't be a member of a public supergroup
type CheckChatUsernameResultPublicGroupsUnavailable struct {
	meta
}

func (entity *CheckChatUsernameResultPublicGroupsUnavailable) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CheckChatUsernameResultPublicGroupsUnavailable

	return json.Marshal((*stub)(entity))
}

func (*CheckChatUsernameResultPublicGroupsUnavailable) GetType() string {
	return TypeCheckChatUsernameResult
}

func (*CheckChatUsernameResultPublicGroupsUnavailable) GetConstructor() string {
	return ConstructorCheckChatUsernameResultPublicGroupsUnavailable
}

func (*CheckChatUsernameResultPublicGroupsUnavailable) CheckChatUsernameResultConstructor() string {
	return ConstructorCheckChatUsernameResultPublicGroupsUnavailable
}

// The name can be set
type CheckStickerSetNameResultOk struct {
	meta
}

func (entity *CheckStickerSetNameResultOk) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CheckStickerSetNameResultOk

	return json.Marshal((*stub)(entity))
}

func (*CheckStickerSetNameResultOk) GetType() string {
	return TypeCheckStickerSetNameResult
}

func (*CheckStickerSetNameResultOk) GetConstructor() string {
	return ConstructorCheckStickerSetNameResultOk
}

func (*CheckStickerSetNameResultOk) CheckStickerSetNameResultConstructor() string {
	return ConstructorCheckStickerSetNameResultOk
}

// The name is invalid
type CheckStickerSetNameResultNameInvalid struct {
	meta
}

func (entity *CheckStickerSetNameResultNameInvalid) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CheckStickerSetNameResultNameInvalid

	return json.Marshal((*stub)(entity))
}

func (*CheckStickerSetNameResultNameInvalid) GetType() string {
	return TypeCheckStickerSetNameResult
}

func (*CheckStickerSetNameResultNameInvalid) GetConstructor() string {
	return ConstructorCheckStickerSetNameResultNameInvalid
}

func (*CheckStickerSetNameResultNameInvalid) CheckStickerSetNameResultConstructor() string {
	return ConstructorCheckStickerSetNameResultNameInvalid
}

// The name is occupied
type CheckStickerSetNameResultNameOccupied struct {
	meta
}

func (entity *CheckStickerSetNameResultNameOccupied) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CheckStickerSetNameResultNameOccupied

	return json.Marshal((*stub)(entity))
}

func (*CheckStickerSetNameResultNameOccupied) GetType() string {
	return TypeCheckStickerSetNameResult
}

func (*CheckStickerSetNameResultNameOccupied) GetConstructor() string {
	return ConstructorCheckStickerSetNameResultNameOccupied
}

func (*CheckStickerSetNameResultNameOccupied) CheckStickerSetNameResultConstructor() string {
	return ConstructorCheckStickerSetNameResultNameOccupied
}

// The password was reset
type ResetPasswordResultOk struct {
	meta
}

func (entity *ResetPasswordResultOk) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ResetPasswordResultOk

	return json.Marshal((*stub)(entity))
}

func (*ResetPasswordResultOk) GetType() string {
	return TypeResetPasswordResult
}

func (*ResetPasswordResultOk) GetConstructor() string {
	return ConstructorResetPasswordResultOk
}

func (*ResetPasswordResultOk) ResetPasswordResultConstructor() string {
	return ConstructorResetPasswordResultOk
}

// The password reset request is pending
type ResetPasswordResultPending struct {
	meta
	// Point in time (Unix timestamp) after which the password can be reset immediately using resetPassword
	PendingResetDate int32 `json:"pending_reset_date"`
}

func (entity *ResetPasswordResultPending) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ResetPasswordResultPending

	return json.Marshal((*stub)(entity))
}

func (*ResetPasswordResultPending) GetType() string {
	return TypeResetPasswordResult
}

func (*ResetPasswordResultPending) GetConstructor() string {
	return ConstructorResetPasswordResultPending
}

func (*ResetPasswordResultPending) ResetPasswordResultConstructor() string {
	return ConstructorResetPasswordResultPending
}

// The password reset request was declined
type ResetPasswordResultDeclined struct {
	meta
	// Point in time (Unix timestamp) when the password reset can be retried
	RetryDate int32 `json:"retry_date"`
}

func (entity *ResetPasswordResultDeclined) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ResetPasswordResultDeclined

	return json.Marshal((*stub)(entity))
}

func (*ResetPasswordResultDeclined) GetType() string {
	return TypeResetPasswordResult
}

func (*ResetPasswordResultDeclined) GetConstructor() string {
	return ConstructorResetPasswordResultDeclined
}

func (*ResetPasswordResultDeclined) ResetPasswordResultConstructor() string {
	return ConstructorResetPasswordResultDeclined
}

// The messages were exported from a private chat
type MessageFileTypePrivate struct {
	meta
	// Name of the other party; may be empty if unrecognized
	Name string `json:"name"`
}

func (entity *MessageFileTypePrivate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageFileTypePrivate

	return json.Marshal((*stub)(entity))
}

func (*MessageFileTypePrivate) GetType() string {
	return TypeMessageFileType
}

func (*MessageFileTypePrivate) GetConstructor() string {
	return ConstructorMessageFileTypePrivate
}

func (*MessageFileTypePrivate) MessageFileTypeConstructor() string {
	return ConstructorMessageFileTypePrivate
}

// The messages were exported from a group chat
type MessageFileTypeGroup struct {
	meta
	// Title of the group chat; may be empty if unrecognized
	Title string `json:"title"`
}

func (entity *MessageFileTypeGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageFileTypeGroup

	return json.Marshal((*stub)(entity))
}

func (*MessageFileTypeGroup) GetType() string {
	return TypeMessageFileType
}

func (*MessageFileTypeGroup) GetConstructor() string {
	return ConstructorMessageFileTypeGroup
}

func (*MessageFileTypeGroup) MessageFileTypeConstructor() string {
	return ConstructorMessageFileTypeGroup
}

// The messages were exported from a chat of unknown type
type MessageFileTypeUnknown struct {
	meta
}

func (entity *MessageFileTypeUnknown) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageFileTypeUnknown

	return json.Marshal((*stub)(entity))
}

func (*MessageFileTypeUnknown) GetType() string {
	return TypeMessageFileType
}

func (*MessageFileTypeUnknown) GetConstructor() string {
	return ConstructorMessageFileTypeUnknown
}

func (*MessageFileTypeUnknown) MessageFileTypeConstructor() string {
	return ConstructorMessageFileTypeUnknown
}

// A general message with hidden content
type PushMessageContentHidden struct {
	meta
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentHidden) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentHidden

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentHidden) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentHidden) GetConstructor() string {
	return ConstructorPushMessageContentHidden
}

func (*PushMessageContentHidden) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentHidden
}

// An animation message (GIF-style).
type PushMessageContentAnimation struct {
	meta
	// Message content; may be null
	Animation *Animation `json:"animation"`
	// Animation caption
	Caption string `json:"caption"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentAnimation

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentAnimation) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentAnimation) GetConstructor() string {
	return ConstructorPushMessageContentAnimation
}

func (*PushMessageContentAnimation) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentAnimation
}

// An audio message
type PushMessageContentAudio struct {
	meta
	// Message content; may be null
	Audio *Audio `json:"audio"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentAudio

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentAudio) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentAudio) GetConstructor() string {
	return ConstructorPushMessageContentAudio
}

func (*PushMessageContentAudio) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentAudio
}

// A message with a user contact
type PushMessageContentContact struct {
	meta
	// Contact's name
	Name string `json:"name"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentContact) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentContact

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentContact) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentContact) GetConstructor() string {
	return ConstructorPushMessageContentContact
}

func (*PushMessageContentContact) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentContact
}

// A contact has registered with Telegram
type PushMessageContentContactRegistered struct {
	meta
}

func (entity *PushMessageContentContactRegistered) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentContactRegistered

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentContactRegistered) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentContactRegistered) GetConstructor() string {
	return ConstructorPushMessageContentContactRegistered
}

func (*PushMessageContentContactRegistered) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentContactRegistered
}

// A document message (a general file)
type PushMessageContentDocument struct {
	meta
	// Message content; may be null
	Document *Document `json:"document"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentDocument

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentDocument) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentDocument) GetConstructor() string {
	return ConstructorPushMessageContentDocument
}

func (*PushMessageContentDocument) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentDocument
}

// A message with a game
type PushMessageContentGame struct {
	meta
	// Game title, empty for pinned game message
	Title string `json:"title"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentGame

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentGame) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentGame) GetConstructor() string {
	return ConstructorPushMessageContentGame
}

func (*PushMessageContentGame) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentGame
}

// A new high score was achieved in a game
type PushMessageContentGameScore struct {
	meta
	// Game title, empty for pinned message
	Title string `json:"title"`
	// New score, 0 for pinned message
	Score int32 `json:"score"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentGameScore) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentGameScore

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentGameScore) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentGameScore) GetConstructor() string {
	return ConstructorPushMessageContentGameScore
}

func (*PushMessageContentGameScore) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentGameScore
}

// A message with an invoice from a bot
type PushMessageContentInvoice struct {
	meta
	// Product price
	Price string `json:"price"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentInvoice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentInvoice

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentInvoice) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentInvoice) GetConstructor() string {
	return ConstructorPushMessageContentInvoice
}

func (*PushMessageContentInvoice) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentInvoice
}

// A message with a location
type PushMessageContentLocation struct {
	meta
	// True, if the location is live
	IsLive bool `json:"is_live"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentLocation

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentLocation) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentLocation) GetConstructor() string {
	return ConstructorPushMessageContentLocation
}

func (*PushMessageContentLocation) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentLocation
}

// A message with paid media
type PushMessageContentPaidMedia struct {
	meta
	// Number of Telegram Stars needed to buy access to the media in the message; 0 for pinned message
	StarCount int64 `json:"star_count"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentPaidMedia) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentPaidMedia

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentPaidMedia) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentPaidMedia) GetConstructor() string {
	return ConstructorPushMessageContentPaidMedia
}

func (*PushMessageContentPaidMedia) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentPaidMedia
}

// A photo message
type PushMessageContentPhoto struct {
	meta
	// Message content; may be null
	Photo *Photo `json:"photo"`
	// Photo caption
	Caption string `json:"caption"`
	// True, if the photo is secret
	IsSecret bool `json:"is_secret"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentPhoto

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentPhoto) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentPhoto) GetConstructor() string {
	return ConstructorPushMessageContentPhoto
}

func (*PushMessageContentPhoto) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentPhoto
}

// A message with a poll
type PushMessageContentPoll struct {
	meta
	// Poll question
	Question string `json:"question"`
	// True, if the poll is regular and not in quiz mode
	IsRegular bool `json:"is_regular"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentPoll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentPoll

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentPoll) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentPoll) GetConstructor() string {
	return ConstructorPushMessageContentPoll
}

func (*PushMessageContentPoll) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentPoll
}

// A message with a Telegram Premium gift code created for the user
type PushMessageContentPremiumGiftCode struct {
	meta
	// Number of months the Telegram Premium subscription will be active after code activation
	MonthCount int32 `json:"month_count"`
}

func (entity *PushMessageContentPremiumGiftCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentPremiumGiftCode

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentPremiumGiftCode) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentPremiumGiftCode) GetConstructor() string {
	return ConstructorPushMessageContentPremiumGiftCode
}

func (*PushMessageContentPremiumGiftCode) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentPremiumGiftCode
}

// A message with a giveaway
type PushMessageContentGiveaway struct {
	meta
	// Number of users which will receive giveaway prizes; 0 for pinned message
	WinnerCount int32 `json:"winner_count"`
	// Prize of the giveaway; may be null for pinned message
	Prize GiveawayPrize `json:"prize"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentGiveaway) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentGiveaway

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentGiveaway) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentGiveaway) GetConstructor() string {
	return ConstructorPushMessageContentGiveaway
}

func (*PushMessageContentGiveaway) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentGiveaway
}

func (pushMessageContentGiveaway *PushMessageContentGiveaway) UnmarshalJSON(data []byte) error {
	var tmp struct {
		WinnerCount int32           `json:"winner_count"`
		Prize       json.RawMessage `json:"prize"`
		IsPinned    bool            `json:"is_pinned"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	pushMessageContentGiveaway.WinnerCount = tmp.WinnerCount
	pushMessageContentGiveaway.IsPinned = tmp.IsPinned

	fieldPrize, _ := UnmarshalGiveawayPrize(tmp.Prize)
	pushMessageContentGiveaway.Prize = fieldPrize

	return nil
}

// A message with a gift
type PushMessageContentGift struct {
	meta
	// Number of Telegram Stars that sender paid for the gift
	StarCount int64 `json:"star_count"`
}

func (entity *PushMessageContentGift) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentGift

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentGift) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentGift) GetConstructor() string {
	return ConstructorPushMessageContentGift
}

func (*PushMessageContentGift) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentGift
}

// A screenshot of a message in the chat has been taken
type PushMessageContentScreenshotTaken struct {
	meta
}

func (entity *PushMessageContentScreenshotTaken) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentScreenshotTaken

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentScreenshotTaken) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentScreenshotTaken) GetConstructor() string {
	return ConstructorPushMessageContentScreenshotTaken
}

func (*PushMessageContentScreenshotTaken) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentScreenshotTaken
}

// A message with a sticker
type PushMessageContentSticker struct {
	meta
	// Message content; may be null
	Sticker *Sticker `json:"sticker"`
	// Emoji corresponding to the sticker; may be empty
	Emoji string `json:"emoji"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentSticker

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentSticker) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentSticker) GetConstructor() string {
	return ConstructorPushMessageContentSticker
}

func (*PushMessageContentSticker) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentSticker
}

// A message with a story
type PushMessageContentStory struct {
	meta
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentStory

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentStory) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentStory) GetConstructor() string {
	return ConstructorPushMessageContentStory
}

func (*PushMessageContentStory) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentStory
}

// A text message
type PushMessageContentText struct {
	meta
	// Message text
	Text string `json:"text"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentText) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentText

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentText) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentText) GetConstructor() string {
	return ConstructorPushMessageContentText
}

func (*PushMessageContentText) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentText
}

// A video message
type PushMessageContentVideo struct {
	meta
	// Message content; may be null
	Video *Video `json:"video"`
	// Video caption
	Caption string `json:"caption"`
	// True, if the video is secret
	IsSecret bool `json:"is_secret"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentVideo

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentVideo) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentVideo) GetConstructor() string {
	return ConstructorPushMessageContentVideo
}

func (*PushMessageContentVideo) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentVideo
}

// A video note message
type PushMessageContentVideoNote struct {
	meta
	// Message content; may be null
	VideoNote *VideoNote `json:"video_note"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentVideoNote

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentVideoNote) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentVideoNote) GetConstructor() string {
	return ConstructorPushMessageContentVideoNote
}

func (*PushMessageContentVideoNote) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentVideoNote
}

// A voice note message
type PushMessageContentVoiceNote struct {
	meta
	// Message content; may be null
	VoiceNote *VoiceNote `json:"voice_note"`
	// True, if the message is a pinned message with the specified content
	IsPinned bool `json:"is_pinned"`
}

func (entity *PushMessageContentVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentVoiceNote) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentVoiceNote) GetConstructor() string {
	return ConstructorPushMessageContentVoiceNote
}

func (*PushMessageContentVoiceNote) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentVoiceNote
}

// A newly created basic group
type PushMessageContentBasicGroupChatCreate struct {
	meta
}

func (entity *PushMessageContentBasicGroupChatCreate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentBasicGroupChatCreate

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentBasicGroupChatCreate) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentBasicGroupChatCreate) GetConstructor() string {
	return ConstructorPushMessageContentBasicGroupChatCreate
}

func (*PushMessageContentBasicGroupChatCreate) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentBasicGroupChatCreate
}

// New chat members were invited to a group
type PushMessageContentChatAddMembers struct {
	meta
	// Name of the added member
	MemberName string `json:"member_name"`
	// True, if the current user was added to the group
	IsCurrentUser bool `json:"is_current_user"`
	// True, if the user has returned to the group themselves
	IsReturned bool `json:"is_returned"`
}

func (entity *PushMessageContentChatAddMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentChatAddMembers

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentChatAddMembers) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentChatAddMembers) GetConstructor() string {
	return ConstructorPushMessageContentChatAddMembers
}

func (*PushMessageContentChatAddMembers) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentChatAddMembers
}

// A chat photo was edited
type PushMessageContentChatChangePhoto struct {
	meta
}

func (entity *PushMessageContentChatChangePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentChatChangePhoto

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentChatChangePhoto) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentChatChangePhoto) GetConstructor() string {
	return ConstructorPushMessageContentChatChangePhoto
}

func (*PushMessageContentChatChangePhoto) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentChatChangePhoto
}

// A chat title was edited
type PushMessageContentChatChangeTitle struct {
	meta
	// New chat title
	Title string `json:"title"`
}

func (entity *PushMessageContentChatChangeTitle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentChatChangeTitle

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentChatChangeTitle) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentChatChangeTitle) GetConstructor() string {
	return ConstructorPushMessageContentChatChangeTitle
}

func (*PushMessageContentChatChangeTitle) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentChatChangeTitle
}

// A chat background was edited
type PushMessageContentChatSetBackground struct {
	meta
	// True, if the set background is the same as the background of the current user
	IsSame bool `json:"is_same"`
}

func (entity *PushMessageContentChatSetBackground) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentChatSetBackground

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentChatSetBackground) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentChatSetBackground) GetConstructor() string {
	return ConstructorPushMessageContentChatSetBackground
}

func (*PushMessageContentChatSetBackground) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentChatSetBackground
}

// A chat theme was edited
type PushMessageContentChatSetTheme struct {
	meta
	// If non-empty, name of a new theme, set for the chat. Otherwise, the chat theme was reset to the default one
	ThemeName string `json:"theme_name"`
}

func (entity *PushMessageContentChatSetTheme) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentChatSetTheme

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentChatSetTheme) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentChatSetTheme) GetConstructor() string {
	return ConstructorPushMessageContentChatSetTheme
}

func (*PushMessageContentChatSetTheme) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentChatSetTheme
}

// A chat member was deleted
type PushMessageContentChatDeleteMember struct {
	meta
	// Name of the deleted member
	MemberName string `json:"member_name"`
	// True, if the current user was deleted from the group
	IsCurrentUser bool `json:"is_current_user"`
	// True, if the user has left the group themselves
	IsLeft bool `json:"is_left"`
}

func (entity *PushMessageContentChatDeleteMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentChatDeleteMember

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentChatDeleteMember) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentChatDeleteMember) GetConstructor() string {
	return ConstructorPushMessageContentChatDeleteMember
}

func (*PushMessageContentChatDeleteMember) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentChatDeleteMember
}

// A new member joined the chat via an invite link
type PushMessageContentChatJoinByLink struct {
	meta
}

func (entity *PushMessageContentChatJoinByLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentChatJoinByLink

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentChatJoinByLink) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentChatJoinByLink) GetConstructor() string {
	return ConstructorPushMessageContentChatJoinByLink
}

func (*PushMessageContentChatJoinByLink) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentChatJoinByLink
}

// A new member was accepted to the chat by an administrator
type PushMessageContentChatJoinByRequest struct {
	meta
}

func (entity *PushMessageContentChatJoinByRequest) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentChatJoinByRequest

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentChatJoinByRequest) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentChatJoinByRequest) GetConstructor() string {
	return ConstructorPushMessageContentChatJoinByRequest
}

func (*PushMessageContentChatJoinByRequest) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentChatJoinByRequest
}

// A new recurring payment was made by the current user
type PushMessageContentRecurringPayment struct {
	meta
	// The paid amount
	Amount string `json:"amount"`
}

func (entity *PushMessageContentRecurringPayment) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentRecurringPayment

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentRecurringPayment) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentRecurringPayment) GetConstructor() string {
	return ConstructorPushMessageContentRecurringPayment
}

func (*PushMessageContentRecurringPayment) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentRecurringPayment
}

// A profile photo was suggested to the user
type PushMessageContentSuggestProfilePhoto struct {
	meta
}

func (entity *PushMessageContentSuggestProfilePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentSuggestProfilePhoto

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentSuggestProfilePhoto) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentSuggestProfilePhoto) GetConstructor() string {
	return ConstructorPushMessageContentSuggestProfilePhoto
}

func (*PushMessageContentSuggestProfilePhoto) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentSuggestProfilePhoto
}

// A forwarded messages
type PushMessageContentMessageForwards struct {
	meta
	// Number of forwarded messages
	TotalCount int32 `json:"total_count"`
}

func (entity *PushMessageContentMessageForwards) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentMessageForwards

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentMessageForwards) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentMessageForwards) GetConstructor() string {
	return ConstructorPushMessageContentMessageForwards
}

func (*PushMessageContentMessageForwards) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentMessageForwards
}

// A media album
type PushMessageContentMediaAlbum struct {
	meta
	// Number of messages in the album
	TotalCount int32 `json:"total_count"`
	// True, if the album has at least one photo
	HasPhotos bool `json:"has_photos"`
	// True, if the album has at least one video file
	HasVideos bool `json:"has_videos"`
	// True, if the album has at least one audio file
	HasAudios bool `json:"has_audios"`
	// True, if the album has at least one document
	HasDocuments bool `json:"has_documents"`
}

func (entity *PushMessageContentMediaAlbum) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PushMessageContentMediaAlbum

	return json.Marshal((*stub)(entity))
}

func (*PushMessageContentMediaAlbum) GetType() string {
	return TypePushMessageContent
}

func (*PushMessageContentMediaAlbum) GetConstructor() string {
	return ConstructorPushMessageContentMediaAlbum
}

func (*PushMessageContentMediaAlbum) PushMessageContentConstructor() string {
	return ConstructorPushMessageContentMediaAlbum
}

// New message was received
type NotificationTypeNewMessage struct {
	meta
	// The message
	Message *Message `json:"message"`
	// True, if message content must be displayed in notifications
	ShowPreview bool `json:"show_preview"`
}

func (entity *NotificationTypeNewMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationTypeNewMessage

	return json.Marshal((*stub)(entity))
}

func (*NotificationTypeNewMessage) GetType() string {
	return TypeNotificationType
}

func (*NotificationTypeNewMessage) GetConstructor() string {
	return ConstructorNotificationTypeNewMessage
}

func (*NotificationTypeNewMessage) NotificationTypeConstructor() string {
	return ConstructorNotificationTypeNewMessage
}

// New secret chat was created
type NotificationTypeNewSecretChat struct {
	meta
}

func (entity *NotificationTypeNewSecretChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationTypeNewSecretChat

	return json.Marshal((*stub)(entity))
}

func (*NotificationTypeNewSecretChat) GetType() string {
	return TypeNotificationType
}

func (*NotificationTypeNewSecretChat) GetConstructor() string {
	return ConstructorNotificationTypeNewSecretChat
}

func (*NotificationTypeNewSecretChat) NotificationTypeConstructor() string {
	return ConstructorNotificationTypeNewSecretChat
}

// New call was received
type NotificationTypeNewCall struct {
	meta
	// Call identifier
	CallId int32 `json:"call_id"`
}

func (entity *NotificationTypeNewCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationTypeNewCall

	return json.Marshal((*stub)(entity))
}

func (*NotificationTypeNewCall) GetType() string {
	return TypeNotificationType
}

func (*NotificationTypeNewCall) GetConstructor() string {
	return ConstructorNotificationTypeNewCall
}

func (*NotificationTypeNewCall) NotificationTypeConstructor() string {
	return ConstructorNotificationTypeNewCall
}

// New message was received through a push notification
type NotificationTypeNewPushMessage struct {
	meta
	// The message identifier. The message will not be available in the chat history, but the identifier can be used in viewMessages, or as a message to be replied in the same chat
	MessageId int64 `json:"message_id"`
	// Identifier of the sender of the message. Corresponding user or chat may be inaccessible
	SenderId MessageSender `json:"sender_id"`
	// Name of the sender
	SenderName string `json:"sender_name"`
	// True, if the message is outgoing
	IsOutgoing bool `json:"is_outgoing"`
	// Push message content
	Content PushMessageContent `json:"content"`
}

func (entity *NotificationTypeNewPushMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationTypeNewPushMessage

	return json.Marshal((*stub)(entity))
}

func (*NotificationTypeNewPushMessage) GetType() string {
	return TypeNotificationType
}

func (*NotificationTypeNewPushMessage) GetConstructor() string {
	return ConstructorNotificationTypeNewPushMessage
}

func (*NotificationTypeNewPushMessage) NotificationTypeConstructor() string {
	return ConstructorNotificationTypeNewPushMessage
}

func (notificationTypeNewPushMessage *NotificationTypeNewPushMessage) UnmarshalJSON(data []byte) error {
	var tmp struct {
		MessageId  int64           `json:"message_id"`
		SenderId   json.RawMessage `json:"sender_id"`
		SenderName string          `json:"sender_name"`
		IsOutgoing bool            `json:"is_outgoing"`
		Content    json.RawMessage `json:"content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	notificationTypeNewPushMessage.MessageId = tmp.MessageId
	notificationTypeNewPushMessage.SenderName = tmp.SenderName
	notificationTypeNewPushMessage.IsOutgoing = tmp.IsOutgoing

	fieldSenderId, _ := UnmarshalMessageSender(tmp.SenderId)
	notificationTypeNewPushMessage.SenderId = fieldSenderId

	fieldContent, _ := UnmarshalPushMessageContent(tmp.Content)
	notificationTypeNewPushMessage.Content = fieldContent

	return nil
}

// A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with ordinary unread messages
type NotificationGroupTypeMessages struct {
	meta
}

func (entity *NotificationGroupTypeMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationGroupTypeMessages

	return json.Marshal((*stub)(entity))
}

func (*NotificationGroupTypeMessages) GetType() string {
	return TypeNotificationGroupType
}

func (*NotificationGroupTypeMessages) GetConstructor() string {
	return ConstructorNotificationGroupTypeMessages
}

func (*NotificationGroupTypeMessages) NotificationGroupTypeConstructor() string {
	return ConstructorNotificationGroupTypeMessages
}

// A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with unread mentions of the current user, replies to their messages, or a pinned message
type NotificationGroupTypeMentions struct {
	meta
}

func (entity *NotificationGroupTypeMentions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationGroupTypeMentions

	return json.Marshal((*stub)(entity))
}

func (*NotificationGroupTypeMentions) GetType() string {
	return TypeNotificationGroupType
}

func (*NotificationGroupTypeMentions) GetConstructor() string {
	return ConstructorNotificationGroupTypeMentions
}

func (*NotificationGroupTypeMentions) NotificationGroupTypeConstructor() string {
	return ConstructorNotificationGroupTypeMentions
}

// A group containing a notification of type notificationTypeNewSecretChat
type NotificationGroupTypeSecretChat struct {
	meta
}

func (entity *NotificationGroupTypeSecretChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationGroupTypeSecretChat

	return json.Marshal((*stub)(entity))
}

func (*NotificationGroupTypeSecretChat) GetType() string {
	return TypeNotificationGroupType
}

func (*NotificationGroupTypeSecretChat) GetConstructor() string {
	return ConstructorNotificationGroupTypeSecretChat
}

func (*NotificationGroupTypeSecretChat) NotificationGroupTypeConstructor() string {
	return ConstructorNotificationGroupTypeSecretChat
}

// A group containing notifications of type notificationTypeNewCall
type NotificationGroupTypeCalls struct {
	meta
}

func (entity *NotificationGroupTypeCalls) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationGroupTypeCalls

	return json.Marshal((*stub)(entity))
}

func (*NotificationGroupTypeCalls) GetType() string {
	return TypeNotificationGroupType
}

func (*NotificationGroupTypeCalls) GetConstructor() string {
	return ConstructorNotificationGroupTypeCalls
}

func (*NotificationGroupTypeCalls) NotificationGroupTypeConstructor() string {
	return ConstructorNotificationGroupTypeCalls
}

// Describes a notification sound in MP3 format
type NotificationSound struct {
	meta
	// Unique identifier of the notification sound
	Id JsonInt64 `json:"id"`
	// Duration of the sound, in seconds
	Duration int32 `json:"duration"`
	// Point in time (Unix timestamp) when the sound was created
	Date int32 `json:"date"`
	// Title of the notification sound
	Title string `json:"title"`
	// Arbitrary data, defined while the sound was uploaded
	Data string `json:"data"`
	// File containing the sound
	Sound *File `json:"sound"`
}

func (entity *NotificationSound) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationSound

	return json.Marshal((*stub)(entity))
}

func (*NotificationSound) GetType() string {
	return TypeNotificationSound
}

func (*NotificationSound) GetConstructor() string {
	return ConstructorNotificationSound
}

// Contains a list of notification sounds
type NotificationSounds struct {
	meta
	// A list of notification sounds
	NotificationSounds []*NotificationSound `json:"notification_sounds"`
}

func (entity *NotificationSounds) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationSounds

	return json.Marshal((*stub)(entity))
}

func (*NotificationSounds) GetType() string {
	return TypeNotificationSounds
}

func (*NotificationSounds) GetConstructor() string {
	return ConstructorNotificationSounds
}

// Contains information about a notification
type Notification struct {
	meta
	// Unique persistent identifier of this notification
	Id int32 `json:"id"`
	// Notification date
	Date int32 `json:"date"`
	// True, if the notification was explicitly sent without sound
	IsSilent bool `json:"is_silent"`
	// Notification type
	Type NotificationType `json:"type"`
}

func (entity *Notification) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Notification

	return json.Marshal((*stub)(entity))
}

func (*Notification) GetType() string {
	return TypeNotification
}

func (*Notification) GetConstructor() string {
	return ConstructorNotification
}

func (notification *Notification) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id       int32           `json:"id"`
		Date     int32           `json:"date"`
		IsSilent bool            `json:"is_silent"`
		Type     json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	notification.Id = tmp.Id
	notification.Date = tmp.Date
	notification.IsSilent = tmp.IsSilent

	fieldType, _ := UnmarshalNotificationType(tmp.Type)
	notification.Type = fieldType

	return nil
}

// Describes a group of notifications
type NotificationGroup struct {
	meta
	// Unique persistent auto-incremented from 1 identifier of the notification group
	Id int32 `json:"id"`
	// Type of the group
	Type NotificationGroupType `json:"type"`
	// Identifier of a chat to which all notifications in the group belong
	ChatId int64 `json:"chat_id"`
	// Total number of active notifications in the group
	TotalCount int32 `json:"total_count"`
	// The list of active notifications
	Notifications []*Notification `json:"notifications"`
}

func (entity *NotificationGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NotificationGroup

	return json.Marshal((*stub)(entity))
}

func (*NotificationGroup) GetType() string {
	return TypeNotificationGroup
}

func (*NotificationGroup) GetConstructor() string {
	return ConstructorNotificationGroup
}

func (notificationGroup *NotificationGroup) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id            int32           `json:"id"`
		Type          json.RawMessage `json:"type"`
		ChatId        int64           `json:"chat_id"`
		TotalCount    int32           `json:"total_count"`
		Notifications []*Notification `json:"notifications"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	notificationGroup.Id = tmp.Id
	notificationGroup.ChatId = tmp.ChatId
	notificationGroup.TotalCount = tmp.TotalCount
	notificationGroup.Notifications = tmp.Notifications

	fieldType, _ := UnmarshalNotificationGroupType(tmp.Type)
	notificationGroup.Type = fieldType

	return nil
}

// Represents a boolean option
type OptionValueBoolean struct {
	meta
	// The value of the option
	Value bool `json:"value"`
}

func (entity *OptionValueBoolean) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub OptionValueBoolean

	return json.Marshal((*stub)(entity))
}

func (*OptionValueBoolean) GetType() string {
	return TypeOptionValue
}

func (*OptionValueBoolean) GetConstructor() string {
	return ConstructorOptionValueBoolean
}

func (*OptionValueBoolean) OptionValueConstructor() string {
	return ConstructorOptionValueBoolean
}

// Represents an unknown option or an option which has a default value
type OptionValueEmpty struct {
	meta
}

func (entity *OptionValueEmpty) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub OptionValueEmpty

	return json.Marshal((*stub)(entity))
}

func (*OptionValueEmpty) GetType() string {
	return TypeOptionValue
}

func (*OptionValueEmpty) GetConstructor() string {
	return ConstructorOptionValueEmpty
}

func (*OptionValueEmpty) OptionValueConstructor() string {
	return ConstructorOptionValueEmpty
}

// Represents an integer option
type OptionValueInteger struct {
	meta
	// The value of the option
	Value JsonInt64 `json:"value"`
}

func (entity *OptionValueInteger) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub OptionValueInteger

	return json.Marshal((*stub)(entity))
}

func (*OptionValueInteger) GetType() string {
	return TypeOptionValue
}

func (*OptionValueInteger) GetConstructor() string {
	return ConstructorOptionValueInteger
}

func (*OptionValueInteger) OptionValueConstructor() string {
	return ConstructorOptionValueInteger
}

// Represents a string option
type OptionValueString struct {
	meta
	// The value of the option
	Value string `json:"value"`
}

func (entity *OptionValueString) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub OptionValueString

	return json.Marshal((*stub)(entity))
}

func (*OptionValueString) GetType() string {
	return TypeOptionValue
}

func (*OptionValueString) GetConstructor() string {
	return ConstructorOptionValueString
}

func (*OptionValueString) OptionValueConstructor() string {
	return ConstructorOptionValueString
}

// Represents one member of a JSON object
type JsonObjectMember struct {
	meta
	// Member's key
	Key string `json:"key"`
	// Member's value
	Value JsonValue `json:"value"`
}

func (entity *JsonObjectMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub JsonObjectMember

	return json.Marshal((*stub)(entity))
}

func (*JsonObjectMember) GetType() string {
	return TypeJsonObjectMember
}

func (*JsonObjectMember) GetConstructor() string {
	return ConstructorJsonObjectMember
}

func (jsonObjectMember *JsonObjectMember) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Key   string          `json:"key"`
		Value json.RawMessage `json:"value"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	jsonObjectMember.Key = tmp.Key

	fieldValue, _ := UnmarshalJsonValue(tmp.Value)
	jsonObjectMember.Value = fieldValue

	return nil
}

// Represents a null JSON value
type JsonValueNull struct {
	meta
}

func (entity *JsonValueNull) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub JsonValueNull

	return json.Marshal((*stub)(entity))
}

func (*JsonValueNull) GetType() string {
	return TypeJsonValue
}

func (*JsonValueNull) GetConstructor() string {
	return ConstructorJsonValueNull
}

func (*JsonValueNull) JsonValueConstructor() string {
	return ConstructorJsonValueNull
}

// Represents a boolean JSON value
type JsonValueBoolean struct {
	meta
	// The value
	Value bool `json:"value"`
}

func (entity *JsonValueBoolean) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub JsonValueBoolean

	return json.Marshal((*stub)(entity))
}

func (*JsonValueBoolean) GetType() string {
	return TypeJsonValue
}

func (*JsonValueBoolean) GetConstructor() string {
	return ConstructorJsonValueBoolean
}

func (*JsonValueBoolean) JsonValueConstructor() string {
	return ConstructorJsonValueBoolean
}

// Represents a numeric JSON value
type JsonValueNumber struct {
	meta
	// The value
	Value float64 `json:"value"`
}

func (entity *JsonValueNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub JsonValueNumber

	return json.Marshal((*stub)(entity))
}

func (*JsonValueNumber) GetType() string {
	return TypeJsonValue
}

func (*JsonValueNumber) GetConstructor() string {
	return ConstructorJsonValueNumber
}

func (*JsonValueNumber) JsonValueConstructor() string {
	return ConstructorJsonValueNumber
}

// Represents a string JSON value
type JsonValueString struct {
	meta
	// The value
	Value string `json:"value"`
}

func (entity *JsonValueString) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub JsonValueString

	return json.Marshal((*stub)(entity))
}

func (*JsonValueString) GetType() string {
	return TypeJsonValue
}

func (*JsonValueString) GetConstructor() string {
	return ConstructorJsonValueString
}

func (*JsonValueString) JsonValueConstructor() string {
	return ConstructorJsonValueString
}

// Represents a JSON array
type JsonValueArray struct {
	meta
	// The list of array elements
	Values []JsonValue `json:"values"`
}

func (entity *JsonValueArray) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub JsonValueArray

	return json.Marshal((*stub)(entity))
}

func (*JsonValueArray) GetType() string {
	return TypeJsonValue
}

func (*JsonValueArray) GetConstructor() string {
	return ConstructorJsonValueArray
}

func (*JsonValueArray) JsonValueConstructor() string {
	return ConstructorJsonValueArray
}

func (jsonValueArray *JsonValueArray) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Values []json.RawMessage `json:"values"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldValues, _ := UnmarshalListOfJsonValue(tmp.Values)
	jsonValueArray.Values = fieldValues

	return nil
}

// Represents a JSON object
type JsonValueObject struct {
	meta
	// The list of object members
	Members []*JsonObjectMember `json:"members"`
}

func (entity *JsonValueObject) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub JsonValueObject

	return json.Marshal((*stub)(entity))
}

func (*JsonValueObject) GetType() string {
	return TypeJsonValue
}

func (*JsonValueObject) GetConstructor() string {
	return ConstructorJsonValueObject
}

func (*JsonValueObject) JsonValueConstructor() string {
	return ConstructorJsonValueObject
}

// The story can be viewed by everyone
type StoryPrivacySettingsEveryone struct {
	meta
	// Identifiers of the users that can't see the story; always unknown and empty for non-owned stories
	ExceptUserIds []int64 `json:"except_user_ids"`
}

func (entity *StoryPrivacySettingsEveryone) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryPrivacySettingsEveryone

	return json.Marshal((*stub)(entity))
}

func (*StoryPrivacySettingsEveryone) GetType() string {
	return TypeStoryPrivacySettings
}

func (*StoryPrivacySettingsEveryone) GetConstructor() string {
	return ConstructorStoryPrivacySettingsEveryone
}

func (*StoryPrivacySettingsEveryone) StoryPrivacySettingsConstructor() string {
	return ConstructorStoryPrivacySettingsEveryone
}

// The story can be viewed by all contacts except chosen users
type StoryPrivacySettingsContacts struct {
	meta
	// User identifiers of the contacts that can't see the story; always unknown and empty for non-owned stories
	ExceptUserIds []int64 `json:"except_user_ids"`
}

func (entity *StoryPrivacySettingsContacts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryPrivacySettingsContacts

	return json.Marshal((*stub)(entity))
}

func (*StoryPrivacySettingsContacts) GetType() string {
	return TypeStoryPrivacySettings
}

func (*StoryPrivacySettingsContacts) GetConstructor() string {
	return ConstructorStoryPrivacySettingsContacts
}

func (*StoryPrivacySettingsContacts) StoryPrivacySettingsConstructor() string {
	return ConstructorStoryPrivacySettingsContacts
}

// The story can be viewed by all close friends
type StoryPrivacySettingsCloseFriends struct {
	meta
}

func (entity *StoryPrivacySettingsCloseFriends) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryPrivacySettingsCloseFriends

	return json.Marshal((*stub)(entity))
}

func (*StoryPrivacySettingsCloseFriends) GetType() string {
	return TypeStoryPrivacySettings
}

func (*StoryPrivacySettingsCloseFriends) GetConstructor() string {
	return ConstructorStoryPrivacySettingsCloseFriends
}

func (*StoryPrivacySettingsCloseFriends) StoryPrivacySettingsConstructor() string {
	return ConstructorStoryPrivacySettingsCloseFriends
}

// The story can be viewed by certain specified users
type StoryPrivacySettingsSelectedUsers struct {
	meta
	// Identifiers of the users; always unknown and empty for non-owned stories
	UserIds []int64 `json:"user_ids"`
}

func (entity *StoryPrivacySettingsSelectedUsers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryPrivacySettingsSelectedUsers

	return json.Marshal((*stub)(entity))
}

func (*StoryPrivacySettingsSelectedUsers) GetType() string {
	return TypeStoryPrivacySettings
}

func (*StoryPrivacySettingsSelectedUsers) GetConstructor() string {
	return ConstructorStoryPrivacySettingsSelectedUsers
}

func (*StoryPrivacySettingsSelectedUsers) StoryPrivacySettingsConstructor() string {
	return ConstructorStoryPrivacySettingsSelectedUsers
}

// A rule to allow all users to do something
type UserPrivacySettingRuleAllowAll struct {
	meta
}

func (entity *UserPrivacySettingRuleAllowAll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleAllowAll

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleAllowAll) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleAllowAll) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowAll
}

func (*UserPrivacySettingRuleAllowAll) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowAll
}

// A rule to allow all contacts of the user to do something
type UserPrivacySettingRuleAllowContacts struct {
	meta
}

func (entity *UserPrivacySettingRuleAllowContacts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleAllowContacts

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleAllowContacts) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleAllowContacts) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowContacts
}

func (*UserPrivacySettingRuleAllowContacts) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowContacts
}

// A rule to allow all bots to do something
type UserPrivacySettingRuleAllowBots struct {
	meta
}

func (entity *UserPrivacySettingRuleAllowBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleAllowBots

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleAllowBots) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleAllowBots) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowBots
}

func (*UserPrivacySettingRuleAllowBots) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowBots
}

// A rule to allow all Premium Users to do something; currently, allowed only for userPrivacySettingAllowChatInvites
type UserPrivacySettingRuleAllowPremiumUsers struct {
	meta
}

func (entity *UserPrivacySettingRuleAllowPremiumUsers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleAllowPremiumUsers

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleAllowPremiumUsers) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleAllowPremiumUsers) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowPremiumUsers
}

func (*UserPrivacySettingRuleAllowPremiumUsers) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowPremiumUsers
}

// A rule to allow certain specified users to do something
type UserPrivacySettingRuleAllowUsers struct {
	meta
	// The user identifiers, total number of users in all rules must not exceed 1000
	UserIds []int64 `json:"user_ids"`
}

func (entity *UserPrivacySettingRuleAllowUsers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleAllowUsers

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleAllowUsers) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleAllowUsers) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowUsers
}

func (*UserPrivacySettingRuleAllowUsers) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowUsers
}

// A rule to allow all members of certain specified basic groups and supergroups to doing something
type UserPrivacySettingRuleAllowChatMembers struct {
	meta
	// The chat identifiers, total number of chats in all rules must not exceed 20
	ChatIds []int64 `json:"chat_ids"`
}

func (entity *UserPrivacySettingRuleAllowChatMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleAllowChatMembers

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleAllowChatMembers) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleAllowChatMembers) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowChatMembers
}

func (*UserPrivacySettingRuleAllowChatMembers) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleAllowChatMembers
}

// A rule to restrict all users from doing something
type UserPrivacySettingRuleRestrictAll struct {
	meta
}

func (entity *UserPrivacySettingRuleRestrictAll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleRestrictAll

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleRestrictAll) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleRestrictAll) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleRestrictAll
}

func (*UserPrivacySettingRuleRestrictAll) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleRestrictAll
}

// A rule to restrict all contacts of the user from doing something
type UserPrivacySettingRuleRestrictContacts struct {
	meta
}

func (entity *UserPrivacySettingRuleRestrictContacts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleRestrictContacts

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleRestrictContacts) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleRestrictContacts) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleRestrictContacts
}

func (*UserPrivacySettingRuleRestrictContacts) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleRestrictContacts
}

// A rule to restrict all bots from doing something
type UserPrivacySettingRuleRestrictBots struct {
	meta
}

func (entity *UserPrivacySettingRuleRestrictBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleRestrictBots

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleRestrictBots) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleRestrictBots) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleRestrictBots
}

func (*UserPrivacySettingRuleRestrictBots) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleRestrictBots
}

// A rule to restrict all specified users from doing something
type UserPrivacySettingRuleRestrictUsers struct {
	meta
	// The user identifiers, total number of users in all rules must not exceed 1000
	UserIds []int64 `json:"user_ids"`
}

func (entity *UserPrivacySettingRuleRestrictUsers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleRestrictUsers

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleRestrictUsers) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleRestrictUsers) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleRestrictUsers
}

func (*UserPrivacySettingRuleRestrictUsers) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleRestrictUsers
}

// A rule to restrict all members of specified basic groups and supergroups from doing something
type UserPrivacySettingRuleRestrictChatMembers struct {
	meta
	// The chat identifiers, total number of chats in all rules must not exceed 20
	ChatIds []int64 `json:"chat_ids"`
}

func (entity *UserPrivacySettingRuleRestrictChatMembers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRuleRestrictChatMembers

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRuleRestrictChatMembers) GetType() string {
	return TypeUserPrivacySettingRule
}

func (*UserPrivacySettingRuleRestrictChatMembers) GetConstructor() string {
	return ConstructorUserPrivacySettingRuleRestrictChatMembers
}

func (*UserPrivacySettingRuleRestrictChatMembers) UserPrivacySettingRuleConstructor() string {
	return ConstructorUserPrivacySettingRuleRestrictChatMembers
}

// A list of privacy rules. Rules are matched in the specified order. The first matched rule defines the privacy setting for a given user. If no rule matches, the action is not allowed
type UserPrivacySettingRules struct {
	meta
	// A list of rules
	Rules []UserPrivacySettingRule `json:"rules"`
}

func (entity *UserPrivacySettingRules) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingRules

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingRules) GetType() string {
	return TypeUserPrivacySettingRules
}

func (*UserPrivacySettingRules) GetConstructor() string {
	return ConstructorUserPrivacySettingRules
}

func (userPrivacySettingRules *UserPrivacySettingRules) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Rules []json.RawMessage `json:"rules"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldRules, _ := UnmarshalListOfUserPrivacySettingRule(tmp.Rules)
	userPrivacySettingRules.Rules = fieldRules

	return nil
}

// A privacy setting for managing whether the user's online status is visible
type UserPrivacySettingShowStatus struct {
	meta
}

func (entity *UserPrivacySettingShowStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingShowStatus

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingShowStatus) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingShowStatus) GetConstructor() string {
	return ConstructorUserPrivacySettingShowStatus
}

func (*UserPrivacySettingShowStatus) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingShowStatus
}

// A privacy setting for managing whether the user's profile photo is visible
type UserPrivacySettingShowProfilePhoto struct {
	meta
}

func (entity *UserPrivacySettingShowProfilePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingShowProfilePhoto

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingShowProfilePhoto) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingShowProfilePhoto) GetConstructor() string {
	return ConstructorUserPrivacySettingShowProfilePhoto
}

func (*UserPrivacySettingShowProfilePhoto) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingShowProfilePhoto
}

// A privacy setting for managing whether a link to the user's account is included in forwarded messages
type UserPrivacySettingShowLinkInForwardedMessages struct {
	meta
}

func (entity *UserPrivacySettingShowLinkInForwardedMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingShowLinkInForwardedMessages

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingShowLinkInForwardedMessages) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingShowLinkInForwardedMessages) GetConstructor() string {
	return ConstructorUserPrivacySettingShowLinkInForwardedMessages
}

func (*UserPrivacySettingShowLinkInForwardedMessages) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingShowLinkInForwardedMessages
}

// A privacy setting for managing whether the user's phone number is visible
type UserPrivacySettingShowPhoneNumber struct {
	meta
}

func (entity *UserPrivacySettingShowPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingShowPhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingShowPhoneNumber) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingShowPhoneNumber) GetConstructor() string {
	return ConstructorUserPrivacySettingShowPhoneNumber
}

func (*UserPrivacySettingShowPhoneNumber) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingShowPhoneNumber
}

// A privacy setting for managing whether the user's bio is visible
type UserPrivacySettingShowBio struct {
	meta
}

func (entity *UserPrivacySettingShowBio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingShowBio

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingShowBio) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingShowBio) GetConstructor() string {
	return ConstructorUserPrivacySettingShowBio
}

func (*UserPrivacySettingShowBio) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingShowBio
}

// A privacy setting for managing whether the user's birthdate is visible
type UserPrivacySettingShowBirthdate struct {
	meta
}

func (entity *UserPrivacySettingShowBirthdate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingShowBirthdate

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingShowBirthdate) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingShowBirthdate) GetConstructor() string {
	return ConstructorUserPrivacySettingShowBirthdate
}

func (*UserPrivacySettingShowBirthdate) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingShowBirthdate
}

// A privacy setting for managing whether the user can be invited to chats
type UserPrivacySettingAllowChatInvites struct {
	meta
}

func (entity *UserPrivacySettingAllowChatInvites) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingAllowChatInvites

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingAllowChatInvites) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingAllowChatInvites) GetConstructor() string {
	return ConstructorUserPrivacySettingAllowChatInvites
}

func (*UserPrivacySettingAllowChatInvites) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingAllowChatInvites
}

// A privacy setting for managing whether the user can be called
type UserPrivacySettingAllowCalls struct {
	meta
}

func (entity *UserPrivacySettingAllowCalls) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingAllowCalls

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingAllowCalls) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingAllowCalls) GetConstructor() string {
	return ConstructorUserPrivacySettingAllowCalls
}

func (*UserPrivacySettingAllowCalls) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingAllowCalls
}

// A privacy setting for managing whether peer-to-peer connections can be used for calls
type UserPrivacySettingAllowPeerToPeerCalls struct {
	meta
}

func (entity *UserPrivacySettingAllowPeerToPeerCalls) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingAllowPeerToPeerCalls

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingAllowPeerToPeerCalls) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingAllowPeerToPeerCalls) GetConstructor() string {
	return ConstructorUserPrivacySettingAllowPeerToPeerCalls
}

func (*UserPrivacySettingAllowPeerToPeerCalls) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingAllowPeerToPeerCalls
}

// A privacy setting for managing whether the user can be found by their phone number. Checked only if the phone number is not known to the other user. Can be set only to "Allow contacts" or "Allow all"
type UserPrivacySettingAllowFindingByPhoneNumber struct {
	meta
}

func (entity *UserPrivacySettingAllowFindingByPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingAllowFindingByPhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingAllowFindingByPhoneNumber) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingAllowFindingByPhoneNumber) GetConstructor() string {
	return ConstructorUserPrivacySettingAllowFindingByPhoneNumber
}

func (*UserPrivacySettingAllowFindingByPhoneNumber) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingAllowFindingByPhoneNumber
}

// A privacy setting for managing whether the user can receive voice and video messages in private chats; for Telegram Premium users only
type UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages struct {
	meta
}

func (entity *UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages) GetConstructor() string {
	return ConstructorUserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages
}

func (*UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages
}

// A privacy setting for managing whether received gifts are automatically shown on the user's profile page
type UserPrivacySettingAutosaveGifts struct {
	meta
}

func (entity *UserPrivacySettingAutosaveGifts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserPrivacySettingAutosaveGifts

	return json.Marshal((*stub)(entity))
}

func (*UserPrivacySettingAutosaveGifts) GetType() string {
	return TypeUserPrivacySetting
}

func (*UserPrivacySettingAutosaveGifts) GetConstructor() string {
	return ConstructorUserPrivacySettingAutosaveGifts
}

func (*UserPrivacySettingAutosaveGifts) UserPrivacySettingConstructor() string {
	return ConstructorUserPrivacySettingAutosaveGifts
}

// Contains privacy settings for message read date in private chats. Read dates are always shown to the users that can see online status of the current user regardless of this setting
type ReadDatePrivacySettings struct {
	meta
	// True, if message read date is shown to other users in private chats. If false and the current user isn't a Telegram Premium user, then they will not be able to see other's message read date
	ShowReadDate bool `json:"show_read_date"`
}

func (entity *ReadDatePrivacySettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReadDatePrivacySettings

	return json.Marshal((*stub)(entity))
}

func (*ReadDatePrivacySettings) GetType() string {
	return TypeReadDatePrivacySettings
}

func (*ReadDatePrivacySettings) GetConstructor() string {
	return ConstructorReadDatePrivacySettings
}

// Contains privacy settings for new chats with non-contacts
type NewChatPrivacySettings struct {
	meta
	// True, if non-contacts users are able to write first to the current user. Telegram Premium subscribers are able to write first regardless of this setting
	AllowNewChatsFromUnknownUsers bool `json:"allow_new_chats_from_unknown_users"`
}

func (entity *NewChatPrivacySettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NewChatPrivacySettings

	return json.Marshal((*stub)(entity))
}

func (*NewChatPrivacySettings) GetType() string {
	return TypeNewChatPrivacySettings
}

func (*NewChatPrivacySettings) GetConstructor() string {
	return ConstructorNewChatPrivacySettings
}

// The user can be messaged
type CanSendMessageToUserResultOk struct {
	meta
}

func (entity *CanSendMessageToUserResultOk) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanSendMessageToUserResultOk

	return json.Marshal((*stub)(entity))
}

func (*CanSendMessageToUserResultOk) GetType() string {
	return TypeCanSendMessageToUserResult
}

func (*CanSendMessageToUserResultOk) GetConstructor() string {
	return ConstructorCanSendMessageToUserResultOk
}

func (*CanSendMessageToUserResultOk) CanSendMessageToUserResultConstructor() string {
	return ConstructorCanSendMessageToUserResultOk
}

// The user can't be messaged, because they are deleted or unknown
type CanSendMessageToUserResultUserIsDeleted struct {
	meta
}

func (entity *CanSendMessageToUserResultUserIsDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanSendMessageToUserResultUserIsDeleted

	return json.Marshal((*stub)(entity))
}

func (*CanSendMessageToUserResultUserIsDeleted) GetType() string {
	return TypeCanSendMessageToUserResult
}

func (*CanSendMessageToUserResultUserIsDeleted) GetConstructor() string {
	return ConstructorCanSendMessageToUserResultUserIsDeleted
}

func (*CanSendMessageToUserResultUserIsDeleted) CanSendMessageToUserResultConstructor() string {
	return ConstructorCanSendMessageToUserResultUserIsDeleted
}

// The user can't be messaged, because they restrict new chats with non-contacts
type CanSendMessageToUserResultUserRestrictsNewChats struct {
	meta
}

func (entity *CanSendMessageToUserResultUserRestrictsNewChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub CanSendMessageToUserResultUserRestrictsNewChats

	return json.Marshal((*stub)(entity))
}

func (*CanSendMessageToUserResultUserRestrictsNewChats) GetType() string {
	return TypeCanSendMessageToUserResult
}

func (*CanSendMessageToUserResultUserRestrictsNewChats) GetConstructor() string {
	return ConstructorCanSendMessageToUserResultUserRestrictsNewChats
}

func (*CanSendMessageToUserResultUserRestrictsNewChats) CanSendMessageToUserResultConstructor() string {
	return ConstructorCanSendMessageToUserResultUserRestrictsNewChats
}

// Contains information about the period of inactivity after which the current user's account will automatically be deleted
type AccountTtl struct {
	meta
	// Number of days of inactivity before the account will be flagged for deletion; 30-730 days
	Days int32 `json:"days"`
}

func (entity *AccountTtl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AccountTtl

	return json.Marshal((*stub)(entity))
}

func (*AccountTtl) GetType() string {
	return TypeAccountTtl
}

func (*AccountTtl) GetConstructor() string {
	return ConstructorAccountTtl
}

// Contains default auto-delete timer setting for new chats
type MessageAutoDeleteTime struct {
	meta
	// Message auto-delete time, in seconds. If 0, then messages aren't deleted automatically
	Time int32 `json:"time"`
}

func (entity *MessageAutoDeleteTime) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageAutoDeleteTime

	return json.Marshal((*stub)(entity))
}

func (*MessageAutoDeleteTime) GetType() string {
	return TypeMessageAutoDeleteTime
}

func (*MessageAutoDeleteTime) GetConstructor() string {
	return ConstructorMessageAutoDeleteTime
}

// The session is running on an Android device
type SessionTypeAndroid struct {
	meta
}

func (entity *SessionTypeAndroid) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeAndroid

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeAndroid) GetType() string {
	return TypeSessionType
}

func (*SessionTypeAndroid) GetConstructor() string {
	return ConstructorSessionTypeAndroid
}

func (*SessionTypeAndroid) SessionTypeConstructor() string {
	return ConstructorSessionTypeAndroid
}

// The session is running on a generic Apple device
type SessionTypeApple struct {
	meta
}

func (entity *SessionTypeApple) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeApple

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeApple) GetType() string {
	return TypeSessionType
}

func (*SessionTypeApple) GetConstructor() string {
	return ConstructorSessionTypeApple
}

func (*SessionTypeApple) SessionTypeConstructor() string {
	return ConstructorSessionTypeApple
}

// The session is running on the Brave browser
type SessionTypeBrave struct {
	meta
}

func (entity *SessionTypeBrave) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeBrave

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeBrave) GetType() string {
	return TypeSessionType
}

func (*SessionTypeBrave) GetConstructor() string {
	return ConstructorSessionTypeBrave
}

func (*SessionTypeBrave) SessionTypeConstructor() string {
	return ConstructorSessionTypeBrave
}

// The session is running on the Chrome browser
type SessionTypeChrome struct {
	meta
}

func (entity *SessionTypeChrome) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeChrome

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeChrome) GetType() string {
	return TypeSessionType
}

func (*SessionTypeChrome) GetConstructor() string {
	return ConstructorSessionTypeChrome
}

func (*SessionTypeChrome) SessionTypeConstructor() string {
	return ConstructorSessionTypeChrome
}

// The session is running on the Edge browser
type SessionTypeEdge struct {
	meta
}

func (entity *SessionTypeEdge) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeEdge

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeEdge) GetType() string {
	return TypeSessionType
}

func (*SessionTypeEdge) GetConstructor() string {
	return ConstructorSessionTypeEdge
}

func (*SessionTypeEdge) SessionTypeConstructor() string {
	return ConstructorSessionTypeEdge
}

// The session is running on the Firefox browser
type SessionTypeFirefox struct {
	meta
}

func (entity *SessionTypeFirefox) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeFirefox

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeFirefox) GetType() string {
	return TypeSessionType
}

func (*SessionTypeFirefox) GetConstructor() string {
	return ConstructorSessionTypeFirefox
}

func (*SessionTypeFirefox) SessionTypeConstructor() string {
	return ConstructorSessionTypeFirefox
}

// The session is running on an iPad device
type SessionTypeIpad struct {
	meta
}

func (entity *SessionTypeIpad) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeIpad

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeIpad) GetType() string {
	return TypeSessionType
}

func (*SessionTypeIpad) GetConstructor() string {
	return ConstructorSessionTypeIpad
}

func (*SessionTypeIpad) SessionTypeConstructor() string {
	return ConstructorSessionTypeIpad
}

// The session is running on an iPhone device
type SessionTypeIphone struct {
	meta
}

func (entity *SessionTypeIphone) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeIphone

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeIphone) GetType() string {
	return TypeSessionType
}

func (*SessionTypeIphone) GetConstructor() string {
	return ConstructorSessionTypeIphone
}

func (*SessionTypeIphone) SessionTypeConstructor() string {
	return ConstructorSessionTypeIphone
}

// The session is running on a Linux device
type SessionTypeLinux struct {
	meta
}

func (entity *SessionTypeLinux) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeLinux

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeLinux) GetType() string {
	return TypeSessionType
}

func (*SessionTypeLinux) GetConstructor() string {
	return ConstructorSessionTypeLinux
}

func (*SessionTypeLinux) SessionTypeConstructor() string {
	return ConstructorSessionTypeLinux
}

// The session is running on a Mac device
type SessionTypeMac struct {
	meta
}

func (entity *SessionTypeMac) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeMac

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeMac) GetType() string {
	return TypeSessionType
}

func (*SessionTypeMac) GetConstructor() string {
	return ConstructorSessionTypeMac
}

func (*SessionTypeMac) SessionTypeConstructor() string {
	return ConstructorSessionTypeMac
}

// The session is running on the Opera browser
type SessionTypeOpera struct {
	meta
}

func (entity *SessionTypeOpera) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeOpera

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeOpera) GetType() string {
	return TypeSessionType
}

func (*SessionTypeOpera) GetConstructor() string {
	return ConstructorSessionTypeOpera
}

func (*SessionTypeOpera) SessionTypeConstructor() string {
	return ConstructorSessionTypeOpera
}

// The session is running on the Safari browser
type SessionTypeSafari struct {
	meta
}

func (entity *SessionTypeSafari) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeSafari

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeSafari) GetType() string {
	return TypeSessionType
}

func (*SessionTypeSafari) GetConstructor() string {
	return ConstructorSessionTypeSafari
}

func (*SessionTypeSafari) SessionTypeConstructor() string {
	return ConstructorSessionTypeSafari
}

// The session is running on an Ubuntu device
type SessionTypeUbuntu struct {
	meta
}

func (entity *SessionTypeUbuntu) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeUbuntu

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeUbuntu) GetType() string {
	return TypeSessionType
}

func (*SessionTypeUbuntu) GetConstructor() string {
	return ConstructorSessionTypeUbuntu
}

func (*SessionTypeUbuntu) SessionTypeConstructor() string {
	return ConstructorSessionTypeUbuntu
}

// The session is running on an unknown type of device
type SessionTypeUnknown struct {
	meta
}

func (entity *SessionTypeUnknown) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeUnknown

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeUnknown) GetType() string {
	return TypeSessionType
}

func (*SessionTypeUnknown) GetConstructor() string {
	return ConstructorSessionTypeUnknown
}

func (*SessionTypeUnknown) SessionTypeConstructor() string {
	return ConstructorSessionTypeUnknown
}

// The session is running on the Vivaldi browser
type SessionTypeVivaldi struct {
	meta
}

func (entity *SessionTypeVivaldi) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeVivaldi

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeVivaldi) GetType() string {
	return TypeSessionType
}

func (*SessionTypeVivaldi) GetConstructor() string {
	return ConstructorSessionTypeVivaldi
}

func (*SessionTypeVivaldi) SessionTypeConstructor() string {
	return ConstructorSessionTypeVivaldi
}

// The session is running on a Windows device
type SessionTypeWindows struct {
	meta
}

func (entity *SessionTypeWindows) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeWindows

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeWindows) GetType() string {
	return TypeSessionType
}

func (*SessionTypeWindows) GetConstructor() string {
	return ConstructorSessionTypeWindows
}

func (*SessionTypeWindows) SessionTypeConstructor() string {
	return ConstructorSessionTypeWindows
}

// The session is running on an Xbox console
type SessionTypeXbox struct {
	meta
}

func (entity *SessionTypeXbox) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SessionTypeXbox

	return json.Marshal((*stub)(entity))
}

func (*SessionTypeXbox) GetType() string {
	return TypeSessionType
}

func (*SessionTypeXbox) GetConstructor() string {
	return ConstructorSessionTypeXbox
}

func (*SessionTypeXbox) SessionTypeConstructor() string {
	return ConstructorSessionTypeXbox
}

// Contains information about one session in a Telegram application used by the current user. Sessions must be shown to the user in the returned order
type Session struct {
	meta
	// Session identifier
	Id JsonInt64 `json:"id"`
	// True, if this session is the current session
	IsCurrent bool `json:"is_current"`
	// True, if a 2-step verification password is needed to complete authorization of the session
	IsPasswordPending bool `json:"is_password_pending"`
	// True, if the session wasn't confirmed from another session
	IsUnconfirmed bool `json:"is_unconfirmed"`
	// True, if incoming secret chats can be accepted by the session
	CanAcceptSecretChats bool `json:"can_accept_secret_chats"`
	// True, if incoming calls can be accepted by the session
	CanAcceptCalls bool `json:"can_accept_calls"`
	// Session type based on the system and application version, which can be used to display a corresponding icon
	Type SessionType `json:"type"`
	// Telegram API identifier, as provided by the application
	ApiId int32 `json:"api_id"`
	// Name of the application, as provided by the application
	ApplicationName string `json:"application_name"`
	// The version of the application, as provided by the application
	ApplicationVersion string `json:"application_version"`
	// True, if the application is an official application or uses the api_id of an official application
	IsOfficialApplication bool `json:"is_official_application"`
	// Model of the device the application has been run or is running on, as provided by the application
	DeviceModel string `json:"device_model"`
	// Operating system the application has been run or is running on, as provided by the application
	Platform string `json:"platform"`
	// Version of the operating system the application has been run or is running on, as provided by the application
	SystemVersion string `json:"system_version"`
	// Point in time (Unix timestamp) when the user has logged in
	LogInDate int32 `json:"log_in_date"`
	// Point in time (Unix timestamp) when the session was last used
	LastActiveDate int32 `json:"last_active_date"`
	// IP address from which the session was created, in human-readable format
	IpAddress string `json:"ip_address"`
	// A human-readable description of the location from which the session was created, based on the IP address
	Location string `json:"location"`
}

func (entity *Session) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Session

	return json.Marshal((*stub)(entity))
}

func (*Session) GetType() string {
	return TypeSession
}

func (*Session) GetConstructor() string {
	return ConstructorSession
}

func (session *Session) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id                    JsonInt64       `json:"id"`
		IsCurrent             bool            `json:"is_current"`
		IsPasswordPending     bool            `json:"is_password_pending"`
		IsUnconfirmed         bool            `json:"is_unconfirmed"`
		CanAcceptSecretChats  bool            `json:"can_accept_secret_chats"`
		CanAcceptCalls        bool            `json:"can_accept_calls"`
		Type                  json.RawMessage `json:"type"`
		ApiId                 int32           `json:"api_id"`
		ApplicationName       string          `json:"application_name"`
		ApplicationVersion    string          `json:"application_version"`
		IsOfficialApplication bool            `json:"is_official_application"`
		DeviceModel           string          `json:"device_model"`
		Platform              string          `json:"platform"`
		SystemVersion         string          `json:"system_version"`
		LogInDate             int32           `json:"log_in_date"`
		LastActiveDate        int32           `json:"last_active_date"`
		IpAddress             string          `json:"ip_address"`
		Location              string          `json:"location"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	session.Id = tmp.Id
	session.IsCurrent = tmp.IsCurrent
	session.IsPasswordPending = tmp.IsPasswordPending
	session.IsUnconfirmed = tmp.IsUnconfirmed
	session.CanAcceptSecretChats = tmp.CanAcceptSecretChats
	session.CanAcceptCalls = tmp.CanAcceptCalls
	session.ApiId = tmp.ApiId
	session.ApplicationName = tmp.ApplicationName
	session.ApplicationVersion = tmp.ApplicationVersion
	session.IsOfficialApplication = tmp.IsOfficialApplication
	session.DeviceModel = tmp.DeviceModel
	session.Platform = tmp.Platform
	session.SystemVersion = tmp.SystemVersion
	session.LogInDate = tmp.LogInDate
	session.LastActiveDate = tmp.LastActiveDate
	session.IpAddress = tmp.IpAddress
	session.Location = tmp.Location

	fieldType, _ := UnmarshalSessionType(tmp.Type)
	session.Type = fieldType

	return nil
}

// Contains a list of sessions
type Sessions struct {
	meta
	// List of sessions
	Sessions []*Session `json:"sessions"`
	// Number of days of inactivity before sessions will automatically be terminated; 1-366 days
	InactiveSessionTtlDays int32 `json:"inactive_session_ttl_days"`
}

func (entity *Sessions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Sessions

	return json.Marshal((*stub)(entity))
}

func (*Sessions) GetType() string {
	return TypeSessions
}

func (*Sessions) GetConstructor() string {
	return ConstructorSessions
}

// Contains information about an unconfirmed session
type UnconfirmedSession struct {
	meta
	// Session identifier
	Id JsonInt64 `json:"id"`
	// Point in time (Unix timestamp) when the user has logged in
	LogInDate int32 `json:"log_in_date"`
	// Model of the device that was used for the session creation, as provided by the application
	DeviceModel string `json:"device_model"`
	// A human-readable description of the location from which the session was created, based on the IP address
	Location string `json:"location"`
}

func (entity *UnconfirmedSession) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UnconfirmedSession

	return json.Marshal((*stub)(entity))
}

func (*UnconfirmedSession) GetType() string {
	return TypeUnconfirmedSession
}

func (*UnconfirmedSession) GetConstructor() string {
	return ConstructorUnconfirmedSession
}

// Contains information about one website the current user is logged in with Telegram
type ConnectedWebsite struct {
	meta
	// Website identifier
	Id JsonInt64 `json:"id"`
	// The domain name of the website
	DomainName string `json:"domain_name"`
	// User identifier of a bot linked with the website
	BotUserId int64 `json:"bot_user_id"`
	// The version of a browser used to log in
	Browser string `json:"browser"`
	// Operating system the browser is running on
	Platform string `json:"platform"`
	// Point in time (Unix timestamp) when the user was logged in
	LogInDate int32 `json:"log_in_date"`
	// Point in time (Unix timestamp) when obtained authorization was last used
	LastActiveDate int32 `json:"last_active_date"`
	// IP address from which the user was logged in, in human-readable format
	IpAddress string `json:"ip_address"`
	// Human-readable description of a country and a region from which the user was logged in, based on the IP address
	Location string `json:"location"`
}

func (entity *ConnectedWebsite) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ConnectedWebsite

	return json.Marshal((*stub)(entity))
}

func (*ConnectedWebsite) GetType() string {
	return TypeConnectedWebsite
}

func (*ConnectedWebsite) GetConstructor() string {
	return ConstructorConnectedWebsite
}

// Contains a list of websites the current user is logged in with Telegram
type ConnectedWebsites struct {
	meta
	// List of connected websites
	Websites []*ConnectedWebsite `json:"websites"`
}

func (entity *ConnectedWebsites) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ConnectedWebsites

	return json.Marshal((*stub)(entity))
}

func (*ConnectedWebsites) GetType() string {
	return TypeConnectedWebsites
}

func (*ConnectedWebsites) GetConstructor() string {
	return ConstructorConnectedWebsites
}

// The chat contains spam messages
type ReportReasonSpam struct {
	meta
}

func (entity *ReportReasonSpam) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportReasonSpam

	return json.Marshal((*stub)(entity))
}

func (*ReportReasonSpam) GetType() string {
	return TypeReportReason
}

func (*ReportReasonSpam) GetConstructor() string {
	return ConstructorReportReasonSpam
}

func (*ReportReasonSpam) ReportReasonConstructor() string {
	return ConstructorReportReasonSpam
}

// The chat promotes violence
type ReportReasonViolence struct {
	meta
}

func (entity *ReportReasonViolence) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportReasonViolence

	return json.Marshal((*stub)(entity))
}

func (*ReportReasonViolence) GetType() string {
	return TypeReportReason
}

func (*ReportReasonViolence) GetConstructor() string {
	return ConstructorReportReasonViolence
}

func (*ReportReasonViolence) ReportReasonConstructor() string {
	return ConstructorReportReasonViolence
}

// The chat contains pornographic messages
type ReportReasonPornography struct {
	meta
}

func (entity *ReportReasonPornography) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportReasonPornography

	return json.Marshal((*stub)(entity))
}

func (*ReportReasonPornography) GetType() string {
	return TypeReportReason
}

func (*ReportReasonPornography) GetConstructor() string {
	return ConstructorReportReasonPornography
}

func (*ReportReasonPornography) ReportReasonConstructor() string {
	return ConstructorReportReasonPornography
}

// The chat has child abuse related content
type ReportReasonChildAbuse struct {
	meta
}

func (entity *ReportReasonChildAbuse) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportReasonChildAbuse

	return json.Marshal((*stub)(entity))
}

func (*ReportReasonChildAbuse) GetType() string {
	return TypeReportReason
}

func (*ReportReasonChildAbuse) GetConstructor() string {
	return ConstructorReportReasonChildAbuse
}

func (*ReportReasonChildAbuse) ReportReasonConstructor() string {
	return ConstructorReportReasonChildAbuse
}

// The chat contains copyrighted content
type ReportReasonCopyright struct {
	meta
}

func (entity *ReportReasonCopyright) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportReasonCopyright

	return json.Marshal((*stub)(entity))
}

func (*ReportReasonCopyright) GetType() string {
	return TypeReportReason
}

func (*ReportReasonCopyright) GetConstructor() string {
	return ConstructorReportReasonCopyright
}

func (*ReportReasonCopyright) ReportReasonConstructor() string {
	return ConstructorReportReasonCopyright
}

// The location-based chat is unrelated to its stated location
type ReportReasonUnrelatedLocation struct {
	meta
}

func (entity *ReportReasonUnrelatedLocation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportReasonUnrelatedLocation

	return json.Marshal((*stub)(entity))
}

func (*ReportReasonUnrelatedLocation) GetType() string {
	return TypeReportReason
}

func (*ReportReasonUnrelatedLocation) GetConstructor() string {
	return ConstructorReportReasonUnrelatedLocation
}

func (*ReportReasonUnrelatedLocation) ReportReasonConstructor() string {
	return ConstructorReportReasonUnrelatedLocation
}

// The chat represents a fake account
type ReportReasonFake struct {
	meta
}

func (entity *ReportReasonFake) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportReasonFake

	return json.Marshal((*stub)(entity))
}

func (*ReportReasonFake) GetType() string {
	return TypeReportReason
}

func (*ReportReasonFake) GetConstructor() string {
	return ConstructorReportReasonFake
}

func (*ReportReasonFake) ReportReasonConstructor() string {
	return ConstructorReportReasonFake
}

// The chat has illegal drugs related content
type ReportReasonIllegalDrugs struct {
	meta
}

func (entity *ReportReasonIllegalDrugs) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportReasonIllegalDrugs

	return json.Marshal((*stub)(entity))
}

func (*ReportReasonIllegalDrugs) GetType() string {
	return TypeReportReason
}

func (*ReportReasonIllegalDrugs) GetConstructor() string {
	return ConstructorReportReasonIllegalDrugs
}

func (*ReportReasonIllegalDrugs) ReportReasonConstructor() string {
	return ConstructorReportReasonIllegalDrugs
}

// The chat contains messages with personal details
type ReportReasonPersonalDetails struct {
	meta
}

func (entity *ReportReasonPersonalDetails) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportReasonPersonalDetails

	return json.Marshal((*stub)(entity))
}

func (*ReportReasonPersonalDetails) GetType() string {
	return TypeReportReason
}

func (*ReportReasonPersonalDetails) GetConstructor() string {
	return ConstructorReportReasonPersonalDetails
}

func (*ReportReasonPersonalDetails) ReportReasonConstructor() string {
	return ConstructorReportReasonPersonalDetails
}

// A custom reason provided by the user
type ReportReasonCustom struct {
	meta
}

func (entity *ReportReasonCustom) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportReasonCustom

	return json.Marshal((*stub)(entity))
}

func (*ReportReasonCustom) GetType() string {
	return TypeReportReason
}

func (*ReportReasonCustom) GetConstructor() string {
	return ConstructorReportReasonCustom
}

func (*ReportReasonCustom) ReportReasonConstructor() string {
	return ConstructorReportReasonCustom
}

// The chat was reported successfully
type ReportChatResultOk struct {
	meta
}

func (entity *ReportChatResultOk) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportChatResultOk

	return json.Marshal((*stub)(entity))
}

func (*ReportChatResultOk) GetType() string {
	return TypeReportChatResult
}

func (*ReportChatResultOk) GetConstructor() string {
	return ConstructorReportChatResultOk
}

func (*ReportChatResultOk) ReportChatResultConstructor() string {
	return ConstructorReportChatResultOk
}

// The user must choose an option to report the chat and repeat request with the chosen option
type ReportChatResultOptionRequired struct {
	meta
	// Title for the option choice
	Title string `json:"title"`
	// List of available options
	Options []*ReportOption `json:"options"`
}

func (entity *ReportChatResultOptionRequired) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportChatResultOptionRequired

	return json.Marshal((*stub)(entity))
}

func (*ReportChatResultOptionRequired) GetType() string {
	return TypeReportChatResult
}

func (*ReportChatResultOptionRequired) GetConstructor() string {
	return ConstructorReportChatResultOptionRequired
}

func (*ReportChatResultOptionRequired) ReportChatResultConstructor() string {
	return ConstructorReportChatResultOptionRequired
}

// The user must add additional text details to the report
type ReportChatResultTextRequired struct {
	meta
	// Option identifier for the next reportChat request
	OptionId []byte `json:"option_id"`
	// True, if the user can skip text adding
	IsOptional bool `json:"is_optional"`
}

func (entity *ReportChatResultTextRequired) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportChatResultTextRequired

	return json.Marshal((*stub)(entity))
}

func (*ReportChatResultTextRequired) GetType() string {
	return TypeReportChatResult
}

func (*ReportChatResultTextRequired) GetConstructor() string {
	return ConstructorReportChatResultTextRequired
}

func (*ReportChatResultTextRequired) ReportChatResultConstructor() string {
	return ConstructorReportChatResultTextRequired
}

// The user must choose messages to report and repeat the reportChat request with the chosen messages
type ReportChatResultMessagesRequired struct {
	meta
}

func (entity *ReportChatResultMessagesRequired) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportChatResultMessagesRequired

	return json.Marshal((*stub)(entity))
}

func (*ReportChatResultMessagesRequired) GetType() string {
	return TypeReportChatResult
}

func (*ReportChatResultMessagesRequired) GetConstructor() string {
	return ConstructorReportChatResultMessagesRequired
}

func (*ReportChatResultMessagesRequired) ReportChatResultConstructor() string {
	return ConstructorReportChatResultMessagesRequired
}

// The story was reported successfully
type ReportStoryResultOk struct {
	meta
}

func (entity *ReportStoryResultOk) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportStoryResultOk

	return json.Marshal((*stub)(entity))
}

func (*ReportStoryResultOk) GetType() string {
	return TypeReportStoryResult
}

func (*ReportStoryResultOk) GetConstructor() string {
	return ConstructorReportStoryResultOk
}

func (*ReportStoryResultOk) ReportStoryResultConstructor() string {
	return ConstructorReportStoryResultOk
}

// The user must choose an option to report the story and repeat request with the chosen option
type ReportStoryResultOptionRequired struct {
	meta
	// Title for the option choice
	Title string `json:"title"`
	// List of available options
	Options []*ReportOption `json:"options"`
}

func (entity *ReportStoryResultOptionRequired) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportStoryResultOptionRequired

	return json.Marshal((*stub)(entity))
}

func (*ReportStoryResultOptionRequired) GetType() string {
	return TypeReportStoryResult
}

func (*ReportStoryResultOptionRequired) GetConstructor() string {
	return ConstructorReportStoryResultOptionRequired
}

func (*ReportStoryResultOptionRequired) ReportStoryResultConstructor() string {
	return ConstructorReportStoryResultOptionRequired
}

// The user must add additional text details to the report
type ReportStoryResultTextRequired struct {
	meta
	// Option identifier for the next reportStory request
	OptionId []byte `json:"option_id"`
	// True, if the user can skip text adding
	IsOptional bool `json:"is_optional"`
}

func (entity *ReportStoryResultTextRequired) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ReportStoryResultTextRequired

	return json.Marshal((*stub)(entity))
}

func (*ReportStoryResultTextRequired) GetType() string {
	return TypeReportStoryResult
}

func (*ReportStoryResultTextRequired) GetConstructor() string {
	return ConstructorReportStoryResultTextRequired
}

func (*ReportStoryResultTextRequired) ReportStoryResultConstructor() string {
	return ConstructorReportStoryResultTextRequired
}

// The link is a link to the Devices section of the application. Use getActiveSessions to get the list of active sessions and show them to the user
type InternalLinkTypeActiveSessions struct {
	meta
}

func (entity *InternalLinkTypeActiveSessions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeActiveSessions

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeActiveSessions) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeActiveSessions) GetConstructor() string {
	return ConstructorInternalLinkTypeActiveSessions
}

func (*InternalLinkTypeActiveSessions) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeActiveSessions
}

// The link is a link to an attachment menu bot to be opened in the specified or a chosen chat. Process given target_chat to open the chat. Then, call searchPublicChat with the given bot username, check that the user is a bot and can be added to attachment menu. Then, use getAttachmentMenuBot to receive information about the bot. If the bot isn't added to attachment menu, then show a disclaimer about Mini Apps being third-party applications, ask the user to accept their Terms of service and confirm adding the bot to side and attachment menu. If the user accept the terms and confirms adding, then use toggleBotIsAddedToAttachmentMenu to add the bot. If the attachment menu bot can't be used in the opened chat, show an error to the user. If the bot is added to attachment menu and can be used in the chat, then use openWebApp with the given URL
type InternalLinkTypeAttachmentMenuBot struct {
	meta
	// Target chat to be opened
	TargetChat TargetChat `json:"target_chat"`
	// Username of the bot
	BotUsername string `json:"bot_username"`
	// URL to be passed to openWebApp
	Url string `json:"url"`
}

func (entity *InternalLinkTypeAttachmentMenuBot) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeAttachmentMenuBot

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeAttachmentMenuBot) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeAttachmentMenuBot) GetConstructor() string {
	return ConstructorInternalLinkTypeAttachmentMenuBot
}

func (*InternalLinkTypeAttachmentMenuBot) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeAttachmentMenuBot
}

func (internalLinkTypeAttachmentMenuBot *InternalLinkTypeAttachmentMenuBot) UnmarshalJSON(data []byte) error {
	var tmp struct {
		TargetChat  json.RawMessage `json:"target_chat"`
		BotUsername string          `json:"bot_username"`
		Url         string          `json:"url"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	internalLinkTypeAttachmentMenuBot.BotUsername = tmp.BotUsername
	internalLinkTypeAttachmentMenuBot.Url = tmp.Url

	fieldTargetChat, _ := UnmarshalTargetChat(tmp.TargetChat)
	internalLinkTypeAttachmentMenuBot.TargetChat = fieldTargetChat

	return nil
}

// The link contains an authentication code. Call checkAuthenticationCode with the code if the current authorization state is authorizationStateWaitCode
type InternalLinkTypeAuthenticationCode struct {
	meta
	// The authentication code
	Code string `json:"code"`
}

func (entity *InternalLinkTypeAuthenticationCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeAuthenticationCode

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeAuthenticationCode) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeAuthenticationCode) GetConstructor() string {
	return ConstructorInternalLinkTypeAuthenticationCode
}

func (*InternalLinkTypeAuthenticationCode) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeAuthenticationCode
}

// The link is a link to a background. Call searchBackground with the given background name to process the link. If background is found and the user wants to apply it, then call setDefaultBackground
type InternalLinkTypeBackground struct {
	meta
	// Name of the background
	BackgroundName string `json:"background_name"`
}

func (entity *InternalLinkTypeBackground) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeBackground

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeBackground) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeBackground) GetConstructor() string {
	return ConstructorInternalLinkTypeBackground
}

func (*InternalLinkTypeBackground) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeBackground
}

// The link is a link to a Telegram bot, which is expected to be added to a channel chat as an administrator. Call searchPublicChat with the given bot username and check that the user is a bot, ask the current user to select a channel chat to add the bot to as an administrator. Then, call getChatMember to receive the current bot rights in the chat and if the bot already is an administrator, check that the current user can edit its administrator rights and combine received rights with the requested administrator rights. Then, show confirmation box to the user, and call setChatMemberStatus with the chosen chat and confirmed rights
type InternalLinkTypeBotAddToChannel struct {
	meta
	// Username of the bot
	BotUsername string `json:"bot_username"`
	// Expected administrator rights for the bot
	AdministratorRights *ChatAdministratorRights `json:"administrator_rights"`
}

func (entity *InternalLinkTypeBotAddToChannel) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeBotAddToChannel

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeBotAddToChannel) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeBotAddToChannel) GetConstructor() string {
	return ConstructorInternalLinkTypeBotAddToChannel
}

func (*InternalLinkTypeBotAddToChannel) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeBotAddToChannel
}

// The link is a link to a chat with a Telegram bot. Call searchPublicChat with the given bot username, check that the user is a bot, show START button in the chat with the bot, and then call sendBotStartMessage with the given start parameter after the button is pressed
type InternalLinkTypeBotStart struct {
	meta
	// Username of the bot
	BotUsername string `json:"bot_username"`
	// The parameter to be passed to sendBotStartMessage
	StartParameter string `json:"start_parameter"`
	// True, if sendBotStartMessage must be called automatically without showing the START button
	Autostart bool `json:"autostart"`
}

func (entity *InternalLinkTypeBotStart) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeBotStart

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeBotStart) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeBotStart) GetConstructor() string {
	return ConstructorInternalLinkTypeBotStart
}

func (*InternalLinkTypeBotStart) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeBotStart
}

// The link is a link to a Telegram bot, which is expected to be added to a group chat. Call searchPublicChat with the given bot username, check that the user is a bot and can be added to groups, ask the current user to select a basic group or a supergroup chat to add the bot to, taking into account that bots can be added to a public supergroup only by administrators of the supergroup. If administrator rights are provided by the link, call getChatMember to receive the current bot rights in the chat and if the bot already is an administrator, check that the current user can edit its administrator rights, combine received rights with the requested administrator rights, show confirmation box to the user, and call setChatMemberStatus with the chosen chat and confirmed administrator rights. Before call to setChatMemberStatus it may be required to upgrade the chosen basic group chat to a supergroup chat. Then, if start_parameter isn't empty, call sendBotStartMessage with the given start parameter and the chosen chat; otherwise, just send /start message with bot's username added to the chat
type InternalLinkTypeBotStartInGroup struct {
	meta
	// Username of the bot
	BotUsername string `json:"bot_username"`
	// The parameter to be passed to sendBotStartMessage
	StartParameter string `json:"start_parameter"`
	// Expected administrator rights for the bot; may be null
	AdministratorRights *ChatAdministratorRights `json:"administrator_rights"`
}

func (entity *InternalLinkTypeBotStartInGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeBotStartInGroup

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeBotStartInGroup) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeBotStartInGroup) GetConstructor() string {
	return ConstructorInternalLinkTypeBotStartInGroup
}

func (*InternalLinkTypeBotStartInGroup) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeBotStartInGroup
}

// The link is a link to a business chat. Use getBusinessChatLinkInfo with the provided link name to get information about the link, then open received private chat and replace chat draft with the provided text
type InternalLinkTypeBusinessChat struct {
	meta
	// Name of the link
	LinkName string `json:"link_name"`
}

func (entity *InternalLinkTypeBusinessChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeBusinessChat

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeBusinessChat) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeBusinessChat) GetConstructor() string {
	return ConstructorInternalLinkTypeBusinessChat
}

func (*InternalLinkTypeBusinessChat) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeBusinessChat
}

// The link is a link to the Telegram Star purchase section of the application
type InternalLinkTypeBuyStars struct {
	meta
	// The number of Telegram Stars that must be owned by the user
	StarCount int64 `json:"star_count"`
	// Purpose of Telegram Star purchase. Arbitrary string specified by the server, for example, "subs" if the Telegram Stars are required to extend channel subscriptions
	Purpose string `json:"purpose"`
}

func (entity *InternalLinkTypeBuyStars) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeBuyStars

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeBuyStars) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeBuyStars) GetConstructor() string {
	return ConstructorInternalLinkTypeBuyStars
}

func (*InternalLinkTypeBuyStars) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeBuyStars
}

// The link is a link to the change phone number section of the application
type InternalLinkTypeChangePhoneNumber struct {
	meta
}

func (entity *InternalLinkTypeChangePhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeChangePhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeChangePhoneNumber) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeChangePhoneNumber) GetConstructor() string {
	return ConstructorInternalLinkTypeChangePhoneNumber
}

func (*InternalLinkTypeChangePhoneNumber) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeChangePhoneNumber
}

// The link is a link to boost a Telegram chat. Call getChatBoostLinkInfo with the given URL to process the link. If the chat is found, then call getChatBoostStatus and getAvailableChatBoostSlots to get the current boost status and check whether the chat can be boosted. If the user wants to boost the chat and the chat can be boosted, then call boostChat
type InternalLinkTypeChatBoost struct {
	meta
	// URL to be passed to getChatBoostLinkInfo
	Url string `json:"url"`
}

func (entity *InternalLinkTypeChatBoost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeChatBoost

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeChatBoost) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeChatBoost) GetConstructor() string {
	return ConstructorInternalLinkTypeChatBoost
}

func (*InternalLinkTypeChatBoost) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeChatBoost
}

// The link is an invite link to a chat folder. Call checkChatFolderInviteLink with the given invite link to process the link. If the link is valid and the user wants to join the chat folder, then call addChatFolderByInviteLink
type InternalLinkTypeChatFolderInvite struct {
	meta
	// Internal representation of the invite link
	InviteLink string `json:"invite_link"`
}

func (entity *InternalLinkTypeChatFolderInvite) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeChatFolderInvite

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeChatFolderInvite) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeChatFolderInvite) GetConstructor() string {
	return ConstructorInternalLinkTypeChatFolderInvite
}

func (*InternalLinkTypeChatFolderInvite) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeChatFolderInvite
}

// The link is a link to the folder section of the application settings
type InternalLinkTypeChatFolderSettings struct {
	meta
}

func (entity *InternalLinkTypeChatFolderSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeChatFolderSettings

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeChatFolderSettings) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeChatFolderSettings) GetConstructor() string {
	return ConstructorInternalLinkTypeChatFolderSettings
}

func (*InternalLinkTypeChatFolderSettings) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeChatFolderSettings
}

// The link is a chat invite link. Call checkChatInviteLink with the given invite link to process the link. If the link is valid and the user wants to join the chat, then call joinChatByInviteLink
type InternalLinkTypeChatInvite struct {
	meta
	// Internal representation of the invite link
	InviteLink string `json:"invite_link"`
}

func (entity *InternalLinkTypeChatInvite) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeChatInvite

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeChatInvite) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeChatInvite) GetConstructor() string {
	return ConstructorInternalLinkTypeChatInvite
}

func (*InternalLinkTypeChatInvite) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeChatInvite
}

// The link is a link to the default message auto-delete timer settings section of the application settings
type InternalLinkTypeDefaultMessageAutoDeleteTimerSettings struct {
	meta
}

func (entity *InternalLinkTypeDefaultMessageAutoDeleteTimerSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeDefaultMessageAutoDeleteTimerSettings

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeDefaultMessageAutoDeleteTimerSettings) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeDefaultMessageAutoDeleteTimerSettings) GetConstructor() string {
	return ConstructorInternalLinkTypeDefaultMessageAutoDeleteTimerSettings
}

func (*InternalLinkTypeDefaultMessageAutoDeleteTimerSettings) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeDefaultMessageAutoDeleteTimerSettings
}

// The link is a link to the edit profile section of the application settings
type InternalLinkTypeEditProfileSettings struct {
	meta
}

func (entity *InternalLinkTypeEditProfileSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeEditProfileSettings

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeEditProfileSettings) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeEditProfileSettings) GetConstructor() string {
	return ConstructorInternalLinkTypeEditProfileSettings
}

func (*InternalLinkTypeEditProfileSettings) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeEditProfileSettings
}

// The link is a link to a game. Call searchPublicChat with the given bot username, check that the user is a bot, ask the current user to select a chat to send the game, and then call sendMessage with inputMessageGame
type InternalLinkTypeGame struct {
	meta
	// Username of the bot that owns the game
	BotUsername string `json:"bot_username"`
	// Short name of the game
	GameShortName string `json:"game_short_name"`
}

func (entity *InternalLinkTypeGame) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeGame

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeGame) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeGame) GetConstructor() string {
	return ConstructorInternalLinkTypeGame
}

func (*InternalLinkTypeGame) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeGame
}

// The link must be opened in an Instant View. Call getWebPageInstantView with the given URL to process the link. If Instant View is found, then show it, otherwise, open the fallback URL in an external browser
type InternalLinkTypeInstantView struct {
	meta
	// URL to be passed to getWebPageInstantView
	Url string `json:"url"`
	// An URL to open if getWebPageInstantView fails
	FallbackUrl string `json:"fallback_url"`
}

func (entity *InternalLinkTypeInstantView) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeInstantView

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeInstantView) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeInstantView) GetConstructor() string {
	return ConstructorInternalLinkTypeInstantView
}

func (*InternalLinkTypeInstantView) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeInstantView
}

// The link is a link to an invoice. Call getPaymentForm with the given invoice name to process the link
type InternalLinkTypeInvoice struct {
	meta
	// Name of the invoice
	InvoiceName string `json:"invoice_name"`
}

func (entity *InternalLinkTypeInvoice) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeInvoice

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeInvoice) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeInvoice) GetConstructor() string {
	return ConstructorInternalLinkTypeInvoice
}

func (*InternalLinkTypeInvoice) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeInvoice
}

// The link is a link to a language pack. Call getLanguagePackInfo with the given language pack identifier to process the link. If the language pack is found and the user wants to apply it, then call setOption for the option "language_pack_id"
type InternalLinkTypeLanguagePack struct {
	meta
	// Language pack identifier
	LanguagePackId string `json:"language_pack_id"`
}

func (entity *InternalLinkTypeLanguagePack) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeLanguagePack

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeLanguagePack) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeLanguagePack) GetConstructor() string {
	return ConstructorInternalLinkTypeLanguagePack
}

func (*InternalLinkTypeLanguagePack) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeLanguagePack
}

// The link is a link to the language section of the application settings
type InternalLinkTypeLanguageSettings struct {
	meta
}

func (entity *InternalLinkTypeLanguageSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeLanguageSettings

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeLanguageSettings) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeLanguageSettings) GetConstructor() string {
	return ConstructorInternalLinkTypeLanguageSettings
}

func (*InternalLinkTypeLanguageSettings) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeLanguageSettings
}

// The link is a link to the main Web App of a bot. Call searchPublicChat with the given bot username, check that the user is a bot and has the main Web App. If the bot can be added to attachment menu, then use getAttachmentMenuBot to receive information about the bot, then if the bot isn't added to side menu, show a disclaimer about Mini Apps being third-party applications, ask the user to accept their Terms of service and confirm adding the bot to side and attachment menu, then if the user accepts the terms and confirms adding, use toggleBotIsAddedToAttachmentMenu to add the bot. Then, use getMainWebApp with the given start parameter and mode and open the returned URL as a Web App
type InternalLinkTypeMainWebApp struct {
	meta
	// Username of the bot
	BotUsername string `json:"bot_username"`
	// Start parameter to be passed to getMainWebApp
	StartParameter string `json:"start_parameter"`
	// The mode to be passed to getMainWebApp
	Mode WebAppOpenMode `json:"mode"`
}

func (entity *InternalLinkTypeMainWebApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeMainWebApp

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeMainWebApp) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeMainWebApp) GetConstructor() string {
	return ConstructorInternalLinkTypeMainWebApp
}

func (*InternalLinkTypeMainWebApp) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeMainWebApp
}

func (internalLinkTypeMainWebApp *InternalLinkTypeMainWebApp) UnmarshalJSON(data []byte) error {
	var tmp struct {
		BotUsername    string          `json:"bot_username"`
		StartParameter string          `json:"start_parameter"`
		Mode           json.RawMessage `json:"mode"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	internalLinkTypeMainWebApp.BotUsername = tmp.BotUsername
	internalLinkTypeMainWebApp.StartParameter = tmp.StartParameter

	fieldMode, _ := UnmarshalWebAppOpenMode(tmp.Mode)
	internalLinkTypeMainWebApp.Mode = fieldMode

	return nil
}

// The link is a link to a Telegram message or a forum topic. Call getMessageLinkInfo with the given URL to process the link, and then open received forum topic or chat and show the message there
type InternalLinkTypeMessage struct {
	meta
	// URL to be passed to getMessageLinkInfo
	Url string `json:"url"`
}

func (entity *InternalLinkTypeMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeMessage

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeMessage) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeMessage) GetConstructor() string {
	return ConstructorInternalLinkTypeMessage
}

func (*InternalLinkTypeMessage) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeMessage
}

// The link contains a message draft text. A share screen needs to be shown to the user, then the chosen chat must be opened and the text is added to the input field
type InternalLinkTypeMessageDraft struct {
	meta
	// Message draft text
	Text *FormattedText `json:"text"`
	// True, if the first line of the text contains a link. If true, the input field needs to be focused and the text after the link must be selected
	ContainsLink bool `json:"contains_link"`
}

func (entity *InternalLinkTypeMessageDraft) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeMessageDraft

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeMessageDraft) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeMessageDraft) GetConstructor() string {
	return ConstructorInternalLinkTypeMessageDraft
}

func (*InternalLinkTypeMessageDraft) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeMessageDraft
}

// The link contains a request of Telegram passport data. Call getPassportAuthorizationForm with the given parameters to process the link if the link was received from outside of the application; otherwise, ignore it
type InternalLinkTypePassportDataRequest struct {
	meta
	// User identifier of the service's bot; the corresponding user may be unknown yet
	BotUserId int64 `json:"bot_user_id"`
	// Telegram Passport element types requested by the service
	Scope string `json:"scope"`
	// Service's public key
	PublicKey string `json:"public_key"`
	// Unique request identifier provided by the service
	Nonce string `json:"nonce"`
	// An HTTP URL to open once the request is finished, canceled, or failed with the parameters tg_passport=success, tg_passport=cancel, or tg_passport=error&error=... respectively. If empty, then onActivityResult method must be used to return response on Android, or the link tgbot{bot_user_id}://passport/success or tgbot{bot_user_id}://passport/cancel must be opened otherwise
	CallbackUrl string `json:"callback_url"`
}

func (entity *InternalLinkTypePassportDataRequest) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypePassportDataRequest

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypePassportDataRequest) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypePassportDataRequest) GetConstructor() string {
	return ConstructorInternalLinkTypePassportDataRequest
}

func (*InternalLinkTypePassportDataRequest) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypePassportDataRequest
}

// The link can be used to confirm ownership of a phone number to prevent account deletion. Call sendPhoneNumberCode with the given phone number and with phoneNumberCodeTypeConfirmOwnership with the given hash to process the link. If succeeded, call checkPhoneNumberCode to check entered by the user code, or resendPhoneNumberCode to resend it
type InternalLinkTypePhoneNumberConfirmation struct {
	meta
	// Hash value from the link
	Hash string `json:"hash"`
	// Phone number value from the link
	PhoneNumber string `json:"phone_number"`
}

func (entity *InternalLinkTypePhoneNumberConfirmation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypePhoneNumberConfirmation

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypePhoneNumberConfirmation) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypePhoneNumberConfirmation) GetConstructor() string {
	return ConstructorInternalLinkTypePhoneNumberConfirmation
}

func (*InternalLinkTypePhoneNumberConfirmation) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypePhoneNumberConfirmation
}

// The link is a link to the Premium features screen of the application from which the user can subscribe to Telegram Premium. Call getPremiumFeatures with the given referrer to process the link
type InternalLinkTypePremiumFeatures struct {
	meta
	// Referrer specified in the link
	Referrer string `json:"referrer"`
}

func (entity *InternalLinkTypePremiumFeatures) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypePremiumFeatures

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypePremiumFeatures) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypePremiumFeatures) GetConstructor() string {
	return ConstructorInternalLinkTypePremiumFeatures
}

func (*InternalLinkTypePremiumFeatures) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypePremiumFeatures
}

// The link is a link to the screen for gifting Telegram Premium subscriptions to friends via inputInvoiceTelegram with telegramPaymentPurposePremiumGiftCodes payments or in-store purchases
type InternalLinkTypePremiumGift struct {
	meta
	// Referrer specified in the link
	Referrer string `json:"referrer"`
}

func (entity *InternalLinkTypePremiumGift) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypePremiumGift

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypePremiumGift) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypePremiumGift) GetConstructor() string {
	return ConstructorInternalLinkTypePremiumGift
}

func (*InternalLinkTypePremiumGift) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypePremiumGift
}

// The link is a link with a Telegram Premium gift code. Call checkPremiumGiftCode with the given code to process the link. If the code is valid and the user wants to apply it, then call applyPremiumGiftCode
type InternalLinkTypePremiumGiftCode struct {
	meta
	// The Telegram Premium gift code
	Code string `json:"code"`
}

func (entity *InternalLinkTypePremiumGiftCode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypePremiumGiftCode

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypePremiumGiftCode) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypePremiumGiftCode) GetConstructor() string {
	return ConstructorInternalLinkTypePremiumGiftCode
}

func (*InternalLinkTypePremiumGiftCode) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypePremiumGiftCode
}

// The link is a link to the privacy and security section of the application settings
type InternalLinkTypePrivacyAndSecuritySettings struct {
	meta
}

func (entity *InternalLinkTypePrivacyAndSecuritySettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypePrivacyAndSecuritySettings

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypePrivacyAndSecuritySettings) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypePrivacyAndSecuritySettings) GetConstructor() string {
	return ConstructorInternalLinkTypePrivacyAndSecuritySettings
}

func (*InternalLinkTypePrivacyAndSecuritySettings) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypePrivacyAndSecuritySettings
}

// The link is a link to a proxy. Call addProxy with the given parameters to process the link and add the proxy
type InternalLinkTypeProxy struct {
	meta
	// Proxy server domain or IP address
	Server string `json:"server"`
	// Proxy server port
	Port int32 `json:"port"`
	// Type of the proxy
	Type ProxyType `json:"type"`
}

func (entity *InternalLinkTypeProxy) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeProxy

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeProxy) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeProxy) GetConstructor() string {
	return ConstructorInternalLinkTypeProxy
}

func (*InternalLinkTypeProxy) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeProxy
}

func (internalLinkTypeProxy *InternalLinkTypeProxy) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Server string          `json:"server"`
		Port   int32           `json:"port"`
		Type   json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	internalLinkTypeProxy.Server = tmp.Server
	internalLinkTypeProxy.Port = tmp.Port

	fieldType, _ := UnmarshalProxyType(tmp.Type)
	internalLinkTypeProxy.Type = fieldType

	return nil
}

// The link is a link to a chat by its username. Call searchPublicChat with the given chat username to process the link. If the chat is found, open its profile information screen or the chat itself. If draft text isn't empty and the chat is a private chat with a regular user, then put the draft text in the input field
type InternalLinkTypePublicChat struct {
	meta
	// Username of the chat
	ChatUsername string `json:"chat_username"`
	// Draft text for message to send in the chat
	DraftText string `json:"draft_text"`
	// True, if chat profile information screen must be opened; otherwise, the chat itself must be opened
	OpenProfile bool `json:"open_profile"`
}

func (entity *InternalLinkTypePublicChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypePublicChat

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypePublicChat) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypePublicChat) GetConstructor() string {
	return ConstructorInternalLinkTypePublicChat
}

func (*InternalLinkTypePublicChat) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypePublicChat
}

// The link can be used to login the current user on another device, but it must be scanned from QR-code using in-app camera. An alert similar to "This code can be used to allow someone to log in to your Telegram account. To confirm Telegram login, please go to Settings > Devices > Scan QR and scan the code" needs to be shown
type InternalLinkTypeQrCodeAuthentication struct {
	meta
}

func (entity *InternalLinkTypeQrCodeAuthentication) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeQrCodeAuthentication

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeQrCodeAuthentication) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeQrCodeAuthentication) GetConstructor() string {
	return ConstructorInternalLinkTypeQrCodeAuthentication
}

func (*InternalLinkTypeQrCodeAuthentication) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeQrCodeAuthentication
}

// The link forces restore of App Store purchases when opened. For official iOS application only
type InternalLinkTypeRestorePurchases struct {
	meta
}

func (entity *InternalLinkTypeRestorePurchases) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeRestorePurchases

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeRestorePurchases) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeRestorePurchases) GetConstructor() string {
	return ConstructorInternalLinkTypeRestorePurchases
}

func (*InternalLinkTypeRestorePurchases) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeRestorePurchases
}

// The link is a link to application settings
type InternalLinkTypeSettings struct {
	meta
}

func (entity *InternalLinkTypeSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeSettings

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeSettings) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeSettings) GetConstructor() string {
	return ConstructorInternalLinkTypeSettings
}

func (*InternalLinkTypeSettings) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeSettings
}

// The link is a link to a sticker set. Call searchStickerSet with the given sticker set name to process the link and show the sticker set. If the sticker set is found and the user wants to add it, then call changeStickerSet
type InternalLinkTypeStickerSet struct {
	meta
	// Name of the sticker set
	StickerSetName string `json:"sticker_set_name"`
	// True, if the sticker set is expected to contain custom emoji
	ExpectCustomEmoji bool `json:"expect_custom_emoji"`
}

func (entity *InternalLinkTypeStickerSet) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeStickerSet

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeStickerSet) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeStickerSet) GetConstructor() string {
	return ConstructorInternalLinkTypeStickerSet
}

func (*InternalLinkTypeStickerSet) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeStickerSet
}

// The link is a link to a story. Call searchPublicChat with the given sender username, then call getStory with the received chat identifier and the given story identifier, then show the story if received
type InternalLinkTypeStory struct {
	meta
	// Username of the sender of the story
	StorySenderUsername string `json:"story_sender_username"`
	// Story identifier
	StoryId int32 `json:"story_id"`
}

func (entity *InternalLinkTypeStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeStory

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeStory) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeStory) GetConstructor() string {
	return ConstructorInternalLinkTypeStory
}

func (*InternalLinkTypeStory) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeStory
}

// The link is a link to a cloud theme. TDLib has no theme support yet
type InternalLinkTypeTheme struct {
	meta
	// Name of the theme
	ThemeName string `json:"theme_name"`
}

func (entity *InternalLinkTypeTheme) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeTheme

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeTheme) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeTheme) GetConstructor() string {
	return ConstructorInternalLinkTypeTheme
}

func (*InternalLinkTypeTheme) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeTheme
}

// The link is a link to the theme section of the application settings
type InternalLinkTypeThemeSettings struct {
	meta
}

func (entity *InternalLinkTypeThemeSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeThemeSettings

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeThemeSettings) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeThemeSettings) GetConstructor() string {
	return ConstructorInternalLinkTypeThemeSettings
}

func (*InternalLinkTypeThemeSettings) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeThemeSettings
}

// The link is an unknown tg: link. Call getDeepLinkInfo to process the link
type InternalLinkTypeUnknownDeepLink struct {
	meta
	// Link to be passed to getDeepLinkInfo
	Link string `json:"link"`
}

func (entity *InternalLinkTypeUnknownDeepLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeUnknownDeepLink

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeUnknownDeepLink) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeUnknownDeepLink) GetConstructor() string {
	return ConstructorInternalLinkTypeUnknownDeepLink
}

func (*InternalLinkTypeUnknownDeepLink) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeUnknownDeepLink
}

// The link is a link to an unsupported proxy. An alert can be shown to the user
type InternalLinkTypeUnsupportedProxy struct {
	meta
}

func (entity *InternalLinkTypeUnsupportedProxy) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeUnsupportedProxy

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeUnsupportedProxy) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeUnsupportedProxy) GetConstructor() string {
	return ConstructorInternalLinkTypeUnsupportedProxy
}

func (*InternalLinkTypeUnsupportedProxy) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeUnsupportedProxy
}

// The link is a link to a user by its phone number. Call searchUserByPhoneNumber with the given phone number to process the link. If the user is found, then call createPrivateChat and open user's profile information screen or the chat itself. If draft text isn't empty, then put the draft text in the input field
type InternalLinkTypeUserPhoneNumber struct {
	meta
	// Phone number of the user
	PhoneNumber string `json:"phone_number"`
	// Draft text for message to send in the chat
	DraftText string `json:"draft_text"`
	// True, if user's profile information screen must be opened; otherwise, the chat itself must be opened
	OpenProfile bool `json:"open_profile"`
}

func (entity *InternalLinkTypeUserPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeUserPhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeUserPhoneNumber) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeUserPhoneNumber) GetConstructor() string {
	return ConstructorInternalLinkTypeUserPhoneNumber
}

func (*InternalLinkTypeUserPhoneNumber) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeUserPhoneNumber
}

// The link is a link to a user by a temporary token. Call searchUserByToken with the given token to process the link. If the user is found, then call createPrivateChat and open the chat
type InternalLinkTypeUserToken struct {
	meta
	// The token
	Token string `json:"token"`
}

func (entity *InternalLinkTypeUserToken) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeUserToken

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeUserToken) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeUserToken) GetConstructor() string {
	return ConstructorInternalLinkTypeUserToken
}

func (*InternalLinkTypeUserToken) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeUserToken
}

// The link is a link to a video chat. Call searchPublicChat with the given chat username, and then joinGroupCall with the given invite hash to process the link
type InternalLinkTypeVideoChat struct {
	meta
	// Username of the chat with the video chat
	ChatUsername string `json:"chat_username"`
	// If non-empty, invite hash to be used to join the video chat without being muted by administrators
	InviteHash string `json:"invite_hash"`
	// True, if the video chat is expected to be a live stream in a channel or a broadcast group
	IsLiveStream bool `json:"is_live_stream"`
}

func (entity *InternalLinkTypeVideoChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeVideoChat

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeVideoChat) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeVideoChat) GetConstructor() string {
	return ConstructorInternalLinkTypeVideoChat
}

func (*InternalLinkTypeVideoChat) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeVideoChat
}

// The link is a link to a Web App. Call searchPublicChat with the given bot username, check that the user is a bot, then call searchWebApp with the received bot and the given web_app_short_name. Process received foundWebApp by showing a confirmation dialog if needed. If the bot can be added to attachment or side menu, but isn't added yet, then show a disclaimer about Mini Apps being third-party applications instead of the dialog and ask the user to accept their Terms of service. If the user accept the terms and confirms adding, then use toggleBotIsAddedToAttachmentMenu to add the bot. Then, call getWebAppLinkUrl and open the returned URL as a Web App
type InternalLinkTypeWebApp struct {
	meta
	// Username of the bot that owns the Web App
	BotUsername string `json:"bot_username"`
	// Short name of the Web App
	WebAppShortName string `json:"web_app_short_name"`
	// Start parameter to be passed to getWebAppLinkUrl
	StartParameter string `json:"start_parameter"`
	// The mode in which the Web App must be opened
	Mode WebAppOpenMode `json:"mode"`
}

func (entity *InternalLinkTypeWebApp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InternalLinkTypeWebApp

	return json.Marshal((*stub)(entity))
}

func (*InternalLinkTypeWebApp) GetType() string {
	return TypeInternalLinkType
}

func (*InternalLinkTypeWebApp) GetConstructor() string {
	return ConstructorInternalLinkTypeWebApp
}

func (*InternalLinkTypeWebApp) InternalLinkTypeConstructor() string {
	return ConstructorInternalLinkTypeWebApp
}

func (internalLinkTypeWebApp *InternalLinkTypeWebApp) UnmarshalJSON(data []byte) error {
	var tmp struct {
		BotUsername     string          `json:"bot_username"`
		WebAppShortName string          `json:"web_app_short_name"`
		StartParameter  string          `json:"start_parameter"`
		Mode            json.RawMessage `json:"mode"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	internalLinkTypeWebApp.BotUsername = tmp.BotUsername
	internalLinkTypeWebApp.WebAppShortName = tmp.WebAppShortName
	internalLinkTypeWebApp.StartParameter = tmp.StartParameter

	fieldMode, _ := UnmarshalWebAppOpenMode(tmp.Mode)
	internalLinkTypeWebApp.Mode = fieldMode

	return nil
}

// Contains an HTTPS link to a message in a supergroup or channel, or a forum topic
type MessageLink struct {
	meta
	// The link
	Link string `json:"link"`
	// True, if the link will work for non-members of the chat
	IsPublic bool `json:"is_public"`
}

func (entity *MessageLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageLink

	return json.Marshal((*stub)(entity))
}

func (*MessageLink) GetType() string {
	return TypeMessageLink
}

func (*MessageLink) GetConstructor() string {
	return ConstructorMessageLink
}

// Contains information about a link to a message or a forum topic in a chat
type MessageLinkInfo struct {
	meta
	// True, if the link is a public link for a message or a forum topic in a chat
	IsPublic bool `json:"is_public"`
	// If found, identifier of the chat to which the link points, 0 otherwise
	ChatId int64 `json:"chat_id"`
	// If found, identifier of the message thread in which to open the message, or a forum topic to open if the message is missing
	MessageThreadId int64 `json:"message_thread_id"`
	// If found, the linked message; may be null
	Message *Message `json:"message"`
	// Timestamp from which the video/audio/video note/voice note/story playing must start, in seconds; 0 if not specified. The media can be in the message content or in its link preview
	MediaTimestamp int32 `json:"media_timestamp"`
	// True, if the whole media album to which the message belongs is linked
	ForAlbum bool `json:"for_album"`
}

func (entity *MessageLinkInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageLinkInfo

	return json.Marshal((*stub)(entity))
}

func (*MessageLinkInfo) GetType() string {
	return TypeMessageLinkInfo
}

func (*MessageLinkInfo) GetConstructor() string {
	return ConstructorMessageLinkInfo
}

// Contains an HTTPS link to boost a chat
type ChatBoostLink struct {
	meta
	// The link
	Link string `json:"link"`
	// True, if the link will work for non-members of the chat
	IsPublic bool `json:"is_public"`
}

func (entity *ChatBoostLink) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoostLink

	return json.Marshal((*stub)(entity))
}

func (*ChatBoostLink) GetType() string {
	return TypeChatBoostLink
}

func (*ChatBoostLink) GetConstructor() string {
	return ConstructorChatBoostLink
}

// Contains information about a link to boost a chat
type ChatBoostLinkInfo struct {
	meta
	// True, if the link will work for non-members of the chat
	IsPublic bool `json:"is_public"`
	// Identifier of the chat to which the link points; 0 if the chat isn't found
	ChatId int64 `json:"chat_id"`
}

func (entity *ChatBoostLinkInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatBoostLinkInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatBoostLinkInfo) GetType() string {
	return TypeChatBoostLinkInfo
}

func (*ChatBoostLinkInfo) GetConstructor() string {
	return ConstructorChatBoostLinkInfo
}

// The main block list that disallows writing messages to the current user, receiving their status and photo, viewing of stories, and some other actions
type BlockListMain struct {
	meta
}

func (entity *BlockListMain) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BlockListMain

	return json.Marshal((*stub)(entity))
}

func (*BlockListMain) GetType() string {
	return TypeBlockList
}

func (*BlockListMain) GetConstructor() string {
	return ConstructorBlockListMain
}

func (*BlockListMain) BlockListConstructor() string {
	return ConstructorBlockListMain
}

// The block list that disallows viewing of stories of the current user
type BlockListStories struct {
	meta
}

func (entity *BlockListStories) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BlockListStories

	return json.Marshal((*stub)(entity))
}

func (*BlockListStories) GetType() string {
	return TypeBlockList
}

func (*BlockListStories) GetConstructor() string {
	return ConstructorBlockListStories
}

func (*BlockListStories) BlockListConstructor() string {
	return ConstructorBlockListStories
}

// Contains a part of a file
type FilePart struct {
	meta
	// File bytes
	Data []byte `json:"data"`
}

func (entity *FilePart) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FilePart

	return json.Marshal((*stub)(entity))
}

func (*FilePart) GetType() string {
	return TypeFilePart
}

func (*FilePart) GetConstructor() string {
	return ConstructorFilePart
}

// The data is not a file
type FileTypeNone struct {
	meta
}

func (entity *FileTypeNone) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeNone

	return json.Marshal((*stub)(entity))
}

func (*FileTypeNone) GetType() string {
	return TypeFileType
}

func (*FileTypeNone) GetConstructor() string {
	return ConstructorFileTypeNone
}

func (*FileTypeNone) FileTypeConstructor() string {
	return ConstructorFileTypeNone
}

// The file is an animation
type FileTypeAnimation struct {
	meta
}

func (entity *FileTypeAnimation) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeAnimation

	return json.Marshal((*stub)(entity))
}

func (*FileTypeAnimation) GetType() string {
	return TypeFileType
}

func (*FileTypeAnimation) GetConstructor() string {
	return ConstructorFileTypeAnimation
}

func (*FileTypeAnimation) FileTypeConstructor() string {
	return ConstructorFileTypeAnimation
}

// The file is an audio file
type FileTypeAudio struct {
	meta
}

func (entity *FileTypeAudio) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeAudio

	return json.Marshal((*stub)(entity))
}

func (*FileTypeAudio) GetType() string {
	return TypeFileType
}

func (*FileTypeAudio) GetConstructor() string {
	return ConstructorFileTypeAudio
}

func (*FileTypeAudio) FileTypeConstructor() string {
	return ConstructorFileTypeAudio
}

// The file is a document
type FileTypeDocument struct {
	meta
}

func (entity *FileTypeDocument) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeDocument

	return json.Marshal((*stub)(entity))
}

func (*FileTypeDocument) GetType() string {
	return TypeFileType
}

func (*FileTypeDocument) GetConstructor() string {
	return ConstructorFileTypeDocument
}

func (*FileTypeDocument) FileTypeConstructor() string {
	return ConstructorFileTypeDocument
}

// The file is a notification sound
type FileTypeNotificationSound struct {
	meta
}

func (entity *FileTypeNotificationSound) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeNotificationSound

	return json.Marshal((*stub)(entity))
}

func (*FileTypeNotificationSound) GetType() string {
	return TypeFileType
}

func (*FileTypeNotificationSound) GetConstructor() string {
	return ConstructorFileTypeNotificationSound
}

func (*FileTypeNotificationSound) FileTypeConstructor() string {
	return ConstructorFileTypeNotificationSound
}

// The file is a photo
type FileTypePhoto struct {
	meta
}

func (entity *FileTypePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypePhoto

	return json.Marshal((*stub)(entity))
}

func (*FileTypePhoto) GetType() string {
	return TypeFileType
}

func (*FileTypePhoto) GetConstructor() string {
	return ConstructorFileTypePhoto
}

func (*FileTypePhoto) FileTypeConstructor() string {
	return ConstructorFileTypePhoto
}

// The file is a photo published as a story
type FileTypePhotoStory struct {
	meta
}

func (entity *FileTypePhotoStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypePhotoStory

	return json.Marshal((*stub)(entity))
}

func (*FileTypePhotoStory) GetType() string {
	return TypeFileType
}

func (*FileTypePhotoStory) GetConstructor() string {
	return ConstructorFileTypePhotoStory
}

func (*FileTypePhotoStory) FileTypeConstructor() string {
	return ConstructorFileTypePhotoStory
}

// The file is a profile photo
type FileTypeProfilePhoto struct {
	meta
}

func (entity *FileTypeProfilePhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeProfilePhoto

	return json.Marshal((*stub)(entity))
}

func (*FileTypeProfilePhoto) GetType() string {
	return TypeFileType
}

func (*FileTypeProfilePhoto) GetConstructor() string {
	return ConstructorFileTypeProfilePhoto
}

func (*FileTypeProfilePhoto) FileTypeConstructor() string {
	return ConstructorFileTypeProfilePhoto
}

// The file was sent to a secret chat (the file type is not known to the server)
type FileTypeSecret struct {
	meta
}

func (entity *FileTypeSecret) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeSecret

	return json.Marshal((*stub)(entity))
}

func (*FileTypeSecret) GetType() string {
	return TypeFileType
}

func (*FileTypeSecret) GetConstructor() string {
	return ConstructorFileTypeSecret
}

func (*FileTypeSecret) FileTypeConstructor() string {
	return ConstructorFileTypeSecret
}

// The file is a thumbnail of a file from a secret chat
type FileTypeSecretThumbnail struct {
	meta
}

func (entity *FileTypeSecretThumbnail) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeSecretThumbnail

	return json.Marshal((*stub)(entity))
}

func (*FileTypeSecretThumbnail) GetType() string {
	return TypeFileType
}

func (*FileTypeSecretThumbnail) GetConstructor() string {
	return ConstructorFileTypeSecretThumbnail
}

func (*FileTypeSecretThumbnail) FileTypeConstructor() string {
	return ConstructorFileTypeSecretThumbnail
}

// The file is a file from Secure storage used for storing Telegram Passport files
type FileTypeSecure struct {
	meta
}

func (entity *FileTypeSecure) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeSecure

	return json.Marshal((*stub)(entity))
}

func (*FileTypeSecure) GetType() string {
	return TypeFileType
}

func (*FileTypeSecure) GetConstructor() string {
	return ConstructorFileTypeSecure
}

func (*FileTypeSecure) FileTypeConstructor() string {
	return ConstructorFileTypeSecure
}

// The file is a sticker
type FileTypeSticker struct {
	meta
}

func (entity *FileTypeSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeSticker

	return json.Marshal((*stub)(entity))
}

func (*FileTypeSticker) GetType() string {
	return TypeFileType
}

func (*FileTypeSticker) GetConstructor() string {
	return ConstructorFileTypeSticker
}

func (*FileTypeSticker) FileTypeConstructor() string {
	return ConstructorFileTypeSticker
}

// The file is a thumbnail of another file
type FileTypeThumbnail struct {
	meta
}

func (entity *FileTypeThumbnail) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeThumbnail

	return json.Marshal((*stub)(entity))
}

func (*FileTypeThumbnail) GetType() string {
	return TypeFileType
}

func (*FileTypeThumbnail) GetConstructor() string {
	return ConstructorFileTypeThumbnail
}

func (*FileTypeThumbnail) FileTypeConstructor() string {
	return ConstructorFileTypeThumbnail
}

// The file type is not yet known
type FileTypeUnknown struct {
	meta
}

func (entity *FileTypeUnknown) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeUnknown

	return json.Marshal((*stub)(entity))
}

func (*FileTypeUnknown) GetType() string {
	return TypeFileType
}

func (*FileTypeUnknown) GetConstructor() string {
	return ConstructorFileTypeUnknown
}

func (*FileTypeUnknown) FileTypeConstructor() string {
	return ConstructorFileTypeUnknown
}

// The file is a video
type FileTypeVideo struct {
	meta
}

func (entity *FileTypeVideo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeVideo

	return json.Marshal((*stub)(entity))
}

func (*FileTypeVideo) GetType() string {
	return TypeFileType
}

func (*FileTypeVideo) GetConstructor() string {
	return ConstructorFileTypeVideo
}

func (*FileTypeVideo) FileTypeConstructor() string {
	return ConstructorFileTypeVideo
}

// The file is a video note
type FileTypeVideoNote struct {
	meta
}

func (entity *FileTypeVideoNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeVideoNote

	return json.Marshal((*stub)(entity))
}

func (*FileTypeVideoNote) GetType() string {
	return TypeFileType
}

func (*FileTypeVideoNote) GetConstructor() string {
	return ConstructorFileTypeVideoNote
}

func (*FileTypeVideoNote) FileTypeConstructor() string {
	return ConstructorFileTypeVideoNote
}

// The file is a video published as a story
type FileTypeVideoStory struct {
	meta
}

func (entity *FileTypeVideoStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeVideoStory

	return json.Marshal((*stub)(entity))
}

func (*FileTypeVideoStory) GetType() string {
	return TypeFileType
}

func (*FileTypeVideoStory) GetConstructor() string {
	return ConstructorFileTypeVideoStory
}

func (*FileTypeVideoStory) FileTypeConstructor() string {
	return ConstructorFileTypeVideoStory
}

// The file is a voice note
type FileTypeVoiceNote struct {
	meta
}

func (entity *FileTypeVoiceNote) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeVoiceNote

	return json.Marshal((*stub)(entity))
}

func (*FileTypeVoiceNote) GetType() string {
	return TypeFileType
}

func (*FileTypeVoiceNote) GetConstructor() string {
	return ConstructorFileTypeVoiceNote
}

func (*FileTypeVoiceNote) FileTypeConstructor() string {
	return ConstructorFileTypeVoiceNote
}

// The file is a wallpaper or a background pattern
type FileTypeWallpaper struct {
	meta
}

func (entity *FileTypeWallpaper) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileTypeWallpaper

	return json.Marshal((*stub)(entity))
}

func (*FileTypeWallpaper) GetType() string {
	return TypeFileType
}

func (*FileTypeWallpaper) GetConstructor() string {
	return ConstructorFileTypeWallpaper
}

func (*FileTypeWallpaper) FileTypeConstructor() string {
	return ConstructorFileTypeWallpaper
}

// Contains the storage usage statistics for a specific file type
type StorageStatisticsByFileType struct {
	meta
	// File type
	FileType FileType `json:"file_type"`
	// Total size of the files, in bytes
	Size int64 `json:"size"`
	// Total number of files
	Count int32 `json:"count"`
}

func (entity *StorageStatisticsByFileType) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StorageStatisticsByFileType

	return json.Marshal((*stub)(entity))
}

func (*StorageStatisticsByFileType) GetType() string {
	return TypeStorageStatisticsByFileType
}

func (*StorageStatisticsByFileType) GetConstructor() string {
	return ConstructorStorageStatisticsByFileType
}

func (storageStatisticsByFileType *StorageStatisticsByFileType) UnmarshalJSON(data []byte) error {
	var tmp struct {
		FileType json.RawMessage `json:"file_type"`
		Size     int64           `json:"size"`
		Count    int32           `json:"count"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	storageStatisticsByFileType.Size = tmp.Size
	storageStatisticsByFileType.Count = tmp.Count

	fieldFileType, _ := UnmarshalFileType(tmp.FileType)
	storageStatisticsByFileType.FileType = fieldFileType

	return nil
}

// Contains the storage usage statistics for a specific chat
type StorageStatisticsByChat struct {
	meta
	// Chat identifier; 0 if none
	ChatId int64 `json:"chat_id"`
	// Total size of the files in the chat, in bytes
	Size int64 `json:"size"`
	// Total number of files in the chat
	Count int32 `json:"count"`
	// Statistics split by file types
	ByFileType []*StorageStatisticsByFileType `json:"by_file_type"`
}

func (entity *StorageStatisticsByChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StorageStatisticsByChat

	return json.Marshal((*stub)(entity))
}

func (*StorageStatisticsByChat) GetType() string {
	return TypeStorageStatisticsByChat
}

func (*StorageStatisticsByChat) GetConstructor() string {
	return ConstructorStorageStatisticsByChat
}

// Contains the exact storage usage statistics split by chats and file type
type StorageStatistics struct {
	meta
	// Total size of files, in bytes
	Size int64 `json:"size"`
	// Total number of files
	Count int32 `json:"count"`
	// Statistics split by chats
	ByChat []*StorageStatisticsByChat `json:"by_chat"`
}

func (entity *StorageStatistics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StorageStatistics

	return json.Marshal((*stub)(entity))
}

func (*StorageStatistics) GetType() string {
	return TypeStorageStatistics
}

func (*StorageStatistics) GetConstructor() string {
	return ConstructorStorageStatistics
}

// Contains approximate storage usage statistics, excluding files of unknown file type
type StorageStatisticsFast struct {
	meta
	// Approximate total size of files, in bytes
	FilesSize int64 `json:"files_size"`
	// Approximate number of files
	FileCount int32 `json:"file_count"`
	// Size of the database
	DatabaseSize int64 `json:"database_size"`
	// Size of the language pack database
	LanguagePackDatabaseSize int64 `json:"language_pack_database_size"`
	// Size of the TDLib internal log
	LogSize int64 `json:"log_size"`
}

func (entity *StorageStatisticsFast) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StorageStatisticsFast

	return json.Marshal((*stub)(entity))
}

func (*StorageStatisticsFast) GetType() string {
	return TypeStorageStatisticsFast
}

func (*StorageStatisticsFast) GetConstructor() string {
	return ConstructorStorageStatisticsFast
}

// Contains database statistics
type DatabaseStatistics struct {
	meta
	// Database statistics in an unspecified human-readable format
	Statistics string `json:"statistics"`
}

func (entity *DatabaseStatistics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DatabaseStatistics

	return json.Marshal((*stub)(entity))
}

func (*DatabaseStatistics) GetType() string {
	return TypeDatabaseStatistics
}

func (*DatabaseStatistics) GetConstructor() string {
	return ConstructorDatabaseStatistics
}

// The network is not available
type NetworkTypeNone struct {
	meta
}

func (entity *NetworkTypeNone) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NetworkTypeNone

	return json.Marshal((*stub)(entity))
}

func (*NetworkTypeNone) GetType() string {
	return TypeNetworkType
}

func (*NetworkTypeNone) GetConstructor() string {
	return ConstructorNetworkTypeNone
}

func (*NetworkTypeNone) NetworkTypeConstructor() string {
	return ConstructorNetworkTypeNone
}

// A mobile network
type NetworkTypeMobile struct {
	meta
}

func (entity *NetworkTypeMobile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NetworkTypeMobile

	return json.Marshal((*stub)(entity))
}

func (*NetworkTypeMobile) GetType() string {
	return TypeNetworkType
}

func (*NetworkTypeMobile) GetConstructor() string {
	return ConstructorNetworkTypeMobile
}

func (*NetworkTypeMobile) NetworkTypeConstructor() string {
	return ConstructorNetworkTypeMobile
}

// A mobile roaming network
type NetworkTypeMobileRoaming struct {
	meta
}

func (entity *NetworkTypeMobileRoaming) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NetworkTypeMobileRoaming

	return json.Marshal((*stub)(entity))
}

func (*NetworkTypeMobileRoaming) GetType() string {
	return TypeNetworkType
}

func (*NetworkTypeMobileRoaming) GetConstructor() string {
	return ConstructorNetworkTypeMobileRoaming
}

func (*NetworkTypeMobileRoaming) NetworkTypeConstructor() string {
	return ConstructorNetworkTypeMobileRoaming
}

// A Wi-Fi network
type NetworkTypeWiFi struct {
	meta
}

func (entity *NetworkTypeWiFi) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NetworkTypeWiFi

	return json.Marshal((*stub)(entity))
}

func (*NetworkTypeWiFi) GetType() string {
	return TypeNetworkType
}

func (*NetworkTypeWiFi) GetConstructor() string {
	return ConstructorNetworkTypeWiFi
}

func (*NetworkTypeWiFi) NetworkTypeConstructor() string {
	return ConstructorNetworkTypeWiFi
}

// A different network type (e.g., Ethernet network)
type NetworkTypeOther struct {
	meta
}

func (entity *NetworkTypeOther) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NetworkTypeOther

	return json.Marshal((*stub)(entity))
}

func (*NetworkTypeOther) GetType() string {
	return TypeNetworkType
}

func (*NetworkTypeOther) GetConstructor() string {
	return ConstructorNetworkTypeOther
}

func (*NetworkTypeOther) NetworkTypeConstructor() string {
	return ConstructorNetworkTypeOther
}

// Contains information about the total amount of data that was used to send and receive files
type NetworkStatisticsEntryFile struct {
	meta
	// Type of the file the data is part of; pass null if the data isn't related to files
	FileType FileType `json:"file_type"`
	// Type of the network the data was sent through. Call setNetworkType to maintain the actual network type
	NetworkType NetworkType `json:"network_type"`
	// Total number of bytes sent
	SentBytes int64 `json:"sent_bytes"`
	// Total number of bytes received
	ReceivedBytes int64 `json:"received_bytes"`
}

func (entity *NetworkStatisticsEntryFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NetworkStatisticsEntryFile

	return json.Marshal((*stub)(entity))
}

func (*NetworkStatisticsEntryFile) GetType() string {
	return TypeNetworkStatisticsEntry
}

func (*NetworkStatisticsEntryFile) GetConstructor() string {
	return ConstructorNetworkStatisticsEntryFile
}

func (*NetworkStatisticsEntryFile) NetworkStatisticsEntryConstructor() string {
	return ConstructorNetworkStatisticsEntryFile
}

func (networkStatisticsEntryFile *NetworkStatisticsEntryFile) UnmarshalJSON(data []byte) error {
	var tmp struct {
		FileType      json.RawMessage `json:"file_type"`
		NetworkType   json.RawMessage `json:"network_type"`
		SentBytes     int64           `json:"sent_bytes"`
		ReceivedBytes int64           `json:"received_bytes"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	networkStatisticsEntryFile.SentBytes = tmp.SentBytes
	networkStatisticsEntryFile.ReceivedBytes = tmp.ReceivedBytes

	fieldFileType, _ := UnmarshalFileType(tmp.FileType)
	networkStatisticsEntryFile.FileType = fieldFileType

	fieldNetworkType, _ := UnmarshalNetworkType(tmp.NetworkType)
	networkStatisticsEntryFile.NetworkType = fieldNetworkType

	return nil
}

// Contains information about the total amount of data that was used for calls
type NetworkStatisticsEntryCall struct {
	meta
	// Type of the network the data was sent through. Call setNetworkType to maintain the actual network type
	NetworkType NetworkType `json:"network_type"`
	// Total number of bytes sent
	SentBytes int64 `json:"sent_bytes"`
	// Total number of bytes received
	ReceivedBytes int64 `json:"received_bytes"`
	// Total call duration, in seconds
	Duration float64 `json:"duration"`
}

func (entity *NetworkStatisticsEntryCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NetworkStatisticsEntryCall

	return json.Marshal((*stub)(entity))
}

func (*NetworkStatisticsEntryCall) GetType() string {
	return TypeNetworkStatisticsEntry
}

func (*NetworkStatisticsEntryCall) GetConstructor() string {
	return ConstructorNetworkStatisticsEntryCall
}

func (*NetworkStatisticsEntryCall) NetworkStatisticsEntryConstructor() string {
	return ConstructorNetworkStatisticsEntryCall
}

func (networkStatisticsEntryCall *NetworkStatisticsEntryCall) UnmarshalJSON(data []byte) error {
	var tmp struct {
		NetworkType   json.RawMessage `json:"network_type"`
		SentBytes     int64           `json:"sent_bytes"`
		ReceivedBytes int64           `json:"received_bytes"`
		Duration      float64         `json:"duration"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	networkStatisticsEntryCall.SentBytes = tmp.SentBytes
	networkStatisticsEntryCall.ReceivedBytes = tmp.ReceivedBytes
	networkStatisticsEntryCall.Duration = tmp.Duration

	fieldNetworkType, _ := UnmarshalNetworkType(tmp.NetworkType)
	networkStatisticsEntryCall.NetworkType = fieldNetworkType

	return nil
}

// A full list of available network statistic entries
type NetworkStatistics struct {
	meta
	// Point in time (Unix timestamp) from which the statistics are collected
	SinceDate int32 `json:"since_date"`
	// Network statistics entries
	Entries []NetworkStatisticsEntry `json:"entries"`
}

func (entity *NetworkStatistics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub NetworkStatistics

	return json.Marshal((*stub)(entity))
}

func (*NetworkStatistics) GetType() string {
	return TypeNetworkStatistics
}

func (*NetworkStatistics) GetConstructor() string {
	return ConstructorNetworkStatistics
}

func (networkStatistics *NetworkStatistics) UnmarshalJSON(data []byte) error {
	var tmp struct {
		SinceDate int32             `json:"since_date"`
		Entries   []json.RawMessage `json:"entries"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	networkStatistics.SinceDate = tmp.SinceDate

	fieldEntries, _ := UnmarshalListOfNetworkStatisticsEntry(tmp.Entries)
	networkStatistics.Entries = fieldEntries

	return nil
}

// Contains auto-download settings
type AutoDownloadSettings struct {
	meta
	// True, if the auto-download is enabled
	IsAutoDownloadEnabled bool `json:"is_auto_download_enabled"`
	// The maximum size of a photo file to be auto-downloaded, in bytes
	MaxPhotoFileSize int32 `json:"max_photo_file_size"`
	// The maximum size of a video file to be auto-downloaded, in bytes
	MaxVideoFileSize int64 `json:"max_video_file_size"`
	// The maximum size of other file types to be auto-downloaded, in bytes
	MaxOtherFileSize int64 `json:"max_other_file_size"`
	// The maximum suggested bitrate for uploaded videos, in kbit/s
	VideoUploadBitrate int32 `json:"video_upload_bitrate"`
	// True, if the beginning of video files needs to be preloaded for instant playback
	PreloadLargeVideos bool `json:"preload_large_videos"`
	// True, if the next audio track needs to be preloaded while the user is listening to an audio file
	PreloadNextAudio bool `json:"preload_next_audio"`
	// True, if stories needs to be preloaded
	PreloadStories bool `json:"preload_stories"`
	// True, if "use less data for calls" option needs to be enabled
	UseLessDataForCalls bool `json:"use_less_data_for_calls"`
}

func (entity *AutoDownloadSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AutoDownloadSettings

	return json.Marshal((*stub)(entity))
}

func (*AutoDownloadSettings) GetType() string {
	return TypeAutoDownloadSettings
}

func (*AutoDownloadSettings) GetConstructor() string {
	return ConstructorAutoDownloadSettings
}

// Contains auto-download settings presets for the current user
type AutoDownloadSettingsPresets struct {
	meta
	// Preset with lowest settings; expected to be used by default when roaming
	Low *AutoDownloadSettings `json:"low"`
	// Preset with medium settings; expected to be used by default when using mobile data
	Medium *AutoDownloadSettings `json:"medium"`
	// Preset with highest settings; expected to be used by default when connected on Wi-Fi
	High *AutoDownloadSettings `json:"high"`
}

func (entity *AutoDownloadSettingsPresets) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AutoDownloadSettingsPresets

	return json.Marshal((*stub)(entity))
}

func (*AutoDownloadSettingsPresets) GetType() string {
	return TypeAutoDownloadSettingsPresets
}

func (*AutoDownloadSettingsPresets) GetConstructor() string {
	return ConstructorAutoDownloadSettingsPresets
}

// Autosave settings applied to all private chats without chat-specific settings
type AutosaveSettingsScopePrivateChats struct {
	meta
}

func (entity *AutosaveSettingsScopePrivateChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AutosaveSettingsScopePrivateChats

	return json.Marshal((*stub)(entity))
}

func (*AutosaveSettingsScopePrivateChats) GetType() string {
	return TypeAutosaveSettingsScope
}

func (*AutosaveSettingsScopePrivateChats) GetConstructor() string {
	return ConstructorAutosaveSettingsScopePrivateChats
}

func (*AutosaveSettingsScopePrivateChats) AutosaveSettingsScopeConstructor() string {
	return ConstructorAutosaveSettingsScopePrivateChats
}

// Autosave settings applied to all basic group and supergroup chats without chat-specific settings
type AutosaveSettingsScopeGroupChats struct {
	meta
}

func (entity *AutosaveSettingsScopeGroupChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AutosaveSettingsScopeGroupChats

	return json.Marshal((*stub)(entity))
}

func (*AutosaveSettingsScopeGroupChats) GetType() string {
	return TypeAutosaveSettingsScope
}

func (*AutosaveSettingsScopeGroupChats) GetConstructor() string {
	return ConstructorAutosaveSettingsScopeGroupChats
}

func (*AutosaveSettingsScopeGroupChats) AutosaveSettingsScopeConstructor() string {
	return ConstructorAutosaveSettingsScopeGroupChats
}

// Autosave settings applied to all channel chats without chat-specific settings
type AutosaveSettingsScopeChannelChats struct {
	meta
}

func (entity *AutosaveSettingsScopeChannelChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AutosaveSettingsScopeChannelChats

	return json.Marshal((*stub)(entity))
}

func (*AutosaveSettingsScopeChannelChats) GetType() string {
	return TypeAutosaveSettingsScope
}

func (*AutosaveSettingsScopeChannelChats) GetConstructor() string {
	return ConstructorAutosaveSettingsScopeChannelChats
}

func (*AutosaveSettingsScopeChannelChats) AutosaveSettingsScopeConstructor() string {
	return ConstructorAutosaveSettingsScopeChannelChats
}

// Autosave settings applied to a chat
type AutosaveSettingsScopeChat struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (entity *AutosaveSettingsScopeChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AutosaveSettingsScopeChat

	return json.Marshal((*stub)(entity))
}

func (*AutosaveSettingsScopeChat) GetType() string {
	return TypeAutosaveSettingsScope
}

func (*AutosaveSettingsScopeChat) GetConstructor() string {
	return ConstructorAutosaveSettingsScopeChat
}

func (*AutosaveSettingsScopeChat) AutosaveSettingsScopeConstructor() string {
	return ConstructorAutosaveSettingsScopeChat
}

// Contains autosave settings for an autosave settings scope
type ScopeAutosaveSettings struct {
	meta
	// True, if photo autosave is enabled
	AutosavePhotos bool `json:"autosave_photos"`
	// True, if video autosave is enabled
	AutosaveVideos bool `json:"autosave_videos"`
	// The maximum size of a video file to be autosaved, in bytes; 512 KB - 4000 MB
	MaxVideoFileSize int64 `json:"max_video_file_size"`
}

func (entity *ScopeAutosaveSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ScopeAutosaveSettings

	return json.Marshal((*stub)(entity))
}

func (*ScopeAutosaveSettings) GetType() string {
	return TypeScopeAutosaveSettings
}

func (*ScopeAutosaveSettings) GetConstructor() string {
	return ConstructorScopeAutosaveSettings
}

// Contains autosave settings for a chat, which overrides default settings for the corresponding scope
type AutosaveSettingsException struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Autosave settings for the chat
	Settings *ScopeAutosaveSettings `json:"settings"`
}

func (entity *AutosaveSettingsException) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AutosaveSettingsException

	return json.Marshal((*stub)(entity))
}

func (*AutosaveSettingsException) GetType() string {
	return TypeAutosaveSettingsException
}

func (*AutosaveSettingsException) GetConstructor() string {
	return ConstructorAutosaveSettingsException
}

// Describes autosave settings
type AutosaveSettings struct {
	meta
	// Default autosave settings for private chats
	PrivateChatSettings *ScopeAutosaveSettings `json:"private_chat_settings"`
	// Default autosave settings for basic group and supergroup chats
	GroupSettings *ScopeAutosaveSettings `json:"group_settings"`
	// Default autosave settings for channel chats
	ChannelSettings *ScopeAutosaveSettings `json:"channel_settings"`
	// Autosave settings for specific chats
	Exceptions []*AutosaveSettingsException `json:"exceptions"`
}

func (entity *AutosaveSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub AutosaveSettings

	return json.Marshal((*stub)(entity))
}

func (*AutosaveSettings) GetType() string {
	return TypeAutosaveSettings
}

func (*AutosaveSettings) GetConstructor() string {
	return ConstructorAutosaveSettings
}

// Waiting for the network to become available. Use setNetworkType to change the available network type
type ConnectionStateWaitingForNetwork struct {
	meta
}

func (entity *ConnectionStateWaitingForNetwork) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ConnectionStateWaitingForNetwork

	return json.Marshal((*stub)(entity))
}

func (*ConnectionStateWaitingForNetwork) GetType() string {
	return TypeConnectionState
}

func (*ConnectionStateWaitingForNetwork) GetConstructor() string {
	return ConstructorConnectionStateWaitingForNetwork
}

func (*ConnectionStateWaitingForNetwork) ConnectionStateConstructor() string {
	return ConstructorConnectionStateWaitingForNetwork
}

// Establishing a connection with a proxy server
type ConnectionStateConnectingToProxy struct {
	meta
}

func (entity *ConnectionStateConnectingToProxy) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ConnectionStateConnectingToProxy

	return json.Marshal((*stub)(entity))
}

func (*ConnectionStateConnectingToProxy) GetType() string {
	return TypeConnectionState
}

func (*ConnectionStateConnectingToProxy) GetConstructor() string {
	return ConstructorConnectionStateConnectingToProxy
}

func (*ConnectionStateConnectingToProxy) ConnectionStateConstructor() string {
	return ConstructorConnectionStateConnectingToProxy
}

// Establishing a connection to the Telegram servers
type ConnectionStateConnecting struct {
	meta
}

func (entity *ConnectionStateConnecting) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ConnectionStateConnecting

	return json.Marshal((*stub)(entity))
}

func (*ConnectionStateConnecting) GetType() string {
	return TypeConnectionState
}

func (*ConnectionStateConnecting) GetConstructor() string {
	return ConstructorConnectionStateConnecting
}

func (*ConnectionStateConnecting) ConnectionStateConstructor() string {
	return ConstructorConnectionStateConnecting
}

// Downloading data expected to be received while the application was offline
type ConnectionStateUpdating struct {
	meta
}

func (entity *ConnectionStateUpdating) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ConnectionStateUpdating

	return json.Marshal((*stub)(entity))
}

func (*ConnectionStateUpdating) GetType() string {
	return TypeConnectionState
}

func (*ConnectionStateUpdating) GetConstructor() string {
	return ConstructorConnectionStateUpdating
}

func (*ConnectionStateUpdating) ConnectionStateConstructor() string {
	return ConstructorConnectionStateUpdating
}

// There is a working connection to the Telegram servers
type ConnectionStateReady struct {
	meta
}

func (entity *ConnectionStateReady) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ConnectionStateReady

	return json.Marshal((*stub)(entity))
}

func (*ConnectionStateReady) GetType() string {
	return TypeConnectionState
}

func (*ConnectionStateReady) GetConstructor() string {
	return ConstructorConnectionStateReady
}

func (*ConnectionStateReady) ConnectionStateConstructor() string {
	return ConstructorConnectionStateReady
}

// A category containing frequently used private chats with non-bot users
type TopChatCategoryUsers struct {
	meta
}

func (entity *TopChatCategoryUsers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TopChatCategoryUsers

	return json.Marshal((*stub)(entity))
}

func (*TopChatCategoryUsers) GetType() string {
	return TypeTopChatCategory
}

func (*TopChatCategoryUsers) GetConstructor() string {
	return ConstructorTopChatCategoryUsers
}

func (*TopChatCategoryUsers) TopChatCategoryConstructor() string {
	return ConstructorTopChatCategoryUsers
}

// A category containing frequently used private chats with bot users
type TopChatCategoryBots struct {
	meta
}

func (entity *TopChatCategoryBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TopChatCategoryBots

	return json.Marshal((*stub)(entity))
}

func (*TopChatCategoryBots) GetType() string {
	return TypeTopChatCategory
}

func (*TopChatCategoryBots) GetConstructor() string {
	return ConstructorTopChatCategoryBots
}

func (*TopChatCategoryBots) TopChatCategoryConstructor() string {
	return ConstructorTopChatCategoryBots
}

// A category containing frequently used basic groups and supergroups
type TopChatCategoryGroups struct {
	meta
}

func (entity *TopChatCategoryGroups) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TopChatCategoryGroups

	return json.Marshal((*stub)(entity))
}

func (*TopChatCategoryGroups) GetType() string {
	return TypeTopChatCategory
}

func (*TopChatCategoryGroups) GetConstructor() string {
	return ConstructorTopChatCategoryGroups
}

func (*TopChatCategoryGroups) TopChatCategoryConstructor() string {
	return ConstructorTopChatCategoryGroups
}

// A category containing frequently used channels
type TopChatCategoryChannels struct {
	meta
}

func (entity *TopChatCategoryChannels) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TopChatCategoryChannels

	return json.Marshal((*stub)(entity))
}

func (*TopChatCategoryChannels) GetType() string {
	return TypeTopChatCategory
}

func (*TopChatCategoryChannels) GetConstructor() string {
	return ConstructorTopChatCategoryChannels
}

func (*TopChatCategoryChannels) TopChatCategoryConstructor() string {
	return ConstructorTopChatCategoryChannels
}

// A category containing frequently used chats with inline bots sorted by their usage in inline mode
type TopChatCategoryInlineBots struct {
	meta
}

func (entity *TopChatCategoryInlineBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TopChatCategoryInlineBots

	return json.Marshal((*stub)(entity))
}

func (*TopChatCategoryInlineBots) GetType() string {
	return TypeTopChatCategory
}

func (*TopChatCategoryInlineBots) GetConstructor() string {
	return ConstructorTopChatCategoryInlineBots
}

func (*TopChatCategoryInlineBots) TopChatCategoryConstructor() string {
	return ConstructorTopChatCategoryInlineBots
}

// A category containing frequently used chats with bots, which Web Apps were opened
type TopChatCategoryWebAppBots struct {
	meta
}

func (entity *TopChatCategoryWebAppBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TopChatCategoryWebAppBots

	return json.Marshal((*stub)(entity))
}

func (*TopChatCategoryWebAppBots) GetType() string {
	return TypeTopChatCategory
}

func (*TopChatCategoryWebAppBots) GetConstructor() string {
	return ConstructorTopChatCategoryWebAppBots
}

func (*TopChatCategoryWebAppBots) TopChatCategoryConstructor() string {
	return ConstructorTopChatCategoryWebAppBots
}

// A category containing frequently used chats used for calls
type TopChatCategoryCalls struct {
	meta
}

func (entity *TopChatCategoryCalls) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TopChatCategoryCalls

	return json.Marshal((*stub)(entity))
}

func (*TopChatCategoryCalls) GetType() string {
	return TypeTopChatCategory
}

func (*TopChatCategoryCalls) GetConstructor() string {
	return ConstructorTopChatCategoryCalls
}

func (*TopChatCategoryCalls) TopChatCategoryConstructor() string {
	return ConstructorTopChatCategoryCalls
}

// A category containing frequently used chats used to forward messages
type TopChatCategoryForwardChats struct {
	meta
}

func (entity *TopChatCategoryForwardChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TopChatCategoryForwardChats

	return json.Marshal((*stub)(entity))
}

func (*TopChatCategoryForwardChats) GetType() string {
	return TypeTopChatCategory
}

func (*TopChatCategoryForwardChats) GetConstructor() string {
	return ConstructorTopChatCategoryForwardChats
}

func (*TopChatCategoryForwardChats) TopChatCategoryConstructor() string {
	return ConstructorTopChatCategoryForwardChats
}

// Contains 0-based match position
type FoundPosition struct {
	meta
	// The position of the match
	Position int32 `json:"position"`
}

func (entity *FoundPosition) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FoundPosition

	return json.Marshal((*stub)(entity))
}

func (*FoundPosition) GetType() string {
	return TypeFoundPosition
}

func (*FoundPosition) GetConstructor() string {
	return ConstructorFoundPosition
}

// Contains 0-based positions of matched objects
type FoundPositions struct {
	meta
	// Total number of matched objects
	TotalCount int32 `json:"total_count"`
	// The positions of the matched objects
	Positions []int32 `json:"positions"`
}

func (entity *FoundPositions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FoundPositions

	return json.Marshal((*stub)(entity))
}

func (*FoundPositions) GetType() string {
	return TypeFoundPositions
}

func (*FoundPositions) GetConstructor() string {
	return ConstructorFoundPositions
}

// A URL linking to a user
type TMeUrlTypeUser struct {
	meta
	// Identifier of the user
	UserId int64 `json:"user_id"`
}

func (entity *TMeUrlTypeUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TMeUrlTypeUser

	return json.Marshal((*stub)(entity))
}

func (*TMeUrlTypeUser) GetType() string {
	return TypeTMeUrlType
}

func (*TMeUrlTypeUser) GetConstructor() string {
	return ConstructorTMeUrlTypeUser
}

func (*TMeUrlTypeUser) TMeUrlTypeConstructor() string {
	return ConstructorTMeUrlTypeUser
}

// A URL linking to a public supergroup or channel
type TMeUrlTypeSupergroup struct {
	meta
	// Identifier of the supergroup or channel
	SupergroupId int64 `json:"supergroup_id"`
}

func (entity *TMeUrlTypeSupergroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TMeUrlTypeSupergroup

	return json.Marshal((*stub)(entity))
}

func (*TMeUrlTypeSupergroup) GetType() string {
	return TypeTMeUrlType
}

func (*TMeUrlTypeSupergroup) GetConstructor() string {
	return ConstructorTMeUrlTypeSupergroup
}

func (*TMeUrlTypeSupergroup) TMeUrlTypeConstructor() string {
	return ConstructorTMeUrlTypeSupergroup
}

// A chat invite link
type TMeUrlTypeChatInvite struct {
	meta
	// Information about the chat invite link
	Info *ChatInviteLinkInfo `json:"info"`
}

func (entity *TMeUrlTypeChatInvite) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TMeUrlTypeChatInvite

	return json.Marshal((*stub)(entity))
}

func (*TMeUrlTypeChatInvite) GetType() string {
	return TypeTMeUrlType
}

func (*TMeUrlTypeChatInvite) GetConstructor() string {
	return ConstructorTMeUrlTypeChatInvite
}

func (*TMeUrlTypeChatInvite) TMeUrlTypeConstructor() string {
	return ConstructorTMeUrlTypeChatInvite
}

// A URL linking to a sticker set
type TMeUrlTypeStickerSet struct {
	meta
	// Identifier of the sticker set
	StickerSetId JsonInt64 `json:"sticker_set_id"`
}

func (entity *TMeUrlTypeStickerSet) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TMeUrlTypeStickerSet

	return json.Marshal((*stub)(entity))
}

func (*TMeUrlTypeStickerSet) GetType() string {
	return TypeTMeUrlType
}

func (*TMeUrlTypeStickerSet) GetConstructor() string {
	return ConstructorTMeUrlTypeStickerSet
}

func (*TMeUrlTypeStickerSet) TMeUrlTypeConstructor() string {
	return ConstructorTMeUrlTypeStickerSet
}

// Represents a URL linking to an internal Telegram entity
type TMeUrl struct {
	meta
	// URL
	Url string `json:"url"`
	// Type of the URL
	Type TMeUrlType `json:"type"`
}

func (entity *TMeUrl) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TMeUrl

	return json.Marshal((*stub)(entity))
}

func (*TMeUrl) GetType() string {
	return TypeTMeUrl
}

func (*TMeUrl) GetConstructor() string {
	return ConstructorTMeUrl
}

func (tMeUrl *TMeUrl) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Url  string          `json:"url"`
		Type json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	tMeUrl.Url = tmp.Url

	fieldType, _ := UnmarshalTMeUrlType(tmp.Type)
	tMeUrl.Type = fieldType

	return nil
}

// Contains a list of t.me URLs
type TMeUrls struct {
	meta
	// List of URLs
	Urls []*TMeUrl `json:"urls"`
}

func (entity *TMeUrls) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TMeUrls

	return json.Marshal((*stub)(entity))
}

func (*TMeUrls) GetType() string {
	return TypeTMeUrls
}

func (*TMeUrls) GetConstructor() string {
	return ConstructorTMeUrls
}

// Suggests the user to enable archive_and_mute_new_chats_from_unknown_users setting in archiveChatListSettings
type SuggestedActionEnableArchiveAndMuteNewChats struct {
	meta
}

func (entity *SuggestedActionEnableArchiveAndMuteNewChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionEnableArchiveAndMuteNewChats

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionEnableArchiveAndMuteNewChats) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionEnableArchiveAndMuteNewChats) GetConstructor() string {
	return ConstructorSuggestedActionEnableArchiveAndMuteNewChats
}

func (*SuggestedActionEnableArchiveAndMuteNewChats) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionEnableArchiveAndMuteNewChats
}

// Suggests the user to check whether they still remember their 2-step verification password
type SuggestedActionCheckPassword struct {
	meta
}

func (entity *SuggestedActionCheckPassword) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionCheckPassword

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionCheckPassword) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionCheckPassword) GetConstructor() string {
	return ConstructorSuggestedActionCheckPassword
}

func (*SuggestedActionCheckPassword) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionCheckPassword
}

// Suggests the user to check whether authorization phone number is correct and change the phone number if it is inaccessible
type SuggestedActionCheckPhoneNumber struct {
	meta
}

func (entity *SuggestedActionCheckPhoneNumber) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionCheckPhoneNumber

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionCheckPhoneNumber) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionCheckPhoneNumber) GetConstructor() string {
	return ConstructorSuggestedActionCheckPhoneNumber
}

func (*SuggestedActionCheckPhoneNumber) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionCheckPhoneNumber
}

// Suggests the user to view a hint about the meaning of one and two check marks on sent messages
type SuggestedActionViewChecksHint struct {
	meta
}

func (entity *SuggestedActionViewChecksHint) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionViewChecksHint

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionViewChecksHint) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionViewChecksHint) GetConstructor() string {
	return ConstructorSuggestedActionViewChecksHint
}

func (*SuggestedActionViewChecksHint) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionViewChecksHint
}

// Suggests the user to convert specified supergroup to a broadcast group
type SuggestedActionConvertToBroadcastGroup struct {
	meta
	// Supergroup identifier
	SupergroupId int64 `json:"supergroup_id"`
}

func (entity *SuggestedActionConvertToBroadcastGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionConvertToBroadcastGroup

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionConvertToBroadcastGroup) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionConvertToBroadcastGroup) GetConstructor() string {
	return ConstructorSuggestedActionConvertToBroadcastGroup
}

func (*SuggestedActionConvertToBroadcastGroup) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionConvertToBroadcastGroup
}

// Suggests the user to set a 2-step verification password to be able to log in again
type SuggestedActionSetPassword struct {
	meta
	// The number of days to pass between consecutive authorizations if the user declines to set password; if 0, then the user is advised to set the password for security reasons
	AuthorizationDelay int32 `json:"authorization_delay"`
}

func (entity *SuggestedActionSetPassword) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionSetPassword

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionSetPassword) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionSetPassword) GetConstructor() string {
	return ConstructorSuggestedActionSetPassword
}

func (*SuggestedActionSetPassword) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionSetPassword
}

// Suggests the user to upgrade the Premium subscription from monthly payments to annual payments
type SuggestedActionUpgradePremium struct {
	meta
}

func (entity *SuggestedActionUpgradePremium) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionUpgradePremium

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionUpgradePremium) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionUpgradePremium) GetConstructor() string {
	return ConstructorSuggestedActionUpgradePremium
}

func (*SuggestedActionUpgradePremium) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionUpgradePremium
}

// Suggests the user to restore a recently expired Premium subscription
type SuggestedActionRestorePremium struct {
	meta
}

func (entity *SuggestedActionRestorePremium) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionRestorePremium

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionRestorePremium) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionRestorePremium) GetConstructor() string {
	return ConstructorSuggestedActionRestorePremium
}

func (*SuggestedActionRestorePremium) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionRestorePremium
}

// Suggests the user to subscribe to the Premium subscription with annual payments
type SuggestedActionSubscribeToAnnualPremium struct {
	meta
}

func (entity *SuggestedActionSubscribeToAnnualPremium) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionSubscribeToAnnualPremium

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionSubscribeToAnnualPremium) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionSubscribeToAnnualPremium) GetConstructor() string {
	return ConstructorSuggestedActionSubscribeToAnnualPremium
}

func (*SuggestedActionSubscribeToAnnualPremium) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionSubscribeToAnnualPremium
}

// Suggests the user to gift Telegram Premium to friends for Christmas
type SuggestedActionGiftPremiumForChristmas struct {
	meta
}

func (entity *SuggestedActionGiftPremiumForChristmas) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionGiftPremiumForChristmas

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionGiftPremiumForChristmas) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionGiftPremiumForChristmas) GetConstructor() string {
	return ConstructorSuggestedActionGiftPremiumForChristmas
}

func (*SuggestedActionGiftPremiumForChristmas) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionGiftPremiumForChristmas
}

// Suggests the user to set birthdate
type SuggestedActionSetBirthdate struct {
	meta
}

func (entity *SuggestedActionSetBirthdate) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionSetBirthdate

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionSetBirthdate) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionSetBirthdate) GetConstructor() string {
	return ConstructorSuggestedActionSetBirthdate
}

func (*SuggestedActionSetBirthdate) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionSetBirthdate
}

// Suggests the user to extend their expiring Telegram Premium subscription
type SuggestedActionExtendPremium struct {
	meta
	// A URL for managing Telegram Premium subscription
	ManagePremiumSubscriptionUrl string `json:"manage_premium_subscription_url"`
}

func (entity *SuggestedActionExtendPremium) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionExtendPremium

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionExtendPremium) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionExtendPremium) GetConstructor() string {
	return ConstructorSuggestedActionExtendPremium
}

func (*SuggestedActionExtendPremium) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionExtendPremium
}

// Suggests the user to extend their expiring Telegram Star subscriptions. Call getStarSubscriptions with only_expiring == true to get the number of expiring subscriptions and the number of required to buy Telegram Stars
type SuggestedActionExtendStarSubscriptions struct {
	meta
}

func (entity *SuggestedActionExtendStarSubscriptions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub SuggestedActionExtendStarSubscriptions

	return json.Marshal((*stub)(entity))
}

func (*SuggestedActionExtendStarSubscriptions) GetType() string {
	return TypeSuggestedAction
}

func (*SuggestedActionExtendStarSubscriptions) GetConstructor() string {
	return ConstructorSuggestedActionExtendStarSubscriptions
}

func (*SuggestedActionExtendStarSubscriptions) SuggestedActionConstructor() string {
	return ConstructorSuggestedActionExtendStarSubscriptions
}

// Contains a counter
type Count struct {
	meta
	// Count
	Count int32 `json:"count"`
}

func (entity *Count) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Count

	return json.Marshal((*stub)(entity))
}

func (*Count) GetType() string {
	return TypeCount
}

func (*Count) GetConstructor() string {
	return ConstructorCount
}

// Contains some text
type Text struct {
	meta
	// Text
	Text string `json:"text"`
}

func (entity *Text) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Text

	return json.Marshal((*stub)(entity))
}

func (*Text) GetType() string {
	return TypeText
}

func (*Text) GetConstructor() string {
	return ConstructorText
}

// Contains a value representing a number of seconds
type Seconds struct {
	meta
	// Number of seconds
	Seconds float64 `json:"seconds"`
}

func (entity *Seconds) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Seconds

	return json.Marshal((*stub)(entity))
}

func (*Seconds) GetType() string {
	return TypeSeconds
}

func (*Seconds) GetConstructor() string {
	return ConstructorSeconds
}

// Contains size of downloaded prefix of a file
type FileDownloadedPrefixSize struct {
	meta
	// The prefix size, in bytes
	Size int64 `json:"size"`
}

func (entity *FileDownloadedPrefixSize) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub FileDownloadedPrefixSize

	return json.Marshal((*stub)(entity))
}

func (*FileDownloadedPrefixSize) GetType() string {
	return TypeFileDownloadedPrefixSize
}

func (*FileDownloadedPrefixSize) GetConstructor() string {
	return ConstructorFileDownloadedPrefixSize
}

// Contains information about a tg: deep link
type DeepLinkInfo struct {
	meta
	// Text to be shown to the user
	Text *FormattedText `json:"text"`
	// True, if the user must be asked to update the application
	NeedUpdateApplication bool `json:"need_update_application"`
}

func (entity *DeepLinkInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DeepLinkInfo

	return json.Marshal((*stub)(entity))
}

func (*DeepLinkInfo) GetType() string {
	return TypeDeepLinkInfo
}

func (*DeepLinkInfo) GetConstructor() string {
	return ConstructorDeepLinkInfo
}

// The text uses Markdown-style formatting
type TextParseModeMarkdown struct {
	meta
	// Version of the parser: 0 or 1 - Telegram Bot API "Markdown" parse mode, 2 - Telegram Bot API "MarkdownV2" parse mode
	Version int32 `json:"version"`
}

func (entity *TextParseModeMarkdown) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextParseModeMarkdown

	return json.Marshal((*stub)(entity))
}

func (*TextParseModeMarkdown) GetType() string {
	return TypeTextParseMode
}

func (*TextParseModeMarkdown) GetConstructor() string {
	return ConstructorTextParseModeMarkdown
}

func (*TextParseModeMarkdown) TextParseModeConstructor() string {
	return ConstructorTextParseModeMarkdown
}

// The text uses HTML-style formatting. The same as Telegram Bot API "HTML" parse mode
type TextParseModeHTML struct {
	meta
}

func (entity *TextParseModeHTML) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TextParseModeHTML

	return json.Marshal((*stub)(entity))
}

func (*TextParseModeHTML) GetType() string {
	return TypeTextParseMode
}

func (*TextParseModeHTML) GetConstructor() string {
	return ConstructorTextParseModeHTML
}

func (*TextParseModeHTML) TextParseModeConstructor() string {
	return ConstructorTextParseModeHTML
}

// A SOCKS5 proxy server
type ProxyTypeSocks5 struct {
	meta
	// Username for logging in; may be empty
	Username string `json:"username"`
	// Password for logging in; may be empty
	Password string `json:"password"`
}

func (entity *ProxyTypeSocks5) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ProxyTypeSocks5

	return json.Marshal((*stub)(entity))
}

func (*ProxyTypeSocks5) GetType() string {
	return TypeProxyType
}

func (*ProxyTypeSocks5) GetConstructor() string {
	return ConstructorProxyTypeSocks5
}

func (*ProxyTypeSocks5) ProxyTypeConstructor() string {
	return ConstructorProxyTypeSocks5
}

// A HTTP transparent proxy server
type ProxyTypeHttp struct {
	meta
	// Username for logging in; may be empty
	Username string `json:"username"`
	// Password for logging in; may be empty
	Password string `json:"password"`
	// Pass true if the proxy supports only HTTP requests and doesn't support transparent TCP connections via HTTP CONNECT method
	HttpOnly bool `json:"http_only"`
}

func (entity *ProxyTypeHttp) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ProxyTypeHttp

	return json.Marshal((*stub)(entity))
}

func (*ProxyTypeHttp) GetType() string {
	return TypeProxyType
}

func (*ProxyTypeHttp) GetConstructor() string {
	return ConstructorProxyTypeHttp
}

func (*ProxyTypeHttp) ProxyTypeConstructor() string {
	return ConstructorProxyTypeHttp
}

// An MTProto proxy server
type ProxyTypeMtproto struct {
	meta
	// The proxy's secret in hexadecimal encoding
	Secret string `json:"secret"`
}

func (entity *ProxyTypeMtproto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ProxyTypeMtproto

	return json.Marshal((*stub)(entity))
}

func (*ProxyTypeMtproto) GetType() string {
	return TypeProxyType
}

func (*ProxyTypeMtproto) GetConstructor() string {
	return ConstructorProxyTypeMtproto
}

func (*ProxyTypeMtproto) ProxyTypeConstructor() string {
	return ConstructorProxyTypeMtproto
}

// Contains information about a proxy server
type Proxy struct {
	meta
	// Unique identifier of the proxy
	Id int32 `json:"id"`
	// Proxy server domain or IP address
	Server string `json:"server"`
	// Proxy server port
	Port int32 `json:"port"`
	// Point in time (Unix timestamp) when the proxy was last used; 0 if never
	LastUsedDate int32 `json:"last_used_date"`
	// True, if the proxy is enabled now
	IsEnabled bool `json:"is_enabled"`
	// Type of the proxy
	Type ProxyType `json:"type"`
}

func (entity *Proxy) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Proxy

	return json.Marshal((*stub)(entity))
}

func (*Proxy) GetType() string {
	return TypeProxy
}

func (*Proxy) GetConstructor() string {
	return ConstructorProxy
}

func (proxy *Proxy) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id           int32           `json:"id"`
		Server       string          `json:"server"`
		Port         int32           `json:"port"`
		LastUsedDate int32           `json:"last_used_date"`
		IsEnabled    bool            `json:"is_enabled"`
		Type         json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	proxy.Id = tmp.Id
	proxy.Server = tmp.Server
	proxy.Port = tmp.Port
	proxy.LastUsedDate = tmp.LastUsedDate
	proxy.IsEnabled = tmp.IsEnabled

	fieldType, _ := UnmarshalProxyType(tmp.Type)
	proxy.Type = fieldType

	return nil
}

// Represents a list of proxy servers
type Proxies struct {
	meta
	// List of proxy servers
	Proxies []*Proxy `json:"proxies"`
}

func (entity *Proxies) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Proxies

	return json.Marshal((*stub)(entity))
}

func (*Proxies) GetType() string {
	return TypeProxies
}

func (*Proxies) GetConstructor() string {
	return ConstructorProxies
}

// A sticker to be added to a sticker set
type InputSticker struct {
	meta
	// File with the sticker; must fit in a 512x512 square. For WEBP stickers the file must be in WEBP or PNG format, which will be converted to WEBP server-side. See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements
	Sticker InputFile `json:"sticker"`
	// Format of the sticker
	Format StickerFormat `json:"format"`
	// String with 1-20 emoji corresponding to the sticker
	Emojis string `json:"emojis"`
	// Position where the mask is placed; pass null if not specified
	MaskPosition *MaskPosition `json:"mask_position"`
	// List of up to 20 keywords with total length up to 64 characters, which can be used to find the sticker
	Keywords []string `json:"keywords"`
}

func (entity *InputSticker) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub InputSticker

	return json.Marshal((*stub)(entity))
}

func (*InputSticker) GetType() string {
	return TypeInputSticker
}

func (*InputSticker) GetConstructor() string {
	return ConstructorInputSticker
}

func (inputSticker *InputSticker) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Sticker      json.RawMessage `json:"sticker"`
		Format       json.RawMessage `json:"format"`
		Emojis       string          `json:"emojis"`
		MaskPosition *MaskPosition   `json:"mask_position"`
		Keywords     []string        `json:"keywords"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	inputSticker.Emojis = tmp.Emojis
	inputSticker.MaskPosition = tmp.MaskPosition
	inputSticker.Keywords = tmp.Keywords

	fieldSticker, _ := UnmarshalInputFile(tmp.Sticker)
	inputSticker.Sticker = fieldSticker

	fieldFormat, _ := UnmarshalStickerFormat(tmp.Format)
	inputSticker.Format = fieldFormat

	return nil
}

// Represents a date range
type DateRange struct {
	meta
	// Point in time (Unix timestamp) at which the date range begins
	StartDate int32 `json:"start_date"`
	// Point in time (Unix timestamp) at which the date range ends
	EndDate int32 `json:"end_date"`
}

func (entity *DateRange) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub DateRange

	return json.Marshal((*stub)(entity))
}

func (*DateRange) GetType() string {
	return TypeDateRange
}

func (*DateRange) GetConstructor() string {
	return ConstructorDateRange
}

// A value with information about its recent changes
type StatisticalValue struct {
	meta
	// The current value
	Value float64 `json:"value"`
	// The value for the previous day
	PreviousValue float64 `json:"previous_value"`
	// The growth rate of the value, as a percentage
	GrowthRatePercentage float64 `json:"growth_rate_percentage"`
}

func (entity *StatisticalValue) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StatisticalValue

	return json.Marshal((*stub)(entity))
}

func (*StatisticalValue) GetType() string {
	return TypeStatisticalValue
}

func (*StatisticalValue) GetConstructor() string {
	return ConstructorStatisticalValue
}

// A graph data
type StatisticalGraphData struct {
	meta
	// Graph data in JSON format
	JsonData string `json:"json_data"`
	// If non-empty, a token which can be used to receive a zoomed in graph
	ZoomToken string `json:"zoom_token"`
}

func (entity *StatisticalGraphData) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StatisticalGraphData

	return json.Marshal((*stub)(entity))
}

func (*StatisticalGraphData) GetType() string {
	return TypeStatisticalGraph
}

func (*StatisticalGraphData) GetConstructor() string {
	return ConstructorStatisticalGraphData
}

func (*StatisticalGraphData) StatisticalGraphConstructor() string {
	return ConstructorStatisticalGraphData
}

// The graph data to be asynchronously loaded through getStatisticalGraph
type StatisticalGraphAsync struct {
	meta
	// The token to use for data loading
	Token string `json:"token"`
}

func (entity *StatisticalGraphAsync) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StatisticalGraphAsync

	return json.Marshal((*stub)(entity))
}

func (*StatisticalGraphAsync) GetType() string {
	return TypeStatisticalGraph
}

func (*StatisticalGraphAsync) GetConstructor() string {
	return ConstructorStatisticalGraphAsync
}

func (*StatisticalGraphAsync) StatisticalGraphConstructor() string {
	return ConstructorStatisticalGraphAsync
}

// An error message to be shown to the user instead of the graph
type StatisticalGraphError struct {
	meta
	// The error message
	ErrorMessage string `json:"error_message"`
}

func (entity *StatisticalGraphError) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StatisticalGraphError

	return json.Marshal((*stub)(entity))
}

func (*StatisticalGraphError) GetType() string {
	return TypeStatisticalGraph
}

func (*StatisticalGraphError) GetConstructor() string {
	return ConstructorStatisticalGraphError
}

func (*StatisticalGraphError) StatisticalGraphConstructor() string {
	return ConstructorStatisticalGraphError
}

// Describes a message sent in the chat
type ChatStatisticsObjectTypeMessage struct {
	meta
	// Message identifier
	MessageId int64 `json:"message_id"`
}

func (entity *ChatStatisticsObjectTypeMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatStatisticsObjectTypeMessage

	return json.Marshal((*stub)(entity))
}

func (*ChatStatisticsObjectTypeMessage) GetType() string {
	return TypeChatStatisticsObjectType
}

func (*ChatStatisticsObjectTypeMessage) GetConstructor() string {
	return ConstructorChatStatisticsObjectTypeMessage
}

func (*ChatStatisticsObjectTypeMessage) ChatStatisticsObjectTypeConstructor() string {
	return ConstructorChatStatisticsObjectTypeMessage
}

// Describes a story sent by the chat
type ChatStatisticsObjectTypeStory struct {
	meta
	// Story identifier
	StoryId int32 `json:"story_id"`
}

func (entity *ChatStatisticsObjectTypeStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatStatisticsObjectTypeStory

	return json.Marshal((*stub)(entity))
}

func (*ChatStatisticsObjectTypeStory) GetType() string {
	return TypeChatStatisticsObjectType
}

func (*ChatStatisticsObjectTypeStory) GetConstructor() string {
	return ConstructorChatStatisticsObjectTypeStory
}

func (*ChatStatisticsObjectTypeStory) ChatStatisticsObjectTypeConstructor() string {
	return ConstructorChatStatisticsObjectTypeStory
}

// Contains statistics about interactions with a message sent in the chat or a story sent by the chat
type ChatStatisticsInteractionInfo struct {
	meta
	// Type of the object
	ObjectType ChatStatisticsObjectType `json:"object_type"`
	// Number of times the object was viewed
	ViewCount int32 `json:"view_count"`
	// Number of times the object was forwarded
	ForwardCount int32 `json:"forward_count"`
	// Number of times reactions were added to the object
	ReactionCount int32 `json:"reaction_count"`
}

func (entity *ChatStatisticsInteractionInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatStatisticsInteractionInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatStatisticsInteractionInfo) GetType() string {
	return TypeChatStatisticsInteractionInfo
}

func (*ChatStatisticsInteractionInfo) GetConstructor() string {
	return ConstructorChatStatisticsInteractionInfo
}

func (chatStatisticsInteractionInfo *ChatStatisticsInteractionInfo) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ObjectType    json.RawMessage `json:"object_type"`
		ViewCount     int32           `json:"view_count"`
		ForwardCount  int32           `json:"forward_count"`
		ReactionCount int32           `json:"reaction_count"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatStatisticsInteractionInfo.ViewCount = tmp.ViewCount
	chatStatisticsInteractionInfo.ForwardCount = tmp.ForwardCount
	chatStatisticsInteractionInfo.ReactionCount = tmp.ReactionCount

	fieldObjectType, _ := UnmarshalChatStatisticsObjectType(tmp.ObjectType)
	chatStatisticsInteractionInfo.ObjectType = fieldObjectType

	return nil
}

// Contains statistics about messages sent by a user
type ChatStatisticsMessageSenderInfo struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
	// Number of sent messages
	SentMessageCount int32 `json:"sent_message_count"`
	// Average number of characters in sent messages; 0 if unknown
	AverageCharacterCount int32 `json:"average_character_count"`
}

func (entity *ChatStatisticsMessageSenderInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatStatisticsMessageSenderInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatStatisticsMessageSenderInfo) GetType() string {
	return TypeChatStatisticsMessageSenderInfo
}

func (*ChatStatisticsMessageSenderInfo) GetConstructor() string {
	return ConstructorChatStatisticsMessageSenderInfo
}

// Contains statistics about administrator actions done by a user
type ChatStatisticsAdministratorActionsInfo struct {
	meta
	// Administrator user identifier
	UserId int64 `json:"user_id"`
	// Number of messages deleted by the administrator
	DeletedMessageCount int32 `json:"deleted_message_count"`
	// Number of users banned by the administrator
	BannedUserCount int32 `json:"banned_user_count"`
	// Number of users restricted by the administrator
	RestrictedUserCount int32 `json:"restricted_user_count"`
}

func (entity *ChatStatisticsAdministratorActionsInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatStatisticsAdministratorActionsInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatStatisticsAdministratorActionsInfo) GetType() string {
	return TypeChatStatisticsAdministratorActionsInfo
}

func (*ChatStatisticsAdministratorActionsInfo) GetConstructor() string {
	return ConstructorChatStatisticsAdministratorActionsInfo
}

// Contains statistics about number of new members invited by a user
type ChatStatisticsInviterInfo struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
	// Number of new members invited by the user
	AddedMemberCount int32 `json:"added_member_count"`
}

func (entity *ChatStatisticsInviterInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatStatisticsInviterInfo

	return json.Marshal((*stub)(entity))
}

func (*ChatStatisticsInviterInfo) GetType() string {
	return TypeChatStatisticsInviterInfo
}

func (*ChatStatisticsInviterInfo) GetConstructor() string {
	return ConstructorChatStatisticsInviterInfo
}

// A detailed statistics about a supergroup chat
type ChatStatisticsSupergroup struct {
	meta
	// A period to which the statistics applies
	Period *DateRange `json:"period"`
	// Number of members in the chat
	MemberCount *StatisticalValue `json:"member_count"`
	// Number of messages sent to the chat
	MessageCount *StatisticalValue `json:"message_count"`
	// Number of users who viewed messages in the chat
	ViewerCount *StatisticalValue `json:"viewer_count"`
	// Number of users who sent messages to the chat
	SenderCount *StatisticalValue `json:"sender_count"`
	// A graph containing number of members in the chat
	MemberCountGraph StatisticalGraph `json:"member_count_graph"`
	// A graph containing number of members joined and left the chat
	JoinGraph StatisticalGraph `json:"join_graph"`
	// A graph containing number of new member joins per source
	JoinBySourceGraph StatisticalGraph `json:"join_by_source_graph"`
	// A graph containing distribution of active users per language
	LanguageGraph StatisticalGraph `json:"language_graph"`
	// A graph containing distribution of sent messages by content type
	MessageContentGraph StatisticalGraph `json:"message_content_graph"`
	// A graph containing number of different actions in the chat
	ActionGraph StatisticalGraph `json:"action_graph"`
	// A graph containing distribution of message views per hour
	DayGraph StatisticalGraph `json:"day_graph"`
	// A graph containing distribution of message views per day of week
	WeekGraph StatisticalGraph `json:"week_graph"`
	// List of users sent most messages in the last week
	TopSenders []*ChatStatisticsMessageSenderInfo `json:"top_senders"`
	// List of most active administrators in the last week
	TopAdministrators []*ChatStatisticsAdministratorActionsInfo `json:"top_administrators"`
	// List of most active inviters of new members in the last week
	TopInviters []*ChatStatisticsInviterInfo `json:"top_inviters"`
}

func (entity *ChatStatisticsSupergroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatStatisticsSupergroup

	return json.Marshal((*stub)(entity))
}

func (*ChatStatisticsSupergroup) GetType() string {
	return TypeChatStatistics
}

func (*ChatStatisticsSupergroup) GetConstructor() string {
	return ConstructorChatStatisticsSupergroup
}

func (*ChatStatisticsSupergroup) ChatStatisticsConstructor() string {
	return ConstructorChatStatisticsSupergroup
}

func (chatStatisticsSupergroup *ChatStatisticsSupergroup) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Period              *DateRange                                `json:"period"`
		MemberCount         *StatisticalValue                         `json:"member_count"`
		MessageCount        *StatisticalValue                         `json:"message_count"`
		ViewerCount         *StatisticalValue                         `json:"viewer_count"`
		SenderCount         *StatisticalValue                         `json:"sender_count"`
		MemberCountGraph    json.RawMessage                           `json:"member_count_graph"`
		JoinGraph           json.RawMessage                           `json:"join_graph"`
		JoinBySourceGraph   json.RawMessage                           `json:"join_by_source_graph"`
		LanguageGraph       json.RawMessage                           `json:"language_graph"`
		MessageContentGraph json.RawMessage                           `json:"message_content_graph"`
		ActionGraph         json.RawMessage                           `json:"action_graph"`
		DayGraph            json.RawMessage                           `json:"day_graph"`
		WeekGraph           json.RawMessage                           `json:"week_graph"`
		TopSenders          []*ChatStatisticsMessageSenderInfo        `json:"top_senders"`
		TopAdministrators   []*ChatStatisticsAdministratorActionsInfo `json:"top_administrators"`
		TopInviters         []*ChatStatisticsInviterInfo              `json:"top_inviters"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatStatisticsSupergroup.Period = tmp.Period
	chatStatisticsSupergroup.MemberCount = tmp.MemberCount
	chatStatisticsSupergroup.MessageCount = tmp.MessageCount
	chatStatisticsSupergroup.ViewerCount = tmp.ViewerCount
	chatStatisticsSupergroup.SenderCount = tmp.SenderCount
	chatStatisticsSupergroup.TopSenders = tmp.TopSenders
	chatStatisticsSupergroup.TopAdministrators = tmp.TopAdministrators
	chatStatisticsSupergroup.TopInviters = tmp.TopInviters

	fieldMemberCountGraph, _ := UnmarshalStatisticalGraph(tmp.MemberCountGraph)
	chatStatisticsSupergroup.MemberCountGraph = fieldMemberCountGraph

	fieldJoinGraph, _ := UnmarshalStatisticalGraph(tmp.JoinGraph)
	chatStatisticsSupergroup.JoinGraph = fieldJoinGraph

	fieldJoinBySourceGraph, _ := UnmarshalStatisticalGraph(tmp.JoinBySourceGraph)
	chatStatisticsSupergroup.JoinBySourceGraph = fieldJoinBySourceGraph

	fieldLanguageGraph, _ := UnmarshalStatisticalGraph(tmp.LanguageGraph)
	chatStatisticsSupergroup.LanguageGraph = fieldLanguageGraph

	fieldMessageContentGraph, _ := UnmarshalStatisticalGraph(tmp.MessageContentGraph)
	chatStatisticsSupergroup.MessageContentGraph = fieldMessageContentGraph

	fieldActionGraph, _ := UnmarshalStatisticalGraph(tmp.ActionGraph)
	chatStatisticsSupergroup.ActionGraph = fieldActionGraph

	fieldDayGraph, _ := UnmarshalStatisticalGraph(tmp.DayGraph)
	chatStatisticsSupergroup.DayGraph = fieldDayGraph

	fieldWeekGraph, _ := UnmarshalStatisticalGraph(tmp.WeekGraph)
	chatStatisticsSupergroup.WeekGraph = fieldWeekGraph

	return nil
}

// A detailed statistics about a channel chat
type ChatStatisticsChannel struct {
	meta
	// A period to which the statistics applies
	Period *DateRange `json:"period"`
	// Number of members in the chat
	MemberCount *StatisticalValue `json:"member_count"`
	// Mean number of times the recently sent messages were viewed
	MeanMessageViewCount *StatisticalValue `json:"mean_message_view_count"`
	// Mean number of times the recently sent messages were shared
	MeanMessageShareCount *StatisticalValue `json:"mean_message_share_count"`
	// Mean number of times reactions were added to the recently sent messages
	MeanMessageReactionCount *StatisticalValue `json:"mean_message_reaction_count"`
	// Mean number of times the recently sent stories were viewed
	MeanStoryViewCount *StatisticalValue `json:"mean_story_view_count"`
	// Mean number of times the recently sent stories were shared
	MeanStoryShareCount *StatisticalValue `json:"mean_story_share_count"`
	// Mean number of times reactions were added to the recently sent stories
	MeanStoryReactionCount *StatisticalValue `json:"mean_story_reaction_count"`
	// A percentage of users with enabled notifications for the chat; 0-100
	EnabledNotificationsPercentage float64 `json:"enabled_notifications_percentage"`
	// A graph containing number of members in the chat
	MemberCountGraph StatisticalGraph `json:"member_count_graph"`
	// A graph containing number of members joined and left the chat
	JoinGraph StatisticalGraph `json:"join_graph"`
	// A graph containing number of members muted and unmuted the chat
	MuteGraph StatisticalGraph `json:"mute_graph"`
	// A graph containing number of message views in a given hour in the last two weeks
	ViewCountByHourGraph StatisticalGraph `json:"view_count_by_hour_graph"`
	// A graph containing number of message views per source
	ViewCountBySourceGraph StatisticalGraph `json:"view_count_by_source_graph"`
	// A graph containing number of new member joins per source
	JoinBySourceGraph StatisticalGraph `json:"join_by_source_graph"`
	// A graph containing number of users viewed chat messages per language
	LanguageGraph StatisticalGraph `json:"language_graph"`
	// A graph containing number of chat message views and shares
	MessageInteractionGraph StatisticalGraph `json:"message_interaction_graph"`
	// A graph containing number of reactions on messages
	MessageReactionGraph StatisticalGraph `json:"message_reaction_graph"`
	// A graph containing number of story views and shares
	StoryInteractionGraph StatisticalGraph `json:"story_interaction_graph"`
	// A graph containing number of reactions on stories
	StoryReactionGraph StatisticalGraph `json:"story_reaction_graph"`
	// A graph containing number of views of associated with the chat instant views
	InstantViewInteractionGraph StatisticalGraph `json:"instant_view_interaction_graph"`
	// Detailed statistics about number of views and shares of recently sent messages and stories
	RecentInteractions []*ChatStatisticsInteractionInfo `json:"recent_interactions"`
}

func (entity *ChatStatisticsChannel) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatStatisticsChannel

	return json.Marshal((*stub)(entity))
}

func (*ChatStatisticsChannel) GetType() string {
	return TypeChatStatistics
}

func (*ChatStatisticsChannel) GetConstructor() string {
	return ConstructorChatStatisticsChannel
}

func (*ChatStatisticsChannel) ChatStatisticsConstructor() string {
	return ConstructorChatStatisticsChannel
}

func (chatStatisticsChannel *ChatStatisticsChannel) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Period                         *DateRange                       `json:"period"`
		MemberCount                    *StatisticalValue                `json:"member_count"`
		MeanMessageViewCount           *StatisticalValue                `json:"mean_message_view_count"`
		MeanMessageShareCount          *StatisticalValue                `json:"mean_message_share_count"`
		MeanMessageReactionCount       *StatisticalValue                `json:"mean_message_reaction_count"`
		MeanStoryViewCount             *StatisticalValue                `json:"mean_story_view_count"`
		MeanStoryShareCount            *StatisticalValue                `json:"mean_story_share_count"`
		MeanStoryReactionCount         *StatisticalValue                `json:"mean_story_reaction_count"`
		EnabledNotificationsPercentage float64                          `json:"enabled_notifications_percentage"`
		MemberCountGraph               json.RawMessage                  `json:"member_count_graph"`
		JoinGraph                      json.RawMessage                  `json:"join_graph"`
		MuteGraph                      json.RawMessage                  `json:"mute_graph"`
		ViewCountByHourGraph           json.RawMessage                  `json:"view_count_by_hour_graph"`
		ViewCountBySourceGraph         json.RawMessage                  `json:"view_count_by_source_graph"`
		JoinBySourceGraph              json.RawMessage                  `json:"join_by_source_graph"`
		LanguageGraph                  json.RawMessage                  `json:"language_graph"`
		MessageInteractionGraph        json.RawMessage                  `json:"message_interaction_graph"`
		MessageReactionGraph           json.RawMessage                  `json:"message_reaction_graph"`
		StoryInteractionGraph          json.RawMessage                  `json:"story_interaction_graph"`
		StoryReactionGraph             json.RawMessage                  `json:"story_reaction_graph"`
		InstantViewInteractionGraph    json.RawMessage                  `json:"instant_view_interaction_graph"`
		RecentInteractions             []*ChatStatisticsInteractionInfo `json:"recent_interactions"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatStatisticsChannel.Period = tmp.Period
	chatStatisticsChannel.MemberCount = tmp.MemberCount
	chatStatisticsChannel.MeanMessageViewCount = tmp.MeanMessageViewCount
	chatStatisticsChannel.MeanMessageShareCount = tmp.MeanMessageShareCount
	chatStatisticsChannel.MeanMessageReactionCount = tmp.MeanMessageReactionCount
	chatStatisticsChannel.MeanStoryViewCount = tmp.MeanStoryViewCount
	chatStatisticsChannel.MeanStoryShareCount = tmp.MeanStoryShareCount
	chatStatisticsChannel.MeanStoryReactionCount = tmp.MeanStoryReactionCount
	chatStatisticsChannel.EnabledNotificationsPercentage = tmp.EnabledNotificationsPercentage
	chatStatisticsChannel.RecentInteractions = tmp.RecentInteractions

	fieldMemberCountGraph, _ := UnmarshalStatisticalGraph(tmp.MemberCountGraph)
	chatStatisticsChannel.MemberCountGraph = fieldMemberCountGraph

	fieldJoinGraph, _ := UnmarshalStatisticalGraph(tmp.JoinGraph)
	chatStatisticsChannel.JoinGraph = fieldJoinGraph

	fieldMuteGraph, _ := UnmarshalStatisticalGraph(tmp.MuteGraph)
	chatStatisticsChannel.MuteGraph = fieldMuteGraph

	fieldViewCountByHourGraph, _ := UnmarshalStatisticalGraph(tmp.ViewCountByHourGraph)
	chatStatisticsChannel.ViewCountByHourGraph = fieldViewCountByHourGraph

	fieldViewCountBySourceGraph, _ := UnmarshalStatisticalGraph(tmp.ViewCountBySourceGraph)
	chatStatisticsChannel.ViewCountBySourceGraph = fieldViewCountBySourceGraph

	fieldJoinBySourceGraph, _ := UnmarshalStatisticalGraph(tmp.JoinBySourceGraph)
	chatStatisticsChannel.JoinBySourceGraph = fieldJoinBySourceGraph

	fieldLanguageGraph, _ := UnmarshalStatisticalGraph(tmp.LanguageGraph)
	chatStatisticsChannel.LanguageGraph = fieldLanguageGraph

	fieldMessageInteractionGraph, _ := UnmarshalStatisticalGraph(tmp.MessageInteractionGraph)
	chatStatisticsChannel.MessageInteractionGraph = fieldMessageInteractionGraph

	fieldMessageReactionGraph, _ := UnmarshalStatisticalGraph(tmp.MessageReactionGraph)
	chatStatisticsChannel.MessageReactionGraph = fieldMessageReactionGraph

	fieldStoryInteractionGraph, _ := UnmarshalStatisticalGraph(tmp.StoryInteractionGraph)
	chatStatisticsChannel.StoryInteractionGraph = fieldStoryInteractionGraph

	fieldStoryReactionGraph, _ := UnmarshalStatisticalGraph(tmp.StoryReactionGraph)
	chatStatisticsChannel.StoryReactionGraph = fieldStoryReactionGraph

	fieldInstantViewInteractionGraph, _ := UnmarshalStatisticalGraph(tmp.InstantViewInteractionGraph)
	chatStatisticsChannel.InstantViewInteractionGraph = fieldInstantViewInteractionGraph

	return nil
}

// Contains information about revenue earned from sponsored messages in a chat
type ChatRevenueAmount struct {
	meta
	// Cryptocurrency in which revenue is calculated
	Cryptocurrency string `json:"cryptocurrency"`
	// Total amount of the cryptocurrency earned, in the smallest units of the cryptocurrency
	TotalAmount JsonInt64 `json:"total_amount"`
	// Amount of the cryptocurrency that isn't withdrawn yet, in the smallest units of the cryptocurrency
	BalanceAmount JsonInt64 `json:"balance_amount"`
	// Amount of the cryptocurrency available for withdrawal, in the smallest units of the cryptocurrency
	AvailableAmount JsonInt64 `json:"available_amount"`
	// True, if Telegram Stars can be withdrawn now or later
	WithdrawalEnabled bool `json:"withdrawal_enabled"`
}

func (entity *ChatRevenueAmount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatRevenueAmount

	return json.Marshal((*stub)(entity))
}

func (*ChatRevenueAmount) GetType() string {
	return TypeChatRevenueAmount
}

func (*ChatRevenueAmount) GetConstructor() string {
	return ConstructorChatRevenueAmount
}

// A detailed statistics about revenue earned from sponsored messages in a chat
type ChatRevenueStatistics struct {
	meta
	// A graph containing amount of revenue in a given hour
	RevenueByHourGraph StatisticalGraph `json:"revenue_by_hour_graph"`
	// A graph containing amount of revenue
	RevenueGraph StatisticalGraph `json:"revenue_graph"`
	// Amount of earned revenue
	RevenueAmount *ChatRevenueAmount `json:"revenue_amount"`
	// Current conversion rate of the cryptocurrency in which revenue is calculated to USD
	UsdRate float64 `json:"usd_rate"`
}

func (entity *ChatRevenueStatistics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatRevenueStatistics

	return json.Marshal((*stub)(entity))
}

func (*ChatRevenueStatistics) GetType() string {
	return TypeChatRevenueStatistics
}

func (*ChatRevenueStatistics) GetConstructor() string {
	return ConstructorChatRevenueStatistics
}

func (chatRevenueStatistics *ChatRevenueStatistics) UnmarshalJSON(data []byte) error {
	var tmp struct {
		RevenueByHourGraph json.RawMessage    `json:"revenue_by_hour_graph"`
		RevenueGraph       json.RawMessage    `json:"revenue_graph"`
		RevenueAmount      *ChatRevenueAmount `json:"revenue_amount"`
		UsdRate            float64            `json:"usd_rate"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatRevenueStatistics.RevenueAmount = tmp.RevenueAmount
	chatRevenueStatistics.UsdRate = tmp.UsdRate

	fieldRevenueByHourGraph, _ := UnmarshalStatisticalGraph(tmp.RevenueByHourGraph)
	chatRevenueStatistics.RevenueByHourGraph = fieldRevenueByHourGraph

	fieldRevenueGraph, _ := UnmarshalStatisticalGraph(tmp.RevenueGraph)
	chatRevenueStatistics.RevenueGraph = fieldRevenueGraph

	return nil
}

// A detailed statistics about a message
type MessageStatistics struct {
	meta
	// A graph containing number of message views and shares
	MessageInteractionGraph StatisticalGraph `json:"message_interaction_graph"`
	// A graph containing number of message reactions
	MessageReactionGraph StatisticalGraph `json:"message_reaction_graph"`
}

func (entity *MessageStatistics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub MessageStatistics

	return json.Marshal((*stub)(entity))
}

func (*MessageStatistics) GetType() string {
	return TypeMessageStatistics
}

func (*MessageStatistics) GetConstructor() string {
	return ConstructorMessageStatistics
}

func (messageStatistics *MessageStatistics) UnmarshalJSON(data []byte) error {
	var tmp struct {
		MessageInteractionGraph json.RawMessage `json:"message_interaction_graph"`
		MessageReactionGraph    json.RawMessage `json:"message_reaction_graph"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldMessageInteractionGraph, _ := UnmarshalStatisticalGraph(tmp.MessageInteractionGraph)
	messageStatistics.MessageInteractionGraph = fieldMessageInteractionGraph

	fieldMessageReactionGraph, _ := UnmarshalStatisticalGraph(tmp.MessageReactionGraph)
	messageStatistics.MessageReactionGraph = fieldMessageReactionGraph

	return nil
}

// A detailed statistics about a story
type StoryStatistics struct {
	meta
	// A graph containing number of story views and shares
	StoryInteractionGraph StatisticalGraph `json:"story_interaction_graph"`
	// A graph containing number of story reactions
	StoryReactionGraph StatisticalGraph `json:"story_reaction_graph"`
}

func (entity *StoryStatistics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StoryStatistics

	return json.Marshal((*stub)(entity))
}

func (*StoryStatistics) GetType() string {
	return TypeStoryStatistics
}

func (*StoryStatistics) GetConstructor() string {
	return ConstructorStoryStatistics
}

func (storyStatistics *StoryStatistics) UnmarshalJSON(data []byte) error {
	var tmp struct {
		StoryInteractionGraph json.RawMessage `json:"story_interaction_graph"`
		StoryReactionGraph    json.RawMessage `json:"story_reaction_graph"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldStoryInteractionGraph, _ := UnmarshalStatisticalGraph(tmp.StoryInteractionGraph)
	storyStatistics.StoryInteractionGraph = fieldStoryInteractionGraph

	fieldStoryReactionGraph, _ := UnmarshalStatisticalGraph(tmp.StoryReactionGraph)
	storyStatistics.StoryReactionGraph = fieldStoryReactionGraph

	return nil
}

// Withdrawal is pending
type RevenueWithdrawalStatePending struct {
	meta
}

func (entity *RevenueWithdrawalStatePending) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RevenueWithdrawalStatePending

	return json.Marshal((*stub)(entity))
}

func (*RevenueWithdrawalStatePending) GetType() string {
	return TypeRevenueWithdrawalState
}

func (*RevenueWithdrawalStatePending) GetConstructor() string {
	return ConstructorRevenueWithdrawalStatePending
}

func (*RevenueWithdrawalStatePending) RevenueWithdrawalStateConstructor() string {
	return ConstructorRevenueWithdrawalStatePending
}

// Withdrawal succeeded
type RevenueWithdrawalStateSucceeded struct {
	meta
	// Point in time (Unix timestamp) when the withdrawal was completed
	Date int32 `json:"date"`
	// The URL where the withdrawal transaction can be viewed
	Url string `json:"url"`
}

func (entity *RevenueWithdrawalStateSucceeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RevenueWithdrawalStateSucceeded

	return json.Marshal((*stub)(entity))
}

func (*RevenueWithdrawalStateSucceeded) GetType() string {
	return TypeRevenueWithdrawalState
}

func (*RevenueWithdrawalStateSucceeded) GetConstructor() string {
	return ConstructorRevenueWithdrawalStateSucceeded
}

func (*RevenueWithdrawalStateSucceeded) RevenueWithdrawalStateConstructor() string {
	return ConstructorRevenueWithdrawalStateSucceeded
}

// Withdrawal failed
type RevenueWithdrawalStateFailed struct {
	meta
}

func (entity *RevenueWithdrawalStateFailed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub RevenueWithdrawalStateFailed

	return json.Marshal((*stub)(entity))
}

func (*RevenueWithdrawalStateFailed) GetType() string {
	return TypeRevenueWithdrawalState
}

func (*RevenueWithdrawalStateFailed) GetConstructor() string {
	return ConstructorRevenueWithdrawalStateFailed
}

func (*RevenueWithdrawalStateFailed) RevenueWithdrawalStateConstructor() string {
	return ConstructorRevenueWithdrawalStateFailed
}

// Describes earnings from sponsored messages in a chat in some time frame
type ChatRevenueTransactionTypeEarnings struct {
	meta
	// Point in time (Unix timestamp) when the earnings started
	StartDate int32 `json:"start_date"`
	// Point in time (Unix timestamp) when the earnings ended
	EndDate int32 `json:"end_date"`
}

func (entity *ChatRevenueTransactionTypeEarnings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatRevenueTransactionTypeEarnings

	return json.Marshal((*stub)(entity))
}

func (*ChatRevenueTransactionTypeEarnings) GetType() string {
	return TypeChatRevenueTransactionType
}

func (*ChatRevenueTransactionTypeEarnings) GetConstructor() string {
	return ConstructorChatRevenueTransactionTypeEarnings
}

func (*ChatRevenueTransactionTypeEarnings) ChatRevenueTransactionTypeConstructor() string {
	return ConstructorChatRevenueTransactionTypeEarnings
}

// Describes a withdrawal of earnings
type ChatRevenueTransactionTypeWithdrawal struct {
	meta
	// Point in time (Unix timestamp) when the earnings withdrawal started
	WithdrawalDate int32 `json:"withdrawal_date"`
	// Name of the payment provider
	Provider string `json:"provider"`
	// State of the withdrawal
	State RevenueWithdrawalState `json:"state"`
}

func (entity *ChatRevenueTransactionTypeWithdrawal) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatRevenueTransactionTypeWithdrawal

	return json.Marshal((*stub)(entity))
}

func (*ChatRevenueTransactionTypeWithdrawal) GetType() string {
	return TypeChatRevenueTransactionType
}

func (*ChatRevenueTransactionTypeWithdrawal) GetConstructor() string {
	return ConstructorChatRevenueTransactionTypeWithdrawal
}

func (*ChatRevenueTransactionTypeWithdrawal) ChatRevenueTransactionTypeConstructor() string {
	return ConstructorChatRevenueTransactionTypeWithdrawal
}

func (chatRevenueTransactionTypeWithdrawal *ChatRevenueTransactionTypeWithdrawal) UnmarshalJSON(data []byte) error {
	var tmp struct {
		WithdrawalDate int32           `json:"withdrawal_date"`
		Provider       string          `json:"provider"`
		State          json.RawMessage `json:"state"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatRevenueTransactionTypeWithdrawal.WithdrawalDate = tmp.WithdrawalDate
	chatRevenueTransactionTypeWithdrawal.Provider = tmp.Provider

	fieldState, _ := UnmarshalRevenueWithdrawalState(tmp.State)
	chatRevenueTransactionTypeWithdrawal.State = fieldState

	return nil
}

// Describes a refund for failed withdrawal of earnings
type ChatRevenueTransactionTypeRefund struct {
	meta
	// Point in time (Unix timestamp) when the transaction was refunded
	RefundDate int32 `json:"refund_date"`
	// Name of the payment provider
	Provider string `json:"provider"`
}

func (entity *ChatRevenueTransactionTypeRefund) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatRevenueTransactionTypeRefund

	return json.Marshal((*stub)(entity))
}

func (*ChatRevenueTransactionTypeRefund) GetType() string {
	return TypeChatRevenueTransactionType
}

func (*ChatRevenueTransactionTypeRefund) GetConstructor() string {
	return ConstructorChatRevenueTransactionTypeRefund
}

func (*ChatRevenueTransactionTypeRefund) ChatRevenueTransactionTypeConstructor() string {
	return ConstructorChatRevenueTransactionTypeRefund
}

// Contains a chat revenue transactions
type ChatRevenueTransaction struct {
	meta
	// Cryptocurrency in which revenue is calculated
	Cryptocurrency string `json:"cryptocurrency"`
	// The withdrawn amount, in the smallest units of the cryptocurrency
	CryptocurrencyAmount JsonInt64 `json:"cryptocurrency_amount"`
	// Type of the transaction
	Type ChatRevenueTransactionType `json:"type"`
}

func (entity *ChatRevenueTransaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatRevenueTransaction

	return json.Marshal((*stub)(entity))
}

func (*ChatRevenueTransaction) GetType() string {
	return TypeChatRevenueTransaction
}

func (*ChatRevenueTransaction) GetConstructor() string {
	return ConstructorChatRevenueTransaction
}

func (chatRevenueTransaction *ChatRevenueTransaction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Cryptocurrency       string          `json:"cryptocurrency"`
		CryptocurrencyAmount JsonInt64       `json:"cryptocurrency_amount"`
		Type                 json.RawMessage `json:"type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	chatRevenueTransaction.Cryptocurrency = tmp.Cryptocurrency
	chatRevenueTransaction.CryptocurrencyAmount = tmp.CryptocurrencyAmount

	fieldType, _ := UnmarshalChatRevenueTransactionType(tmp.Type)
	chatRevenueTransaction.Type = fieldType

	return nil
}

// Contains a list of chat revenue transactions
type ChatRevenueTransactions struct {
	meta
	// Total number of transactions
	TotalCount int32 `json:"total_count"`
	// List of transactions
	Transactions []*ChatRevenueTransaction `json:"transactions"`
}

func (entity *ChatRevenueTransactions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub ChatRevenueTransactions

	return json.Marshal((*stub)(entity))
}

func (*ChatRevenueTransactions) GetType() string {
	return TypeChatRevenueTransactions
}

func (*ChatRevenueTransactions) GetConstructor() string {
	return ConstructorChatRevenueTransactions
}

// Contains information about Telegram Stars earned by a bot or a chat
type StarRevenueStatus struct {
	meta
	// Total number of Telegram Stars earned
	TotalCount int64 `json:"total_count"`
	// The number of Telegram Stars that aren't withdrawn yet
	CurrentCount int64 `json:"current_count"`
	// The number of Telegram Stars that are available for withdrawal
	AvailableCount int64 `json:"available_count"`
	// True, if Telegram Stars can be withdrawn now or later
	WithdrawalEnabled bool `json:"withdrawal_enabled"`
	// Time left before the next withdrawal can be started, in seconds; 0 if withdrawal can be started now
	NextWithdrawalIn int32 `json:"next_withdrawal_in"`
}

func (entity *StarRevenueStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarRevenueStatus

	return json.Marshal((*stub)(entity))
}

func (*StarRevenueStatus) GetType() string {
	return TypeStarRevenueStatus
}

func (*StarRevenueStatus) GetConstructor() string {
	return ConstructorStarRevenueStatus
}

// A detailed statistics about Telegram Stars earned by a bot or a chat
type StarRevenueStatistics struct {
	meta
	// A graph containing amount of revenue in a given day
	RevenueByDayGraph StatisticalGraph `json:"revenue_by_day_graph"`
	// Telegram Star revenue status
	Status *StarRevenueStatus `json:"status"`
	// Current conversion rate of a Telegram Star to USD
	UsdRate float64 `json:"usd_rate"`
}

func (entity *StarRevenueStatistics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub StarRevenueStatistics

	return json.Marshal((*stub)(entity))
}

func (*StarRevenueStatistics) GetType() string {
	return TypeStarRevenueStatistics
}

func (*StarRevenueStatistics) GetConstructor() string {
	return ConstructorStarRevenueStatistics
}

func (starRevenueStatistics *StarRevenueStatistics) UnmarshalJSON(data []byte) error {
	var tmp struct {
		RevenueByDayGraph json.RawMessage    `json:"revenue_by_day_graph"`
		Status            *StarRevenueStatus `json:"status"`
		UsdRate           float64            `json:"usd_rate"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	starRevenueStatistics.Status = tmp.Status
	starRevenueStatistics.UsdRate = tmp.UsdRate

	fieldRevenueByDayGraph, _ := UnmarshalStatisticalGraph(tmp.RevenueByDayGraph)
	starRevenueStatistics.RevenueByDayGraph = fieldRevenueByDayGraph

	return nil
}

// A point on a Cartesian plane
type Point struct {
	meta
	// The point's first coordinate
	X float64 `json:"x"`
	// The point's second coordinate
	Y float64 `json:"y"`
}

func (entity *Point) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Point

	return json.Marshal((*stub)(entity))
}

func (*Point) GetType() string {
	return TypePoint
}

func (*Point) GetConstructor() string {
	return ConstructorPoint
}

// A straight line to a given point
type VectorPathCommandLine struct {
	meta
	// The end point of the straight line
	EndPoint *Point `json:"end_point"`
}

func (entity *VectorPathCommandLine) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub VectorPathCommandLine

	return json.Marshal((*stub)(entity))
}

func (*VectorPathCommandLine) GetType() string {
	return TypeVectorPathCommand
}

func (*VectorPathCommandLine) GetConstructor() string {
	return ConstructorVectorPathCommandLine
}

func (*VectorPathCommandLine) VectorPathCommandConstructor() string {
	return ConstructorVectorPathCommandLine
}

// A cubic Bézier curve to a given point
type VectorPathCommandCubicBezierCurve struct {
	meta
	// The start control point of the curve
	StartControlPoint *Point `json:"start_control_point"`
	// The end control point of the curve
	EndControlPoint *Point `json:"end_control_point"`
	// The end point of the curve
	EndPoint *Point `json:"end_point"`
}

func (entity *VectorPathCommandCubicBezierCurve) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub VectorPathCommandCubicBezierCurve

	return json.Marshal((*stub)(entity))
}

func (*VectorPathCommandCubicBezierCurve) GetType() string {
	return TypeVectorPathCommand
}

func (*VectorPathCommandCubicBezierCurve) GetConstructor() string {
	return ConstructorVectorPathCommandCubicBezierCurve
}

func (*VectorPathCommandCubicBezierCurve) VectorPathCommandConstructor() string {
	return ConstructorVectorPathCommandCubicBezierCurve
}

// A scope covering all users
type BotCommandScopeDefault struct {
	meta
}

func (entity *BotCommandScopeDefault) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotCommandScopeDefault

	return json.Marshal((*stub)(entity))
}

func (*BotCommandScopeDefault) GetType() string {
	return TypeBotCommandScope
}

func (*BotCommandScopeDefault) GetConstructor() string {
	return ConstructorBotCommandScopeDefault
}

func (*BotCommandScopeDefault) BotCommandScopeConstructor() string {
	return ConstructorBotCommandScopeDefault
}

// A scope covering all private chats
type BotCommandScopeAllPrivateChats struct {
	meta
}

func (entity *BotCommandScopeAllPrivateChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotCommandScopeAllPrivateChats

	return json.Marshal((*stub)(entity))
}

func (*BotCommandScopeAllPrivateChats) GetType() string {
	return TypeBotCommandScope
}

func (*BotCommandScopeAllPrivateChats) GetConstructor() string {
	return ConstructorBotCommandScopeAllPrivateChats
}

func (*BotCommandScopeAllPrivateChats) BotCommandScopeConstructor() string {
	return ConstructorBotCommandScopeAllPrivateChats
}

// A scope covering all group and supergroup chats
type BotCommandScopeAllGroupChats struct {
	meta
}

func (entity *BotCommandScopeAllGroupChats) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotCommandScopeAllGroupChats

	return json.Marshal((*stub)(entity))
}

func (*BotCommandScopeAllGroupChats) GetType() string {
	return TypeBotCommandScope
}

func (*BotCommandScopeAllGroupChats) GetConstructor() string {
	return ConstructorBotCommandScopeAllGroupChats
}

func (*BotCommandScopeAllGroupChats) BotCommandScopeConstructor() string {
	return ConstructorBotCommandScopeAllGroupChats
}

// A scope covering all group and supergroup chat administrators
type BotCommandScopeAllChatAdministrators struct {
	meta
}

func (entity *BotCommandScopeAllChatAdministrators) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotCommandScopeAllChatAdministrators

	return json.Marshal((*stub)(entity))
}

func (*BotCommandScopeAllChatAdministrators) GetType() string {
	return TypeBotCommandScope
}

func (*BotCommandScopeAllChatAdministrators) GetConstructor() string {
	return ConstructorBotCommandScopeAllChatAdministrators
}

func (*BotCommandScopeAllChatAdministrators) BotCommandScopeConstructor() string {
	return ConstructorBotCommandScopeAllChatAdministrators
}

// A scope covering all members of a chat
type BotCommandScopeChat struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (entity *BotCommandScopeChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotCommandScopeChat

	return json.Marshal((*stub)(entity))
}

func (*BotCommandScopeChat) GetType() string {
	return TypeBotCommandScope
}

func (*BotCommandScopeChat) GetConstructor() string {
	return ConstructorBotCommandScopeChat
}

func (*BotCommandScopeChat) BotCommandScopeConstructor() string {
	return ConstructorBotCommandScopeChat
}

// A scope covering all administrators of a chat
type BotCommandScopeChatAdministrators struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
}

func (entity *BotCommandScopeChatAdministrators) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotCommandScopeChatAdministrators

	return json.Marshal((*stub)(entity))
}

func (*BotCommandScopeChatAdministrators) GetType() string {
	return TypeBotCommandScope
}

func (*BotCommandScopeChatAdministrators) GetConstructor() string {
	return ConstructorBotCommandScopeChatAdministrators
}

func (*BotCommandScopeChatAdministrators) BotCommandScopeConstructor() string {
	return ConstructorBotCommandScopeChatAdministrators
}

// A scope covering a member of a chat
type BotCommandScopeChatMember struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// User identifier
	UserId int64 `json:"user_id"`
}

func (entity *BotCommandScopeChatMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub BotCommandScopeChatMember

	return json.Marshal((*stub)(entity))
}

func (*BotCommandScopeChatMember) GetType() string {
	return TypeBotCommandScope
}

func (*BotCommandScopeChatMember) GetConstructor() string {
	return ConstructorBotCommandScopeChatMember
}

func (*BotCommandScopeChatMember) BotCommandScopeConstructor() string {
	return ConstructorBotCommandScopeChatMember
}

// Checks ownership of a new phone number to change the user's authentication phone number; for official Android and iOS applications only
type PhoneNumberCodeTypeChange struct {
	meta
}

func (entity *PhoneNumberCodeTypeChange) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PhoneNumberCodeTypeChange

	return json.Marshal((*stub)(entity))
}

func (*PhoneNumberCodeTypeChange) GetType() string {
	return TypePhoneNumberCodeType
}

func (*PhoneNumberCodeTypeChange) GetConstructor() string {
	return ConstructorPhoneNumberCodeTypeChange
}

func (*PhoneNumberCodeTypeChange) PhoneNumberCodeTypeConstructor() string {
	return ConstructorPhoneNumberCodeTypeChange
}

// Verifies ownership of a phone number to be added to the user's Telegram Passport
type PhoneNumberCodeTypeVerify struct {
	meta
}

func (entity *PhoneNumberCodeTypeVerify) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PhoneNumberCodeTypeVerify

	return json.Marshal((*stub)(entity))
}

func (*PhoneNumberCodeTypeVerify) GetType() string {
	return TypePhoneNumberCodeType
}

func (*PhoneNumberCodeTypeVerify) GetConstructor() string {
	return ConstructorPhoneNumberCodeTypeVerify
}

func (*PhoneNumberCodeTypeVerify) PhoneNumberCodeTypeConstructor() string {
	return ConstructorPhoneNumberCodeTypeVerify
}

// Confirms ownership of a phone number to prevent account deletion while handling links of the type internalLinkTypePhoneNumberConfirmation
type PhoneNumberCodeTypeConfirmOwnership struct {
	meta
	// Hash value from the link
	Hash string `json:"hash"`
}

func (entity *PhoneNumberCodeTypeConfirmOwnership) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub PhoneNumberCodeTypeConfirmOwnership

	return json.Marshal((*stub)(entity))
}

func (*PhoneNumberCodeTypeConfirmOwnership) GetType() string {
	return TypePhoneNumberCodeType
}

func (*PhoneNumberCodeTypeConfirmOwnership) GetConstructor() string {
	return ConstructorPhoneNumberCodeTypeConfirmOwnership
}

func (*PhoneNumberCodeTypeConfirmOwnership) PhoneNumberCodeTypeConstructor() string {
	return ConstructorPhoneNumberCodeTypeConfirmOwnership
}

// The user authorization state has changed
type UpdateAuthorizationState struct {
	meta
	// New authorization state
	AuthorizationState AuthorizationState `json:"authorization_state"`
}

func (entity *UpdateAuthorizationState) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateAuthorizationState

	return json.Marshal((*stub)(entity))
}

func (*UpdateAuthorizationState) GetType() string {
	return TypeUpdate
}

func (*UpdateAuthorizationState) GetConstructor() string {
	return ConstructorUpdateAuthorizationState
}

func (*UpdateAuthorizationState) UpdateConstructor() string {
	return ConstructorUpdateAuthorizationState
}

func (updateAuthorizationState *UpdateAuthorizationState) UnmarshalJSON(data []byte) error {
	var tmp struct {
		AuthorizationState json.RawMessage `json:"authorization_state"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldAuthorizationState, _ := UnmarshalAuthorizationState(tmp.AuthorizationState)
	updateAuthorizationState.AuthorizationState = fieldAuthorizationState

	return nil
}

// A new message was received; can also be an outgoing message
type UpdateNewMessage struct {
	meta
	// The new message
	Message *Message `json:"message"`
}

func (entity *UpdateNewMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewMessage

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewMessage) GetType() string {
	return TypeUpdate
}

func (*UpdateNewMessage) GetConstructor() string {
	return ConstructorUpdateNewMessage
}

func (*UpdateNewMessage) UpdateConstructor() string {
	return ConstructorUpdateNewMessage
}

// A request to send a message has reached the Telegram server. This doesn't mean that the message will be sent successfully. This update is sent only if the option "use_quick_ack" is set to true. This update may be sent multiple times for the same message
type UpdateMessageSendAcknowledged struct {
	meta
	// The chat identifier of the sent message
	ChatId int64 `json:"chat_id"`
	// A temporary message identifier
	MessageId int64 `json:"message_id"`
}

func (entity *UpdateMessageSendAcknowledged) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageSendAcknowledged

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageSendAcknowledged) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageSendAcknowledged) GetConstructor() string {
	return ConstructorUpdateMessageSendAcknowledged
}

func (*UpdateMessageSendAcknowledged) UpdateConstructor() string {
	return ConstructorUpdateMessageSendAcknowledged
}

// A message has been successfully sent
type UpdateMessageSendSucceeded struct {
	meta
	// The sent message. Almost any field of the new message can be different from the corresponding field of the original message. For example, the field scheduling_state may change, making the message scheduled, or non-scheduled
	Message *Message `json:"message"`
	// The previous temporary message identifier
	OldMessageId int64 `json:"old_message_id"`
}

func (entity *UpdateMessageSendSucceeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageSendSucceeded

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageSendSucceeded) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageSendSucceeded) GetConstructor() string {
	return ConstructorUpdateMessageSendSucceeded
}

func (*UpdateMessageSendSucceeded) UpdateConstructor() string {
	return ConstructorUpdateMessageSendSucceeded
}

// A message failed to send. Be aware that some messages being sent can be irrecoverably deleted, in which case updateDeleteMessages will be received instead of this update
type UpdateMessageSendFailed struct {
	meta
	// The failed to send message
	Message *Message `json:"message"`
	// The previous temporary message identifier
	OldMessageId int64 `json:"old_message_id"`
	// The cause of the message sending failure
	Error *Error `json:"error"`
}

func (entity *UpdateMessageSendFailed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageSendFailed

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageSendFailed) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageSendFailed) GetConstructor() string {
	return ConstructorUpdateMessageSendFailed
}

func (*UpdateMessageSendFailed) UpdateConstructor() string {
	return ConstructorUpdateMessageSendFailed
}

// The message content has changed
type UpdateMessageContent struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// New message content
	NewContent MessageContent `json:"new_content"`
}

func (entity *UpdateMessageContent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageContent

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageContent) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageContent) GetConstructor() string {
	return ConstructorUpdateMessageContent
}

func (*UpdateMessageContent) UpdateConstructor() string {
	return ConstructorUpdateMessageContent
}

func (updateMessageContent *UpdateMessageContent) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId     int64           `json:"chat_id"`
		MessageId  int64           `json:"message_id"`
		NewContent json.RawMessage `json:"new_content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateMessageContent.ChatId = tmp.ChatId
	updateMessageContent.MessageId = tmp.MessageId

	fieldNewContent, _ := UnmarshalMessageContent(tmp.NewContent)
	updateMessageContent.NewContent = fieldNewContent

	return nil
}

// A message was edited. Changes in the message content will come in a separate updateMessageContent
type UpdateMessageEdited struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// Point in time (Unix timestamp) when the message was edited
	EditDate int32 `json:"edit_date"`
	// New message reply markup; may be null
	ReplyMarkup ReplyMarkup `json:"reply_markup"`
}

func (entity *UpdateMessageEdited) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageEdited

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageEdited) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageEdited) GetConstructor() string {
	return ConstructorUpdateMessageEdited
}

func (*UpdateMessageEdited) UpdateConstructor() string {
	return ConstructorUpdateMessageEdited
}

func (updateMessageEdited *UpdateMessageEdited) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId      int64           `json:"chat_id"`
		MessageId   int64           `json:"message_id"`
		EditDate    int32           `json:"edit_date"`
		ReplyMarkup json.RawMessage `json:"reply_markup"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateMessageEdited.ChatId = tmp.ChatId
	updateMessageEdited.MessageId = tmp.MessageId
	updateMessageEdited.EditDate = tmp.EditDate

	fieldReplyMarkup, _ := UnmarshalReplyMarkup(tmp.ReplyMarkup)
	updateMessageEdited.ReplyMarkup = fieldReplyMarkup

	return nil
}

// The message pinned state was changed
type UpdateMessageIsPinned struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The message identifier
	MessageId int64 `json:"message_id"`
	// True, if the message is pinned
	IsPinned bool `json:"is_pinned"`
}

func (entity *UpdateMessageIsPinned) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageIsPinned

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageIsPinned) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageIsPinned) GetConstructor() string {
	return ConstructorUpdateMessageIsPinned
}

func (*UpdateMessageIsPinned) UpdateConstructor() string {
	return ConstructorUpdateMessageIsPinned
}

// The information about interactions with a message has changed
type UpdateMessageInteractionInfo struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// New information about interactions with the message; may be null
	InteractionInfo *MessageInteractionInfo `json:"interaction_info"`
}

func (entity *UpdateMessageInteractionInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageInteractionInfo

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageInteractionInfo) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageInteractionInfo) GetConstructor() string {
	return ConstructorUpdateMessageInteractionInfo
}

func (*UpdateMessageInteractionInfo) UpdateConstructor() string {
	return ConstructorUpdateMessageInteractionInfo
}

// The message content was opened. Updates voice note messages to "listened", video note messages to "viewed" and starts the self-destruct timer
type UpdateMessageContentOpened struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
}

func (entity *UpdateMessageContentOpened) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageContentOpened

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageContentOpened) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageContentOpened) GetConstructor() string {
	return ConstructorUpdateMessageContentOpened
}

func (*UpdateMessageContentOpened) UpdateConstructor() string {
	return ConstructorUpdateMessageContentOpened
}

// A message with an unread mention was read
type UpdateMessageMentionRead struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// The new number of unread mention messages left in the chat
	UnreadMentionCount int32 `json:"unread_mention_count"`
}

func (entity *UpdateMessageMentionRead) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageMentionRead

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageMentionRead) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageMentionRead) GetConstructor() string {
	return ConstructorUpdateMessageMentionRead
}

func (*UpdateMessageMentionRead) UpdateConstructor() string {
	return ConstructorUpdateMessageMentionRead
}

// The list of unread reactions added to a message was changed
type UpdateMessageUnreadReactions struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// The new list of unread reactions
	UnreadReactions []*UnreadReaction `json:"unread_reactions"`
	// The new number of messages with unread reactions left in the chat
	UnreadReactionCount int32 `json:"unread_reaction_count"`
}

func (entity *UpdateMessageUnreadReactions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageUnreadReactions

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageUnreadReactions) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageUnreadReactions) GetConstructor() string {
	return ConstructorUpdateMessageUnreadReactions
}

func (*UpdateMessageUnreadReactions) UpdateConstructor() string {
	return ConstructorUpdateMessageUnreadReactions
}

// A fact-check added to a message was changed
type UpdateMessageFactCheck struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// The new fact-check
	FactCheck *FactCheck `json:"fact_check"`
}

func (entity *UpdateMessageFactCheck) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageFactCheck

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageFactCheck) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageFactCheck) GetConstructor() string {
	return ConstructorUpdateMessageFactCheck
}

func (*UpdateMessageFactCheck) UpdateConstructor() string {
	return ConstructorUpdateMessageFactCheck
}

// A message with a live location was viewed. When the update is received, the application is expected to update the live location
type UpdateMessageLiveLocationViewed struct {
	meta
	// Identifier of the chat with the live location message
	ChatId int64 `json:"chat_id"`
	// Identifier of the message with live location
	MessageId int64 `json:"message_id"`
}

func (entity *UpdateMessageLiveLocationViewed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageLiveLocationViewed

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageLiveLocationViewed) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageLiveLocationViewed) GetConstructor() string {
	return ConstructorUpdateMessageLiveLocationViewed
}

func (*UpdateMessageLiveLocationViewed) UpdateConstructor() string {
	return ConstructorUpdateMessageLiveLocationViewed
}

// An automatically scheduled message with video has been successfully sent after conversion
type UpdateVideoPublished struct {
	meta
	// Identifier of the chat with the message
	ChatId int64 `json:"chat_id"`
	// Identifier of the sent message
	MessageId int64 `json:"message_id"`
}

func (entity *UpdateVideoPublished) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateVideoPublished

	return json.Marshal((*stub)(entity))
}

func (*UpdateVideoPublished) GetType() string {
	return TypeUpdate
}

func (*UpdateVideoPublished) GetConstructor() string {
	return ConstructorUpdateVideoPublished
}

func (*UpdateVideoPublished) UpdateConstructor() string {
	return ConstructorUpdateVideoPublished
}

// A new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the application. The chat field changes will be reported through separate updates
type UpdateNewChat struct {
	meta
	// The chat
	Chat *Chat `json:"chat"`
}

func (entity *UpdateNewChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewChat

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewChat) GetType() string {
	return TypeUpdate
}

func (*UpdateNewChat) GetConstructor() string {
	return ConstructorUpdateNewChat
}

func (*UpdateNewChat) UpdateConstructor() string {
	return ConstructorUpdateNewChat
}

// The title of a chat was changed
type UpdateChatTitle struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new chat title
	Title string `json:"title"`
}

func (entity *UpdateChatTitle) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatTitle

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatTitle) GetType() string {
	return TypeUpdate
}

func (*UpdateChatTitle) GetConstructor() string {
	return ConstructorUpdateChatTitle
}

func (*UpdateChatTitle) UpdateConstructor() string {
	return ConstructorUpdateChatTitle
}

// A chat photo was changed
type UpdateChatPhoto struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new chat photo; may be null
	Photo *ChatPhotoInfo `json:"photo"`
}

func (entity *UpdateChatPhoto) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatPhoto

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatPhoto) GetType() string {
	return TypeUpdate
}

func (*UpdateChatPhoto) GetConstructor() string {
	return ConstructorUpdateChatPhoto
}

func (*UpdateChatPhoto) UpdateConstructor() string {
	return ConstructorUpdateChatPhoto
}

// Chat accent colors have changed
type UpdateChatAccentColors struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new chat accent color identifier
	AccentColorId int32 `json:"accent_color_id"`
	// The new identifier of a custom emoji to be shown on the reply header and link preview background; 0 if none
	BackgroundCustomEmojiId JsonInt64 `json:"background_custom_emoji_id"`
	// The new chat profile accent color identifier; -1 if none
	ProfileAccentColorId int32 `json:"profile_accent_color_id"`
	// The new identifier of a custom emoji to be shown on the profile background; 0 if none
	ProfileBackgroundCustomEmojiId JsonInt64 `json:"profile_background_custom_emoji_id"`
}

func (entity *UpdateChatAccentColors) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatAccentColors

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatAccentColors) GetType() string {
	return TypeUpdate
}

func (*UpdateChatAccentColors) GetConstructor() string {
	return ConstructorUpdateChatAccentColors
}

func (*UpdateChatAccentColors) UpdateConstructor() string {
	return ConstructorUpdateChatAccentColors
}

// Chat permissions were changed
type UpdateChatPermissions struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new chat permissions
	Permissions *ChatPermissions `json:"permissions"`
}

func (entity *UpdateChatPermissions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatPermissions

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatPermissions) GetType() string {
	return TypeUpdate
}

func (*UpdateChatPermissions) GetConstructor() string {
	return ConstructorUpdateChatPermissions
}

func (*UpdateChatPermissions) UpdateConstructor() string {
	return ConstructorUpdateChatPermissions
}

// The last message of a chat was changed
type UpdateChatLastMessage struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new last message in the chat; may be null if the last message became unknown. While the last message is unknown, new messages can be added to the chat without corresponding updateNewMessage update
	LastMessage *Message `json:"last_message"`
	// The new chat positions in the chat lists
	Positions []*ChatPosition `json:"positions"`
}

func (entity *UpdateChatLastMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatLastMessage

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatLastMessage) GetType() string {
	return TypeUpdate
}

func (*UpdateChatLastMessage) GetConstructor() string {
	return ConstructorUpdateChatLastMessage
}

func (*UpdateChatLastMessage) UpdateConstructor() string {
	return ConstructorUpdateChatLastMessage
}

// The position of a chat in a chat list has changed. An updateChatLastMessage or updateChatDraftMessage update might be sent instead of the update
type UpdateChatPosition struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New chat position. If new order is 0, then the chat needs to be removed from the list
	Position *ChatPosition `json:"position"`
}

func (entity *UpdateChatPosition) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatPosition

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatPosition) GetType() string {
	return TypeUpdate
}

func (*UpdateChatPosition) GetConstructor() string {
	return ConstructorUpdateChatPosition
}

func (*UpdateChatPosition) UpdateConstructor() string {
	return ConstructorUpdateChatPosition
}

// A chat was added to a chat list
type UpdateChatAddedToList struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The chat list to which the chat was added
	ChatList ChatList `json:"chat_list"`
}

func (entity *UpdateChatAddedToList) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatAddedToList

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatAddedToList) GetType() string {
	return TypeUpdate
}

func (*UpdateChatAddedToList) GetConstructor() string {
	return ConstructorUpdateChatAddedToList
}

func (*UpdateChatAddedToList) UpdateConstructor() string {
	return ConstructorUpdateChatAddedToList
}

func (updateChatAddedToList *UpdateChatAddedToList) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId   int64           `json:"chat_id"`
		ChatList json.RawMessage `json:"chat_list"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateChatAddedToList.ChatId = tmp.ChatId

	fieldChatList, _ := UnmarshalChatList(tmp.ChatList)
	updateChatAddedToList.ChatList = fieldChatList

	return nil
}

// A chat was removed from a chat list
type UpdateChatRemovedFromList struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The chat list from which the chat was removed
	ChatList ChatList `json:"chat_list"`
}

func (entity *UpdateChatRemovedFromList) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatRemovedFromList

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatRemovedFromList) GetType() string {
	return TypeUpdate
}

func (*UpdateChatRemovedFromList) GetConstructor() string {
	return ConstructorUpdateChatRemovedFromList
}

func (*UpdateChatRemovedFromList) UpdateConstructor() string {
	return ConstructorUpdateChatRemovedFromList
}

func (updateChatRemovedFromList *UpdateChatRemovedFromList) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId   int64           `json:"chat_id"`
		ChatList json.RawMessage `json:"chat_list"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateChatRemovedFromList.ChatId = tmp.ChatId

	fieldChatList, _ := UnmarshalChatList(tmp.ChatList)
	updateChatRemovedFromList.ChatList = fieldChatList

	return nil
}

// Incoming messages were read or the number of unread messages has been changed
type UpdateChatReadInbox struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the last read incoming message
	LastReadInboxMessageId int64 `json:"last_read_inbox_message_id"`
	// The number of unread messages left in the chat
	UnreadCount int32 `json:"unread_count"`
}

func (entity *UpdateChatReadInbox) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatReadInbox

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatReadInbox) GetType() string {
	return TypeUpdate
}

func (*UpdateChatReadInbox) GetConstructor() string {
	return ConstructorUpdateChatReadInbox
}

func (*UpdateChatReadInbox) UpdateConstructor() string {
	return ConstructorUpdateChatReadInbox
}

// Outgoing messages were read
type UpdateChatReadOutbox struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of last read outgoing message
	LastReadOutboxMessageId int64 `json:"last_read_outbox_message_id"`
}

func (entity *UpdateChatReadOutbox) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatReadOutbox

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatReadOutbox) GetType() string {
	return TypeUpdate
}

func (*UpdateChatReadOutbox) GetConstructor() string {
	return ConstructorUpdateChatReadOutbox
}

func (*UpdateChatReadOutbox) UpdateConstructor() string {
	return ConstructorUpdateChatReadOutbox
}

// The chat action bar was changed
type UpdateChatActionBar struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new value of the action bar; may be null
	ActionBar ChatActionBar `json:"action_bar"`
}

func (entity *UpdateChatActionBar) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatActionBar

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatActionBar) GetType() string {
	return TypeUpdate
}

func (*UpdateChatActionBar) GetConstructor() string {
	return ConstructorUpdateChatActionBar
}

func (*UpdateChatActionBar) UpdateConstructor() string {
	return ConstructorUpdateChatActionBar
}

func (updateChatActionBar *UpdateChatActionBar) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId    int64           `json:"chat_id"`
		ActionBar json.RawMessage `json:"action_bar"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateChatActionBar.ChatId = tmp.ChatId

	fieldActionBar, _ := UnmarshalChatActionBar(tmp.ActionBar)
	updateChatActionBar.ActionBar = fieldActionBar

	return nil
}

// The bar for managing business bot was changed in a chat
type UpdateChatBusinessBotManageBar struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new value of the business bot manage bar; may be null
	BusinessBotManageBar *BusinessBotManageBar `json:"business_bot_manage_bar"`
}

func (entity *UpdateChatBusinessBotManageBar) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatBusinessBotManageBar

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatBusinessBotManageBar) GetType() string {
	return TypeUpdate
}

func (*UpdateChatBusinessBotManageBar) GetConstructor() string {
	return ConstructorUpdateChatBusinessBotManageBar
}

func (*UpdateChatBusinessBotManageBar) UpdateConstructor() string {
	return ConstructorUpdateChatBusinessBotManageBar
}

// The chat available reactions were changed
type UpdateChatAvailableReactions struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new reactions, available in the chat
	AvailableReactions ChatAvailableReactions `json:"available_reactions"`
}

func (entity *UpdateChatAvailableReactions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatAvailableReactions

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatAvailableReactions) GetType() string {
	return TypeUpdate
}

func (*UpdateChatAvailableReactions) GetConstructor() string {
	return ConstructorUpdateChatAvailableReactions
}

func (*UpdateChatAvailableReactions) UpdateConstructor() string {
	return ConstructorUpdateChatAvailableReactions
}

func (updateChatAvailableReactions *UpdateChatAvailableReactions) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId             int64           `json:"chat_id"`
		AvailableReactions json.RawMessage `json:"available_reactions"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateChatAvailableReactions.ChatId = tmp.ChatId

	fieldAvailableReactions, _ := UnmarshalChatAvailableReactions(tmp.AvailableReactions)
	updateChatAvailableReactions.AvailableReactions = fieldAvailableReactions

	return nil
}

// A chat draft has changed. Be aware that the update may come in the currently opened chat but with old content of the draft. If the user has changed the content of the draft, this update mustn't be applied
type UpdateChatDraftMessage struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new draft message; may be null if none
	DraftMessage *DraftMessage `json:"draft_message"`
	// The new chat positions in the chat lists
	Positions []*ChatPosition `json:"positions"`
}

func (entity *UpdateChatDraftMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatDraftMessage

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatDraftMessage) GetType() string {
	return TypeUpdate
}

func (*UpdateChatDraftMessage) GetConstructor() string {
	return ConstructorUpdateChatDraftMessage
}

func (*UpdateChatDraftMessage) UpdateConstructor() string {
	return ConstructorUpdateChatDraftMessage
}

// Chat emoji status has changed
type UpdateChatEmojiStatus struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new chat emoji status; may be null
	EmojiStatus *EmojiStatus `json:"emoji_status"`
}

func (entity *UpdateChatEmojiStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatEmojiStatus

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatEmojiStatus) GetType() string {
	return TypeUpdate
}

func (*UpdateChatEmojiStatus) GetConstructor() string {
	return ConstructorUpdateChatEmojiStatus
}

func (*UpdateChatEmojiStatus) UpdateConstructor() string {
	return ConstructorUpdateChatEmojiStatus
}

// The message sender that is selected to send messages in a chat has changed
type UpdateChatMessageSender struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of message_sender_id; may be null if the user can't change message sender
	MessageSenderId MessageSender `json:"message_sender_id"`
}

func (entity *UpdateChatMessageSender) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatMessageSender

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatMessageSender) GetType() string {
	return TypeUpdate
}

func (*UpdateChatMessageSender) GetConstructor() string {
	return ConstructorUpdateChatMessageSender
}

func (*UpdateChatMessageSender) UpdateConstructor() string {
	return ConstructorUpdateChatMessageSender
}

func (updateChatMessageSender *UpdateChatMessageSender) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId          int64           `json:"chat_id"`
		MessageSenderId json.RawMessage `json:"message_sender_id"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateChatMessageSender.ChatId = tmp.ChatId

	fieldMessageSenderId, _ := UnmarshalMessageSender(tmp.MessageSenderId)
	updateChatMessageSender.MessageSenderId = fieldMessageSenderId

	return nil
}

// The message auto-delete or self-destruct timer setting for a chat was changed
type UpdateChatMessageAutoDeleteTime struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of message_auto_delete_time
	MessageAutoDeleteTime int32 `json:"message_auto_delete_time"`
}

func (entity *UpdateChatMessageAutoDeleteTime) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatMessageAutoDeleteTime

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatMessageAutoDeleteTime) GetType() string {
	return TypeUpdate
}

func (*UpdateChatMessageAutoDeleteTime) GetConstructor() string {
	return ConstructorUpdateChatMessageAutoDeleteTime
}

func (*UpdateChatMessageAutoDeleteTime) UpdateConstructor() string {
	return ConstructorUpdateChatMessageAutoDeleteTime
}

// Notification settings for a chat were changed
type UpdateChatNotificationSettings struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new notification settings
	NotificationSettings *ChatNotificationSettings `json:"notification_settings"`
}

func (entity *UpdateChatNotificationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatNotificationSettings

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatNotificationSettings) GetType() string {
	return TypeUpdate
}

func (*UpdateChatNotificationSettings) GetConstructor() string {
	return ConstructorUpdateChatNotificationSettings
}

func (*UpdateChatNotificationSettings) UpdateConstructor() string {
	return ConstructorUpdateChatNotificationSettings
}

// The chat pending join requests were changed
type UpdateChatPendingJoinRequests struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new data about pending join requests; may be null
	PendingJoinRequests *ChatJoinRequestsInfo `json:"pending_join_requests"`
}

func (entity *UpdateChatPendingJoinRequests) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatPendingJoinRequests

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatPendingJoinRequests) GetType() string {
	return TypeUpdate
}

func (*UpdateChatPendingJoinRequests) GetConstructor() string {
	return ConstructorUpdateChatPendingJoinRequests
}

func (*UpdateChatPendingJoinRequests) UpdateConstructor() string {
	return ConstructorUpdateChatPendingJoinRequests
}

// The default chat reply markup was changed. Can occur because new messages with reply markup were received or because an old reply markup was hidden by the user
type UpdateChatReplyMarkup struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat
	ReplyMarkupMessageId int64 `json:"reply_markup_message_id"`
}

func (entity *UpdateChatReplyMarkup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatReplyMarkup

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatReplyMarkup) GetType() string {
	return TypeUpdate
}

func (*UpdateChatReplyMarkup) GetConstructor() string {
	return ConstructorUpdateChatReplyMarkup
}

func (*UpdateChatReplyMarkup) UpdateConstructor() string {
	return ConstructorUpdateChatReplyMarkup
}

// The chat background was changed
type UpdateChatBackground struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new chat background; may be null if background was reset to default
	Background *ChatBackground `json:"background"`
}

func (entity *UpdateChatBackground) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatBackground

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatBackground) GetType() string {
	return TypeUpdate
}

func (*UpdateChatBackground) GetConstructor() string {
	return ConstructorUpdateChatBackground
}

func (*UpdateChatBackground) UpdateConstructor() string {
	return ConstructorUpdateChatBackground
}

// The chat theme was changed
type UpdateChatTheme struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new name of the chat theme; may be empty if theme was reset to default
	ThemeName string `json:"theme_name"`
}

func (entity *UpdateChatTheme) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatTheme

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatTheme) GetType() string {
	return TypeUpdate
}

func (*UpdateChatTheme) GetConstructor() string {
	return ConstructorUpdateChatTheme
}

func (*UpdateChatTheme) UpdateConstructor() string {
	return ConstructorUpdateChatTheme
}

// The chat unread_mention_count has changed
type UpdateChatUnreadMentionCount struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The number of unread mention messages left in the chat
	UnreadMentionCount int32 `json:"unread_mention_count"`
}

func (entity *UpdateChatUnreadMentionCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatUnreadMentionCount

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatUnreadMentionCount) GetType() string {
	return TypeUpdate
}

func (*UpdateChatUnreadMentionCount) GetConstructor() string {
	return ConstructorUpdateChatUnreadMentionCount
}

func (*UpdateChatUnreadMentionCount) UpdateConstructor() string {
	return ConstructorUpdateChatUnreadMentionCount
}

// The chat unread_reaction_count has changed
type UpdateChatUnreadReactionCount struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The number of messages with unread reactions left in the chat
	UnreadReactionCount int32 `json:"unread_reaction_count"`
}

func (entity *UpdateChatUnreadReactionCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatUnreadReactionCount

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatUnreadReactionCount) GetType() string {
	return TypeUpdate
}

func (*UpdateChatUnreadReactionCount) GetConstructor() string {
	return ConstructorUpdateChatUnreadReactionCount
}

func (*UpdateChatUnreadReactionCount) UpdateConstructor() string {
	return ConstructorUpdateChatUnreadReactionCount
}

// A chat video chat state has changed
type UpdateChatVideoChat struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of video_chat
	VideoChat *VideoChat `json:"video_chat"`
}

func (entity *UpdateChatVideoChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatVideoChat

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatVideoChat) GetType() string {
	return TypeUpdate
}

func (*UpdateChatVideoChat) GetConstructor() string {
	return ConstructorUpdateChatVideoChat
}

func (*UpdateChatVideoChat) UpdateConstructor() string {
	return ConstructorUpdateChatVideoChat
}

// The value of the default disable_notification parameter, used when a message is sent to the chat, was changed
type UpdateChatDefaultDisableNotification struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// The new default_disable_notification value
	DefaultDisableNotification bool `json:"default_disable_notification"`
}

func (entity *UpdateChatDefaultDisableNotification) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatDefaultDisableNotification

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatDefaultDisableNotification) GetType() string {
	return TypeUpdate
}

func (*UpdateChatDefaultDisableNotification) GetConstructor() string {
	return ConstructorUpdateChatDefaultDisableNotification
}

func (*UpdateChatDefaultDisableNotification) UpdateConstructor() string {
	return ConstructorUpdateChatDefaultDisableNotification
}

// A chat content was allowed or restricted for saving
type UpdateChatHasProtectedContent struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of has_protected_content
	HasProtectedContent bool `json:"has_protected_content"`
}

func (entity *UpdateChatHasProtectedContent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatHasProtectedContent

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatHasProtectedContent) GetType() string {
	return TypeUpdate
}

func (*UpdateChatHasProtectedContent) GetConstructor() string {
	return ConstructorUpdateChatHasProtectedContent
}

func (*UpdateChatHasProtectedContent) UpdateConstructor() string {
	return ConstructorUpdateChatHasProtectedContent
}

// Translation of chat messages was enabled or disabled
type UpdateChatIsTranslatable struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of is_translatable
	IsTranslatable bool `json:"is_translatable"`
}

func (entity *UpdateChatIsTranslatable) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatIsTranslatable

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatIsTranslatable) GetType() string {
	return TypeUpdate
}

func (*UpdateChatIsTranslatable) GetConstructor() string {
	return ConstructorUpdateChatIsTranslatable
}

func (*UpdateChatIsTranslatable) UpdateConstructor() string {
	return ConstructorUpdateChatIsTranslatable
}

// A chat was marked as unread or was read
type UpdateChatIsMarkedAsUnread struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of is_marked_as_unread
	IsMarkedAsUnread bool `json:"is_marked_as_unread"`
}

func (entity *UpdateChatIsMarkedAsUnread) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatIsMarkedAsUnread

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatIsMarkedAsUnread) GetType() string {
	return TypeUpdate
}

func (*UpdateChatIsMarkedAsUnread) GetConstructor() string {
	return ConstructorUpdateChatIsMarkedAsUnread
}

func (*UpdateChatIsMarkedAsUnread) UpdateConstructor() string {
	return ConstructorUpdateChatIsMarkedAsUnread
}

// A chat default appearance has changed
type UpdateChatViewAsTopics struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of view_as_topics
	ViewAsTopics bool `json:"view_as_topics"`
}

func (entity *UpdateChatViewAsTopics) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatViewAsTopics

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatViewAsTopics) GetType() string {
	return TypeUpdate
}

func (*UpdateChatViewAsTopics) GetConstructor() string {
	return ConstructorUpdateChatViewAsTopics
}

func (*UpdateChatViewAsTopics) UpdateConstructor() string {
	return ConstructorUpdateChatViewAsTopics
}

// A chat was blocked or unblocked
type UpdateChatBlockList struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Block list to which the chat is added; may be null if none
	BlockList BlockList `json:"block_list"`
}

func (entity *UpdateChatBlockList) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatBlockList

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatBlockList) GetType() string {
	return TypeUpdate
}

func (*UpdateChatBlockList) GetConstructor() string {
	return ConstructorUpdateChatBlockList
}

func (*UpdateChatBlockList) UpdateConstructor() string {
	return ConstructorUpdateChatBlockList
}

func (updateChatBlockList *UpdateChatBlockList) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId    int64           `json:"chat_id"`
		BlockList json.RawMessage `json:"block_list"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateChatBlockList.ChatId = tmp.ChatId

	fieldBlockList, _ := UnmarshalBlockList(tmp.BlockList)
	updateChatBlockList.BlockList = fieldBlockList

	return nil
}

// A chat's has_scheduled_messages field has changed
type UpdateChatHasScheduledMessages struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New value of has_scheduled_messages
	HasScheduledMessages bool `json:"has_scheduled_messages"`
}

func (entity *UpdateChatHasScheduledMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatHasScheduledMessages

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatHasScheduledMessages) GetType() string {
	return TypeUpdate
}

func (*UpdateChatHasScheduledMessages) GetConstructor() string {
	return ConstructorUpdateChatHasScheduledMessages
}

func (*UpdateChatHasScheduledMessages) UpdateConstructor() string {
	return ConstructorUpdateChatHasScheduledMessages
}

// The list of chat folders or a chat folder has changed
type UpdateChatFolders struct {
	meta
	// The new list of chat folders
	ChatFolders []*ChatFolderInfo `json:"chat_folders"`
	// Position of the main chat list among chat folders, 0-based
	MainChatListPosition int32 `json:"main_chat_list_position"`
	// True, if folder tags are enabled
	AreTagsEnabled bool `json:"are_tags_enabled"`
}

func (entity *UpdateChatFolders) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatFolders

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatFolders) GetType() string {
	return TypeUpdate
}

func (*UpdateChatFolders) GetConstructor() string {
	return ConstructorUpdateChatFolders
}

func (*UpdateChatFolders) UpdateConstructor() string {
	return ConstructorUpdateChatFolders
}

// The number of online group members has changed. This update with non-zero number of online group members is sent only for currently opened chats. There is no guarantee that it is sent just after the number of online users has changed
type UpdateChatOnlineMemberCount struct {
	meta
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// New number of online members in the chat, or 0 if unknown
	OnlineMemberCount int32 `json:"online_member_count"`
}

func (entity *UpdateChatOnlineMemberCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatOnlineMemberCount

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatOnlineMemberCount) GetType() string {
	return TypeUpdate
}

func (*UpdateChatOnlineMemberCount) GetConstructor() string {
	return ConstructorUpdateChatOnlineMemberCount
}

func (*UpdateChatOnlineMemberCount) UpdateConstructor() string {
	return ConstructorUpdateChatOnlineMemberCount
}

// Basic information about a Saved Messages topic has changed. This update is guaranteed to come before the topic identifier is returned to the application
type UpdateSavedMessagesTopic struct {
	meta
	// New data about the topic
	Topic *SavedMessagesTopic `json:"topic"`
}

func (entity *UpdateSavedMessagesTopic) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSavedMessagesTopic

	return json.Marshal((*stub)(entity))
}

func (*UpdateSavedMessagesTopic) GetType() string {
	return TypeUpdate
}

func (*UpdateSavedMessagesTopic) GetConstructor() string {
	return ConstructorUpdateSavedMessagesTopic
}

func (*UpdateSavedMessagesTopic) UpdateConstructor() string {
	return ConstructorUpdateSavedMessagesTopic
}

// Number of Saved Messages topics has changed
type UpdateSavedMessagesTopicCount struct {
	meta
	// Approximate total number of Saved Messages topics
	TopicCount int32 `json:"topic_count"`
}

func (entity *UpdateSavedMessagesTopicCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSavedMessagesTopicCount

	return json.Marshal((*stub)(entity))
}

func (*UpdateSavedMessagesTopicCount) GetType() string {
	return TypeUpdate
}

func (*UpdateSavedMessagesTopicCount) GetConstructor() string {
	return ConstructorUpdateSavedMessagesTopicCount
}

func (*UpdateSavedMessagesTopicCount) UpdateConstructor() string {
	return ConstructorUpdateSavedMessagesTopicCount
}

// Basic information about a quick reply shortcut has changed. This update is guaranteed to come before the quick shortcut name is returned to the application
type UpdateQuickReplyShortcut struct {
	meta
	// New data about the shortcut
	Shortcut *QuickReplyShortcut `json:"shortcut"`
}

func (entity *UpdateQuickReplyShortcut) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateQuickReplyShortcut

	return json.Marshal((*stub)(entity))
}

func (*UpdateQuickReplyShortcut) GetType() string {
	return TypeUpdate
}

func (*UpdateQuickReplyShortcut) GetConstructor() string {
	return ConstructorUpdateQuickReplyShortcut
}

func (*UpdateQuickReplyShortcut) UpdateConstructor() string {
	return ConstructorUpdateQuickReplyShortcut
}

// A quick reply shortcut and all its messages were deleted
type UpdateQuickReplyShortcutDeleted struct {
	meta
	// The identifier of the deleted shortcut
	ShortcutId int32 `json:"shortcut_id"`
}

func (entity *UpdateQuickReplyShortcutDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateQuickReplyShortcutDeleted

	return json.Marshal((*stub)(entity))
}

func (*UpdateQuickReplyShortcutDeleted) GetType() string {
	return TypeUpdate
}

func (*UpdateQuickReplyShortcutDeleted) GetConstructor() string {
	return ConstructorUpdateQuickReplyShortcutDeleted
}

func (*UpdateQuickReplyShortcutDeleted) UpdateConstructor() string {
	return ConstructorUpdateQuickReplyShortcutDeleted
}

// The list of quick reply shortcuts has changed
type UpdateQuickReplyShortcuts struct {
	meta
	// The new list of identifiers of quick reply shortcuts
	ShortcutIds []int32 `json:"shortcut_ids"`
}

func (entity *UpdateQuickReplyShortcuts) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateQuickReplyShortcuts

	return json.Marshal((*stub)(entity))
}

func (*UpdateQuickReplyShortcuts) GetType() string {
	return TypeUpdate
}

func (*UpdateQuickReplyShortcuts) GetConstructor() string {
	return ConstructorUpdateQuickReplyShortcuts
}

func (*UpdateQuickReplyShortcuts) UpdateConstructor() string {
	return ConstructorUpdateQuickReplyShortcuts
}

// The list of quick reply shortcut messages has changed
type UpdateQuickReplyShortcutMessages struct {
	meta
	// The identifier of the shortcut
	ShortcutId int32 `json:"shortcut_id"`
	// The new list of quick reply messages for the shortcut in order from the first to the last sent
	Messages []*QuickReplyMessage `json:"messages"`
}

func (entity *UpdateQuickReplyShortcutMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateQuickReplyShortcutMessages

	return json.Marshal((*stub)(entity))
}

func (*UpdateQuickReplyShortcutMessages) GetType() string {
	return TypeUpdate
}

func (*UpdateQuickReplyShortcutMessages) GetConstructor() string {
	return ConstructorUpdateQuickReplyShortcutMessages
}

func (*UpdateQuickReplyShortcutMessages) UpdateConstructor() string {
	return ConstructorUpdateQuickReplyShortcutMessages
}

// Basic information about a topic in a forum chat was changed
type UpdateForumTopicInfo struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New information about the topic
	Info *ForumTopicInfo `json:"info"`
}

func (entity *UpdateForumTopicInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateForumTopicInfo

	return json.Marshal((*stub)(entity))
}

func (*UpdateForumTopicInfo) GetType() string {
	return TypeUpdate
}

func (*UpdateForumTopicInfo) GetConstructor() string {
	return ConstructorUpdateForumTopicInfo
}

func (*UpdateForumTopicInfo) UpdateConstructor() string {
	return ConstructorUpdateForumTopicInfo
}

// Notification settings for some type of chats were updated
type UpdateScopeNotificationSettings struct {
	meta
	// Types of chats for which notification settings were updated
	Scope NotificationSettingsScope `json:"scope"`
	// The new notification settings
	NotificationSettings *ScopeNotificationSettings `json:"notification_settings"`
}

func (entity *UpdateScopeNotificationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateScopeNotificationSettings

	return json.Marshal((*stub)(entity))
}

func (*UpdateScopeNotificationSettings) GetType() string {
	return TypeUpdate
}

func (*UpdateScopeNotificationSettings) GetConstructor() string {
	return ConstructorUpdateScopeNotificationSettings
}

func (*UpdateScopeNotificationSettings) UpdateConstructor() string {
	return ConstructorUpdateScopeNotificationSettings
}

func (updateScopeNotificationSettings *UpdateScopeNotificationSettings) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Scope                json.RawMessage            `json:"scope"`
		NotificationSettings *ScopeNotificationSettings `json:"notification_settings"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateScopeNotificationSettings.NotificationSettings = tmp.NotificationSettings

	fieldScope, _ := UnmarshalNotificationSettingsScope(tmp.Scope)
	updateScopeNotificationSettings.Scope = fieldScope

	return nil
}

// Notification settings for reactions were updated
type UpdateReactionNotificationSettings struct {
	meta
	// The new notification settings
	NotificationSettings *ReactionNotificationSettings `json:"notification_settings"`
}

func (entity *UpdateReactionNotificationSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateReactionNotificationSettings

	return json.Marshal((*stub)(entity))
}

func (*UpdateReactionNotificationSettings) GetType() string {
	return TypeUpdate
}

func (*UpdateReactionNotificationSettings) GetConstructor() string {
	return ConstructorUpdateReactionNotificationSettings
}

func (*UpdateReactionNotificationSettings) UpdateConstructor() string {
	return ConstructorUpdateReactionNotificationSettings
}

// A notification was changed
type UpdateNotification struct {
	meta
	// Unique notification group identifier
	NotificationGroupId int32 `json:"notification_group_id"`
	// Changed notification
	Notification *Notification `json:"notification"`
}

func (entity *UpdateNotification) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNotification

	return json.Marshal((*stub)(entity))
}

func (*UpdateNotification) GetType() string {
	return TypeUpdate
}

func (*UpdateNotification) GetConstructor() string {
	return ConstructorUpdateNotification
}

func (*UpdateNotification) UpdateConstructor() string {
	return ConstructorUpdateNotification
}

// A list of active notifications in a notification group has changed
type UpdateNotificationGroup struct {
	meta
	// Unique notification group identifier
	NotificationGroupId int32 `json:"notification_group_id"`
	// New type of the notification group
	Type NotificationGroupType `json:"type"`
	// Identifier of a chat to which all notifications in the group belong
	ChatId int64 `json:"chat_id"`
	// Chat identifier, which notification settings must be applied to the added notifications
	NotificationSettingsChatId int64 `json:"notification_settings_chat_id"`
	// Identifier of the notification sound to be played; 0 if sound is disabled
	NotificationSoundId JsonInt64 `json:"notification_sound_id"`
	// Total number of unread notifications in the group, can be bigger than number of active notifications
	TotalCount int32 `json:"total_count"`
	// List of added group notifications, sorted by notification identifier
	AddedNotifications []*Notification `json:"added_notifications"`
	// Identifiers of removed group notifications, sorted by notification identifier
	RemovedNotificationIds []int32 `json:"removed_notification_ids"`
}

func (entity *UpdateNotificationGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNotificationGroup

	return json.Marshal((*stub)(entity))
}

func (*UpdateNotificationGroup) GetType() string {
	return TypeUpdate
}

func (*UpdateNotificationGroup) GetConstructor() string {
	return ConstructorUpdateNotificationGroup
}

func (*UpdateNotificationGroup) UpdateConstructor() string {
	return ConstructorUpdateNotificationGroup
}

func (updateNotificationGroup *UpdateNotificationGroup) UnmarshalJSON(data []byte) error {
	var tmp struct {
		NotificationGroupId        int32           `json:"notification_group_id"`
		Type                       json.RawMessage `json:"type"`
		ChatId                     int64           `json:"chat_id"`
		NotificationSettingsChatId int64           `json:"notification_settings_chat_id"`
		NotificationSoundId        JsonInt64       `json:"notification_sound_id"`
		TotalCount                 int32           `json:"total_count"`
		AddedNotifications         []*Notification `json:"added_notifications"`
		RemovedNotificationIds     []int32         `json:"removed_notification_ids"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateNotificationGroup.NotificationGroupId = tmp.NotificationGroupId
	updateNotificationGroup.ChatId = tmp.ChatId
	updateNotificationGroup.NotificationSettingsChatId = tmp.NotificationSettingsChatId
	updateNotificationGroup.NotificationSoundId = tmp.NotificationSoundId
	updateNotificationGroup.TotalCount = tmp.TotalCount
	updateNotificationGroup.AddedNotifications = tmp.AddedNotifications
	updateNotificationGroup.RemovedNotificationIds = tmp.RemovedNotificationIds

	fieldType, _ := UnmarshalNotificationGroupType(tmp.Type)
	updateNotificationGroup.Type = fieldType

	return nil
}

// Contains active notifications that were shown on previous application launches. This update is sent only if the message database is used. In that case it comes once before any updateNotification and updateNotificationGroup update
type UpdateActiveNotifications struct {
	meta
	// Lists of active notification groups
	Groups []*NotificationGroup `json:"groups"`
}

func (entity *UpdateActiveNotifications) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateActiveNotifications

	return json.Marshal((*stub)(entity))
}

func (*UpdateActiveNotifications) GetType() string {
	return TypeUpdate
}

func (*UpdateActiveNotifications) GetConstructor() string {
	return ConstructorUpdateActiveNotifications
}

func (*UpdateActiveNotifications) UpdateConstructor() string {
	return ConstructorUpdateActiveNotifications
}

// Describes whether there are some pending notification updates. Can be used to prevent application from killing, while there are some pending notifications
type UpdateHavePendingNotifications struct {
	meta
	// True, if there are some delayed notification updates, which will be sent soon
	HaveDelayedNotifications bool `json:"have_delayed_notifications"`
	// True, if there can be some yet unreceived notifications, which are being fetched from the server
	HaveUnreceivedNotifications bool `json:"have_unreceived_notifications"`
}

func (entity *UpdateHavePendingNotifications) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateHavePendingNotifications

	return json.Marshal((*stub)(entity))
}

func (*UpdateHavePendingNotifications) GetType() string {
	return TypeUpdate
}

func (*UpdateHavePendingNotifications) GetConstructor() string {
	return ConstructorUpdateHavePendingNotifications
}

func (*UpdateHavePendingNotifications) UpdateConstructor() string {
	return ConstructorUpdateHavePendingNotifications
}

// Some messages were deleted
type UpdateDeleteMessages struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifiers of the deleted messages
	MessageIds []int64 `json:"message_ids"`
	// True, if the messages are permanently deleted by a user (as opposed to just becoming inaccessible)
	IsPermanent bool `json:"is_permanent"`
	// True, if the messages are deleted only from the cache and can possibly be retrieved again in the future
	FromCache bool `json:"from_cache"`
}

func (entity *UpdateDeleteMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateDeleteMessages

	return json.Marshal((*stub)(entity))
}

func (*UpdateDeleteMessages) GetType() string {
	return TypeUpdate
}

func (*UpdateDeleteMessages) GetConstructor() string {
	return ConstructorUpdateDeleteMessages
}

func (*UpdateDeleteMessages) UpdateConstructor() string {
	return ConstructorUpdateDeleteMessages
}

// A message sender activity in the chat has changed
type UpdateChatAction struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// If not 0, the message thread identifier in which the action was performed
	MessageThreadId int64 `json:"message_thread_id"`
	// Identifier of a message sender performing the action
	SenderId MessageSender `json:"sender_id"`
	// The action
	Action ChatAction `json:"action"`
}

func (entity *UpdateChatAction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatAction

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatAction) GetType() string {
	return TypeUpdate
}

func (*UpdateChatAction) GetConstructor() string {
	return ConstructorUpdateChatAction
}

func (*UpdateChatAction) UpdateConstructor() string {
	return ConstructorUpdateChatAction
}

func (updateChatAction *UpdateChatAction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId          int64           `json:"chat_id"`
		MessageThreadId int64           `json:"message_thread_id"`
		SenderId        json.RawMessage `json:"sender_id"`
		Action          json.RawMessage `json:"action"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateChatAction.ChatId = tmp.ChatId
	updateChatAction.MessageThreadId = tmp.MessageThreadId

	fieldSenderId, _ := UnmarshalMessageSender(tmp.SenderId)
	updateChatAction.SenderId = fieldSenderId

	fieldAction, _ := UnmarshalChatAction(tmp.Action)
	updateChatAction.Action = fieldAction

	return nil
}

// The user went online or offline
type UpdateUserStatus struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
	// New status of the user
	Status UserStatus `json:"status"`
}

func (entity *UpdateUserStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateUserStatus

	return json.Marshal((*stub)(entity))
}

func (*UpdateUserStatus) GetType() string {
	return TypeUpdate
}

func (*UpdateUserStatus) GetConstructor() string {
	return ConstructorUpdateUserStatus
}

func (*UpdateUserStatus) UpdateConstructor() string {
	return ConstructorUpdateUserStatus
}

func (updateUserStatus *UpdateUserStatus) UnmarshalJSON(data []byte) error {
	var tmp struct {
		UserId int64           `json:"user_id"`
		Status json.RawMessage `json:"status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateUserStatus.UserId = tmp.UserId

	fieldStatus, _ := UnmarshalUserStatus(tmp.Status)
	updateUserStatus.Status = fieldStatus

	return nil
}

// Some data of a user has changed. This update is guaranteed to come before the user identifier is returned to the application
type UpdateUser struct {
	meta
	// New data about the user
	User *User `json:"user"`
}

func (entity *UpdateUser) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateUser

	return json.Marshal((*stub)(entity))
}

func (*UpdateUser) GetType() string {
	return TypeUpdate
}

func (*UpdateUser) GetConstructor() string {
	return ConstructorUpdateUser
}

func (*UpdateUser) UpdateConstructor() string {
	return ConstructorUpdateUser
}

// Some data of a basic group has changed. This update is guaranteed to come before the basic group identifier is returned to the application
type UpdateBasicGroup struct {
	meta
	// New data about the group
	BasicGroup *BasicGroup `json:"basic_group"`
}

func (entity *UpdateBasicGroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateBasicGroup

	return json.Marshal((*stub)(entity))
}

func (*UpdateBasicGroup) GetType() string {
	return TypeUpdate
}

func (*UpdateBasicGroup) GetConstructor() string {
	return ConstructorUpdateBasicGroup
}

func (*UpdateBasicGroup) UpdateConstructor() string {
	return ConstructorUpdateBasicGroup
}

// Some data of a supergroup or a channel has changed. This update is guaranteed to come before the supergroup identifier is returned to the application
type UpdateSupergroup struct {
	meta
	// New data about the supergroup
	Supergroup *Supergroup `json:"supergroup"`
}

func (entity *UpdateSupergroup) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSupergroup

	return json.Marshal((*stub)(entity))
}

func (*UpdateSupergroup) GetType() string {
	return TypeUpdate
}

func (*UpdateSupergroup) GetConstructor() string {
	return ConstructorUpdateSupergroup
}

func (*UpdateSupergroup) UpdateConstructor() string {
	return ConstructorUpdateSupergroup
}

// Some data of a secret chat has changed. This update is guaranteed to come before the secret chat identifier is returned to the application
type UpdateSecretChat struct {
	meta
	// New data about the secret chat
	SecretChat *SecretChat `json:"secret_chat"`
}

func (entity *UpdateSecretChat) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSecretChat

	return json.Marshal((*stub)(entity))
}

func (*UpdateSecretChat) GetType() string {
	return TypeUpdate
}

func (*UpdateSecretChat) GetConstructor() string {
	return ConstructorUpdateSecretChat
}

func (*UpdateSecretChat) UpdateConstructor() string {
	return ConstructorUpdateSecretChat
}

// Some data in userFullInfo has been changed
type UpdateUserFullInfo struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
	// New full information about the user
	UserFullInfo *UserFullInfo `json:"user_full_info"`
}

func (entity *UpdateUserFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateUserFullInfo

	return json.Marshal((*stub)(entity))
}

func (*UpdateUserFullInfo) GetType() string {
	return TypeUpdate
}

func (*UpdateUserFullInfo) GetConstructor() string {
	return ConstructorUpdateUserFullInfo
}

func (*UpdateUserFullInfo) UpdateConstructor() string {
	return ConstructorUpdateUserFullInfo
}

// Some data in basicGroupFullInfo has been changed
type UpdateBasicGroupFullInfo struct {
	meta
	// Identifier of a basic group
	BasicGroupId int64 `json:"basic_group_id"`
	// New full information about the group
	BasicGroupFullInfo *BasicGroupFullInfo `json:"basic_group_full_info"`
}

func (entity *UpdateBasicGroupFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateBasicGroupFullInfo

	return json.Marshal((*stub)(entity))
}

func (*UpdateBasicGroupFullInfo) GetType() string {
	return TypeUpdate
}

func (*UpdateBasicGroupFullInfo) GetConstructor() string {
	return ConstructorUpdateBasicGroupFullInfo
}

func (*UpdateBasicGroupFullInfo) UpdateConstructor() string {
	return ConstructorUpdateBasicGroupFullInfo
}

// Some data in supergroupFullInfo has been changed
type UpdateSupergroupFullInfo struct {
	meta
	// Identifier of the supergroup or channel
	SupergroupId int64 `json:"supergroup_id"`
	// New full information about the supergroup
	SupergroupFullInfo *SupergroupFullInfo `json:"supergroup_full_info"`
}

func (entity *UpdateSupergroupFullInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSupergroupFullInfo

	return json.Marshal((*stub)(entity))
}

func (*UpdateSupergroupFullInfo) GetType() string {
	return TypeUpdate
}

func (*UpdateSupergroupFullInfo) GetConstructor() string {
	return ConstructorUpdateSupergroupFullInfo
}

func (*UpdateSupergroupFullInfo) UpdateConstructor() string {
	return ConstructorUpdateSupergroupFullInfo
}

// A service notification from the server was received. Upon receiving this the application must show a popup with the content of the notification
type UpdateServiceNotification struct {
	meta
	// Notification type. If type begins with "AUTH_KEY_DROP_", then two buttons "Cancel" and "Log out" must be shown under notification; if user presses the second, all local data must be destroyed using Destroy method
	Type string `json:"type"`
	// Notification content
	Content MessageContent `json:"content"`
}

func (entity *UpdateServiceNotification) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateServiceNotification

	return json.Marshal((*stub)(entity))
}

func (*UpdateServiceNotification) GetType() string {
	return TypeUpdate
}

func (*UpdateServiceNotification) GetConstructor() string {
	return ConstructorUpdateServiceNotification
}

func (*UpdateServiceNotification) UpdateConstructor() string {
	return ConstructorUpdateServiceNotification
}

func (updateServiceNotification *UpdateServiceNotification) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Type    string          `json:"type"`
		Content json.RawMessage `json:"content"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateServiceNotification.Type = tmp.Type

	fieldContent, _ := UnmarshalMessageContent(tmp.Content)
	updateServiceNotification.Content = fieldContent

	return nil
}

// Information about a file was updated
type UpdateFile struct {
	meta
	// New data about the file
	File *File `json:"file"`
}

func (entity *UpdateFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateFile

	return json.Marshal((*stub)(entity))
}

func (*UpdateFile) GetType() string {
	return TypeUpdate
}

func (*UpdateFile) GetConstructor() string {
	return ConstructorUpdateFile
}

func (*UpdateFile) UpdateConstructor() string {
	return ConstructorUpdateFile
}

// The file generation process needs to be started by the application. Use setFileGenerationProgress and finishFileGeneration to generate the file
type UpdateFileGenerationStart struct {
	meta
	// Unique identifier for the generation process
	GenerationId JsonInt64 `json:"generation_id"`
	// The original path specified by the application in inputFileGenerated
	OriginalPath string `json:"original_path"`
	// The path to a file that must be created and where the new file must be generated by the application. If the application has no access to the path, it can use writeGeneratedFilePart to generate the file
	DestinationPath string `json:"destination_path"`
	// If the conversion is "#url#" than original_path contains an HTTP/HTTPS URL of a file that must be downloaded by the application. Otherwise, this is the conversion specified by the application in inputFileGenerated
	Conversion string `json:"conversion"`
}

func (entity *UpdateFileGenerationStart) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateFileGenerationStart

	return json.Marshal((*stub)(entity))
}

func (*UpdateFileGenerationStart) GetType() string {
	return TypeUpdate
}

func (*UpdateFileGenerationStart) GetConstructor() string {
	return ConstructorUpdateFileGenerationStart
}

func (*UpdateFileGenerationStart) UpdateConstructor() string {
	return ConstructorUpdateFileGenerationStart
}

// File generation is no longer needed
type UpdateFileGenerationStop struct {
	meta
	// Unique identifier for the generation process
	GenerationId JsonInt64 `json:"generation_id"`
}

func (entity *UpdateFileGenerationStop) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateFileGenerationStop

	return json.Marshal((*stub)(entity))
}

func (*UpdateFileGenerationStop) GetType() string {
	return TypeUpdate
}

func (*UpdateFileGenerationStop) GetConstructor() string {
	return ConstructorUpdateFileGenerationStop
}

func (*UpdateFileGenerationStop) UpdateConstructor() string {
	return ConstructorUpdateFileGenerationStop
}

// The state of the file download list has changed
type UpdateFileDownloads struct {
	meta
	// Total size of files in the file download list, in bytes
	TotalSize int64 `json:"total_size"`
	// Total number of files in the file download list
	TotalCount int32 `json:"total_count"`
	// Total downloaded size of files in the file download list, in bytes
	DownloadedSize int64 `json:"downloaded_size"`
}

func (entity *UpdateFileDownloads) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateFileDownloads

	return json.Marshal((*stub)(entity))
}

func (*UpdateFileDownloads) GetType() string {
	return TypeUpdate
}

func (*UpdateFileDownloads) GetConstructor() string {
	return ConstructorUpdateFileDownloads
}

func (*UpdateFileDownloads) UpdateConstructor() string {
	return ConstructorUpdateFileDownloads
}

// A file was added to the file download list. This update is sent only after file download list is loaded for the first time
type UpdateFileAddedToDownloads struct {
	meta
	// The added file download
	FileDownload *FileDownload `json:"file_download"`
	// New number of being downloaded and recently downloaded files found
	Counts *DownloadedFileCounts `json:"counts"`
}

func (entity *UpdateFileAddedToDownloads) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateFileAddedToDownloads

	return json.Marshal((*stub)(entity))
}

func (*UpdateFileAddedToDownloads) GetType() string {
	return TypeUpdate
}

func (*UpdateFileAddedToDownloads) GetConstructor() string {
	return ConstructorUpdateFileAddedToDownloads
}

func (*UpdateFileAddedToDownloads) UpdateConstructor() string {
	return ConstructorUpdateFileAddedToDownloads
}

// A file download was changed. This update is sent only after file download list is loaded for the first time
type UpdateFileDownload struct {
	meta
	// File identifier
	FileId int32 `json:"file_id"`
	// Point in time (Unix timestamp) when the file downloading was completed; 0 if the file downloading isn't completed
	CompleteDate int32 `json:"complete_date"`
	// True, if downloading of the file is paused
	IsPaused bool `json:"is_paused"`
	// New number of being downloaded and recently downloaded files found
	Counts *DownloadedFileCounts `json:"counts"`
}

func (entity *UpdateFileDownload) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateFileDownload

	return json.Marshal((*stub)(entity))
}

func (*UpdateFileDownload) GetType() string {
	return TypeUpdate
}

func (*UpdateFileDownload) GetConstructor() string {
	return ConstructorUpdateFileDownload
}

func (*UpdateFileDownload) UpdateConstructor() string {
	return ConstructorUpdateFileDownload
}

// A file was removed from the file download list. This update is sent only after file download list is loaded for the first time
type UpdateFileRemovedFromDownloads struct {
	meta
	// File identifier
	FileId int32 `json:"file_id"`
	// New number of being downloaded and recently downloaded files found
	Counts *DownloadedFileCounts `json:"counts"`
}

func (entity *UpdateFileRemovedFromDownloads) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateFileRemovedFromDownloads

	return json.Marshal((*stub)(entity))
}

func (*UpdateFileRemovedFromDownloads) GetType() string {
	return TypeUpdate
}

func (*UpdateFileRemovedFromDownloads) GetConstructor() string {
	return ConstructorUpdateFileRemovedFromDownloads
}

func (*UpdateFileRemovedFromDownloads) UpdateConstructor() string {
	return ConstructorUpdateFileRemovedFromDownloads
}

// A request can't be completed unless application verification is performed; for official mobile applications only. The method setApplicationVerificationToken must be called once the verification is completed or failed
type UpdateApplicationVerificationRequired struct {
	meta
	// Unique identifier for the verification process
	VerificationId int64 `json:"verification_id"`
	// Unique base64url-encoded nonce for the classic Play Integrity verification (https://developer.android.com/google/play/integrity/classic) for Android, or a unique string to compare with verify_nonce field from a push notification for iOS
	Nonce string `json:"nonce"`
	// Cloud project number to pass to the Play Integrity API on Android
	CloudProjectNumber JsonInt64 `json:"cloud_project_number"`
}

func (entity *UpdateApplicationVerificationRequired) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateApplicationVerificationRequired

	return json.Marshal((*stub)(entity))
}

func (*UpdateApplicationVerificationRequired) GetType() string {
	return TypeUpdate
}

func (*UpdateApplicationVerificationRequired) GetConstructor() string {
	return ConstructorUpdateApplicationVerificationRequired
}

func (*UpdateApplicationVerificationRequired) UpdateConstructor() string {
	return ConstructorUpdateApplicationVerificationRequired
}

// New call was created or information about a call was updated
type UpdateCall struct {
	meta
	// New data about a call
	Call *Call `json:"call"`
}

func (entity *UpdateCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateCall

	return json.Marshal((*stub)(entity))
}

func (*UpdateCall) GetType() string {
	return TypeUpdate
}

func (*UpdateCall) GetConstructor() string {
	return ConstructorUpdateCall
}

func (*UpdateCall) UpdateConstructor() string {
	return ConstructorUpdateCall
}

// Information about a group call was updated
type UpdateGroupCall struct {
	meta
	// New data about a group call
	GroupCall *GroupCall `json:"group_call"`
}

func (entity *UpdateGroupCall) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateGroupCall

	return json.Marshal((*stub)(entity))
}

func (*UpdateGroupCall) GetType() string {
	return TypeUpdate
}

func (*UpdateGroupCall) GetConstructor() string {
	return ConstructorUpdateGroupCall
}

func (*UpdateGroupCall) UpdateConstructor() string {
	return ConstructorUpdateGroupCall
}

// Information about a group call participant was changed. The updates are sent only after the group call is received through getGroupCall and only if the call is joined or being joined
type UpdateGroupCallParticipant struct {
	meta
	// Identifier of group call
	GroupCallId int32 `json:"group_call_id"`
	// New data about a participant
	Participant *GroupCallParticipant `json:"participant"`
}

func (entity *UpdateGroupCallParticipant) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateGroupCallParticipant

	return json.Marshal((*stub)(entity))
}

func (*UpdateGroupCallParticipant) GetType() string {
	return TypeUpdate
}

func (*UpdateGroupCallParticipant) GetConstructor() string {
	return ConstructorUpdateGroupCallParticipant
}

func (*UpdateGroupCallParticipant) UpdateConstructor() string {
	return ConstructorUpdateGroupCallParticipant
}

// New call signaling data arrived
type UpdateNewCallSignalingData struct {
	meta
	// The call identifier
	CallId int32 `json:"call_id"`
	// The data
	Data []byte `json:"data"`
}

func (entity *UpdateNewCallSignalingData) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewCallSignalingData

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewCallSignalingData) GetType() string {
	return TypeUpdate
}

func (*UpdateNewCallSignalingData) GetConstructor() string {
	return ConstructorUpdateNewCallSignalingData
}

func (*UpdateNewCallSignalingData) UpdateConstructor() string {
	return ConstructorUpdateNewCallSignalingData
}

// Some privacy setting rules have been changed
type UpdateUserPrivacySettingRules struct {
	meta
	// The privacy setting
	Setting UserPrivacySetting `json:"setting"`
	// New privacy rules
	Rules *UserPrivacySettingRules `json:"rules"`
}

func (entity *UpdateUserPrivacySettingRules) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateUserPrivacySettingRules

	return json.Marshal((*stub)(entity))
}

func (*UpdateUserPrivacySettingRules) GetType() string {
	return TypeUpdate
}

func (*UpdateUserPrivacySettingRules) GetConstructor() string {
	return ConstructorUpdateUserPrivacySettingRules
}

func (*UpdateUserPrivacySettingRules) UpdateConstructor() string {
	return ConstructorUpdateUserPrivacySettingRules
}

func (updateUserPrivacySettingRules *UpdateUserPrivacySettingRules) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Setting json.RawMessage          `json:"setting"`
		Rules   *UserPrivacySettingRules `json:"rules"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateUserPrivacySettingRules.Rules = tmp.Rules

	fieldSetting, _ := UnmarshalUserPrivacySetting(tmp.Setting)
	updateUserPrivacySettingRules.Setting = fieldSetting

	return nil
}

// Number of unread messages in a chat list has changed. This update is sent only if the message database is used
type UpdateUnreadMessageCount struct {
	meta
	// The chat list with changed number of unread messages
	ChatList ChatList `json:"chat_list"`
	// Total number of unread messages
	UnreadCount int32 `json:"unread_count"`
	// Total number of unread messages in unmuted chats
	UnreadUnmutedCount int32 `json:"unread_unmuted_count"`
}

func (entity *UpdateUnreadMessageCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateUnreadMessageCount

	return json.Marshal((*stub)(entity))
}

func (*UpdateUnreadMessageCount) GetType() string {
	return TypeUpdate
}

func (*UpdateUnreadMessageCount) GetConstructor() string {
	return ConstructorUpdateUnreadMessageCount
}

func (*UpdateUnreadMessageCount) UpdateConstructor() string {
	return ConstructorUpdateUnreadMessageCount
}

func (updateUnreadMessageCount *UpdateUnreadMessageCount) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatList           json.RawMessage `json:"chat_list"`
		UnreadCount        int32           `json:"unread_count"`
		UnreadUnmutedCount int32           `json:"unread_unmuted_count"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateUnreadMessageCount.UnreadCount = tmp.UnreadCount
	updateUnreadMessageCount.UnreadUnmutedCount = tmp.UnreadUnmutedCount

	fieldChatList, _ := UnmarshalChatList(tmp.ChatList)
	updateUnreadMessageCount.ChatList = fieldChatList

	return nil
}

// Number of unread chats, i.e. with unread messages or marked as unread, has changed. This update is sent only if the message database is used
type UpdateUnreadChatCount struct {
	meta
	// The chat list with changed number of unread messages
	ChatList ChatList `json:"chat_list"`
	// Approximate total number of chats in the chat list
	TotalCount int32 `json:"total_count"`
	// Total number of unread chats
	UnreadCount int32 `json:"unread_count"`
	// Total number of unread unmuted chats
	UnreadUnmutedCount int32 `json:"unread_unmuted_count"`
	// Total number of chats marked as unread
	MarkedAsUnreadCount int32 `json:"marked_as_unread_count"`
	// Total number of unmuted chats marked as unread
	MarkedAsUnreadUnmutedCount int32 `json:"marked_as_unread_unmuted_count"`
}

func (entity *UpdateUnreadChatCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateUnreadChatCount

	return json.Marshal((*stub)(entity))
}

func (*UpdateUnreadChatCount) GetType() string {
	return TypeUpdate
}

func (*UpdateUnreadChatCount) GetConstructor() string {
	return ConstructorUpdateUnreadChatCount
}

func (*UpdateUnreadChatCount) UpdateConstructor() string {
	return ConstructorUpdateUnreadChatCount
}

func (updateUnreadChatCount *UpdateUnreadChatCount) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatList                   json.RawMessage `json:"chat_list"`
		TotalCount                 int32           `json:"total_count"`
		UnreadCount                int32           `json:"unread_count"`
		UnreadUnmutedCount         int32           `json:"unread_unmuted_count"`
		MarkedAsUnreadCount        int32           `json:"marked_as_unread_count"`
		MarkedAsUnreadUnmutedCount int32           `json:"marked_as_unread_unmuted_count"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateUnreadChatCount.TotalCount = tmp.TotalCount
	updateUnreadChatCount.UnreadCount = tmp.UnreadCount
	updateUnreadChatCount.UnreadUnmutedCount = tmp.UnreadUnmutedCount
	updateUnreadChatCount.MarkedAsUnreadCount = tmp.MarkedAsUnreadCount
	updateUnreadChatCount.MarkedAsUnreadUnmutedCount = tmp.MarkedAsUnreadUnmutedCount

	fieldChatList, _ := UnmarshalChatList(tmp.ChatList)
	updateUnreadChatCount.ChatList = fieldChatList

	return nil
}

// A story was changed
type UpdateStory struct {
	meta
	// The new information about the story
	Story *Story `json:"story"`
}

func (entity *UpdateStory) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateStory

	return json.Marshal((*stub)(entity))
}

func (*UpdateStory) GetType() string {
	return TypeUpdate
}

func (*UpdateStory) GetConstructor() string {
	return ConstructorUpdateStory
}

func (*UpdateStory) UpdateConstructor() string {
	return ConstructorUpdateStory
}

// A story became inaccessible
type UpdateStoryDeleted struct {
	meta
	// Identifier of the chat that posted the story
	StorySenderChatId int64 `json:"story_sender_chat_id"`
	// Story identifier
	StoryId int32 `json:"story_id"`
}

func (entity *UpdateStoryDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateStoryDeleted

	return json.Marshal((*stub)(entity))
}

func (*UpdateStoryDeleted) GetType() string {
	return TypeUpdate
}

func (*UpdateStoryDeleted) GetConstructor() string {
	return ConstructorUpdateStoryDeleted
}

func (*UpdateStoryDeleted) UpdateConstructor() string {
	return ConstructorUpdateStoryDeleted
}

// A story has been successfully sent
type UpdateStorySendSucceeded struct {
	meta
	// The sent story
	Story *Story `json:"story"`
	// The previous temporary story identifier
	OldStoryId int32 `json:"old_story_id"`
}

func (entity *UpdateStorySendSucceeded) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateStorySendSucceeded

	return json.Marshal((*stub)(entity))
}

func (*UpdateStorySendSucceeded) GetType() string {
	return TypeUpdate
}

func (*UpdateStorySendSucceeded) GetConstructor() string {
	return ConstructorUpdateStorySendSucceeded
}

func (*UpdateStorySendSucceeded) UpdateConstructor() string {
	return ConstructorUpdateStorySendSucceeded
}

// A story failed to send. If the story sending is canceled, then updateStoryDeleted will be received instead of this update
type UpdateStorySendFailed struct {
	meta
	// The failed to send story
	Story *Story `json:"story"`
	// The cause of the story sending failure
	Error *Error `json:"error"`
	// Type of the error; may be null if unknown
	ErrorType CanSendStoryResult `json:"error_type"`
}

func (entity *UpdateStorySendFailed) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateStorySendFailed

	return json.Marshal((*stub)(entity))
}

func (*UpdateStorySendFailed) GetType() string {
	return TypeUpdate
}

func (*UpdateStorySendFailed) GetConstructor() string {
	return ConstructorUpdateStorySendFailed
}

func (*UpdateStorySendFailed) UpdateConstructor() string {
	return ConstructorUpdateStorySendFailed
}

func (updateStorySendFailed *UpdateStorySendFailed) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Story     *Story          `json:"story"`
		Error     *Error          `json:"error"`
		ErrorType json.RawMessage `json:"error_type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateStorySendFailed.Story = tmp.Story
	updateStorySendFailed.Error = tmp.Error

	fieldErrorType, _ := UnmarshalCanSendStoryResult(tmp.ErrorType)
	updateStorySendFailed.ErrorType = fieldErrorType

	return nil
}

// The list of active stories posted by a specific chat has changed
type UpdateChatActiveStories struct {
	meta
	// The new list of active stories
	ActiveStories *ChatActiveStories `json:"active_stories"`
}

func (entity *UpdateChatActiveStories) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatActiveStories

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatActiveStories) GetType() string {
	return TypeUpdate
}

func (*UpdateChatActiveStories) GetConstructor() string {
	return ConstructorUpdateChatActiveStories
}

func (*UpdateChatActiveStories) UpdateConstructor() string {
	return ConstructorUpdateChatActiveStories
}

// Number of chats in a story list has changed
type UpdateStoryListChatCount struct {
	meta
	// The story list
	StoryList StoryList `json:"story_list"`
	// Approximate total number of chats with active stories in the list
	ChatCount int32 `json:"chat_count"`
}

func (entity *UpdateStoryListChatCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateStoryListChatCount

	return json.Marshal((*stub)(entity))
}

func (*UpdateStoryListChatCount) GetType() string {
	return TypeUpdate
}

func (*UpdateStoryListChatCount) GetConstructor() string {
	return ConstructorUpdateStoryListChatCount
}

func (*UpdateStoryListChatCount) UpdateConstructor() string {
	return ConstructorUpdateStoryListChatCount
}

func (updateStoryListChatCount *UpdateStoryListChatCount) UnmarshalJSON(data []byte) error {
	var tmp struct {
		StoryList json.RawMessage `json:"story_list"`
		ChatCount int32           `json:"chat_count"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateStoryListChatCount.ChatCount = tmp.ChatCount

	fieldStoryList, _ := UnmarshalStoryList(tmp.StoryList)
	updateStoryListChatCount.StoryList = fieldStoryList

	return nil
}

// Story stealth mode settings have changed
type UpdateStoryStealthMode struct {
	meta
	// Point in time (Unix timestamp) until stealth mode is active; 0 if it is disabled
	ActiveUntilDate int32 `json:"active_until_date"`
	// Point in time (Unix timestamp) when stealth mode can be enabled again; 0 if there is no active cooldown
	CooldownUntilDate int32 `json:"cooldown_until_date"`
}

func (entity *UpdateStoryStealthMode) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateStoryStealthMode

	return json.Marshal((*stub)(entity))
}

func (*UpdateStoryStealthMode) GetType() string {
	return TypeUpdate
}

func (*UpdateStoryStealthMode) GetConstructor() string {
	return ConstructorUpdateStoryStealthMode
}

func (*UpdateStoryStealthMode) UpdateConstructor() string {
	return ConstructorUpdateStoryStealthMode
}

// An option changed its value
type UpdateOption struct {
	meta
	// The option name
	Name string `json:"name"`
	// The new option value
	Value OptionValue `json:"value"`
}

func (entity *UpdateOption) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateOption

	return json.Marshal((*stub)(entity))
}

func (*UpdateOption) GetType() string {
	return TypeUpdate
}

func (*UpdateOption) GetConstructor() string {
	return ConstructorUpdateOption
}

func (*UpdateOption) UpdateConstructor() string {
	return ConstructorUpdateOption
}

func (updateOption *UpdateOption) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Name  string          `json:"name"`
		Value json.RawMessage `json:"value"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateOption.Name = tmp.Name

	fieldValue, _ := UnmarshalOptionValue(tmp.Value)
	updateOption.Value = fieldValue

	return nil
}

// A sticker set has changed
type UpdateStickerSet struct {
	meta
	// The sticker set
	StickerSet *StickerSet `json:"sticker_set"`
}

func (entity *UpdateStickerSet) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateStickerSet

	return json.Marshal((*stub)(entity))
}

func (*UpdateStickerSet) GetType() string {
	return TypeUpdate
}

func (*UpdateStickerSet) GetConstructor() string {
	return ConstructorUpdateStickerSet
}

func (*UpdateStickerSet) UpdateConstructor() string {
	return ConstructorUpdateStickerSet
}

// The list of installed sticker sets was updated
type UpdateInstalledStickerSets struct {
	meta
	// Type of the affected stickers
	StickerType StickerType `json:"sticker_type"`
	// The new list of installed ordinary sticker sets
	StickerSetIds []JsonInt64 `json:"sticker_set_ids"`
}

func (entity *UpdateInstalledStickerSets) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateInstalledStickerSets

	return json.Marshal((*stub)(entity))
}

func (*UpdateInstalledStickerSets) GetType() string {
	return TypeUpdate
}

func (*UpdateInstalledStickerSets) GetConstructor() string {
	return ConstructorUpdateInstalledStickerSets
}

func (*UpdateInstalledStickerSets) UpdateConstructor() string {
	return ConstructorUpdateInstalledStickerSets
}

func (updateInstalledStickerSets *UpdateInstalledStickerSets) UnmarshalJSON(data []byte) error {
	var tmp struct {
		StickerType   json.RawMessage `json:"sticker_type"`
		StickerSetIds []JsonInt64     `json:"sticker_set_ids"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateInstalledStickerSets.StickerSetIds = tmp.StickerSetIds

	fieldStickerType, _ := UnmarshalStickerType(tmp.StickerType)
	updateInstalledStickerSets.StickerType = fieldStickerType

	return nil
}

// The list of trending sticker sets was updated or some of them were viewed
type UpdateTrendingStickerSets struct {
	meta
	// Type of the affected stickers
	StickerType StickerType `json:"sticker_type"`
	// The prefix of the list of trending sticker sets with the newest trending sticker sets
	StickerSets *TrendingStickerSets `json:"sticker_sets"`
}

func (entity *UpdateTrendingStickerSets) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateTrendingStickerSets

	return json.Marshal((*stub)(entity))
}

func (*UpdateTrendingStickerSets) GetType() string {
	return TypeUpdate
}

func (*UpdateTrendingStickerSets) GetConstructor() string {
	return ConstructorUpdateTrendingStickerSets
}

func (*UpdateTrendingStickerSets) UpdateConstructor() string {
	return ConstructorUpdateTrendingStickerSets
}

func (updateTrendingStickerSets *UpdateTrendingStickerSets) UnmarshalJSON(data []byte) error {
	var tmp struct {
		StickerType json.RawMessage      `json:"sticker_type"`
		StickerSets *TrendingStickerSets `json:"sticker_sets"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateTrendingStickerSets.StickerSets = tmp.StickerSets

	fieldStickerType, _ := UnmarshalStickerType(tmp.StickerType)
	updateTrendingStickerSets.StickerType = fieldStickerType

	return nil
}

// The list of recently used stickers was updated
type UpdateRecentStickers struct {
	meta
	// True, if the list of stickers attached to photo or video files was updated; otherwise, the list of sent stickers is updated
	IsAttached bool `json:"is_attached"`
	// The new list of file identifiers of recently used stickers
	StickerIds []int32 `json:"sticker_ids"`
}

func (entity *UpdateRecentStickers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateRecentStickers

	return json.Marshal((*stub)(entity))
}

func (*UpdateRecentStickers) GetType() string {
	return TypeUpdate
}

func (*UpdateRecentStickers) GetConstructor() string {
	return ConstructorUpdateRecentStickers
}

func (*UpdateRecentStickers) UpdateConstructor() string {
	return ConstructorUpdateRecentStickers
}

// The list of favorite stickers was updated
type UpdateFavoriteStickers struct {
	meta
	// The new list of file identifiers of favorite stickers
	StickerIds []int32 `json:"sticker_ids"`
}

func (entity *UpdateFavoriteStickers) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateFavoriteStickers

	return json.Marshal((*stub)(entity))
}

func (*UpdateFavoriteStickers) GetType() string {
	return TypeUpdate
}

func (*UpdateFavoriteStickers) GetConstructor() string {
	return ConstructorUpdateFavoriteStickers
}

func (*UpdateFavoriteStickers) UpdateConstructor() string {
	return ConstructorUpdateFavoriteStickers
}

// The list of saved animations was updated
type UpdateSavedAnimations struct {
	meta
	// The new list of file identifiers of saved animations
	AnimationIds []int32 `json:"animation_ids"`
}

func (entity *UpdateSavedAnimations) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSavedAnimations

	return json.Marshal((*stub)(entity))
}

func (*UpdateSavedAnimations) GetType() string {
	return TypeUpdate
}

func (*UpdateSavedAnimations) GetConstructor() string {
	return ConstructorUpdateSavedAnimations
}

func (*UpdateSavedAnimations) UpdateConstructor() string {
	return ConstructorUpdateSavedAnimations
}

// The list of saved notification sounds was updated. This update may not be sent until information about a notification sound was requested for the first time
type UpdateSavedNotificationSounds struct {
	meta
	// The new list of identifiers of saved notification sounds
	NotificationSoundIds []JsonInt64 `json:"notification_sound_ids"`
}

func (entity *UpdateSavedNotificationSounds) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSavedNotificationSounds

	return json.Marshal((*stub)(entity))
}

func (*UpdateSavedNotificationSounds) GetType() string {
	return TypeUpdate
}

func (*UpdateSavedNotificationSounds) GetConstructor() string {
	return ConstructorUpdateSavedNotificationSounds
}

func (*UpdateSavedNotificationSounds) UpdateConstructor() string {
	return ConstructorUpdateSavedNotificationSounds
}

// The default background has changed
type UpdateDefaultBackground struct {
	meta
	// True, if default background for dark theme has changed
	ForDarkTheme bool `json:"for_dark_theme"`
	// The new default background; may be null
	Background *Background `json:"background"`
}

func (entity *UpdateDefaultBackground) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateDefaultBackground

	return json.Marshal((*stub)(entity))
}

func (*UpdateDefaultBackground) GetType() string {
	return TypeUpdate
}

func (*UpdateDefaultBackground) GetConstructor() string {
	return ConstructorUpdateDefaultBackground
}

func (*UpdateDefaultBackground) UpdateConstructor() string {
	return ConstructorUpdateDefaultBackground
}

// The list of available chat themes has changed
type UpdateChatThemes struct {
	meta
	// The new list of chat themes
	ChatThemes []*ChatTheme `json:"chat_themes"`
}

func (entity *UpdateChatThemes) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatThemes

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatThemes) GetType() string {
	return TypeUpdate
}

func (*UpdateChatThemes) GetConstructor() string {
	return ConstructorUpdateChatThemes
}

func (*UpdateChatThemes) UpdateConstructor() string {
	return ConstructorUpdateChatThemes
}

// The list of supported accent colors has changed
type UpdateAccentColors struct {
	meta
	// Information about supported colors; colors with identifiers 0 (red), 1 (orange), 2 (purple/violet), 3 (green), 4 (cyan), 5 (blue), 6 (pink) must always be supported and aren't included in the list. The exact colors for the accent colors with identifiers 0-6 must be taken from the app theme
	Colors []*AccentColor `json:"colors"`
	// The list of accent color identifiers, which can be set through setAccentColor and setChatAccentColor. The colors must be shown in the specififed order
	AvailableAccentColorIds []int32 `json:"available_accent_color_ids"`
}

func (entity *UpdateAccentColors) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateAccentColors

	return json.Marshal((*stub)(entity))
}

func (*UpdateAccentColors) GetType() string {
	return TypeUpdate
}

func (*UpdateAccentColors) GetConstructor() string {
	return ConstructorUpdateAccentColors
}

func (*UpdateAccentColors) UpdateConstructor() string {
	return ConstructorUpdateAccentColors
}

// The list of supported accent colors for user profiles has changed
type UpdateProfileAccentColors struct {
	meta
	// Information about supported colors
	Colors []*ProfileAccentColor `json:"colors"`
	// The list of accent color identifiers, which can be set through setProfileAccentColor and setChatProfileAccentColor. The colors must be shown in the specififed order
	AvailableAccentColorIds []int32 `json:"available_accent_color_ids"`
}

func (entity *UpdateProfileAccentColors) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateProfileAccentColors

	return json.Marshal((*stub)(entity))
}

func (*UpdateProfileAccentColors) GetType() string {
	return TypeUpdate
}

func (*UpdateProfileAccentColors) GetConstructor() string {
	return ConstructorUpdateProfileAccentColors
}

func (*UpdateProfileAccentColors) UpdateConstructor() string {
	return ConstructorUpdateProfileAccentColors
}

// Some language pack strings have been updated
type UpdateLanguagePackStrings struct {
	meta
	// Localization target to which the language pack belongs
	LocalizationTarget string `json:"localization_target"`
	// Identifier of the updated language pack
	LanguagePackId string `json:"language_pack_id"`
	// List of changed language pack strings; empty if all strings have changed
	Strings []*LanguagePackString `json:"strings"`
}

func (entity *UpdateLanguagePackStrings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateLanguagePackStrings

	return json.Marshal((*stub)(entity))
}

func (*UpdateLanguagePackStrings) GetType() string {
	return TypeUpdate
}

func (*UpdateLanguagePackStrings) GetConstructor() string {
	return ConstructorUpdateLanguagePackStrings
}

func (*UpdateLanguagePackStrings) UpdateConstructor() string {
	return ConstructorUpdateLanguagePackStrings
}

// The connection state has changed. This update must be used only to show a human-readable description of the connection state
type UpdateConnectionState struct {
	meta
	// The new connection state
	State ConnectionState `json:"state"`
}

func (entity *UpdateConnectionState) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateConnectionState

	return json.Marshal((*stub)(entity))
}

func (*UpdateConnectionState) GetType() string {
	return TypeUpdate
}

func (*UpdateConnectionState) GetConstructor() string {
	return ConstructorUpdateConnectionState
}

func (*UpdateConnectionState) UpdateConstructor() string {
	return ConstructorUpdateConnectionState
}

func (updateConnectionState *UpdateConnectionState) UnmarshalJSON(data []byte) error {
	var tmp struct {
		State json.RawMessage `json:"state"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldState, _ := UnmarshalConnectionState(tmp.State)
	updateConnectionState.State = fieldState

	return nil
}

// New terms of service must be accepted by the user. If the terms of service are declined, then the deleteAccount method must be called with the reason "Decline ToS update"
type UpdateTermsOfService struct {
	meta
	// Identifier of the terms of service
	TermsOfServiceId string `json:"terms_of_service_id"`
	// The new terms of service
	TermsOfService *TermsOfService `json:"terms_of_service"`
}

func (entity *UpdateTermsOfService) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateTermsOfService

	return json.Marshal((*stub)(entity))
}

func (*UpdateTermsOfService) GetType() string {
	return TypeUpdate
}

func (*UpdateTermsOfService) GetConstructor() string {
	return ConstructorUpdateTermsOfService
}

func (*UpdateTermsOfService) UpdateConstructor() string {
	return ConstructorUpdateTermsOfService
}

// The first unconfirmed session has changed
type UpdateUnconfirmedSession struct {
	meta
	// The unconfirmed session; may be null if none
	Session *UnconfirmedSession `json:"session"`
}

func (entity *UpdateUnconfirmedSession) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateUnconfirmedSession

	return json.Marshal((*stub)(entity))
}

func (*UpdateUnconfirmedSession) GetType() string {
	return TypeUpdate
}

func (*UpdateUnconfirmedSession) GetConstructor() string {
	return ConstructorUpdateUnconfirmedSession
}

func (*UpdateUnconfirmedSession) UpdateConstructor() string {
	return ConstructorUpdateUnconfirmedSession
}

// The list of bots added to attachment or side menu has changed
type UpdateAttachmentMenuBots struct {
	meta
	// The new list of bots. The bots must not be shown on scheduled messages screen
	Bots []*AttachmentMenuBot `json:"bots"`
}

func (entity *UpdateAttachmentMenuBots) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateAttachmentMenuBots

	return json.Marshal((*stub)(entity))
}

func (*UpdateAttachmentMenuBots) GetType() string {
	return TypeUpdate
}

func (*UpdateAttachmentMenuBots) GetConstructor() string {
	return ConstructorUpdateAttachmentMenuBots
}

func (*UpdateAttachmentMenuBots) UpdateConstructor() string {
	return ConstructorUpdateAttachmentMenuBots
}

// A message was sent by an opened Web App, so the Web App needs to be closed
type UpdateWebAppMessageSent struct {
	meta
	// Identifier of Web App launch
	WebAppLaunchId JsonInt64 `json:"web_app_launch_id"`
}

func (entity *UpdateWebAppMessageSent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateWebAppMessageSent

	return json.Marshal((*stub)(entity))
}

func (*UpdateWebAppMessageSent) GetType() string {
	return TypeUpdate
}

func (*UpdateWebAppMessageSent) GetConstructor() string {
	return ConstructorUpdateWebAppMessageSent
}

func (*UpdateWebAppMessageSent) UpdateConstructor() string {
	return ConstructorUpdateWebAppMessageSent
}

// The list of active emoji reactions has changed
type UpdateActiveEmojiReactions struct {
	meta
	// The new list of active emoji reactions
	Emojis []string `json:"emojis"`
}

func (entity *UpdateActiveEmojiReactions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateActiveEmojiReactions

	return json.Marshal((*stub)(entity))
}

func (*UpdateActiveEmojiReactions) GetType() string {
	return TypeUpdate
}

func (*UpdateActiveEmojiReactions) GetConstructor() string {
	return ConstructorUpdateActiveEmojiReactions
}

func (*UpdateActiveEmojiReactions) UpdateConstructor() string {
	return ConstructorUpdateActiveEmojiReactions
}

// The list of available message effects has changed
type UpdateAvailableMessageEffects struct {
	meta
	// The new list of available message effects from emoji reactions
	ReactionEffectIds []JsonInt64 `json:"reaction_effect_ids"`
	// The new list of available message effects from Premium stickers
	StickerEffectIds []JsonInt64 `json:"sticker_effect_ids"`
}

func (entity *UpdateAvailableMessageEffects) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateAvailableMessageEffects

	return json.Marshal((*stub)(entity))
}

func (*UpdateAvailableMessageEffects) GetType() string {
	return TypeUpdate
}

func (*UpdateAvailableMessageEffects) GetConstructor() string {
	return ConstructorUpdateAvailableMessageEffects
}

func (*UpdateAvailableMessageEffects) UpdateConstructor() string {
	return ConstructorUpdateAvailableMessageEffects
}

// The type of default reaction has changed
type UpdateDefaultReactionType struct {
	meta
	// The new type of the default reaction
	ReactionType ReactionType `json:"reaction_type"`
}

func (entity *UpdateDefaultReactionType) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateDefaultReactionType

	return json.Marshal((*stub)(entity))
}

func (*UpdateDefaultReactionType) GetType() string {
	return TypeUpdate
}

func (*UpdateDefaultReactionType) GetConstructor() string {
	return ConstructorUpdateDefaultReactionType
}

func (*UpdateDefaultReactionType) UpdateConstructor() string {
	return ConstructorUpdateDefaultReactionType
}

func (updateDefaultReactionType *UpdateDefaultReactionType) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ReactionType json.RawMessage `json:"reaction_type"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldReactionType, _ := UnmarshalReactionType(tmp.ReactionType)
	updateDefaultReactionType.ReactionType = fieldReactionType

	return nil
}

// Tags used in Saved Messages or a Saved Messages topic have changed
type UpdateSavedMessagesTags struct {
	meta
	// Identifier of Saved Messages topic which tags were changed; 0 if tags for the whole chat has changed
	SavedMessagesTopicId int64 `json:"saved_messages_topic_id"`
	// The new tags
	Tags *SavedMessagesTags `json:"tags"`
}

func (entity *UpdateSavedMessagesTags) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSavedMessagesTags

	return json.Marshal((*stub)(entity))
}

func (*UpdateSavedMessagesTags) GetType() string {
	return TypeUpdate
}

func (*UpdateSavedMessagesTags) GetConstructor() string {
	return ConstructorUpdateSavedMessagesTags
}

func (*UpdateSavedMessagesTags) UpdateConstructor() string {
	return ConstructorUpdateSavedMessagesTags
}

// The list of messages with active live location that need to be updated by the application has changed. The list is persistent across application restarts only if the message database is used
type UpdateActiveLiveLocationMessages struct {
	meta
	// The list of messages with active live locations
	Messages []*Message `json:"messages"`
}

func (entity *UpdateActiveLiveLocationMessages) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateActiveLiveLocationMessages

	return json.Marshal((*stub)(entity))
}

func (*UpdateActiveLiveLocationMessages) GetType() string {
	return TypeUpdate
}

func (*UpdateActiveLiveLocationMessages) GetConstructor() string {
	return ConstructorUpdateActiveLiveLocationMessages
}

func (*UpdateActiveLiveLocationMessages) UpdateConstructor() string {
	return ConstructorUpdateActiveLiveLocationMessages
}

// The number of Telegram Stars owned by the current user has changed
type UpdateOwnedStarCount struct {
	meta
	// The new number of Telegram Stars owned
	StarCount int64 `json:"star_count"`
}

func (entity *UpdateOwnedStarCount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateOwnedStarCount

	return json.Marshal((*stub)(entity))
}

func (*UpdateOwnedStarCount) GetType() string {
	return TypeUpdate
}

func (*UpdateOwnedStarCount) GetConstructor() string {
	return ConstructorUpdateOwnedStarCount
}

func (*UpdateOwnedStarCount) UpdateConstructor() string {
	return ConstructorUpdateOwnedStarCount
}

// The revenue earned from sponsored messages in a chat has changed. If chat revenue screen is opened, then getChatRevenueTransactions may be called to fetch new transactions
type UpdateChatRevenueAmount struct {
	meta
	// Identifier of the chat
	ChatId int64 `json:"chat_id"`
	// New amount of earned revenue
	RevenueAmount *ChatRevenueAmount `json:"revenue_amount"`
}

func (entity *UpdateChatRevenueAmount) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatRevenueAmount

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatRevenueAmount) GetType() string {
	return TypeUpdate
}

func (*UpdateChatRevenueAmount) GetConstructor() string {
	return ConstructorUpdateChatRevenueAmount
}

func (*UpdateChatRevenueAmount) UpdateConstructor() string {
	return ConstructorUpdateChatRevenueAmount
}

// The Telegram Star revenue earned by a bot or a chat has changed. If Telegram Star transaction screen of the chat is opened, then getStarTransactions may be called to fetch new transactions
type UpdateStarRevenueStatus struct {
	meta
	// Identifier of the owner of the Telegram Stars
	OwnerId MessageSender `json:"owner_id"`
	// New Telegram Star revenue status
	Status *StarRevenueStatus `json:"status"`
}

func (entity *UpdateStarRevenueStatus) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateStarRevenueStatus

	return json.Marshal((*stub)(entity))
}

func (*UpdateStarRevenueStatus) GetType() string {
	return TypeUpdate
}

func (*UpdateStarRevenueStatus) GetConstructor() string {
	return ConstructorUpdateStarRevenueStatus
}

func (*UpdateStarRevenueStatus) UpdateConstructor() string {
	return ConstructorUpdateStarRevenueStatus
}

func (updateStarRevenueStatus *UpdateStarRevenueStatus) UnmarshalJSON(data []byte) error {
	var tmp struct {
		OwnerId json.RawMessage    `json:"owner_id"`
		Status  *StarRevenueStatus `json:"status"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateStarRevenueStatus.Status = tmp.Status

	fieldOwnerId, _ := UnmarshalMessageSender(tmp.OwnerId)
	updateStarRevenueStatus.OwnerId = fieldOwnerId

	return nil
}

// The parameters of speech recognition without Telegram Premium subscription has changed
type UpdateSpeechRecognitionTrial struct {
	meta
	// The maximum allowed duration of media for speech recognition without Telegram Premium subscription, in seconds
	MaxMediaDuration int32 `json:"max_media_duration"`
	// The total number of allowed speech recognitions per week; 0 if none
	WeeklyCount int32 `json:"weekly_count"`
	// Number of left speech recognition attempts this week
	LeftCount int32 `json:"left_count"`
	// Point in time (Unix timestamp) when the weekly number of tries will reset; 0 if unknown
	NextResetDate int32 `json:"next_reset_date"`
}

func (entity *UpdateSpeechRecognitionTrial) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSpeechRecognitionTrial

	return json.Marshal((*stub)(entity))
}

func (*UpdateSpeechRecognitionTrial) GetType() string {
	return TypeUpdate
}

func (*UpdateSpeechRecognitionTrial) GetConstructor() string {
	return ConstructorUpdateSpeechRecognitionTrial
}

func (*UpdateSpeechRecognitionTrial) UpdateConstructor() string {
	return ConstructorUpdateSpeechRecognitionTrial
}

// The list of supported dice emojis has changed
type UpdateDiceEmojis struct {
	meta
	// The new list of supported dice emojis
	Emojis []string `json:"emojis"`
}

func (entity *UpdateDiceEmojis) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateDiceEmojis

	return json.Marshal((*stub)(entity))
}

func (*UpdateDiceEmojis) GetType() string {
	return TypeUpdate
}

func (*UpdateDiceEmojis) GetConstructor() string {
	return ConstructorUpdateDiceEmojis
}

func (*UpdateDiceEmojis) UpdateConstructor() string {
	return ConstructorUpdateDiceEmojis
}

// Some animated emoji message was clicked and a big animated sticker must be played if the message is visible on the screen. chatActionWatchingAnimations with the text of the message needs to be sent if the sticker is played
type UpdateAnimatedEmojiMessageClicked struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// The animated sticker to be played
	Sticker *Sticker `json:"sticker"`
}

func (entity *UpdateAnimatedEmojiMessageClicked) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateAnimatedEmojiMessageClicked

	return json.Marshal((*stub)(entity))
}

func (*UpdateAnimatedEmojiMessageClicked) GetType() string {
	return TypeUpdate
}

func (*UpdateAnimatedEmojiMessageClicked) GetConstructor() string {
	return ConstructorUpdateAnimatedEmojiMessageClicked
}

func (*UpdateAnimatedEmojiMessageClicked) UpdateConstructor() string {
	return ConstructorUpdateAnimatedEmojiMessageClicked
}

// The parameters of animation search through getOption("animation_search_bot_username") bot has changed
type UpdateAnimationSearchParameters struct {
	meta
	// Name of the animation search provider
	Provider string `json:"provider"`
	// The new list of emojis suggested for searching
	Emojis []string `json:"emojis"`
}

func (entity *UpdateAnimationSearchParameters) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateAnimationSearchParameters

	return json.Marshal((*stub)(entity))
}

func (*UpdateAnimationSearchParameters) GetType() string {
	return TypeUpdate
}

func (*UpdateAnimationSearchParameters) GetConstructor() string {
	return ConstructorUpdateAnimationSearchParameters
}

func (*UpdateAnimationSearchParameters) UpdateConstructor() string {
	return ConstructorUpdateAnimationSearchParameters
}

// The list of suggested to the user actions has changed
type UpdateSuggestedActions struct {
	meta
	// Added suggested actions
	AddedActions []SuggestedAction `json:"added_actions"`
	// Removed suggested actions
	RemovedActions []SuggestedAction `json:"removed_actions"`
}

func (entity *UpdateSuggestedActions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSuggestedActions

	return json.Marshal((*stub)(entity))
}

func (*UpdateSuggestedActions) GetType() string {
	return TypeUpdate
}

func (*UpdateSuggestedActions) GetConstructor() string {
	return ConstructorUpdateSuggestedActions
}

func (*UpdateSuggestedActions) UpdateConstructor() string {
	return ConstructorUpdateSuggestedActions
}

func (updateSuggestedActions *UpdateSuggestedActions) UnmarshalJSON(data []byte) error {
	var tmp struct {
		AddedActions   []json.RawMessage `json:"added_actions"`
		RemovedActions []json.RawMessage `json:"removed_actions"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldAddedActions, _ := UnmarshalListOfSuggestedAction(tmp.AddedActions)
	updateSuggestedActions.AddedActions = fieldAddedActions

	fieldRemovedActions, _ := UnmarshalListOfSuggestedAction(tmp.RemovedActions)
	updateSuggestedActions.RemovedActions = fieldRemovedActions

	return nil
}

// Download or upload file speed for the user was limited, but it can be restored by subscription to Telegram Premium. The notification can be postponed until a being downloaded or uploaded file is visible to the user. Use getOption("premium_download_speedup") or getOption("premium_upload_speedup") to get expected speedup after subscription to Telegram Premium
type UpdateSpeedLimitNotification struct {
	meta
	// True, if upload speed was limited; false, if download speed was limited
	IsUpload bool `json:"is_upload"`
}

func (entity *UpdateSpeedLimitNotification) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateSpeedLimitNotification

	return json.Marshal((*stub)(entity))
}

func (*UpdateSpeedLimitNotification) GetType() string {
	return TypeUpdate
}

func (*UpdateSpeedLimitNotification) GetConstructor() string {
	return ConstructorUpdateSpeedLimitNotification
}

func (*UpdateSpeedLimitNotification) UpdateConstructor() string {
	return ConstructorUpdateSpeedLimitNotification
}

// The list of contacts that had birthdays recently or will have birthday soon has changed
type UpdateContactCloseBirthdays struct {
	meta
	// List of contact users with close birthday
	CloseBirthdayUsers []*CloseBirthdayUser `json:"close_birthday_users"`
}

func (entity *UpdateContactCloseBirthdays) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateContactCloseBirthdays

	return json.Marshal((*stub)(entity))
}

func (*UpdateContactCloseBirthdays) GetType() string {
	return TypeUpdate
}

func (*UpdateContactCloseBirthdays) GetConstructor() string {
	return ConstructorUpdateContactCloseBirthdays
}

func (*UpdateContactCloseBirthdays) UpdateConstructor() string {
	return ConstructorUpdateContactCloseBirthdays
}

// Autosave settings for some type of chats were updated
type UpdateAutosaveSettings struct {
	meta
	// Type of chats for which autosave settings were updated
	Scope AutosaveSettingsScope `json:"scope"`
	// The new autosave settings; may be null if the settings are reset to default
	Settings *ScopeAutosaveSettings `json:"settings"`
}

func (entity *UpdateAutosaveSettings) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateAutosaveSettings

	return json.Marshal((*stub)(entity))
}

func (*UpdateAutosaveSettings) GetType() string {
	return TypeUpdate
}

func (*UpdateAutosaveSettings) GetConstructor() string {
	return ConstructorUpdateAutosaveSettings
}

func (*UpdateAutosaveSettings) UpdateConstructor() string {
	return ConstructorUpdateAutosaveSettings
}

func (updateAutosaveSettings *UpdateAutosaveSettings) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Scope    json.RawMessage        `json:"scope"`
		Settings *ScopeAutosaveSettings `json:"settings"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateAutosaveSettings.Settings = tmp.Settings

	fieldScope, _ := UnmarshalAutosaveSettingsScope(tmp.Scope)
	updateAutosaveSettings.Scope = fieldScope

	return nil
}

// A business connection has changed; for bots only
type UpdateBusinessConnection struct {
	meta
	// New data about the connection
	Connection *BusinessConnection `json:"connection"`
}

func (entity *UpdateBusinessConnection) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateBusinessConnection

	return json.Marshal((*stub)(entity))
}

func (*UpdateBusinessConnection) GetType() string {
	return TypeUpdate
}

func (*UpdateBusinessConnection) GetConstructor() string {
	return ConstructorUpdateBusinessConnection
}

func (*UpdateBusinessConnection) UpdateConstructor() string {
	return ConstructorUpdateBusinessConnection
}

// A new message was added to a business account; for bots only
type UpdateNewBusinessMessage struct {
	meta
	// Unique identifier of the business connection
	ConnectionId string `json:"connection_id"`
	// The new message
	Message *BusinessMessage `json:"message"`
}

func (entity *UpdateNewBusinessMessage) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewBusinessMessage

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewBusinessMessage) GetType() string {
	return TypeUpdate
}

func (*UpdateNewBusinessMessage) GetConstructor() string {
	return ConstructorUpdateNewBusinessMessage
}

func (*UpdateNewBusinessMessage) UpdateConstructor() string {
	return ConstructorUpdateNewBusinessMessage
}

// A message in a business account was edited; for bots only
type UpdateBusinessMessageEdited struct {
	meta
	// Unique identifier of the business connection
	ConnectionId string `json:"connection_id"`
	// The edited message
	Message *BusinessMessage `json:"message"`
}

func (entity *UpdateBusinessMessageEdited) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateBusinessMessageEdited

	return json.Marshal((*stub)(entity))
}

func (*UpdateBusinessMessageEdited) GetType() string {
	return TypeUpdate
}

func (*UpdateBusinessMessageEdited) GetConstructor() string {
	return ConstructorUpdateBusinessMessageEdited
}

func (*UpdateBusinessMessageEdited) UpdateConstructor() string {
	return ConstructorUpdateBusinessMessageEdited
}

// Messages in a business account were deleted; for bots only
type UpdateBusinessMessagesDeleted struct {
	meta
	// Unique identifier of the business connection
	ConnectionId string `json:"connection_id"`
	// Identifier of a chat in the business account in which messages were deleted
	ChatId int64 `json:"chat_id"`
	// Unique message identifiers of the deleted messages
	MessageIds []int64 `json:"message_ids"`
}

func (entity *UpdateBusinessMessagesDeleted) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateBusinessMessagesDeleted

	return json.Marshal((*stub)(entity))
}

func (*UpdateBusinessMessagesDeleted) GetType() string {
	return TypeUpdate
}

func (*UpdateBusinessMessagesDeleted) GetConstructor() string {
	return ConstructorUpdateBusinessMessagesDeleted
}

func (*UpdateBusinessMessagesDeleted) UpdateConstructor() string {
	return ConstructorUpdateBusinessMessagesDeleted
}

// A new incoming inline query; for bots only
type UpdateNewInlineQuery struct {
	meta
	// Unique query identifier
	Id JsonInt64 `json:"id"`
	// Identifier of the user who sent the query
	SenderUserId int64 `json:"sender_user_id"`
	// User location; may be null
	UserLocation *Location `json:"user_location"`
	// The type of the chat from which the query originated; may be null if unknown
	ChatType ChatType `json:"chat_type"`
	// Text of the query
	Query string `json:"query"`
	// Offset of the first entry to return
	Offset string `json:"offset"`
}

func (entity *UpdateNewInlineQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewInlineQuery

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewInlineQuery) GetType() string {
	return TypeUpdate
}

func (*UpdateNewInlineQuery) GetConstructor() string {
	return ConstructorUpdateNewInlineQuery
}

func (*UpdateNewInlineQuery) UpdateConstructor() string {
	return ConstructorUpdateNewInlineQuery
}

func (updateNewInlineQuery *UpdateNewInlineQuery) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id           JsonInt64       `json:"id"`
		SenderUserId int64           `json:"sender_user_id"`
		UserLocation *Location       `json:"user_location"`
		ChatType     json.RawMessage `json:"chat_type"`
		Query        string          `json:"query"`
		Offset       string          `json:"offset"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateNewInlineQuery.Id = tmp.Id
	updateNewInlineQuery.SenderUserId = tmp.SenderUserId
	updateNewInlineQuery.UserLocation = tmp.UserLocation
	updateNewInlineQuery.Query = tmp.Query
	updateNewInlineQuery.Offset = tmp.Offset

	fieldChatType, _ := UnmarshalChatType(tmp.ChatType)
	updateNewInlineQuery.ChatType = fieldChatType

	return nil
}

// The user has chosen a result of an inline query; for bots only
type UpdateNewChosenInlineResult struct {
	meta
	// Identifier of the user who sent the query
	SenderUserId int64 `json:"sender_user_id"`
	// User location; may be null
	UserLocation *Location `json:"user_location"`
	// Text of the query
	Query string `json:"query"`
	// Identifier of the chosen result
	ResultId string `json:"result_id"`
	// Identifier of the sent inline message, if known
	InlineMessageId string `json:"inline_message_id"`
}

func (entity *UpdateNewChosenInlineResult) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewChosenInlineResult

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewChosenInlineResult) GetType() string {
	return TypeUpdate
}

func (*UpdateNewChosenInlineResult) GetConstructor() string {
	return ConstructorUpdateNewChosenInlineResult
}

func (*UpdateNewChosenInlineResult) UpdateConstructor() string {
	return ConstructorUpdateNewChosenInlineResult
}

// A new incoming callback query; for bots only
type UpdateNewCallbackQuery struct {
	meta
	// Unique query identifier
	Id JsonInt64 `json:"id"`
	// Identifier of the user who sent the query
	SenderUserId int64 `json:"sender_user_id"`
	// Identifier of the chat where the query was sent
	ChatId int64 `json:"chat_id"`
	// Identifier of the message from which the query originated
	MessageId int64 `json:"message_id"`
	// Identifier that uniquely corresponds to the chat to which the message was sent
	ChatInstance JsonInt64 `json:"chat_instance"`
	// Query payload
	Payload CallbackQueryPayload `json:"payload"`
}

func (entity *UpdateNewCallbackQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewCallbackQuery

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewCallbackQuery) GetType() string {
	return TypeUpdate
}

func (*UpdateNewCallbackQuery) GetConstructor() string {
	return ConstructorUpdateNewCallbackQuery
}

func (*UpdateNewCallbackQuery) UpdateConstructor() string {
	return ConstructorUpdateNewCallbackQuery
}

func (updateNewCallbackQuery *UpdateNewCallbackQuery) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id           JsonInt64       `json:"id"`
		SenderUserId int64           `json:"sender_user_id"`
		ChatId       int64           `json:"chat_id"`
		MessageId    int64           `json:"message_id"`
		ChatInstance JsonInt64       `json:"chat_instance"`
		Payload      json.RawMessage `json:"payload"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateNewCallbackQuery.Id = tmp.Id
	updateNewCallbackQuery.SenderUserId = tmp.SenderUserId
	updateNewCallbackQuery.ChatId = tmp.ChatId
	updateNewCallbackQuery.MessageId = tmp.MessageId
	updateNewCallbackQuery.ChatInstance = tmp.ChatInstance

	fieldPayload, _ := UnmarshalCallbackQueryPayload(tmp.Payload)
	updateNewCallbackQuery.Payload = fieldPayload

	return nil
}

// A new incoming callback query from a message sent via a bot; for bots only
type UpdateNewInlineCallbackQuery struct {
	meta
	// Unique query identifier
	Id JsonInt64 `json:"id"`
	// Identifier of the user who sent the query
	SenderUserId int64 `json:"sender_user_id"`
	// Identifier of the inline message from which the query originated
	InlineMessageId string `json:"inline_message_id"`
	// An identifier uniquely corresponding to the chat a message was sent to
	ChatInstance JsonInt64 `json:"chat_instance"`
	// Query payload
	Payload CallbackQueryPayload `json:"payload"`
}

func (entity *UpdateNewInlineCallbackQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewInlineCallbackQuery

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewInlineCallbackQuery) GetType() string {
	return TypeUpdate
}

func (*UpdateNewInlineCallbackQuery) GetConstructor() string {
	return ConstructorUpdateNewInlineCallbackQuery
}

func (*UpdateNewInlineCallbackQuery) UpdateConstructor() string {
	return ConstructorUpdateNewInlineCallbackQuery
}

func (updateNewInlineCallbackQuery *UpdateNewInlineCallbackQuery) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id              JsonInt64       `json:"id"`
		SenderUserId    int64           `json:"sender_user_id"`
		InlineMessageId string          `json:"inline_message_id"`
		ChatInstance    JsonInt64       `json:"chat_instance"`
		Payload         json.RawMessage `json:"payload"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateNewInlineCallbackQuery.Id = tmp.Id
	updateNewInlineCallbackQuery.SenderUserId = tmp.SenderUserId
	updateNewInlineCallbackQuery.InlineMessageId = tmp.InlineMessageId
	updateNewInlineCallbackQuery.ChatInstance = tmp.ChatInstance

	fieldPayload, _ := UnmarshalCallbackQueryPayload(tmp.Payload)
	updateNewInlineCallbackQuery.Payload = fieldPayload

	return nil
}

// A new incoming callback query from a business message; for bots only
type UpdateNewBusinessCallbackQuery struct {
	meta
	// Unique query identifier
	Id JsonInt64 `json:"id"`
	// Identifier of the user who sent the query
	SenderUserId int64 `json:"sender_user_id"`
	// Unique identifier of the business connection
	ConnectionId string `json:"connection_id"`
	// The message from the business account from which the query originated
	Message *BusinessMessage `json:"message"`
	// An identifier uniquely corresponding to the chat a message was sent to
	ChatInstance JsonInt64 `json:"chat_instance"`
	// Query payload
	Payload CallbackQueryPayload `json:"payload"`
}

func (entity *UpdateNewBusinessCallbackQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewBusinessCallbackQuery

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewBusinessCallbackQuery) GetType() string {
	return TypeUpdate
}

func (*UpdateNewBusinessCallbackQuery) GetConstructor() string {
	return ConstructorUpdateNewBusinessCallbackQuery
}

func (*UpdateNewBusinessCallbackQuery) UpdateConstructor() string {
	return ConstructorUpdateNewBusinessCallbackQuery
}

func (updateNewBusinessCallbackQuery *UpdateNewBusinessCallbackQuery) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Id           JsonInt64        `json:"id"`
		SenderUserId int64            `json:"sender_user_id"`
		ConnectionId string           `json:"connection_id"`
		Message      *BusinessMessage `json:"message"`
		ChatInstance JsonInt64        `json:"chat_instance"`
		Payload      json.RawMessage  `json:"payload"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateNewBusinessCallbackQuery.Id = tmp.Id
	updateNewBusinessCallbackQuery.SenderUserId = tmp.SenderUserId
	updateNewBusinessCallbackQuery.ConnectionId = tmp.ConnectionId
	updateNewBusinessCallbackQuery.Message = tmp.Message
	updateNewBusinessCallbackQuery.ChatInstance = tmp.ChatInstance

	fieldPayload, _ := UnmarshalCallbackQueryPayload(tmp.Payload)
	updateNewBusinessCallbackQuery.Payload = fieldPayload

	return nil
}

// A new incoming shipping query; for bots only. Only for invoices with flexible price
type UpdateNewShippingQuery struct {
	meta
	// Unique query identifier
	Id JsonInt64 `json:"id"`
	// Identifier of the user who sent the query
	SenderUserId int64 `json:"sender_user_id"`
	// Invoice payload
	InvoicePayload string `json:"invoice_payload"`
	// User shipping address
	ShippingAddress *Address `json:"shipping_address"`
}

func (entity *UpdateNewShippingQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewShippingQuery

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewShippingQuery) GetType() string {
	return TypeUpdate
}

func (*UpdateNewShippingQuery) GetConstructor() string {
	return ConstructorUpdateNewShippingQuery
}

func (*UpdateNewShippingQuery) UpdateConstructor() string {
	return ConstructorUpdateNewShippingQuery
}

// A new incoming pre-checkout query; for bots only. Contains full information about a checkout
type UpdateNewPreCheckoutQuery struct {
	meta
	// Unique query identifier
	Id JsonInt64 `json:"id"`
	// Identifier of the user who sent the query
	SenderUserId int64 `json:"sender_user_id"`
	// Currency for the product price
	Currency string `json:"currency"`
	// Total price for the product, in the smallest units of the currency
	TotalAmount int64 `json:"total_amount"`
	// Invoice payload
	InvoicePayload []byte `json:"invoice_payload"`
	// Identifier of a shipping option chosen by the user; may be empty if not applicable
	ShippingOptionId string `json:"shipping_option_id"`
	// Information about the order; may be null
	OrderInfo *OrderInfo `json:"order_info"`
}

func (entity *UpdateNewPreCheckoutQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewPreCheckoutQuery

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewPreCheckoutQuery) GetType() string {
	return TypeUpdate
}

func (*UpdateNewPreCheckoutQuery) GetConstructor() string {
	return ConstructorUpdateNewPreCheckoutQuery
}

func (*UpdateNewPreCheckoutQuery) UpdateConstructor() string {
	return ConstructorUpdateNewPreCheckoutQuery
}

// A new incoming event; for bots only
type UpdateNewCustomEvent struct {
	meta
	// A JSON-serialized event
	Event string `json:"event"`
}

func (entity *UpdateNewCustomEvent) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewCustomEvent

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewCustomEvent) GetType() string {
	return TypeUpdate
}

func (*UpdateNewCustomEvent) GetConstructor() string {
	return ConstructorUpdateNewCustomEvent
}

func (*UpdateNewCustomEvent) UpdateConstructor() string {
	return ConstructorUpdateNewCustomEvent
}

// A new incoming query; for bots only
type UpdateNewCustomQuery struct {
	meta
	// The query identifier
	Id JsonInt64 `json:"id"`
	// JSON-serialized query data
	Data string `json:"data"`
	// Query timeout
	Timeout int32 `json:"timeout"`
}

func (entity *UpdateNewCustomQuery) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewCustomQuery

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewCustomQuery) GetType() string {
	return TypeUpdate
}

func (*UpdateNewCustomQuery) GetConstructor() string {
	return ConstructorUpdateNewCustomQuery
}

func (*UpdateNewCustomQuery) UpdateConstructor() string {
	return ConstructorUpdateNewCustomQuery
}

// A poll was updated; for bots only
type UpdatePoll struct {
	meta
	// New data about the poll
	Poll *Poll `json:"poll"`
}

func (entity *UpdatePoll) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdatePoll

	return json.Marshal((*stub)(entity))
}

func (*UpdatePoll) GetType() string {
	return TypeUpdate
}

func (*UpdatePoll) GetConstructor() string {
	return ConstructorUpdatePoll
}

func (*UpdatePoll) UpdateConstructor() string {
	return ConstructorUpdatePoll
}

// A user changed the answer to a poll; for bots only
type UpdatePollAnswer struct {
	meta
	// Unique poll identifier
	PollId JsonInt64 `json:"poll_id"`
	// Identifier of the message sender that changed the answer to the poll
	VoterId MessageSender `json:"voter_id"`
	// 0-based identifiers of answer options, chosen by the user
	OptionIds []int32 `json:"option_ids"`
}

func (entity *UpdatePollAnswer) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdatePollAnswer

	return json.Marshal((*stub)(entity))
}

func (*UpdatePollAnswer) GetType() string {
	return TypeUpdate
}

func (*UpdatePollAnswer) GetConstructor() string {
	return ConstructorUpdatePollAnswer
}

func (*UpdatePollAnswer) UpdateConstructor() string {
	return ConstructorUpdatePollAnswer
}

func (updatePollAnswer *UpdatePollAnswer) UnmarshalJSON(data []byte) error {
	var tmp struct {
		PollId    JsonInt64       `json:"poll_id"`
		VoterId   json.RawMessage `json:"voter_id"`
		OptionIds []int32         `json:"option_ids"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updatePollAnswer.PollId = tmp.PollId
	updatePollAnswer.OptionIds = tmp.OptionIds

	fieldVoterId, _ := UnmarshalMessageSender(tmp.VoterId)
	updatePollAnswer.VoterId = fieldVoterId

	return nil
}

// User rights changed in a chat; for bots only
type UpdateChatMember struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Identifier of the user, changing the rights
	ActorUserId int64 `json:"actor_user_id"`
	// Point in time (Unix timestamp) when the user rights were changed
	Date int32 `json:"date"`
	// If user has joined the chat using an invite link, the invite link; may be null
	InviteLink *ChatInviteLink `json:"invite_link"`
	// True, if the user has joined the chat after sending a join request and being approved by an administrator
	ViaJoinRequest bool `json:"via_join_request"`
	// True, if the user has joined the chat using an invite link for a chat folder
	ViaChatFolderInviteLink bool `json:"via_chat_folder_invite_link"`
	// Previous chat member
	OldChatMember *ChatMember `json:"old_chat_member"`
	// New chat member
	NewChatMember *ChatMember `json:"new_chat_member"`
}

func (entity *UpdateChatMember) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatMember

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatMember) GetType() string {
	return TypeUpdate
}

func (*UpdateChatMember) GetConstructor() string {
	return ConstructorUpdateChatMember
}

func (*UpdateChatMember) UpdateConstructor() string {
	return ConstructorUpdateChatMember
}

// A user sent a join request to a chat; for bots only
type UpdateNewChatJoinRequest struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Join request
	Request *ChatJoinRequest `json:"request"`
	// Chat identifier of the private chat with the user
	UserChatId int64 `json:"user_chat_id"`
	// The invite link, which was used to send join request; may be null
	InviteLink *ChatInviteLink `json:"invite_link"`
}

func (entity *UpdateNewChatJoinRequest) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateNewChatJoinRequest

	return json.Marshal((*stub)(entity))
}

func (*UpdateNewChatJoinRequest) GetType() string {
	return TypeUpdate
}

func (*UpdateNewChatJoinRequest) GetConstructor() string {
	return ConstructorUpdateNewChatJoinRequest
}

func (*UpdateNewChatJoinRequest) UpdateConstructor() string {
	return ConstructorUpdateNewChatJoinRequest
}

// A chat boost has changed; for bots only
type UpdateChatBoost struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// New information about the boost
	Boost *ChatBoost `json:"boost"`
}

func (entity *UpdateChatBoost) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateChatBoost

	return json.Marshal((*stub)(entity))
}

func (*UpdateChatBoost) GetType() string {
	return TypeUpdate
}

func (*UpdateChatBoost) GetConstructor() string {
	return ConstructorUpdateChatBoost
}

func (*UpdateChatBoost) UpdateConstructor() string {
	return ConstructorUpdateChatBoost
}

// User changed its reactions on a message with public reactions; for bots only
type UpdateMessageReaction struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// Identifier of the user or chat that changed reactions
	ActorId MessageSender `json:"actor_id"`
	// Point in time (Unix timestamp) when the reactions were changed
	Date int32 `json:"date"`
	// Old list of chosen reactions
	OldReactionTypes []ReactionType `json:"old_reaction_types"`
	// New list of chosen reactions
	NewReactionTypes []ReactionType `json:"new_reaction_types"`
}

func (entity *UpdateMessageReaction) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageReaction

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageReaction) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageReaction) GetConstructor() string {
	return ConstructorUpdateMessageReaction
}

func (*UpdateMessageReaction) UpdateConstructor() string {
	return ConstructorUpdateMessageReaction
}

func (updateMessageReaction *UpdateMessageReaction) UnmarshalJSON(data []byte) error {
	var tmp struct {
		ChatId           int64             `json:"chat_id"`
		MessageId        int64             `json:"message_id"`
		ActorId          json.RawMessage   `json:"actor_id"`
		Date             int32             `json:"date"`
		OldReactionTypes []json.RawMessage `json:"old_reaction_types"`
		NewReactionTypes []json.RawMessage `json:"new_reaction_types"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	updateMessageReaction.ChatId = tmp.ChatId
	updateMessageReaction.MessageId = tmp.MessageId
	updateMessageReaction.Date = tmp.Date

	fieldActorId, _ := UnmarshalMessageSender(tmp.ActorId)
	updateMessageReaction.ActorId = fieldActorId

	fieldOldReactionTypes, _ := UnmarshalListOfReactionType(tmp.OldReactionTypes)
	updateMessageReaction.OldReactionTypes = fieldOldReactionTypes

	fieldNewReactionTypes, _ := UnmarshalListOfReactionType(tmp.NewReactionTypes)
	updateMessageReaction.NewReactionTypes = fieldNewReactionTypes

	return nil
}

// Reactions added to a message with anonymous reactions have changed; for bots only
type UpdateMessageReactions struct {
	meta
	// Chat identifier
	ChatId int64 `json:"chat_id"`
	// Message identifier
	MessageId int64 `json:"message_id"`
	// Point in time (Unix timestamp) when the reactions were changed
	Date int32 `json:"date"`
	// The list of reactions added to the message
	Reactions []*MessageReaction `json:"reactions"`
}

func (entity *UpdateMessageReactions) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdateMessageReactions

	return json.Marshal((*stub)(entity))
}

func (*UpdateMessageReactions) GetType() string {
	return TypeUpdate
}

func (*UpdateMessageReactions) GetConstructor() string {
	return ConstructorUpdateMessageReactions
}

func (*UpdateMessageReactions) UpdateConstructor() string {
	return ConstructorUpdateMessageReactions
}

// Paid media were purchased by a user; for bots only
type UpdatePaidMediaPurchased struct {
	meta
	// User identifier
	UserId int64 `json:"user_id"`
	// Bot-specified payload for the paid media
	Payload string `json:"payload"`
}

func (entity *UpdatePaidMediaPurchased) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UpdatePaidMediaPurchased

	return json.Marshal((*stub)(entity))
}

func (*UpdatePaidMediaPurchased) GetType() string {
	return TypeUpdate
}

func (*UpdatePaidMediaPurchased) GetConstructor() string {
	return ConstructorUpdatePaidMediaPurchased
}

func (*UpdatePaidMediaPurchased) UpdateConstructor() string {
	return ConstructorUpdatePaidMediaPurchased
}

// Contains a list of updates
type Updates struct {
	meta
	// List of updates
	Updates []Update `json:"updates"`
}

func (entity *Updates) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub Updates

	return json.Marshal((*stub)(entity))
}

func (*Updates) GetType() string {
	return TypeUpdates
}

func (*Updates) GetConstructor() string {
	return ConstructorUpdates
}

func (updates *Updates) UnmarshalJSON(data []byte) error {
	var tmp struct {
		Updates []json.RawMessage `json:"updates"`
	}

	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}

	fieldUpdates, _ := UnmarshalListOfUpdate(tmp.Updates)
	updates.Updates = fieldUpdates

	return nil
}

// The log is written to stderr or an OS specific log
type LogStreamDefault struct {
	meta
}

func (entity *LogStreamDefault) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LogStreamDefault

	return json.Marshal((*stub)(entity))
}

func (*LogStreamDefault) GetType() string {
	return TypeLogStream
}

func (*LogStreamDefault) GetConstructor() string {
	return ConstructorLogStreamDefault
}

func (*LogStreamDefault) LogStreamConstructor() string {
	return ConstructorLogStreamDefault
}

// The log is written to a file
type LogStreamFile struct {
	meta
	// Path to the file to where the internal TDLib log will be written
	Path string `json:"path"`
	// The maximum size of the file to where the internal TDLib log is written before the file will automatically be rotated, in bytes
	MaxFileSize int64 `json:"max_file_size"`
	// Pass true to additionally redirect stderr to the log file. Ignored on Windows
	RedirectStderr bool `json:"redirect_stderr"`
}

func (entity *LogStreamFile) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LogStreamFile

	return json.Marshal((*stub)(entity))
}

func (*LogStreamFile) GetType() string {
	return TypeLogStream
}

func (*LogStreamFile) GetConstructor() string {
	return ConstructorLogStreamFile
}

func (*LogStreamFile) LogStreamConstructor() string {
	return ConstructorLogStreamFile
}

// The log is written nowhere
type LogStreamEmpty struct {
	meta
}

func (entity *LogStreamEmpty) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LogStreamEmpty

	return json.Marshal((*stub)(entity))
}

func (*LogStreamEmpty) GetType() string {
	return TypeLogStream
}

func (*LogStreamEmpty) GetConstructor() string {
	return ConstructorLogStreamEmpty
}

func (*LogStreamEmpty) LogStreamConstructor() string {
	return ConstructorLogStreamEmpty
}

// Contains a TDLib internal log verbosity level
type LogVerbosityLevel struct {
	meta
	// Log verbosity level
	VerbosityLevel int32 `json:"verbosity_level"`
}

func (entity *LogVerbosityLevel) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LogVerbosityLevel

	return json.Marshal((*stub)(entity))
}

func (*LogVerbosityLevel) GetType() string {
	return TypeLogVerbosityLevel
}

func (*LogVerbosityLevel) GetConstructor() string {
	return ConstructorLogVerbosityLevel
}

// Contains a list of available TDLib internal log tags
type LogTags struct {
	meta
	// List of log tags
	Tags []string `json:"tags"`
}

func (entity *LogTags) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub LogTags

	return json.Marshal((*stub)(entity))
}

func (*LogTags) GetType() string {
	return TypeLogTags
}

func (*LogTags) GetConstructor() string {
	return ConstructorLogTags
}

// Contains custom information about the user
type UserSupportInfo struct {
	meta
	// Information message
	Message *FormattedText `json:"message"`
	// Information author
	Author string `json:"author"`
	// Information change date
	Date int32 `json:"date"`
}

func (entity *UserSupportInfo) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub UserSupportInfo

	return json.Marshal((*stub)(entity))
}

func (*UserSupportInfo) GetType() string {
	return TypeUserSupportInfo
}

func (*UserSupportInfo) GetConstructor() string {
	return ConstructorUserSupportInfo
}

// A simple object containing a number; for testing only
type TestInt struct {
	meta
	// Number
	Value int32 `json:"value"`
}

func (entity *TestInt) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TestInt

	return json.Marshal((*stub)(entity))
}

func (*TestInt) GetType() string {
	return TypeTestInt
}

func (*TestInt) GetConstructor() string {
	return ConstructorTestInt
}

// A simple object containing a string; for testing only
type TestString struct {
	meta
	// String
	Value string `json:"value"`
}

func (entity *TestString) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TestString

	return json.Marshal((*stub)(entity))
}

func (*TestString) GetType() string {
	return TypeTestString
}

func (*TestString) GetConstructor() string {
	return ConstructorTestString
}

// A simple object containing a sequence of bytes; for testing only
type TestBytes struct {
	meta
	// Bytes
	Value []byte `json:"value"`
}

func (entity *TestBytes) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TestBytes

	return json.Marshal((*stub)(entity))
}

func (*TestBytes) GetType() string {
	return TypeTestBytes
}

func (*TestBytes) GetConstructor() string {
	return ConstructorTestBytes
}

// A simple object containing a vector of numbers; for testing only
type TestVectorInt struct {
	meta
	// Vector of numbers
	Value []int32 `json:"value"`
}

func (entity *TestVectorInt) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TestVectorInt

	return json.Marshal((*stub)(entity))
}

func (*TestVectorInt) GetType() string {
	return TypeTestVectorInt
}

func (*TestVectorInt) GetConstructor() string {
	return ConstructorTestVectorInt
}

// A simple object containing a vector of objects that hold a number; for testing only
type TestVectorIntObject struct {
	meta
	// Vector of objects
	Value []*TestInt `json:"value"`
}

func (entity *TestVectorIntObject) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TestVectorIntObject

	return json.Marshal((*stub)(entity))
}

func (*TestVectorIntObject) GetType() string {
	return TypeTestVectorIntObject
}

func (*TestVectorIntObject) GetConstructor() string {
	return ConstructorTestVectorIntObject
}

// A simple object containing a vector of strings; for testing only
type TestVectorString struct {
	meta
	// Vector of strings
	Value []string `json:"value"`
}

func (entity *TestVectorString) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TestVectorString

	return json.Marshal((*stub)(entity))
}

func (*TestVectorString) GetType() string {
	return TypeTestVectorString
}

func (*TestVectorString) GetConstructor() string {
	return ConstructorTestVectorString
}

// A simple object containing a vector of objects that hold a string; for testing only
type TestVectorStringObject struct {
	meta
	// Vector of objects
	Value []*TestString `json:"value"`
}

func (entity *TestVectorStringObject) MarshalJSON() ([]byte, error) {
	entity.meta.Type = entity.GetConstructor()

	type stub TestVectorStringObject

	return json.Marshal((*stub)(entity))
}

func (*TestVectorStringObject) GetType() string {
	return TypeTestVectorStringObject
}

func (*TestVectorStringObject) GetConstructor() string {
	return ConstructorTestVectorStringObject
}
